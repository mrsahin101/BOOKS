
022_FreeRTOS_Timers_Callback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006578  08006578  00016578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066a8  080066a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066b0  080066b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080066b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ad4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b48  20004b48  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000193e1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003342  00000000  00000000  00039485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0003c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001318  00000000  00000000  0003dc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003b14  00000000  00000000  0003ef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000164b1  00000000  00000000  00042a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d54ba  00000000  00000000  00058ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e39f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a90  00000000  00000000  0012e3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006560 	.word	0x08006560

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006560 	.word	0x08006560

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <prvTimerCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void prvTimerCallback(TimerHandle_t xTimer)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
	TickType_t xTimeNow;
	uint32_t ulExecutionCount;
	char buffer[50];

	ulExecutionCount = (uint32_t) pvTimerGetTimerID(xTimer);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f004 fe65 	bl	800525c <pvTimerGetTimerID>
 8000592:	4603      	mov	r3, r0
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
	ulExecutionCount++;
 8000596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000598:	3301      	adds	r3, #1
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
	vTimerSetTimerID(xTimer,(void *)ulExecutionCount);
 800059c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800059e:	4619      	mov	r1, r3
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f004 fe7b 	bl	800529c <vTimerSetTimerID>

	xTimeNow = xTaskGetTickCount();
 80005a6:	f003 fe8f 	bl	80042c8 <xTaskGetTickCount>
 80005aa:	6438      	str	r0, [r7, #64]	; 0x40

	if(xTimer == xOneShotTimer)
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <prvTimerCallback+0xa8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d115      	bne.n	80005e2 <prvTimerCallback+0x5e>
	{
		sprintf(buffer, "One-shot timer callback executing, %ld\r\n", xTimeNow);
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80005bc:	491c      	ldr	r1, [pc, #112]	; (8000630 <prvTimerCallback+0xac>)
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 fc14 	bl	8005dec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe01 	bl	80001d0 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	f107 010c 	add.w	r1, r7, #12
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	4816      	ldr	r0, [pc, #88]	; (8000634 <prvTimerCallback+0xb0>)
 80005dc:	f001 fe39 	bl	8002252 <HAL_UART_Transmit>
		sprintf(buffer, "Auto-reload timer callback executing, %ld\r\n", xTimeNow);
		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
		if(ulExecutionCount == 5)
			xTimerStop(xTimer,0);
	}
}
 80005e0:	e01f      	b.n	8000622 <prvTimerCallback+0x9e>
		sprintf(buffer, "Auto-reload timer callback executing, %ld\r\n", xTimeNow);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80005e8:	4913      	ldr	r1, [pc, #76]	; (8000638 <prvTimerCallback+0xb4>)
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 fbfe 	bl	8005dec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fdeb 	bl	80001d0 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	f107 010c 	add.w	r1, r7, #12
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <prvTimerCallback+0xb0>)
 8000608:	f001 fe23 	bl	8002252 <HAL_UART_Transmit>
		if(ulExecutionCount == 5)
 800060c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800060e:	2b05      	cmp	r3, #5
 8000610:	d107      	bne.n	8000622 <prvTimerCallback+0x9e>
			xTimerStop(xTimer,0);
 8000612:	2300      	movs	r3, #0
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2300      	movs	r3, #0
 8000618:	2200      	movs	r2, #0
 800061a:	2103      	movs	r1, #3
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f004 fb17 	bl	8004c50 <xTimerGenericCommand>
}
 8000622:	bf00      	nop
 8000624:	3748      	adds	r7, #72	; 0x48
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000d4 	.word	0x200000d4
 8000630:	08006578 	.word	0x08006578
 8000634:	20000090 	.word	0x20000090
 8000638:	080065a4 	.word	0x080065a4

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b083      	sub	sp, #12
 8000640:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fad5 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f841 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f8d3 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064e:	f000 f8a7 	bl	80007a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xOneShotTimer = xTimerCreate("OneShot",mainONE_SHOT_TIMER_PERIOD, pdFALSE, 0, prvTimerCallback);
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <main+0x7c>)
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2300      	movs	r3, #0
 8000658:	2200      	movs	r2, #0
 800065a:	f640 5105 	movw	r1, #3333	; 0xd05
 800065e:	4817      	ldr	r0, [pc, #92]	; (80006bc <main+0x80>)
 8000660:	f004 fa9a 	bl	8004b98 <xTimerCreate>
 8000664:	4603      	mov	r3, r0
 8000666:	4a16      	ldr	r2, [pc, #88]	; (80006c0 <main+0x84>)
 8000668:	6013      	str	r3, [r2, #0]
  xAutoReloadTimer = xTimerCreate("AutoReload", mainAUTO_RELOAD_TIMER_PERIOD, pdTRUE, 0, prvTimerCallback);
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <main+0x7c>)
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000676:	4813      	ldr	r0, [pc, #76]	; (80006c4 <main+0x88>)
 8000678:	f004 fa8e 	bl	8004b98 <xTimerCreate>
 800067c:	4603      	mov	r3, r0
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <main+0x8c>)
 8000680:	6013      	str	r3, [r2, #0]

  xTimerStart(xOneShotTimer, 0);
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <main+0x84>)
 8000684:	681c      	ldr	r4, [r3, #0]
 8000686:	f003 fe1f 	bl	80042c8 <xTaskGetTickCount>
 800068a:	4602      	mov	r2, r0
 800068c:	2300      	movs	r3, #0
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2300      	movs	r3, #0
 8000692:	2101      	movs	r1, #1
 8000694:	4620      	mov	r0, r4
 8000696:	f004 fadb 	bl	8004c50 <xTimerGenericCommand>
  xTimerStart(xAutoReloadTimer, 0);
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <main+0x8c>)
 800069c:	681c      	ldr	r4, [r3, #0]
 800069e:	f003 fe13 	bl	80042c8 <xTaskGetTickCount>
 80006a2:	4602      	mov	r2, r0
 80006a4:	2300      	movs	r3, #0
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2300      	movs	r3, #0
 80006aa:	2101      	movs	r1, #1
 80006ac:	4620      	mov	r0, r4
 80006ae:	f004 facf 	bl	8004c50 <xTimerGenericCommand>
  vTaskStartScheduler();
 80006b2:	f003 fced 	bl	8004090 <vTaskStartScheduler>

  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <main+0x7a>
 80006b8:	08000585 	.word	0x08000585
 80006bc:	080065d0 	.word	0x080065d0
 80006c0:	200000d4 	.word	0x200000d4
 80006c4:	080065d8 	.word	0x080065d8
 80006c8:	200000d8 	.word	0x200000d8

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f005 fa70 	bl	8005bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a27      	ldr	r2, [pc, #156]	; (8000798 <SystemClock_Config+0xcc>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemClock_Config+0xd0>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000740:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000746:	2302      	movs	r3, #2
 8000748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800074a:	2307      	movs	r3, #7
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fdb8 	bl	80012c8 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800075e:	f000 f8ad 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2105      	movs	r1, #5
 8000780:	4618      	mov	r0, r3
 8000782:	f001 f819 	bl	80017b8 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800078c:	f000 f896 	bl	80008bc <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_USART2_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d8:	f001 fcee 	bl	80021b8 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f86b 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000090 	.word	0x20000090
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_GPIO_Init+0x9c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <MX_GPIO_Init+0x9c>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_GPIO_Init+0x9c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_GPIO_Init+0x9c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_GPIO_Init+0x9c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_GPIO_Init+0x9c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_GPIO_Init+0x9c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a11      	ldr	r2, [pc, #68]	; (8000890 <MX_GPIO_Init+0x9c>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_GPIO_Init+0x9c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <MX_GPIO_Init+0xa0>)
 8000866:	f000 fd15 	bl	8001294 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800086a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800086e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_GPIO_Init+0xa0>)
 8000884:	f000 fb6a 	bl	8000f5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40020c00 	.word	0x40020c00

08000898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d101      	bne.n	80008ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008aa:	f000 f9c3 	bl	8000c34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40002000 	.word	0x40002000

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_MspInit+0x54>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a11      	ldr	r2, [pc, #68]	; (800091c <HAL_MspInit+0x54>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x54>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_MspInit+0x54>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <HAL_MspInit+0x54>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_MspInit+0x54>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	210f      	movs	r1, #15
 800090a:	f06f 0001 	mvn.w	r0, #1
 800090e:	f000 fa69 	bl	8000de4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1d      	ldr	r2, [pc, #116]	; (80009b4 <HAL_UART_MspInit+0x94>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d133      	bne.n	80009aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <HAL_UART_MspInit+0x98>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <HAL_UART_MspInit+0x98>)
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_UART_MspInit+0x98>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_UART_MspInit+0x98>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <HAL_UART_MspInit+0x98>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_UART_MspInit+0x98>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800097a:	230c      	movs	r3, #12
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098a:	2307      	movs	r3, #7
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4809      	ldr	r0, [pc, #36]	; (80009bc <HAL_UART_MspInit+0x9c>)
 8000996:	f000 fae1 	bl	8000f5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2105      	movs	r1, #5
 800099e:	2026      	movs	r0, #38	; 0x26
 80009a0:	f000 fa20 	bl	8000de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009a4:	2026      	movs	r0, #38	; 0x26
 80009a6:	f000 fa39 	bl	8000e1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40004400 	.word	0x40004400
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000

080009c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08e      	sub	sp, #56	; 0x38
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <HAL_InitTick+0xe4>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a32      	ldr	r2, [pc, #200]	; (8000aa4 <HAL_InitTick+0xe4>)
 80009da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <HAL_InitTick+0xe4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ec:	f107 0210 	add.w	r2, r7, #16
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 f8fe 	bl	8001bf8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009fc:	6a3b      	ldr	r3, [r7, #32]
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d103      	bne.n	8000a0e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a06:	f001 f8cf 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000a0a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a0c:	e004      	b.n	8000a18 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a0e:	f001 f8cb 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000a12:	4603      	mov	r3, r0
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1a:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <HAL_InitTick+0xe8>)
 8000a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a20:	0c9b      	lsrs	r3, r3, #18
 8000a22:	3b01      	subs	r3, #1
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <HAL_InitTick+0xec>)
 8000a28:	4a21      	ldr	r2, [pc, #132]	; (8000ab0 <HAL_InitTick+0xf0>)
 8000a2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <HAL_InitTick+0xec>)
 8000a2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a32:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a34:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <HAL_InitTick+0xec>)
 8000a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a38:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <HAL_InitTick+0xec>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <HAL_InitTick+0xec>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_InitTick+0xec>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a4c:	4817      	ldr	r0, [pc, #92]	; (8000aac <HAL_InitTick+0xec>)
 8000a4e:	f001 f905 	bl	8001c5c <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d11b      	bne.n	8000a98 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000a60:	4812      	ldr	r0, [pc, #72]	; (8000aac <HAL_InitTick+0xec>)
 8000a62:	f001 f955 	bl	8001d10 <HAL_TIM_Base_Start_IT>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d111      	bne.n	8000a98 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a74:	202d      	movs	r0, #45	; 0x2d
 8000a76:	f000 f9d1 	bl	8000e1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d808      	bhi.n	8000a92 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	202d      	movs	r0, #45	; 0x2d
 8000a86:	f000 f9ad 	bl	8000de4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_InitTick+0xf4>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	e002      	b.n	8000a98 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3738      	adds	r7, #56	; 0x38
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	431bde83 	.word	0x431bde83
 8000aac:	200000dc 	.word	0x200000dc
 8000ab0:	40002000 	.word	0x40002000
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <USART2_IRQHandler+0x10>)
 8000aea:	f001 fc45 	bl	8002378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000090 	.word	0x20000090

08000af8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000afe:	f001 f977 	bl	8001df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200000dc 	.word	0x200000dc

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f005 f806 	bl	8005b4c <__errno>
 8000b40:	4603      	mov	r3, r0
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20020000 	.word	0x20020000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	20000124 	.word	0x20000124
 8000b74:	20004b48 	.word	0x20004b48

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ba2:	490e      	ldr	r1, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba4:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb8:	4c0b      	ldr	r4, [pc, #44]	; (8000be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc6:	f7ff ffd7 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bca:	f004 ffc5 	bl	8005b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bce:	f7ff fd35 	bl	800063c <main>
  bx  lr    
 8000bd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000be0:	080066b8 	.word	0x080066b8
  ldr r2, =_sbss
 8000be4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000be8:	20004b48 	.word	0x20004b48

08000bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <HAL_Init+0x40>)
 8000bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_Init+0x40>)
 8000c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_Init+0x40>)
 8000c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f8d8 	bl	8000dce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	200f      	movs	r0, #15
 8000c20:	f7ff fece 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fe50 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023c00 	.word	0x40023c00

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000128 	.word	0x20000128

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000128 	.word	0x20000128

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4907      	ldr	r1, [pc, #28]	; (8000d10 <__NVIC_EnableIRQ+0x38>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	; (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff4c 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df6:	f7ff ff61 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000dfa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	6978      	ldr	r0, [r7, #20]
 8000e02:	f7ff ffb1 	bl	8000d68 <NVIC_EncodePriority>
 8000e06:	4602      	mov	r2, r0
 8000e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff80 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff54 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e46:	f7ff ff09 	bl	8000c5c <HAL_GetTick>
 8000e4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d008      	beq.n	8000e6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e052      	b.n	8000f10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0216 	bic.w	r2, r2, #22
 8000e78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	695a      	ldr	r2, [r3, #20]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d103      	bne.n	8000e9a <HAL_DMA_Abort+0x62>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d007      	beq.n	8000eaa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0208 	bic.w	r2, r2, #8
 8000ea8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0201 	bic.w	r2, r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eba:	e013      	b.n	8000ee4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ebc:	f7ff fece 	bl	8000c5c <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	d90c      	bls.n	8000ee4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2220      	movs	r2, #32
 8000ece:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e015      	b.n	8000f10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1e4      	bne.n	8000ebc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef6:	223f      	movs	r2, #63	; 0x3f
 8000ef8:	409a      	lsls	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d004      	beq.n	8000f36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00c      	b.n	8000f50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2205      	movs	r2, #5
 8000f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0201 	bic.w	r2, r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	e16b      	b.n	8001250 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	f040 815a 	bne.w	800124a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d005      	beq.n	8000fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d130      	bne.n	8001010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	f003 0201 	and.w	r2, r3, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b03      	cmp	r3, #3
 800101a:	d017      	beq.n	800104c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d123      	bne.n	80010a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3208      	adds	r2, #8
 8001060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	691a      	ldr	r2, [r3, #16]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	69b9      	ldr	r1, [r7, #24]
 800109c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0203 	and.w	r2, r3, #3
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80b4 	beq.w	800124a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b60      	ldr	r3, [pc, #384]	; (8001268 <HAL_GPIO_Init+0x30c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a5f      	ldr	r2, [pc, #380]	; (8001268 <HAL_GPIO_Init+0x30c>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b5d      	ldr	r3, [pc, #372]	; (8001268 <HAL_GPIO_Init+0x30c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fe:	4a5b      	ldr	r2, [pc, #364]	; (800126c <HAL_GPIO_Init+0x310>)
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	3302      	adds	r3, #2
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a52      	ldr	r2, [pc, #328]	; (8001270 <HAL_GPIO_Init+0x314>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d02b      	beq.n	8001182 <HAL_GPIO_Init+0x226>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a51      	ldr	r2, [pc, #324]	; (8001274 <HAL_GPIO_Init+0x318>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d025      	beq.n	800117e <HAL_GPIO_Init+0x222>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a50      	ldr	r2, [pc, #320]	; (8001278 <HAL_GPIO_Init+0x31c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01f      	beq.n	800117a <HAL_GPIO_Init+0x21e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4f      	ldr	r2, [pc, #316]	; (800127c <HAL_GPIO_Init+0x320>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d019      	beq.n	8001176 <HAL_GPIO_Init+0x21a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4e      	ldr	r2, [pc, #312]	; (8001280 <HAL_GPIO_Init+0x324>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0x216>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4d      	ldr	r2, [pc, #308]	; (8001284 <HAL_GPIO_Init+0x328>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <HAL_GPIO_Init+0x212>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4c      	ldr	r2, [pc, #304]	; (8001288 <HAL_GPIO_Init+0x32c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x20e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4b      	ldr	r2, [pc, #300]	; (800128c <HAL_GPIO_Init+0x330>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_GPIO_Init+0x20a>
 8001162:	2307      	movs	r3, #7
 8001164:	e00e      	b.n	8001184 <HAL_GPIO_Init+0x228>
 8001166:	2308      	movs	r3, #8
 8001168:	e00c      	b.n	8001184 <HAL_GPIO_Init+0x228>
 800116a:	2306      	movs	r3, #6
 800116c:	e00a      	b.n	8001184 <HAL_GPIO_Init+0x228>
 800116e:	2305      	movs	r3, #5
 8001170:	e008      	b.n	8001184 <HAL_GPIO_Init+0x228>
 8001172:	2304      	movs	r3, #4
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x228>
 8001176:	2303      	movs	r3, #3
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x228>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x228>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x228>
 8001182:	2300      	movs	r3, #0
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001194:	4935      	ldr	r1, [pc, #212]	; (800126c <HAL_GPIO_Init+0x310>)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <HAL_GPIO_Init+0x334>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a32      	ldr	r2, [pc, #200]	; (8001290 <HAL_GPIO_Init+0x334>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <HAL_GPIO_Init+0x334>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a27      	ldr	r2, [pc, #156]	; (8001290 <HAL_GPIO_Init+0x334>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <HAL_GPIO_Init+0x334>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121a:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <HAL_GPIO_Init+0x334>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_GPIO_Init+0x334>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001244:	4a12      	ldr	r2, [pc, #72]	; (8001290 <HAL_GPIO_Init+0x334>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	f67f ae90 	bls.w	8000f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40013800 	.word	0x40013800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40020800 	.word	0x40020800
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021000 	.word	0x40021000
 8001284:	40021400 	.word	0x40021400
 8001288:	40021800 	.word	0x40021800
 800128c:	40021c00 	.word	0x40021c00
 8001290:	40013c00 	.word	0x40013c00

08001294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
 80012a0:	4613      	mov	r3, r2
 80012a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a4:	787b      	ldrb	r3, [r7, #1]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b0:	e003      	b.n	80012ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	041a      	lsls	r2, r3, #16
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	619a      	str	r2, [r3, #24]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e267      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d075      	beq.n	80013d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d00c      	beq.n	800130c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b85      	ldr	r3, [pc, #532]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d112      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fe:	4b82      	ldr	r3, [pc, #520]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800130a:	d10b      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	4b7e      	ldr	r3, [pc, #504]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d05b      	beq.n	80013d0 <HAL_RCC_OscConfig+0x108>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d157      	bne.n	80013d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e242      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132c:	d106      	bne.n	800133c <HAL_RCC_OscConfig+0x74>
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e01d      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x98>
 8001346:	4b70      	ldr	r3, [pc, #448]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6f      	ldr	r2, [pc, #444]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6c      	ldr	r2, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 8001360:	4b69      	ldr	r3, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a68      	ldr	r2, [pc, #416]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b66      	ldr	r3, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a65      	ldr	r2, [pc, #404]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fc6c 	bl	8000c5c <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fc68 	bl	8000c5c <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e207      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0xc0>
 80013a6:	e014      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc58 	bl	8000c5c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fc54 	bl	8000c5c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1f3      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0xe8>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d063      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013de:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d11c      	bne.n	8001430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f6:	4b44      	ldr	r3, [pc, #272]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d116      	bne.n	8001430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_RCC_OscConfig+0x152>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e1c7      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4937      	ldr	r1, [pc, #220]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	e03a      	b.n	80014a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d020      	beq.n	800147a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_RCC_OscConfig+0x244>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143e:	f7ff fc0d 	bl	8000c5c <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fc09 	bl	8000c5c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1a8      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4925      	ldr	r1, [pc, #148]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
 8001478:	e015      	b.n	80014a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x244>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fbec 	bl	8000c5c <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fbe8 	bl	8000c5c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e187      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d036      	beq.n	8001520 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d016      	beq.n	80014e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_RCC_OscConfig+0x248>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff fbcc 	bl	8000c5c <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff fbc8 	bl	8000c5c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e167      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80014dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x200>
 80014e6:	e01b      	b.n	8001520 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_OscConfig+0x248>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fbb5 	bl	8000c5c <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	e00e      	b.n	8001514 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff fbb1 	bl	8000c5c <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d907      	bls.n	8001514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e150      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
 8001508:	40023800 	.word	0x40023800
 800150c:	42470000 	.word	0x42470000
 8001510:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b88      	ldr	r3, [pc, #544]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1ea      	bne.n	80014f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8097 	beq.w	800165c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b81      	ldr	r3, [pc, #516]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b7d      	ldr	r3, [pc, #500]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a7c      	ldr	r2, [pc, #496]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b77      	ldr	r3, [pc, #476]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156a:	4b74      	ldr	r3, [pc, #464]	; (800173c <HAL_RCC_OscConfig+0x474>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a73      	ldr	r2, [pc, #460]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff fb71 	bl	8000c5c <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff fb6d 	bl	8000c5c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e10c      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b6a      	ldr	r3, [pc, #424]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2ea>
 80015a4:	4b64      	ldr	r3, [pc, #400]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a63      	ldr	r2, [pc, #396]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	e01c      	b.n	80015ec <HAL_RCC_OscConfig+0x324>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x30c>
 80015ba:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a5e      	ldr	r2, [pc, #376]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
 80015c6:	4b5c      	ldr	r3, [pc, #368]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a5b      	ldr	r2, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0x324>
 80015d4:	4b58      	ldr	r3, [pc, #352]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a57      	ldr	r2, [pc, #348]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	4b55      	ldr	r3, [pc, #340]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a54      	ldr	r2, [pc, #336]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015e6:	f023 0304 	bic.w	r3, r3, #4
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d015      	beq.n	8001620 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff fb32 	bl	8000c5c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fc:	f7ff fb2e 	bl	8000c5c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e0cb      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001612:	4b49      	ldr	r3, [pc, #292]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0ee      	beq.n	80015fc <HAL_RCC_OscConfig+0x334>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001620:	f7ff fb1c 	bl	8000c5c <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff fb18 	bl	8000c5c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e0b5      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163e:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ee      	bne.n	8001628 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001650:	4b39      	ldr	r3, [pc, #228]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a38      	ldr	r2, [pc, #224]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80a1 	beq.w	80017a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b08      	cmp	r3, #8
 8001670:	d05c      	beq.n	800172c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d141      	bne.n	80016fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff faec 	bl	8000c5c <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fae8 	bl	8000c5c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e087      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	3b01      	subs	r3, #1
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	491b      	ldr	r1, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fac1 	bl	8000c5c <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fabd 	bl	8000c5c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e05c      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x416>
 80016fc:	e054      	b.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff faaa 	bl	8000c5c <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff faa6 	bl	8000c5c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e045      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x444>
 800172a:	e03d      	b.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e038      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000
 8001740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x4ec>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d028      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d121      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d11a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001774:	4013      	ands	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800177a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800177c:	4293      	cmp	r3, r2
 800177e:	d111      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	085b      	lsrs	r3, r3, #1
 800178c:	3b01      	subs	r3, #1
 800178e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d107      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0cc      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d90c      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b65      	ldr	r3, [pc, #404]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0b8      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a58      	ldr	r2, [pc, #352]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001824:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a52      	ldr	r2, [pc, #328]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001830:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	494d      	ldr	r1, [pc, #308]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d044      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d119      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e07f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d003      	beq.n	8001876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001872:	2b03      	cmp	r3, #3
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e06f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e067      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001896:	4b37      	ldr	r3, [pc, #220]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f023 0203 	bic.w	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4934      	ldr	r1, [pc, #208]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a8:	f7ff f9d8 	bl	8000c5c <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b0:	f7ff f9d4 	bl	8000c5c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e04f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 020c 	and.w	r2, r3, #12
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d1eb      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d20c      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e032      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4916      	ldr	r1, [pc, #88]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193e:	f000 f821 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001942:	4602      	mov	r2, r0
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	490a      	ldr	r1, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	5ccb      	ldrb	r3, [r1, r3]
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f82e 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023c00 	.word	0x40023c00
 8001974:	40023800 	.word	0x40023800
 8001978:	080065fc 	.word	0x080065fc
 800197c:	20000000 	.word	0x20000000
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001988:	b094      	sub	sp, #80	; 0x50
 800198a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
 8001990:	2300      	movs	r3, #0
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001994:	2300      	movs	r3, #0
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199c:	4b79      	ldr	r3, [pc, #484]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d00d      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x40>
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	f200 80e1 	bhi.w	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x34>
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d003      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x3a>
 80019b6:	e0db      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019bc:	e0db      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019be:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x208>)
 80019c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019c2:	e0d8      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c4:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ce:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	2200      	movs	r2, #0
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
 80019ee:	2300      	movs	r3, #0
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
 80019f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019f6:	4622      	mov	r2, r4
 80019f8:	462b      	mov	r3, r5
 80019fa:	f04f 0000 	mov.w	r0, #0
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	0159      	lsls	r1, r3, #5
 8001a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a08:	0150      	lsls	r0, r2, #5
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4621      	mov	r1, r4
 8001a10:	1a51      	subs	r1, r2, r1
 8001a12:	6139      	str	r1, [r7, #16]
 8001a14:	4629      	mov	r1, r5
 8001a16:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a28:	4659      	mov	r1, fp
 8001a2a:	018b      	lsls	r3, r1, #6
 8001a2c:	4651      	mov	r1, sl
 8001a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a32:	4651      	mov	r1, sl
 8001a34:	018a      	lsls	r2, r1, #6
 8001a36:	4651      	mov	r1, sl
 8001a38:	ebb2 0801 	subs.w	r8, r2, r1
 8001a3c:	4659      	mov	r1, fp
 8001a3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a56:	4690      	mov	r8, r2
 8001a58:	4699      	mov	r9, r3
 8001a5a:	4623      	mov	r3, r4
 8001a5c:	eb18 0303 	adds.w	r3, r8, r3
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	462b      	mov	r3, r5
 8001a64:	eb49 0303 	adc.w	r3, r9, r3
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a76:	4629      	mov	r1, r5
 8001a78:	024b      	lsls	r3, r1, #9
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a80:	4621      	mov	r1, r4
 8001a82:	024a      	lsls	r2, r1, #9
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a94:	f7fe fbf4 	bl	8000280 <__aeabi_uldivmod>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa0:	e058      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	099b      	lsrs	r3, r3, #6
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	4611      	mov	r1, r2
 8001aae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001abc:	4642      	mov	r2, r8
 8001abe:	464b      	mov	r3, r9
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	0159      	lsls	r1, r3, #5
 8001aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ace:	0150      	lsls	r0, r2, #5
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4641      	mov	r1, r8
 8001ad6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ada:	4649      	mov	r1, r9
 8001adc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001af4:	ebb2 040a 	subs.w	r4, r2, sl
 8001af8:	eb63 050b 	sbc.w	r5, r3, fp
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	00eb      	lsls	r3, r5, #3
 8001b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b0a:	00e2      	lsls	r2, r4, #3
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	4643      	mov	r3, r8
 8001b12:	18e3      	adds	r3, r4, r3
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	464b      	mov	r3, r9
 8001b18:	eb45 0303 	adc.w	r3, r5, r3
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	028b      	lsls	r3, r1, #10
 8001b2e:	4621      	mov	r1, r4
 8001b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b34:	4621      	mov	r1, r4
 8001b36:	028a      	lsls	r2, r1, #10
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	61fa      	str	r2, [r7, #28]
 8001b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b48:	f7fe fb9a 	bl	8000280 <__aeabi_uldivmod>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4613      	mov	r3, r2
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6e:	e002      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3750      	adds	r7, #80	; 0x50
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	007a1200 	.word	0x007a1200

08001b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bac:	f7ff fff0 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0a9b      	lsrs	r3, r3, #10
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4903      	ldr	r1, [pc, #12]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	0800660c 	.word	0x0800660c

08001bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bd4:	f7ff ffdc 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	0b5b      	lsrs	r3, r3, #13
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4903      	ldr	r1, [pc, #12]	; (8001bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	0800660c 	.word	0x0800660c

08001bf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	220f      	movs	r2, #15
 8001c06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0203 	and.w	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	08db      	lsrs	r3, r3, #3
 8001c32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_RCC_GetClockConfig+0x60>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0207 	and.w	r2, r3, #7
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40023c00 	.word	0x40023c00

08001c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e041      	b.n	8001cf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f839 	bl	8001cfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f000 f9d8 	bl	8002050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d001      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e04e      	b.n	8001dc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d022      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d52:	d01d      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d018      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <HAL_TIM_Base_Start_IT+0xcc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00e      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d009      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d004      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a18      	ldr	r2, [pc, #96]	; (8001dec <HAL_TIM_Base_Start_IT+0xdc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d111      	bne.n	8001db4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d010      	beq.n	8001dc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0201 	orr.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db2:	e007      	b.n	8001dc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40000800 	.word	0x40000800
 8001de0:	40000c00 	.word	0x40000c00
 8001de4:	40010400 	.word	0x40010400
 8001de8:	40014000 	.word	0x40014000
 8001dec:	40001800 	.word	0x40001800

08001df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d122      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d11b      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0202 	mvn.w	r2, #2
 8001e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8ee 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8e0 	bl	8002000 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f8f1 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d122      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d11b      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0204 	mvn.w	r2, #4
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8c4 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8b6 	bl	8002000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8c7 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d122      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d11b      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0208 	mvn.w	r2, #8
 8001ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f89a 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e005      	b.n	8001eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f88c 	bl	8002000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f89d 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d122      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b10      	cmp	r3, #16
 8001f0e:	d11b      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0210 	mvn.w	r2, #16
 8001f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f870 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f862 	bl	8002000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f873 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10e      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0201 	mvn.w	r2, #1
 8001f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fc92 	bl	8000898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	2b80      	cmp	r3, #128	; 0x80
 8001f80:	d10e      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d107      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f902 	bl	80021a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d10e      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	2b40      	cmp	r3, #64	; 0x40
 8001fba:	d107      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f838 	bl	800203c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d107      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0220 	mvn.w	r2, #32
 8001ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f8cc 	bl	8002190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a40      	ldr	r2, [pc, #256]	; (8002164 <TIM_Base_SetConfig+0x114>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d013      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206e:	d00f      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3d      	ldr	r2, [pc, #244]	; (8002168 <TIM_Base_SetConfig+0x118>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00b      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3c      	ldr	r2, [pc, #240]	; (800216c <TIM_Base_SetConfig+0x11c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d007      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3b      	ldr	r2, [pc, #236]	; (8002170 <TIM_Base_SetConfig+0x120>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d003      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a3a      	ldr	r2, [pc, #232]	; (8002174 <TIM_Base_SetConfig+0x124>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d108      	bne.n	80020a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2f      	ldr	r2, [pc, #188]	; (8002164 <TIM_Base_SetConfig+0x114>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d02b      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b0:	d027      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a2c      	ldr	r2, [pc, #176]	; (8002168 <TIM_Base_SetConfig+0x118>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d023      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a2b      	ldr	r2, [pc, #172]	; (800216c <TIM_Base_SetConfig+0x11c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01f      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a2a      	ldr	r2, [pc, #168]	; (8002170 <TIM_Base_SetConfig+0x120>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01b      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a29      	ldr	r2, [pc, #164]	; (8002174 <TIM_Base_SetConfig+0x124>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d017      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a28      	ldr	r2, [pc, #160]	; (8002178 <TIM_Base_SetConfig+0x128>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a27      	ldr	r2, [pc, #156]	; (800217c <TIM_Base_SetConfig+0x12c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00f      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a26      	ldr	r2, [pc, #152]	; (8002180 <TIM_Base_SetConfig+0x130>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00b      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a25      	ldr	r2, [pc, #148]	; (8002184 <TIM_Base_SetConfig+0x134>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d007      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a24      	ldr	r2, [pc, #144]	; (8002188 <TIM_Base_SetConfig+0x138>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d003      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a23      	ldr	r2, [pc, #140]	; (800218c <TIM_Base_SetConfig+0x13c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d108      	bne.n	8002114 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <TIM_Base_SetConfig+0x114>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d003      	beq.n	8002148 <TIM_Base_SetConfig+0xf8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a0c      	ldr	r2, [pc, #48]	; (8002174 <TIM_Base_SetConfig+0x124>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d103      	bne.n	8002150 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	615a      	str	r2, [r3, #20]
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40010000 	.word	0x40010000
 8002168:	40000400 	.word	0x40000400
 800216c:	40000800 	.word	0x40000800
 8002170:	40000c00 	.word	0x40000c00
 8002174:	40010400 	.word	0x40010400
 8002178:	40014000 	.word	0x40014000
 800217c:	40014400 	.word	0x40014400
 8002180:	40014800 	.word	0x40014800
 8002184:	40001800 	.word	0x40001800
 8002188:	40001c00 	.word	0x40001c00
 800218c:	40002000 	.word	0x40002000

08002190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e03f      	b.n	800224a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fb9e 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 fd7b 	bl	8002cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b08a      	sub	sp, #40	; 0x28
 8002256:	af02      	add	r7, sp, #8
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b20      	cmp	r3, #32
 8002270:	d17c      	bne.n	800236c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_UART_Transmit+0x2c>
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e075      	b.n	800236e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_UART_Transmit+0x3e>
 800228c:	2302      	movs	r3, #2
 800228e:	e06e      	b.n	800236e <HAL_UART_Transmit+0x11c>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2221      	movs	r2, #33	; 0x21
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022a6:	f7fe fcd9 	bl	8000c5c <HAL_GetTick>
 80022aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c0:	d108      	bne.n	80022d4 <HAL_UART_Transmit+0x82>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d104      	bne.n	80022d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	e003      	b.n	80022dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022e4:	e02a      	b.n	800233c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 faf9 	bl	80028e8 <UART_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e036      	b.n	800236e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10b      	bne.n	800231e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002314:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	3302      	adds	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	e007      	b.n	800232e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	781a      	ldrb	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	3301      	adds	r3, #1
 800232c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1cf      	bne.n	80022e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2200      	movs	r2, #0
 800234e:	2140      	movs	r1, #64	; 0x40
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 fac9 	bl	80028e8 <UART_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e006      	b.n	800236e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	e000      	b.n	800236e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
  }
}
 800236e:	4618      	mov	r0, r3
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b0ba      	sub	sp, #232	; 0xe8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800239e:	2300      	movs	r3, #0
 80023a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80023b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10f      	bne.n	80023de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_UART_IRQHandler+0x66>
 80023ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fbd3 	bl	8002b82 <UART_Receive_IT>
      return;
 80023dc:	e256      	b.n	800288c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80de 	beq.w	80025a4 <HAL_UART_IRQHandler+0x22c>
 80023e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d106      	bne.n	8002402 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80d1 	beq.w	80025a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_UART_IRQHandler+0xae>
 800240e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00b      	beq.n	800244a <HAL_UART_IRQHandler+0xd2>
 8002432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f043 0202 	orr.w	r2, r3, #2
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800244a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_UART_IRQHandler+0xf6>
 8002456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f043 0204 	orr.w	r2, r3, #4
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800246e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d011      	beq.n	800249e <HAL_UART_IRQHandler+0x126>
 800247a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f043 0208 	orr.w	r2, r3, #8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 81ed 	beq.w	8002882 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_UART_IRQHandler+0x14e>
 80024b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fb5e 	bl	8002b82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d0:	2b40      	cmp	r3, #64	; 0x40
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d103      	bne.n	80024f2 <HAL_UART_IRQHandler+0x17a>
 80024ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d04f      	beq.n	8002592 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa66 	bl	80029c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b40      	cmp	r3, #64	; 0x40
 8002504:	d141      	bne.n	800258a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3314      	adds	r3, #20
 800250c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002514:	e853 3f00 	ldrex	r3, [r3]
 8002518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800251c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3314      	adds	r3, #20
 800252e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002532:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800253e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002542:	e841 2300 	strex	r3, r2, [r1]
 8002546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800254a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1d9      	bne.n	8002506 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	2b00      	cmp	r3, #0
 8002558:	d013      	beq.n	8002582 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	4a7d      	ldr	r2, [pc, #500]	; (8002754 <HAL_UART_IRQHandler+0x3dc>)
 8002560:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fcd6 	bl	8000f18 <HAL_DMA_Abort_IT>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800257c:	4610      	mov	r0, r2
 800257e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002580:	e00e      	b.n	80025a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f99a 	bl	80028bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002588:	e00a      	b.n	80025a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f996 	bl	80028bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002590:	e006      	b.n	80025a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f992 	bl	80028bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800259e:	e170      	b.n	8002882 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a0:	bf00      	nop
    return;
 80025a2:	e16e      	b.n	8002882 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	f040 814a 	bne.w	8002842 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8143 	beq.w	8002842 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 813c 	beq.w	8002842 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b40      	cmp	r3, #64	; 0x40
 80025ec:	f040 80b4 	bne.w	8002758 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8140 	beq.w	8002886 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800260a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800260e:	429a      	cmp	r2, r3
 8002610:	f080 8139 	bcs.w	8002886 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800261a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002626:	f000 8088 	beq.w	800273a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	330c      	adds	r3, #12
 8002630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002638:	e853 3f00 	ldrex	r3, [r3]
 800263c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002640:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	330c      	adds	r3, #12
 8002652:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002656:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800265a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002662:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002666:	e841 2300 	strex	r3, r2, [r1]
 800266a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800266e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1d9      	bne.n	800262a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3314      	adds	r3, #20
 800267c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002680:	e853 3f00 	ldrex	r3, [r3]
 8002684:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	3314      	adds	r3, #20
 8002696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800269a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800269e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026a6:	e841 2300 	strex	r3, r2, [r1]
 80026aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80026ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1e1      	bne.n	8002676 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3314      	adds	r3, #20
 80026b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026bc:	e853 3f00 	ldrex	r3, [r3]
 80026c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80026c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3314      	adds	r3, #20
 80026d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80026d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80026dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026de:	e841 2300 	strex	r3, r2, [r1]
 80026e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80026e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1e3      	bne.n	80026b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	330c      	adds	r3, #12
 80026fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002702:	e853 3f00 	ldrex	r3, [r3]
 8002706:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800270a:	f023 0310 	bic.w	r3, r3, #16
 800270e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	330c      	adds	r3, #12
 8002718:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800271c:	65ba      	str	r2, [r7, #88]	; 0x58
 800271e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002724:	e841 2300 	strex	r3, r2, [r1]
 8002728:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800272a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e3      	bne.n	80026f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe fb7f 	bl	8000e38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002742:	b29b      	uxth	r3, r3
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	b29b      	uxth	r3, r3
 8002748:	4619      	mov	r1, r3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f8c0 	bl	80028d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002750:	e099      	b.n	8002886 <HAL_UART_IRQHandler+0x50e>
 8002752:	bf00      	nop
 8002754:	08002a8b 	.word	0x08002a8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002760:	b29b      	uxth	r3, r3
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 808b 	beq.w	800288a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 8086 	beq.w	800288a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	330c      	adds	r3, #12
 8002784:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002788:	e853 3f00 	ldrex	r3, [r3]
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800278e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002790:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002794:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	330c      	adds	r3, #12
 800279e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027a2:	647a      	str	r2, [r7, #68]	; 0x44
 80027a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027aa:	e841 2300 	strex	r3, r2, [r1]
 80027ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80027b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1e3      	bne.n	800277e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3314      	adds	r3, #20
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	623b      	str	r3, [r7, #32]
   return(result);
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3314      	adds	r3, #20
 80027d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027da:	633a      	str	r2, [r7, #48]	; 0x30
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e2:	e841 2300 	strex	r3, r2, [r1]
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1e3      	bne.n	80027b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	330c      	adds	r3, #12
 8002802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	e853 3f00 	ldrex	r3, [r3]
 800280a:	60fb      	str	r3, [r7, #12]
   return(result);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0310 	bic.w	r3, r3, #16
 8002812:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	330c      	adds	r3, #12
 800281c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002820:	61fa      	str	r2, [r7, #28]
 8002822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002824:	69b9      	ldr	r1, [r7, #24]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	e841 2300 	strex	r3, r2, [r1]
 800282c:	617b      	str	r3, [r7, #20]
   return(result);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1e3      	bne.n	80027fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002838:	4619      	mov	r1, r3
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f848 	bl	80028d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002840:	e023      	b.n	800288a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_UART_IRQHandler+0x4ea>
 800284e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f929 	bl	8002ab2 <UART_Transmit_IT>
    return;
 8002860:	e014      	b.n	800288c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00e      	beq.n	800288c <HAL_UART_IRQHandler+0x514>
 800286e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f969 	bl	8002b52 <UART_EndTransmit_IT>
    return;
 8002880:	e004      	b.n	800288c <HAL_UART_IRQHandler+0x514>
    return;
 8002882:	bf00      	nop
 8002884:	e002      	b.n	800288c <HAL_UART_IRQHandler+0x514>
      return;
 8002886:	bf00      	nop
 8002888:	e000      	b.n	800288c <HAL_UART_IRQHandler+0x514>
      return;
 800288a:	bf00      	nop
  }
}
 800288c:	37e8      	adds	r7, #232	; 0xe8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop

08002894 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b090      	sub	sp, #64	; 0x40
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f8:	e050      	b.n	800299c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d04c      	beq.n	800299c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <UART_WaitOnFlagUntilTimeout+0x30>
 8002908:	f7fe f9a8 	bl	8000c5c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002914:	429a      	cmp	r2, r3
 8002916:	d241      	bcs.n	800299c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	330c      	adds	r3, #12
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002922:	e853 3f00 	ldrex	r3, [r3]
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002938:	637a      	str	r2, [r7, #52]	; 0x34
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800293e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002940:	e841 2300 	strex	r3, r2, [r1]
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e5      	bne.n	8002918 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3314      	adds	r3, #20
 8002952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	e853 3f00 	ldrex	r3, [r3]
 800295a:	613b      	str	r3, [r7, #16]
   return(result);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	63bb      	str	r3, [r7, #56]	; 0x38
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3314      	adds	r3, #20
 800296a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800296c:	623a      	str	r2, [r7, #32]
 800296e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002970:	69f9      	ldr	r1, [r7, #28]
 8002972:	6a3a      	ldr	r2, [r7, #32]
 8002974:	e841 2300 	strex	r3, r2, [r1]
 8002978:	61bb      	str	r3, [r7, #24]
   return(result);
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e5      	bne.n	800294c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e00f      	b.n	80029bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	4013      	ands	r3, r2
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d09f      	beq.n	80028fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3740      	adds	r7, #64	; 0x40
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b095      	sub	sp, #84	; 0x54
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d6:	e853 3f00 	ldrex	r3, [r3]
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	330c      	adds	r3, #12
 80029ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029ec:	643a      	str	r2, [r7, #64]	; 0x40
 80029ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029f4:	e841 2300 	strex	r3, r2, [r1]
 80029f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e5      	bne.n	80029cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3314      	adds	r3, #20
 8002a06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	e853 3f00 	ldrex	r3, [r3]
 8002a0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3314      	adds	r3, #20
 8002a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a28:	e841 2300 	strex	r3, r2, [r1]
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e5      	bne.n	8002a00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d119      	bne.n	8002a70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	e853 3f00 	ldrex	r3, [r3]
 8002a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f023 0310 	bic.w	r3, r3, #16
 8002a52:	647b      	str	r3, [r7, #68]	; 0x44
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a5c:	61ba      	str	r2, [r7, #24]
 8002a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a60:	6979      	ldr	r1, [r7, #20]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	e841 2300 	strex	r3, r2, [r1]
 8002a68:	613b      	str	r3, [r7, #16]
   return(result);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e5      	bne.n	8002a3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a7e:	bf00      	nop
 8002a80:	3754      	adds	r7, #84	; 0x54
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff ff09 	bl	80028bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b21      	cmp	r3, #33	; 0x21
 8002ac4:	d13e      	bne.n	8002b44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ace:	d114      	bne.n	8002afa <UART_Transmit_IT+0x48>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d110      	bne.n	8002afa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	1c9a      	adds	r2, r3, #2
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	621a      	str	r2, [r3, #32]
 8002af8:	e008      	b.n	8002b0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	1c59      	adds	r1, r3, #1
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6211      	str	r1, [r2, #32]
 8002b04:	781a      	ldrb	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10f      	bne.n	8002b40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fe8e 	bl	8002894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b08c      	sub	sp, #48	; 0x30
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b22      	cmp	r3, #34	; 0x22
 8002b94:	f040 80ab 	bne.w	8002cee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba0:	d117      	bne.n	8002bd2 <UART_Receive_IT+0x50>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d113      	bne.n	8002bd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	1c9a      	adds	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd0:	e026      	b.n	8002c20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be4:	d007      	beq.n	8002bf6 <UART_Receive_IT+0x74>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <UART_Receive_IT+0x82>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e008      	b.n	8002c16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d15a      	bne.n	8002cea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0220 	bic.w	r2, r2, #32
 8002c42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d135      	bne.n	8002ce0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	330c      	adds	r3, #12
 8002c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	e853 3f00 	ldrex	r3, [r3]
 8002c88:	613b      	str	r3, [r7, #16]
   return(result);
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f023 0310 	bic.w	r3, r3, #16
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	330c      	adds	r3, #12
 8002c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9a:	623a      	str	r2, [r7, #32]
 8002c9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9e:	69f9      	ldr	r1, [r7, #28]
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	e841 2300 	strex	r3, r2, [r1]
 8002ca6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1e5      	bne.n	8002c7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d10a      	bne.n	8002cd2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff fdf9 	bl	80028d0 <HAL_UARTEx_RxEventCallback>
 8002cde:	e002      	b.n	8002ce6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff fde1 	bl	80028a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e002      	b.n	8002cf0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e000      	b.n	8002cf0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
  }
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3730      	adds	r7, #48	; 0x30
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cfc:	b0c0      	sub	sp, #256	; 0x100
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d14:	68d9      	ldr	r1, [r3, #12]
 8002d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	ea40 0301 	orr.w	r3, r0, r1
 8002d20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d50:	f021 010c 	bic.w	r1, r1, #12
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d72:	6999      	ldr	r1, [r3, #24]
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	ea40 0301 	orr.w	r3, r0, r1
 8002d7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b8f      	ldr	r3, [pc, #572]	; (8002fc4 <UART_SetConfig+0x2cc>)
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d005      	beq.n	8002d98 <UART_SetConfig+0xa0>
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4b8d      	ldr	r3, [pc, #564]	; (8002fc8 <UART_SetConfig+0x2d0>)
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d104      	bne.n	8002da2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d98:	f7fe ff1a 	bl	8001bd0 <HAL_RCC_GetPCLK2Freq>
 8002d9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002da0:	e003      	b.n	8002daa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002da2:	f7fe ff01 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002da6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db4:	f040 810c 	bne.w	8002fd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002dca:	4622      	mov	r2, r4
 8002dcc:	462b      	mov	r3, r5
 8002dce:	1891      	adds	r1, r2, r2
 8002dd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dd2:	415b      	adcs	r3, r3
 8002dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dda:	4621      	mov	r1, r4
 8002ddc:	eb12 0801 	adds.w	r8, r2, r1
 8002de0:	4629      	mov	r1, r5
 8002de2:	eb43 0901 	adc.w	r9, r3, r1
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dfa:	4690      	mov	r8, r2
 8002dfc:	4699      	mov	r9, r3
 8002dfe:	4623      	mov	r3, r4
 8002e00:	eb18 0303 	adds.w	r3, r8, r3
 8002e04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e08:	462b      	mov	r3, r5
 8002e0a:	eb49 0303 	adc.w	r3, r9, r3
 8002e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e26:	460b      	mov	r3, r1
 8002e28:	18db      	adds	r3, r3, r3
 8002e2a:	653b      	str	r3, [r7, #80]	; 0x50
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	eb42 0303 	adc.w	r3, r2, r3
 8002e32:	657b      	str	r3, [r7, #84]	; 0x54
 8002e34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e3c:	f7fd fa20 	bl	8000280 <__aeabi_uldivmod>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <UART_SetConfig+0x2d4>)
 8002e46:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	011c      	lsls	r4, r3, #4
 8002e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e52:	2200      	movs	r2, #0
 8002e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e60:	4642      	mov	r2, r8
 8002e62:	464b      	mov	r3, r9
 8002e64:	1891      	adds	r1, r2, r2
 8002e66:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e68:	415b      	adcs	r3, r3
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e70:	4641      	mov	r1, r8
 8002e72:	eb12 0a01 	adds.w	sl, r2, r1
 8002e76:	4649      	mov	r1, r9
 8002e78:	eb43 0b01 	adc.w	fp, r3, r1
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e90:	4692      	mov	sl, r2
 8002e92:	469b      	mov	fp, r3
 8002e94:	4643      	mov	r3, r8
 8002e96:	eb1a 0303 	adds.w	r3, sl, r3
 8002e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002eb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	18db      	adds	r3, r3, r3
 8002ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	eb42 0303 	adc.w	r3, r2, r3
 8002ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ece:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ed2:	f7fd f9d5 	bl	8000280 <__aeabi_uldivmod>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4611      	mov	r1, r2
 8002edc:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <UART_SetConfig+0x2d4>)
 8002ede:	fba3 2301 	umull	r2, r3, r3, r1
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2264      	movs	r2, #100	; 0x64
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	1acb      	subs	r3, r1, r3
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ef2:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <UART_SetConfig+0x2d4>)
 8002ef4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f00:	441c      	add	r4, r3
 8002f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f14:	4642      	mov	r2, r8
 8002f16:	464b      	mov	r3, r9
 8002f18:	1891      	adds	r1, r2, r2
 8002f1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f1c:	415b      	adcs	r3, r3
 8002f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f24:	4641      	mov	r1, r8
 8002f26:	1851      	adds	r1, r2, r1
 8002f28:	6339      	str	r1, [r7, #48]	; 0x30
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	414b      	adcs	r3, r1
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f3c:	4659      	mov	r1, fp
 8002f3e:	00cb      	lsls	r3, r1, #3
 8002f40:	4651      	mov	r1, sl
 8002f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f46:	4651      	mov	r1, sl
 8002f48:	00ca      	lsls	r2, r1, #3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4642      	mov	r2, r8
 8002f52:	189b      	adds	r3, r3, r2
 8002f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f58:	464b      	mov	r3, r9
 8002f5a:	460a      	mov	r2, r1
 8002f5c:	eb42 0303 	adc.w	r3, r2, r3
 8002f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f78:	460b      	mov	r3, r1
 8002f7a:	18db      	adds	r3, r3, r3
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7e:	4613      	mov	r3, r2
 8002f80:	eb42 0303 	adc.w	r3, r2, r3
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f8e:	f7fd f977 	bl	8000280 <__aeabi_uldivmod>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <UART_SetConfig+0x2d4>)
 8002f98:	fba3 1302 	umull	r1, r3, r3, r2
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	2164      	movs	r1, #100	; 0x64
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	3332      	adds	r3, #50	; 0x32
 8002faa:	4a08      	ldr	r2, [pc, #32]	; (8002fcc <UART_SetConfig+0x2d4>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	f003 0207 	and.w	r2, r3, #7
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4422      	add	r2, r4
 8002fbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fc0:	e105      	b.n	80031ce <UART_SetConfig+0x4d6>
 8002fc2:	bf00      	nop
 8002fc4:	40011000 	.word	0x40011000
 8002fc8:	40011400 	.word	0x40011400
 8002fcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fe2:	4642      	mov	r2, r8
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	1891      	adds	r1, r2, r2
 8002fe8:	6239      	str	r1, [r7, #32]
 8002fea:	415b      	adcs	r3, r3
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
 8002fee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	1854      	adds	r4, r2, r1
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	eb43 0501 	adc.w	r5, r3, r1
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	00eb      	lsls	r3, r5, #3
 8003006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800300a:	00e2      	lsls	r2, r4, #3
 800300c:	4614      	mov	r4, r2
 800300e:	461d      	mov	r5, r3
 8003010:	4643      	mov	r3, r8
 8003012:	18e3      	adds	r3, r4, r3
 8003014:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003018:	464b      	mov	r3, r9
 800301a:	eb45 0303 	adc.w	r3, r5, r3
 800301e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800302e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800303e:	4629      	mov	r1, r5
 8003040:	008b      	lsls	r3, r1, #2
 8003042:	4621      	mov	r1, r4
 8003044:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003048:	4621      	mov	r1, r4
 800304a:	008a      	lsls	r2, r1, #2
 800304c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003050:	f7fd f916 	bl	8000280 <__aeabi_uldivmod>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4b60      	ldr	r3, [pc, #384]	; (80031dc <UART_SetConfig+0x4e4>)
 800305a:	fba3 2302 	umull	r2, r3, r3, r2
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	011c      	lsls	r4, r3, #4
 8003062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003066:	2200      	movs	r2, #0
 8003068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800306c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003070:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003074:	4642      	mov	r2, r8
 8003076:	464b      	mov	r3, r9
 8003078:	1891      	adds	r1, r2, r2
 800307a:	61b9      	str	r1, [r7, #24]
 800307c:	415b      	adcs	r3, r3
 800307e:	61fb      	str	r3, [r7, #28]
 8003080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003084:	4641      	mov	r1, r8
 8003086:	1851      	adds	r1, r2, r1
 8003088:	6139      	str	r1, [r7, #16]
 800308a:	4649      	mov	r1, r9
 800308c:	414b      	adcs	r3, r1
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800309c:	4659      	mov	r1, fp
 800309e:	00cb      	lsls	r3, r1, #3
 80030a0:	4651      	mov	r1, sl
 80030a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030a6:	4651      	mov	r1, sl
 80030a8:	00ca      	lsls	r2, r1, #3
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	4642      	mov	r2, r8
 80030b2:	189b      	adds	r3, r3, r2
 80030b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030b8:	464b      	mov	r3, r9
 80030ba:	460a      	mov	r2, r1
 80030bc:	eb42 0303 	adc.w	r3, r2, r3
 80030c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80030ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030dc:	4649      	mov	r1, r9
 80030de:	008b      	lsls	r3, r1, #2
 80030e0:	4641      	mov	r1, r8
 80030e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030e6:	4641      	mov	r1, r8
 80030e8:	008a      	lsls	r2, r1, #2
 80030ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030ee:	f7fd f8c7 	bl	8000280 <__aeabi_uldivmod>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4b39      	ldr	r3, [pc, #228]	; (80031dc <UART_SetConfig+0x4e4>)
 80030f8:	fba3 1302 	umull	r1, r3, r3, r2
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	2164      	movs	r1, #100	; 0x64
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	3332      	adds	r3, #50	; 0x32
 800310a:	4a34      	ldr	r2, [pc, #208]	; (80031dc <UART_SetConfig+0x4e4>)
 800310c:	fba2 2303 	umull	r2, r3, r2, r3
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003116:	441c      	add	r4, r3
 8003118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800311c:	2200      	movs	r2, #0
 800311e:	673b      	str	r3, [r7, #112]	; 0x70
 8003120:	677a      	str	r2, [r7, #116]	; 0x74
 8003122:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003126:	4642      	mov	r2, r8
 8003128:	464b      	mov	r3, r9
 800312a:	1891      	adds	r1, r2, r2
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	415b      	adcs	r3, r3
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003136:	4641      	mov	r1, r8
 8003138:	1851      	adds	r1, r2, r1
 800313a:	6039      	str	r1, [r7, #0]
 800313c:	4649      	mov	r1, r9
 800313e:	414b      	adcs	r3, r1
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800314e:	4659      	mov	r1, fp
 8003150:	00cb      	lsls	r3, r1, #3
 8003152:	4651      	mov	r1, sl
 8003154:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003158:	4651      	mov	r1, sl
 800315a:	00ca      	lsls	r2, r1, #3
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	4603      	mov	r3, r0
 8003162:	4642      	mov	r2, r8
 8003164:	189b      	adds	r3, r3, r2
 8003166:	66bb      	str	r3, [r7, #104]	; 0x68
 8003168:	464b      	mov	r3, r9
 800316a:	460a      	mov	r2, r1
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	663b      	str	r3, [r7, #96]	; 0x60
 800317c:	667a      	str	r2, [r7, #100]	; 0x64
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800318a:	4649      	mov	r1, r9
 800318c:	008b      	lsls	r3, r1, #2
 800318e:	4641      	mov	r1, r8
 8003190:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003194:	4641      	mov	r1, r8
 8003196:	008a      	lsls	r2, r1, #2
 8003198:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800319c:	f7fd f870 	bl	8000280 <__aeabi_uldivmod>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <UART_SetConfig+0x4e4>)
 80031a6:	fba3 1302 	umull	r1, r3, r3, r2
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	2164      	movs	r1, #100	; 0x64
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	3332      	adds	r3, #50	; 0x32
 80031b8:	4a08      	ldr	r2, [pc, #32]	; (80031dc <UART_SetConfig+0x4e4>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	f003 020f 	and.w	r2, r3, #15
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4422      	add	r2, r4
 80031cc:	609a      	str	r2, [r3, #8]
}
 80031ce:	bf00      	nop
 80031d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031d4:	46bd      	mov	sp, r7
 80031d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031da:	bf00      	nop
 80031dc:	51eb851f 	.word	0x51eb851f

080031e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <SysTick_Handler+0x1c>)
 80031e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80031e8:	f001 fbae 	bl	8004948 <xTaskGetSchedulerState>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80031f2:	f002 fa31 	bl	8005658 <xPortSysTickHandler>
  }
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	e000e010 	.word	0xe000e010

08003200 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4a07      	ldr	r2, [pc, #28]	; (800322c <vApplicationGetIdleTaskMemory+0x2c>)
 8003210:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4a06      	ldr	r2, [pc, #24]	; (8003230 <vApplicationGetIdleTaskMemory+0x30>)
 8003216:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2280      	movs	r2, #128	; 0x80
 800321c:	601a      	str	r2, [r3, #0]
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	2000012c 	.word	0x2000012c
 8003230:	200001e8 	.word	0x200001e8

08003234 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4a07      	ldr	r2, [pc, #28]	; (8003260 <vApplicationGetTimerTaskMemory+0x2c>)
 8003244:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	4a06      	ldr	r2, [pc, #24]	; (8003264 <vApplicationGetTimerTaskMemory+0x30>)
 800324a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003252:	601a      	str	r2, [r3, #0]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	200003e8 	.word	0x200003e8
 8003264:	200004a4 	.word	0x200004a4

08003268 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f103 0208 	add.w	r2, r3, #8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f04f 32ff 	mov.w	r2, #4294967295
 8003280:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f103 0208 	add.w	r2, r3, #8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f103 0208 	add.w	r2, r3, #8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d103      	bne.n	800332a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e00c      	b.n	8003344 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3308      	adds	r3, #8
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	e002      	b.n	8003338 <vListInsert+0x2e>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	429a      	cmp	r2, r3
 8003342:	d2f6      	bcs.n	8003332 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	601a      	str	r2, [r3, #0]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6892      	ldr	r2, [r2, #8]
 8003392:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6852      	ldr	r2, [r2, #4]
 800339c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d103      	bne.n	80033b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	1e5a      	subs	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033fa:	f002 f89b 	bl	8005534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	441a      	add	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	3b01      	subs	r3, #1
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	441a      	add	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	22ff      	movs	r2, #255	; 0xff
 800343e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	22ff      	movs	r2, #255	; 0xff
 8003446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d114      	bne.n	800347a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01a      	beq.n	800348e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3310      	adds	r3, #16
 800345c:	4618      	mov	r0, r3
 800345e:	f001 f8b1 	bl	80045c4 <xTaskRemoveFromEventList>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d012      	beq.n	800348e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <xQueueGenericReset+0xcc>)
 800346a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	e009      	b.n	800348e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3310      	adds	r3, #16
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fef2 	bl	8003268 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3324      	adds	r3, #36	; 0x24
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff feed 	bl	8003268 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800348e:	f002 f881 	bl	8005594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003492:	2301      	movs	r3, #1
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	e000ed04 	.word	0xe000ed04

080034a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08e      	sub	sp, #56	; 0x38
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80034c6:	bf00      	nop
 80034c8:	e7fe      	b.n	80034c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <xQueueGenericCreateStatic+0x52>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <xQueueGenericCreateStatic+0x56>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <xQueueGenericCreateStatic+0x58>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10a      	bne.n	8003512 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	623b      	str	r3, [r7, #32]
}
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d102      	bne.n	800351e <xQueueGenericCreateStatic+0x7e>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <xQueueGenericCreateStatic+0x82>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <xQueueGenericCreateStatic+0x84>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	61fb      	str	r3, [r7, #28]
}
 800353a:	bf00      	nop
 800353c:	e7fe      	b.n	800353c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800353e:	2350      	movs	r3, #80	; 0x50
 8003540:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b50      	cmp	r3, #80	; 0x50
 8003546:	d00a      	beq.n	800355e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	61bb      	str	r3, [r7, #24]
}
 800355a:	bf00      	nop
 800355c:	e7fe      	b.n	800355c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800355e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003572:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f805 	bl	8003590 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003588:	4618      	mov	r0, r3
 800358a:	3730      	adds	r7, #48	; 0x30
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d103      	bne.n	80035ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e002      	b.n	80035b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035be:	2101      	movs	r1, #1
 80035c0:	69b8      	ldr	r0, [r7, #24]
 80035c2:	f7ff ff05 	bl	80033d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08e      	sub	sp, #56	; 0x38
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035e6:	2300      	movs	r3, #0
 80035e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10a      	bne.n	800360a <xQueueGenericSend+0x32>
	__asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003606:	bf00      	nop
 8003608:	e7fe      	b.n	8003608 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <xQueueGenericSend+0x40>
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <xQueueGenericSend+0x44>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <xQueueGenericSend+0x46>
 800361c:	2300      	movs	r3, #0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10a      	bne.n	8003638 <xQueueGenericSend+0x60>
	__asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003634:	bf00      	nop
 8003636:	e7fe      	b.n	8003636 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d103      	bne.n	8003646 <xQueueGenericSend+0x6e>
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <xQueueGenericSend+0x72>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <xQueueGenericSend+0x74>
 800364a:	2300      	movs	r3, #0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <xQueueGenericSend+0x8e>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	623b      	str	r3, [r7, #32]
}
 8003662:	bf00      	nop
 8003664:	e7fe      	b.n	8003664 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003666:	f001 f96f 	bl	8004948 <xTaskGetSchedulerState>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <xQueueGenericSend+0x9e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <xQueueGenericSend+0xa2>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <xQueueGenericSend+0xa4>
 800367a:	2300      	movs	r3, #0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <xQueueGenericSend+0xbe>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	61fb      	str	r3, [r7, #28]
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003696:	f001 ff4d 	bl	8005534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d302      	bcc.n	80036ac <xQueueGenericSend+0xd4>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d129      	bne.n	8003700 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036b2:	f000 fa0b 	bl	8003acc <prvCopyDataToQueue>
 80036b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d010      	beq.n	80036e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	3324      	adds	r3, #36	; 0x24
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 ff7d 	bl	80045c4 <xTaskRemoveFromEventList>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d013      	beq.n	80036f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036d0:	4b3f      	ldr	r3, [pc, #252]	; (80037d0 <xQueueGenericSend+0x1f8>)
 80036d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	e00a      	b.n	80036f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036e8:	4b39      	ldr	r3, [pc, #228]	; (80037d0 <xQueueGenericSend+0x1f8>)
 80036ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036f8:	f001 ff4c 	bl	8005594 <vPortExitCritical>
				return pdPASS;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e063      	b.n	80037c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d103      	bne.n	800370e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003706:	f001 ff45 	bl	8005594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800370a:	2300      	movs	r3, #0
 800370c:	e05c      	b.n	80037c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003714:	f107 0314 	add.w	r3, r7, #20
 8003718:	4618      	mov	r0, r3
 800371a:	f000 ffb7 	bl	800468c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800371e:	2301      	movs	r3, #1
 8003720:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003722:	f001 ff37 	bl	8005594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003726:	f000 fd23 	bl	8004170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800372a:	f001 ff03 	bl	8005534 <vPortEnterCritical>
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003734:	b25b      	sxtb	r3, r3
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d103      	bne.n	8003744 <xQueueGenericSend+0x16c>
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800374a:	b25b      	sxtb	r3, r3
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d103      	bne.n	800375a <xQueueGenericSend+0x182>
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800375a:	f001 ff1b 	bl	8005594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800375e:	1d3a      	adds	r2, r7, #4
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f000 ffa6 	bl	80046b8 <xTaskCheckForTimeOut>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d124      	bne.n	80037bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003774:	f000 faa2 	bl	8003cbc <prvIsQueueFull>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d018      	beq.n	80037b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	3310      	adds	r3, #16
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4611      	mov	r1, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fecc 	bl	8004524 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800378c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800378e:	f000 fa2d 	bl	8003bec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003792:	f000 fcfb 	bl	800418c <xTaskResumeAll>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	f47f af7c 	bne.w	8003696 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800379e:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <xQueueGenericSend+0x1f8>)
 80037a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	e772      	b.n	8003696 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037b2:	f000 fa1b 	bl	8003bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037b6:	f000 fce9 	bl	800418c <xTaskResumeAll>
 80037ba:	e76c      	b.n	8003696 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037be:	f000 fa15 	bl	8003bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037c2:	f000 fce3 	bl	800418c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3738      	adds	r7, #56	; 0x38
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	e000ed04 	.word	0xe000ed04

080037d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b090      	sub	sp, #64	; 0x40
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d103      	bne.n	8003810 <xQueueGenericSendFromISR+0x3c>
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <xQueueGenericSendFromISR+0x40>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <xQueueGenericSendFromISR+0x42>
 8003814:	2300      	movs	r3, #0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d103      	bne.n	800383e <xQueueGenericSendFromISR+0x6a>
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <xQueueGenericSendFromISR+0x6e>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <xQueueGenericSendFromISR+0x70>
 8003842:	2300      	movs	r3, #0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10a      	bne.n	800385e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	623b      	str	r3, [r7, #32]
}
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800385e:	f001 ff4b 	bl	80056f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003862:	f3ef 8211 	mrs	r2, BASEPRI
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	61fa      	str	r2, [r7, #28]
 8003878:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800387a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <xQueueGenericSendFromISR+0xbc>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d12f      	bne.n	80038f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800389a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038a6:	f000 f911 	bl	8003acc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b2:	d112      	bne.n	80038da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d016      	beq.n	80038ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038be:	3324      	adds	r3, #36	; 0x24
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fe7f 	bl	80045c4 <xTaskRemoveFromEventList>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00e      	beq.n	80038ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e007      	b.n	80038ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038de:	3301      	adds	r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	b25a      	sxtb	r2, r3
 80038e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038ea:	2301      	movs	r3, #1
 80038ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80038ee:	e001      	b.n	80038f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003902:	4618      	mov	r0, r3
 8003904:	3740      	adds	r7, #64	; 0x40
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08c      	sub	sp, #48	; 0x30
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003918:	2300      	movs	r3, #0
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <xQueueReceive+0x30>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	623b      	str	r3, [r7, #32]
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d103      	bne.n	800394a <xQueueReceive+0x3e>
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <xQueueReceive+0x42>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <xQueueReceive+0x44>
 800394e:	2300      	movs	r3, #0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <xQueueReceive+0x5e>
	__asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	61fb      	str	r3, [r7, #28]
}
 8003966:	bf00      	nop
 8003968:	e7fe      	b.n	8003968 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800396a:	f000 ffed 	bl	8004948 <xTaskGetSchedulerState>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d102      	bne.n	800397a <xQueueReceive+0x6e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <xQueueReceive+0x72>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <xQueueReceive+0x74>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <xQueueReceive+0x8e>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	61bb      	str	r3, [r7, #24]
}
 8003996:	bf00      	nop
 8003998:	e7fe      	b.n	8003998 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800399a:	f001 fdcb 	bl	8005534 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01f      	beq.n	80039ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ae:	f000 f8f7 	bl	8003ba0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	1e5a      	subs	r2, r3, #1
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00f      	beq.n	80039e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	3310      	adds	r3, #16
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fdfc 	bl	80045c4 <xTaskRemoveFromEventList>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039d2:	4b3d      	ldr	r3, [pc, #244]	; (8003ac8 <xQueueReceive+0x1bc>)
 80039d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039e2:	f001 fdd7 	bl	8005594 <vPortExitCritical>
				return pdPASS;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e069      	b.n	8003abe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d103      	bne.n	80039f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039f0:	f001 fdd0 	bl	8005594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e062      	b.n	8003abe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039fe:	f107 0310 	add.w	r3, r7, #16
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fe42 	bl	800468c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a0c:	f001 fdc2 	bl	8005594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a10:	f000 fbae 	bl	8004170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a14:	f001 fd8e 	bl	8005534 <vPortEnterCritical>
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a1e:	b25b      	sxtb	r3, r3
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d103      	bne.n	8003a2e <xQueueReceive+0x122>
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a34:	b25b      	sxtb	r3, r3
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d103      	bne.n	8003a44 <xQueueReceive+0x138>
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a44:	f001 fda6 	bl	8005594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a48:	1d3a      	adds	r2, r7, #4
 8003a4a:	f107 0310 	add.w	r3, r7, #16
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fe31 	bl	80046b8 <xTaskCheckForTimeOut>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d123      	bne.n	8003aa4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a5e:	f000 f917 	bl	8003c90 <prvIsQueueEmpty>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d017      	beq.n	8003a98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	3324      	adds	r3, #36	; 0x24
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fd57 	bl	8004524 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a78:	f000 f8b8 	bl	8003bec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a7c:	f000 fb86 	bl	800418c <xTaskResumeAll>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d189      	bne.n	800399a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a86:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <xQueueReceive+0x1bc>)
 8003a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	e780      	b.n	800399a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a9a:	f000 f8a7 	bl	8003bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a9e:	f000 fb75 	bl	800418c <xTaskResumeAll>
 8003aa2:	e77a      	b.n	800399a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aa6:	f000 f8a1 	bl	8003bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aaa:	f000 fb6f 	bl	800418c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ab0:	f000 f8ee 	bl	8003c90 <prvIsQueueEmpty>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f43f af6f 	beq.w	800399a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003abc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3730      	adds	r7, #48	; 0x30
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10d      	bne.n	8003b06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d14d      	bne.n	8003b8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 ff44 	bl	8004984 <xTaskPriorityDisinherit>
 8003afc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	e043      	b.n	8003b8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d119      	bne.n	8003b40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6858      	ldr	r0, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	461a      	mov	r2, r3
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	f002 f844 	bl	8005ba4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	441a      	add	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d32b      	bcc.n	8003b8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	e026      	b.n	8003b8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68d8      	ldr	r0, [r3, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	f002 f82a 	bl	8005ba4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	425b      	negs	r3, r3
 8003b5a:	441a      	add	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d207      	bcs.n	8003b7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	425b      	negs	r3, r3
 8003b76:	441a      	add	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d105      	bne.n	8003b8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b96:	697b      	ldr	r3, [r7, #20]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d018      	beq.n	8003be4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	441a      	add	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d303      	bcc.n	8003bd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68d9      	ldr	r1, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6838      	ldr	r0, [r7, #0]
 8003be0:	f001 ffe0 	bl	8005ba4 <memcpy>
	}
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003bf4:	f001 fc9e 	bl	8005534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c00:	e011      	b.n	8003c26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d012      	beq.n	8003c30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3324      	adds	r3, #36	; 0x24
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fcd8 	bl	80045c4 <xTaskRemoveFromEventList>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c1a:	f000 fdaf 	bl	800477c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	dce9      	bgt.n	8003c02 <prvUnlockQueue+0x16>
 8003c2e:	e000      	b.n	8003c32 <prvUnlockQueue+0x46>
					break;
 8003c30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	22ff      	movs	r2, #255	; 0xff
 8003c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c3a:	f001 fcab 	bl	8005594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c3e:	f001 fc79 	bl	8005534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c4a:	e011      	b.n	8003c70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d012      	beq.n	8003c7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3310      	adds	r3, #16
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fcb3 	bl	80045c4 <xTaskRemoveFromEventList>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c64:	f000 fd8a 	bl	800477c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c68:	7bbb      	ldrb	r3, [r7, #14]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	dce9      	bgt.n	8003c4c <prvUnlockQueue+0x60>
 8003c78:	e000      	b.n	8003c7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	22ff      	movs	r2, #255	; 0xff
 8003c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c84:	f001 fc86 	bl	8005594 <vPortExitCritical>
}
 8003c88:	bf00      	nop
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c98:	f001 fc4c 	bl	8005534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d102      	bne.n	8003caa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	e001      	b.n	8003cae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cae:	f001 fc71 	bl	8005594 <vPortExitCritical>

	return xReturn;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cc4:	f001 fc36 	bl	8005534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d102      	bne.n	8003cda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	e001      	b.n	8003cde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cde:	f001 fc59 	bl	8005594 <vPortExitCritical>

	return xReturn;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e014      	b.n	8003d26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cfc:	4a0f      	ldr	r2, [pc, #60]	; (8003d3c <vQueueAddToRegistry+0x50>)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d08:	490c      	ldr	r1, [pc, #48]	; (8003d3c <vQueueAddToRegistry+0x50>)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <vQueueAddToRegistry+0x50>)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d1e:	e006      	b.n	8003d2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3301      	adds	r3, #1
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b07      	cmp	r3, #7
 8003d2a:	d9e7      	bls.n	8003cfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	200008a4 	.word	0x200008a4

08003d40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d50:	f001 fbf0 	bl	8005534 <vPortEnterCritical>
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d5a:	b25b      	sxtb	r3, r3
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d103      	bne.n	8003d6a <vQueueWaitForMessageRestricted+0x2a>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d70:	b25b      	sxtb	r3, r3
 8003d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d76:	d103      	bne.n	8003d80 <vQueueWaitForMessageRestricted+0x40>
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d80:	f001 fc08 	bl	8005594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	3324      	adds	r3, #36	; 0x24
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fbe9 	bl	800456c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d9a:	6978      	ldr	r0, [r7, #20]
 8003d9c:	f7ff ff26 	bl	8003bec <prvUnlockQueue>
	}
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08e      	sub	sp, #56	; 0x38
 8003dac:	af04      	add	r7, sp, #16
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	623b      	str	r3, [r7, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	e7fe      	b.n	8003dd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <xTaskCreateStatic+0x46>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	61fb      	str	r3, [r7, #28]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003dee:	23bc      	movs	r3, #188	; 0xbc
 8003df0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2bbc      	cmp	r3, #188	; 0xbc
 8003df6:	d00a      	beq.n	8003e0e <xTaskCreateStatic+0x66>
	__asm volatile
 8003df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	61bb      	str	r3, [r7, #24]
}
 8003e0a:	bf00      	nop
 8003e0c:	e7fe      	b.n	8003e0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01e      	beq.n	8003e54 <xTaskCreateStatic+0xac>
 8003e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01b      	beq.n	8003e54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e2e:	2300      	movs	r3, #0
 8003e30:	9303      	str	r3, [sp, #12]
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	9302      	str	r3, [sp, #8]
 8003e36:	f107 0314 	add.w	r3, r7, #20
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f80c 	bl	8003e64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e4e:	f000 f8af 	bl	8003fb0 <prvAddNewTaskToReadyList>
 8003e52:	e001      	b.n	8003e58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e58:	697b      	ldr	r3, [r7, #20]
	}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3728      	adds	r7, #40	; 0x28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	21a5      	movs	r1, #165	; 0xa5
 8003e7e:	f001 fe9f 	bl	8005bc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f023 0307 	bic.w	r3, r3, #7
 8003e9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	617b      	str	r3, [r7, #20]
}
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01f      	beq.n	8003f02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	e012      	b.n	8003eee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4413      	add	r3, r2
 8003ece:	7819      	ldrb	r1, [r3, #0]
 8003ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3334      	adds	r3, #52	; 0x34
 8003ed8:	460a      	mov	r2, r1
 8003eda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d006      	beq.n	8003ef6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	3301      	adds	r3, #1
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	2b0f      	cmp	r3, #15
 8003ef2:	d9e9      	bls.n	8003ec8 <prvInitialiseNewTask+0x64>
 8003ef4:	e000      	b.n	8003ef8 <prvInitialiseNewTask+0x94>
			{
				break;
 8003ef6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f00:	e003      	b.n	8003f0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	2b37      	cmp	r3, #55	; 0x37
 8003f0e:	d901      	bls.n	8003f14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f10:	2337      	movs	r3, #55	; 0x37
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	2200      	movs	r2, #0
 8003f24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff f9bc 	bl	80032a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	3318      	adds	r3, #24
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff f9b7 	bl	80032a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	3354      	adds	r3, #84	; 0x54
 8003f64:	2260      	movs	r2, #96	; 0x60
 8003f66:	2100      	movs	r1, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 fe29 	bl	8005bc0 <memset>
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <prvInitialiseNewTask+0x140>)
 8003f72:	659a      	str	r2, [r3, #88]	; 0x58
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	4a0c      	ldr	r2, [pc, #48]	; (8003fa8 <prvInitialiseNewTask+0x144>)
 8003f78:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	4a0b      	ldr	r2, [pc, #44]	; (8003fac <prvInitialiseNewTask+0x148>)
 8003f7e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	68f9      	ldr	r1, [r7, #12]
 8003f84:	69b8      	ldr	r0, [r7, #24]
 8003f86:	f001 f9a9 	bl	80052dc <pxPortInitialiseStack>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f9c:	bf00      	nop
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	08006634 	.word	0x08006634
 8003fa8:	08006654 	.word	0x08006654
 8003fac:	08006614 	.word	0x08006614

08003fb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fb8:	f001 fabc 	bl	8005534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fbc:	4b2d      	ldr	r3, [pc, #180]	; (8004074 <prvAddNewTaskToReadyList+0xc4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	4a2c      	ldr	r2, [pc, #176]	; (8004074 <prvAddNewTaskToReadyList+0xc4>)
 8003fc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fc6:	4b2c      	ldr	r3, [pc, #176]	; (8004078 <prvAddNewTaskToReadyList+0xc8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fce:	4a2a      	ldr	r2, [pc, #168]	; (8004078 <prvAddNewTaskToReadyList+0xc8>)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fd4:	4b27      	ldr	r3, [pc, #156]	; (8004074 <prvAddNewTaskToReadyList+0xc4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d110      	bne.n	8003ffe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fdc:	f000 fbf2 	bl	80047c4 <prvInitialiseTaskLists>
 8003fe0:	e00d      	b.n	8003ffe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fe2:	4b26      	ldr	r3, [pc, #152]	; (800407c <prvAddNewTaskToReadyList+0xcc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fea:	4b23      	ldr	r3, [pc, #140]	; (8004078 <prvAddNewTaskToReadyList+0xc8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d802      	bhi.n	8003ffe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	; (8004078 <prvAddNewTaskToReadyList+0xc8>)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ffe:	4b20      	ldr	r3, [pc, #128]	; (8004080 <prvAddNewTaskToReadyList+0xd0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3301      	adds	r3, #1
 8004004:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <prvAddNewTaskToReadyList+0xd0>)
 8004006:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004008:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <prvAddNewTaskToReadyList+0xd0>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <prvAddNewTaskToReadyList+0xd4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d903      	bls.n	8004024 <prvAddNewTaskToReadyList+0x74>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	4a18      	ldr	r2, [pc, #96]	; (8004084 <prvAddNewTaskToReadyList+0xd4>)
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4a15      	ldr	r2, [pc, #84]	; (8004088 <prvAddNewTaskToReadyList+0xd8>)
 8004032:	441a      	add	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f7ff f941 	bl	80032c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004040:	f001 faa8 	bl	8005594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004044:	4b0d      	ldr	r3, [pc, #52]	; (800407c <prvAddNewTaskToReadyList+0xcc>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00e      	beq.n	800406a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <prvAddNewTaskToReadyList+0xc8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	429a      	cmp	r2, r3
 8004058:	d207      	bcs.n	800406a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <prvAddNewTaskToReadyList+0xdc>)
 800405c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000db8 	.word	0x20000db8
 8004078:	200008e4 	.word	0x200008e4
 800407c:	20000dc4 	.word	0x20000dc4
 8004080:	20000dd4 	.word	0x20000dd4
 8004084:	20000dc0 	.word	0x20000dc0
 8004088:	200008e8 	.word	0x200008e8
 800408c:	e000ed04 	.word	0xe000ed04

08004090 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	; 0x28
 8004094:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800409a:	2300      	movs	r3, #0
 800409c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800409e:	463a      	mov	r2, r7
 80040a0:	1d39      	adds	r1, r7, #4
 80040a2:	f107 0308 	add.w	r3, r7, #8
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff f8aa 	bl	8003200 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040ac:	6839      	ldr	r1, [r7, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	9202      	str	r2, [sp, #8]
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	2300      	movs	r3, #0
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	2300      	movs	r3, #0
 80040bc:	460a      	mov	r2, r1
 80040be:	4924      	ldr	r1, [pc, #144]	; (8004150 <vTaskStartScheduler+0xc0>)
 80040c0:	4824      	ldr	r0, [pc, #144]	; (8004154 <vTaskStartScheduler+0xc4>)
 80040c2:	f7ff fe71 	bl	8003da8 <xTaskCreateStatic>
 80040c6:	4603      	mov	r3, r0
 80040c8:	4a23      	ldr	r2, [pc, #140]	; (8004158 <vTaskStartScheduler+0xc8>)
 80040ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040cc:	4b22      	ldr	r3, [pc, #136]	; (8004158 <vTaskStartScheduler+0xc8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040d4:	2301      	movs	r3, #1
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	e001      	b.n	80040de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d102      	bne.n	80040ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80040e4:	f000 fd10 	bl	8004b08 <xTimerCreateTimerTask>
 80040e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d11b      	bne.n	8004128 <vTaskStartScheduler+0x98>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	613b      	str	r3, [r7, #16]
}
 8004102:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004104:	4b15      	ldr	r3, [pc, #84]	; (800415c <vTaskStartScheduler+0xcc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3354      	adds	r3, #84	; 0x54
 800410a:	4a15      	ldr	r2, [pc, #84]	; (8004160 <vTaskStartScheduler+0xd0>)
 800410c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800410e:	4b15      	ldr	r3, [pc, #84]	; (8004164 <vTaskStartScheduler+0xd4>)
 8004110:	f04f 32ff 	mov.w	r2, #4294967295
 8004114:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004116:	4b14      	ldr	r3, [pc, #80]	; (8004168 <vTaskStartScheduler+0xd8>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800411c:	4b13      	ldr	r3, [pc, #76]	; (800416c <vTaskStartScheduler+0xdc>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004122:	f001 f965 	bl	80053f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004126:	e00e      	b.n	8004146 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d10a      	bne.n	8004146 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	60fb      	str	r3, [r7, #12]
}
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <vTaskStartScheduler+0xb4>
}
 8004146:	bf00      	nop
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	080065e4 	.word	0x080065e4
 8004154:	08004795 	.word	0x08004795
 8004158:	20000ddc 	.word	0x20000ddc
 800415c:	200008e4 	.word	0x200008e4
 8004160:	20000010 	.word	0x20000010
 8004164:	20000dd8 	.word	0x20000dd8
 8004168:	20000dc4 	.word	0x20000dc4
 800416c:	20000dbc 	.word	0x20000dbc

08004170 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <vTaskSuspendAll+0x18>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3301      	adds	r3, #1
 800417a:	4a03      	ldr	r2, [pc, #12]	; (8004188 <vTaskSuspendAll+0x18>)
 800417c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800417e:	bf00      	nop
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	20000de0 	.word	0x20000de0

0800418c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004196:	2300      	movs	r3, #0
 8004198:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800419a:	4b42      	ldr	r3, [pc, #264]	; (80042a4 <xTaskResumeAll+0x118>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	603b      	str	r3, [r7, #0]
}
 80041b4:	bf00      	nop
 80041b6:	e7fe      	b.n	80041b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041b8:	f001 f9bc 	bl	8005534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041bc:	4b39      	ldr	r3, [pc, #228]	; (80042a4 <xTaskResumeAll+0x118>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	4a38      	ldr	r2, [pc, #224]	; (80042a4 <xTaskResumeAll+0x118>)
 80041c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041c6:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <xTaskResumeAll+0x118>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d162      	bne.n	8004294 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041ce:	4b36      	ldr	r3, [pc, #216]	; (80042a8 <xTaskResumeAll+0x11c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d05e      	beq.n	8004294 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041d6:	e02f      	b.n	8004238 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d8:	4b34      	ldr	r3, [pc, #208]	; (80042ac <xTaskResumeAll+0x120>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3318      	adds	r3, #24
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff f8c9 	bl	800337c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff f8c4 	bl	800337c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f8:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <xTaskResumeAll+0x124>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d903      	bls.n	8004208 <xTaskResumeAll+0x7c>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	4a2a      	ldr	r2, [pc, #168]	; (80042b0 <xTaskResumeAll+0x124>)
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <xTaskResumeAll+0x128>)
 8004216:	441a      	add	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3304      	adds	r3, #4
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f7ff f84f 	bl	80032c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004228:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <xTaskResumeAll+0x12c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	429a      	cmp	r2, r3
 8004230:	d302      	bcc.n	8004238 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004232:	4b22      	ldr	r3, [pc, #136]	; (80042bc <xTaskResumeAll+0x130>)
 8004234:	2201      	movs	r2, #1
 8004236:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004238:	4b1c      	ldr	r3, [pc, #112]	; (80042ac <xTaskResumeAll+0x120>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1cb      	bne.n	80041d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004246:	f000 fb5f 	bl	8004908 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <xTaskResumeAll+0x134>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d010      	beq.n	8004278 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004256:	f000 f847 	bl	80042e8 <xTaskIncrementTick>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004260:	4b16      	ldr	r3, [pc, #88]	; (80042bc <xTaskResumeAll+0x130>)
 8004262:	2201      	movs	r2, #1
 8004264:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3b01      	subs	r3, #1
 800426a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f1      	bne.n	8004256 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004272:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <xTaskResumeAll+0x134>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004278:	4b10      	ldr	r3, [pc, #64]	; (80042bc <xTaskResumeAll+0x130>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <xTaskResumeAll+0x138>)
 8004286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004294:	f001 f97e 	bl	8005594 <vPortExitCritical>

	return xAlreadyYielded;
 8004298:	68bb      	ldr	r3, [r7, #8]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000de0 	.word	0x20000de0
 80042a8:	20000db8 	.word	0x20000db8
 80042ac:	20000d78 	.word	0x20000d78
 80042b0:	20000dc0 	.word	0x20000dc0
 80042b4:	200008e8 	.word	0x200008e8
 80042b8:	200008e4 	.word	0x200008e4
 80042bc:	20000dcc 	.word	0x20000dcc
 80042c0:	20000dc8 	.word	0x20000dc8
 80042c4:	e000ed04 	.word	0xe000ed04

080042c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <xTaskGetTickCount+0x1c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80042d4:	687b      	ldr	r3, [r7, #4]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20000dbc 	.word	0x20000dbc

080042e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042f2:	4b4f      	ldr	r3, [pc, #316]	; (8004430 <xTaskIncrementTick+0x148>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 808f 	bne.w	800441a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042fc:	4b4d      	ldr	r3, [pc, #308]	; (8004434 <xTaskIncrementTick+0x14c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004304:	4a4b      	ldr	r2, [pc, #300]	; (8004434 <xTaskIncrementTick+0x14c>)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d120      	bne.n	8004352 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004310:	4b49      	ldr	r3, [pc, #292]	; (8004438 <xTaskIncrementTick+0x150>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <xTaskIncrementTick+0x48>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	603b      	str	r3, [r7, #0]
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <xTaskIncrementTick+0x46>
 8004330:	4b41      	ldr	r3, [pc, #260]	; (8004438 <xTaskIncrementTick+0x150>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	4b41      	ldr	r3, [pc, #260]	; (800443c <xTaskIncrementTick+0x154>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a3f      	ldr	r2, [pc, #252]	; (8004438 <xTaskIncrementTick+0x150>)
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	4a3f      	ldr	r2, [pc, #252]	; (800443c <xTaskIncrementTick+0x154>)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	4b3e      	ldr	r3, [pc, #248]	; (8004440 <xTaskIncrementTick+0x158>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	4a3d      	ldr	r2, [pc, #244]	; (8004440 <xTaskIncrementTick+0x158>)
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	f000 fadb 	bl	8004908 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004352:	4b3c      	ldr	r3, [pc, #240]	; (8004444 <xTaskIncrementTick+0x15c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	429a      	cmp	r2, r3
 800435a:	d349      	bcc.n	80043f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800435c:	4b36      	ldr	r3, [pc, #216]	; (8004438 <xTaskIncrementTick+0x150>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d104      	bne.n	8004370 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004366:	4b37      	ldr	r3, [pc, #220]	; (8004444 <xTaskIncrementTick+0x15c>)
 8004368:	f04f 32ff 	mov.w	r2, #4294967295
 800436c:	601a      	str	r2, [r3, #0]
					break;
 800436e:	e03f      	b.n	80043f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004370:	4b31      	ldr	r3, [pc, #196]	; (8004438 <xTaskIncrementTick+0x150>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	429a      	cmp	r2, r3
 8004386:	d203      	bcs.n	8004390 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004388:	4a2e      	ldr	r2, [pc, #184]	; (8004444 <xTaskIncrementTick+0x15c>)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800438e:	e02f      	b.n	80043f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	3304      	adds	r3, #4
 8004394:	4618      	mov	r0, r3
 8004396:	f7fe fff1 	bl	800337c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d004      	beq.n	80043ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	3318      	adds	r3, #24
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe ffe8 	bl	800337c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <xTaskIncrementTick+0x160>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d903      	bls.n	80043c0 <xTaskIncrementTick+0xd8>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	4a22      	ldr	r2, [pc, #136]	; (8004448 <xTaskIncrementTick+0x160>)
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4a1f      	ldr	r2, [pc, #124]	; (800444c <xTaskIncrementTick+0x164>)
 80043ce:	441a      	add	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f7fe ff73 	bl	80032c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e0:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <xTaskIncrementTick+0x168>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d3b8      	bcc.n	800435c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80043ea:	2301      	movs	r3, #1
 80043ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043ee:	e7b5      	b.n	800435c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043f0:	4b17      	ldr	r3, [pc, #92]	; (8004450 <xTaskIncrementTick+0x168>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f6:	4915      	ldr	r1, [pc, #84]	; (800444c <xTaskIncrementTick+0x164>)
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d901      	bls.n	800440c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004408:	2301      	movs	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <xTaskIncrementTick+0x16c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004414:	2301      	movs	r3, #1
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	e004      	b.n	8004424 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800441a:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <xTaskIncrementTick+0x170>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3301      	adds	r3, #1
 8004420:	4a0d      	ldr	r2, [pc, #52]	; (8004458 <xTaskIncrementTick+0x170>)
 8004422:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004424:	697b      	ldr	r3, [r7, #20]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000de0 	.word	0x20000de0
 8004434:	20000dbc 	.word	0x20000dbc
 8004438:	20000d70 	.word	0x20000d70
 800443c:	20000d74 	.word	0x20000d74
 8004440:	20000dd0 	.word	0x20000dd0
 8004444:	20000dd8 	.word	0x20000dd8
 8004448:	20000dc0 	.word	0x20000dc0
 800444c:	200008e8 	.word	0x200008e8
 8004450:	200008e4 	.word	0x200008e4
 8004454:	20000dcc 	.word	0x20000dcc
 8004458:	20000dc8 	.word	0x20000dc8

0800445c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <vTaskSwitchContext+0xb0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800446a:	4b29      	ldr	r3, [pc, #164]	; (8004510 <vTaskSwitchContext+0xb4>)
 800446c:	2201      	movs	r2, #1
 800446e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004470:	e046      	b.n	8004500 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004472:	4b27      	ldr	r3, [pc, #156]	; (8004510 <vTaskSwitchContext+0xb4>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004478:	4b26      	ldr	r3, [pc, #152]	; (8004514 <vTaskSwitchContext+0xb8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	e010      	b.n	80044a2 <vTaskSwitchContext+0x46>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <vTaskSwitchContext+0x40>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	607b      	str	r3, [r7, #4]
}
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <vTaskSwitchContext+0x3e>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3b01      	subs	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	491d      	ldr	r1, [pc, #116]	; (8004518 <vTaskSwitchContext+0xbc>)
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0e4      	beq.n	8004480 <vTaskSwitchContext+0x24>
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4a15      	ldr	r2, [pc, #84]	; (8004518 <vTaskSwitchContext+0xbc>)
 80044c2:	4413      	add	r3, r2
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	3308      	adds	r3, #8
 80044d8:	429a      	cmp	r2, r3
 80044da:	d104      	bne.n	80044e6 <vTaskSwitchContext+0x8a>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	4a0b      	ldr	r2, [pc, #44]	; (800451c <vTaskSwitchContext+0xc0>)
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4a08      	ldr	r2, [pc, #32]	; (8004514 <vTaskSwitchContext+0xb8>)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <vTaskSwitchContext+0xc0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3354      	adds	r3, #84	; 0x54
 80044fc:	4a08      	ldr	r2, [pc, #32]	; (8004520 <vTaskSwitchContext+0xc4>)
 80044fe:	6013      	str	r3, [r2, #0]
}
 8004500:	bf00      	nop
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	20000de0 	.word	0x20000de0
 8004510:	20000dcc 	.word	0x20000dcc
 8004514:	20000dc0 	.word	0x20000dc0
 8004518:	200008e8 	.word	0x200008e8
 800451c:	200008e4 	.word	0x200008e4
 8004520:	20000010 	.word	0x20000010

08004524 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	60fb      	str	r3, [r7, #12]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <vTaskPlaceOnEventList+0x44>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3318      	adds	r3, #24
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fe fed9 	bl	800330a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004558:	2101      	movs	r1, #1
 800455a:	6838      	ldr	r0, [r7, #0]
 800455c:	f000 fa80 	bl	8004a60 <prvAddCurrentTaskToDelayedList>
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	200008e4 	.word	0x200008e4

0800456c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	617b      	str	r3, [r7, #20]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3318      	adds	r3, #24
 800459a:	4619      	mov	r1, r3
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f7fe fe90 	bl	80032c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80045a8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	68b8      	ldr	r0, [r7, #8]
 80045b2:	f000 fa55 	bl	8004a60 <prvAddCurrentTaskToDelayedList>
	}
 80045b6:	bf00      	nop
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	200008e4 	.word	0x200008e4

080045c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	60fb      	str	r3, [r7, #12]
}
 80045ec:	bf00      	nop
 80045ee:	e7fe      	b.n	80045ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	3318      	adds	r3, #24
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe fec1 	bl	800337c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045fa:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <xTaskRemoveFromEventList+0xb0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d11d      	bne.n	800463e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	3304      	adds	r3, #4
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe feb8 	bl	800337c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	4b19      	ldr	r3, [pc, #100]	; (8004678 <xTaskRemoveFromEventList+0xb4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d903      	bls.n	8004620 <xTaskRemoveFromEventList+0x5c>
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	4a16      	ldr	r2, [pc, #88]	; (8004678 <xTaskRemoveFromEventList+0xb4>)
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4a13      	ldr	r2, [pc, #76]	; (800467c <xTaskRemoveFromEventList+0xb8>)
 800462e:	441a      	add	r2, r3
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	3304      	adds	r3, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f7fe fe43 	bl	80032c2 <vListInsertEnd>
 800463c:	e005      	b.n	800464a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3318      	adds	r3, #24
 8004642:	4619      	mov	r1, r3
 8004644:	480e      	ldr	r0, [pc, #56]	; (8004680 <xTaskRemoveFromEventList+0xbc>)
 8004646:	f7fe fe3c 	bl	80032c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464e:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <xTaskRemoveFromEventList+0xc0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	429a      	cmp	r2, r3
 8004656:	d905      	bls.n	8004664 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004658:	2301      	movs	r3, #1
 800465a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800465c:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <xTaskRemoveFromEventList+0xc4>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	e001      	b.n	8004668 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004668:	697b      	ldr	r3, [r7, #20]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000de0 	.word	0x20000de0
 8004678:	20000dc0 	.word	0x20000dc0
 800467c:	200008e8 	.word	0x200008e8
 8004680:	20000d78 	.word	0x20000d78
 8004684:	200008e4 	.word	0x200008e4
 8004688:	20000dcc 	.word	0x20000dcc

0800468c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <vTaskInternalSetTimeOutState+0x24>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <vTaskInternalSetTimeOutState+0x28>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	605a      	str	r2, [r3, #4]
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	20000dd0 	.word	0x20000dd0
 80046b4:	20000dbc 	.word	0x20000dbc

080046b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	613b      	str	r3, [r7, #16]
}
 80046da:	bf00      	nop
 80046dc:	e7fe      	b.n	80046dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	60fb      	str	r3, [r7, #12]
}
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80046fa:	f000 ff1b 	bl	8005534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <xTaskCheckForTimeOut+0xbc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d102      	bne.n	800471e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004718:	2300      	movs	r3, #0
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	e023      	b.n	8004766 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <xTaskCheckForTimeOut+0xc0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d007      	beq.n	800473a <xTaskCheckForTimeOut+0x82>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	429a      	cmp	r2, r3
 8004732:	d302      	bcc.n	800473a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004734:	2301      	movs	r3, #1
 8004736:	61fb      	str	r3, [r7, #28]
 8004738:	e015      	b.n	8004766 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	429a      	cmp	r2, r3
 8004742:	d20b      	bcs.n	800475c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff9b 	bl	800468c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	e004      	b.n	8004766 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004762:	2301      	movs	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004766:	f000 ff15 	bl	8005594 <vPortExitCritical>

	return xReturn;
 800476a:	69fb      	ldr	r3, [r7, #28]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000dbc 	.word	0x20000dbc
 8004778:	20000dd0 	.word	0x20000dd0

0800477c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004780:	4b03      	ldr	r3, [pc, #12]	; (8004790 <vTaskMissedYield+0x14>)
 8004782:	2201      	movs	r2, #1
 8004784:	601a      	str	r2, [r3, #0]
}
 8004786:	bf00      	nop
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	20000dcc 	.word	0x20000dcc

08004794 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800479c:	f000 f852 	bl	8004844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <prvIdleTask+0x28>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d9f9      	bls.n	800479c <prvIdleTask+0x8>
			{
				taskYIELD();
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <prvIdleTask+0x2c>)
 80047aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047b8:	e7f0      	b.n	800479c <prvIdleTask+0x8>
 80047ba:	bf00      	nop
 80047bc:	200008e8 	.word	0x200008e8
 80047c0:	e000ed04 	.word	0xe000ed04

080047c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047ca:	2300      	movs	r3, #0
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	e00c      	b.n	80047ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4a12      	ldr	r2, [pc, #72]	; (8004824 <prvInitialiseTaskLists+0x60>)
 80047dc:	4413      	add	r3, r2
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe fd42 	bl	8003268 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3301      	adds	r3, #1
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b37      	cmp	r3, #55	; 0x37
 80047ee:	d9ef      	bls.n	80047d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047f0:	480d      	ldr	r0, [pc, #52]	; (8004828 <prvInitialiseTaskLists+0x64>)
 80047f2:	f7fe fd39 	bl	8003268 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047f6:	480d      	ldr	r0, [pc, #52]	; (800482c <prvInitialiseTaskLists+0x68>)
 80047f8:	f7fe fd36 	bl	8003268 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047fc:	480c      	ldr	r0, [pc, #48]	; (8004830 <prvInitialiseTaskLists+0x6c>)
 80047fe:	f7fe fd33 	bl	8003268 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004802:	480c      	ldr	r0, [pc, #48]	; (8004834 <prvInitialiseTaskLists+0x70>)
 8004804:	f7fe fd30 	bl	8003268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004808:	480b      	ldr	r0, [pc, #44]	; (8004838 <prvInitialiseTaskLists+0x74>)
 800480a:	f7fe fd2d 	bl	8003268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <prvInitialiseTaskLists+0x78>)
 8004810:	4a05      	ldr	r2, [pc, #20]	; (8004828 <prvInitialiseTaskLists+0x64>)
 8004812:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <prvInitialiseTaskLists+0x7c>)
 8004816:	4a05      	ldr	r2, [pc, #20]	; (800482c <prvInitialiseTaskLists+0x68>)
 8004818:	601a      	str	r2, [r3, #0]
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	200008e8 	.word	0x200008e8
 8004828:	20000d48 	.word	0x20000d48
 800482c:	20000d5c 	.word	0x20000d5c
 8004830:	20000d78 	.word	0x20000d78
 8004834:	20000d8c 	.word	0x20000d8c
 8004838:	20000da4 	.word	0x20000da4
 800483c:	20000d70 	.word	0x20000d70
 8004840:	20000d74 	.word	0x20000d74

08004844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800484a:	e019      	b.n	8004880 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800484c:	f000 fe72 	bl	8005534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <prvCheckTasksWaitingTermination+0x50>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	4618      	mov	r0, r3
 800485e:	f7fe fd8d 	bl	800337c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004862:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <prvCheckTasksWaitingTermination+0x54>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3b01      	subs	r3, #1
 8004868:	4a0b      	ldr	r2, [pc, #44]	; (8004898 <prvCheckTasksWaitingTermination+0x54>)
 800486a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <prvCheckTasksWaitingTermination+0x58>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3b01      	subs	r3, #1
 8004872:	4a0a      	ldr	r2, [pc, #40]	; (800489c <prvCheckTasksWaitingTermination+0x58>)
 8004874:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004876:	f000 fe8d 	bl	8005594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f810 	bl	80048a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <prvCheckTasksWaitingTermination+0x58>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e1      	bne.n	800484c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000d8c 	.word	0x20000d8c
 8004898:	20000db8 	.word	0x20000db8
 800489c:	20000da0 	.word	0x20000da0

080048a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3354      	adds	r3, #84	; 0x54
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 fa31 	bl	8005d14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d108      	bne.n	80048ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	4618      	mov	r0, r3
 80048c2:	f001 f825 	bl	8005910 <vPortFree>
				vPortFree( pxTCB );
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f001 f822 	bl	8005910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048cc:	e018      	b.n	8004900 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d103      	bne.n	80048e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f001 f819 	bl	8005910 <vPortFree>
	}
 80048de:	e00f      	b.n	8004900 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d00a      	beq.n	8004900 <prvDeleteTCB+0x60>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	60fb      	str	r3, [r7, #12]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <prvDeleteTCB+0x5e>
	}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800490e:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <prvResetNextTaskUnblockTime+0x38>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <prvResetNextTaskUnblockTime+0x3c>)
 800491a:	f04f 32ff 	mov.w	r2, #4294967295
 800491e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004920:	e008      	b.n	8004934 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004922:	4b07      	ldr	r3, [pc, #28]	; (8004940 <prvResetNextTaskUnblockTime+0x38>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4a04      	ldr	r2, [pc, #16]	; (8004944 <prvResetNextTaskUnblockTime+0x3c>)
 8004932:	6013      	str	r3, [r2, #0]
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	20000d70 	.word	0x20000d70
 8004944:	20000dd8 	.word	0x20000dd8

08004948 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <xTaskGetSchedulerState+0x34>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004956:	2301      	movs	r3, #1
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	e008      	b.n	800496e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800495c:	4b08      	ldr	r3, [pc, #32]	; (8004980 <xTaskGetSchedulerState+0x38>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004964:	2302      	movs	r3, #2
 8004966:	607b      	str	r3, [r7, #4]
 8004968:	e001      	b.n	800496e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800496a:	2300      	movs	r3, #0
 800496c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800496e:	687b      	ldr	r3, [r7, #4]
	}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000dc4 	.word	0x20000dc4
 8004980:	20000de0 	.word	0x20000de0

08004984 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d056      	beq.n	8004a48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800499a:	4b2e      	ldr	r3, [pc, #184]	; (8004a54 <xTaskPriorityDisinherit+0xd0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d00a      	beq.n	80049ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	60fb      	str	r3, [r7, #12]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	60bb      	str	r3, [r7, #8]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049dc:	1e5a      	subs	r2, r3, #1
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d02c      	beq.n	8004a48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d128      	bne.n	8004a48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	3304      	adds	r3, #4
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe fcbe 	bl	800337c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a18:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <xTaskPriorityDisinherit+0xd4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d903      	bls.n	8004a28 <xTaskPriorityDisinherit+0xa4>
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	4a0c      	ldr	r2, [pc, #48]	; (8004a58 <xTaskPriorityDisinherit+0xd4>)
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <xTaskPriorityDisinherit+0xd8>)
 8004a36:	441a      	add	r2, r3
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f7fe fc3f 	bl	80032c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a44:	2301      	movs	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a48:	697b      	ldr	r3, [r7, #20]
	}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	200008e4 	.word	0x200008e4
 8004a58:	20000dc0 	.word	0x20000dc0
 8004a5c:	200008e8 	.word	0x200008e8

08004a60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a6a:	4b21      	ldr	r3, [pc, #132]	; (8004af0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a70:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fc80 	bl	800337c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a82:	d10a      	bne.n	8004a9a <prvAddCurrentTaskToDelayedList+0x3a>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d007      	beq.n	8004a9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a8a:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	4619      	mov	r1, r3
 8004a92:	4819      	ldr	r0, [pc, #100]	; (8004af8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a94:	f7fe fc15 	bl	80032c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a98:	e026      	b.n	8004ae8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004aa2:	4b14      	ldr	r3, [pc, #80]	; (8004af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d209      	bcs.n	8004ac6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ab2:	4b12      	ldr	r3, [pc, #72]	; (8004afc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f7fe fc23 	bl	800330a <vListInsert>
}
 8004ac4:	e010      	b.n	8004ae8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f7fe fc19 	bl	800330a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d202      	bcs.n	8004ae8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ae2:	4a08      	ldr	r2, [pc, #32]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6013      	str	r3, [r2, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20000dbc 	.word	0x20000dbc
 8004af4:	200008e4 	.word	0x200008e4
 8004af8:	20000da4 	.word	0x20000da4
 8004afc:	20000d74 	.word	0x20000d74
 8004b00:	20000d70 	.word	0x20000d70
 8004b04:	20000dd8 	.word	0x20000dd8

08004b08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	; 0x28
 8004b0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b12:	f000 fb63 	bl	80051dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b16:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <xTimerCreateTimerTask+0x80>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d021      	beq.n	8004b62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b26:	1d3a      	adds	r2, r7, #4
 8004b28:	f107 0108 	add.w	r1, r7, #8
 8004b2c:	f107 030c 	add.w	r3, r7, #12
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe fb7f 	bl	8003234 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	9202      	str	r2, [sp, #8]
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	2302      	movs	r3, #2
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	2300      	movs	r3, #0
 8004b46:	460a      	mov	r2, r1
 8004b48:	4910      	ldr	r1, [pc, #64]	; (8004b8c <xTimerCreateTimerTask+0x84>)
 8004b4a:	4811      	ldr	r0, [pc, #68]	; (8004b90 <xTimerCreateTimerTask+0x88>)
 8004b4c:	f7ff f92c 	bl	8003da8 <xTaskCreateStatic>
 8004b50:	4603      	mov	r3, r0
 8004b52:	4a10      	ldr	r2, [pc, #64]	; (8004b94 <xTimerCreateTimerTask+0x8c>)
 8004b54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b56:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <xTimerCreateTimerTask+0x8c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	613b      	str	r3, [r7, #16]
}
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b7e:	697b      	ldr	r3, [r7, #20]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000e14 	.word	0x20000e14
 8004b8c:	080065ec 	.word	0x080065ec
 8004b90:	08004d85 	.word	0x08004d85
 8004b94:	20000e18 	.word	0x20000e18

08004b98 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004ba6:	202c      	movs	r0, #44	; 0x2c
 8004ba8:	f000 fde6 	bl	8005778 <pvPortMalloc>
 8004bac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f805 	bl	8004bda <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004bd0:	697b      	ldr	r3, [r7, #20]
	}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b086      	sub	sp, #24
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	617b      	str	r3, [r7, #20]
}
 8004c00:	bf00      	nop
 8004c02:	e7fe      	b.n	8004c02 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01e      	beq.n	8004c48 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004c0a:	f000 fae7 	bl	80051dc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	6a3a      	ldr	r2, [r7, #32]
 8004c24:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	3304      	adds	r3, #4
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fb3c 	bl	80032a8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c3c:	f043 0304 	orr.w	r3, r3, #4
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004c48:	bf00      	nop
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	623b      	str	r3, [r7, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	e7fe      	b.n	8004c7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <xTimerGenericCommand+0x98>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d02a      	beq.n	8004cdc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b05      	cmp	r3, #5
 8004c96:	dc18      	bgt.n	8004cca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c98:	f7ff fe56 	bl	8004948 <xTaskGetSchedulerState>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d109      	bne.n	8004cb6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ca2:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <xTimerGenericCommand+0x98>)
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	f107 0110 	add.w	r1, r7, #16
 8004caa:	2300      	movs	r3, #0
 8004cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cae:	f7fe fc93 	bl	80035d8 <xQueueGenericSend>
 8004cb2:	6278      	str	r0, [r7, #36]	; 0x24
 8004cb4:	e012      	b.n	8004cdc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <xTimerGenericCommand+0x98>)
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	f107 0110 	add.w	r1, r7, #16
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f7fe fc89 	bl	80035d8 <xQueueGenericSend>
 8004cc6:	6278      	str	r0, [r7, #36]	; 0x24
 8004cc8:	e008      	b.n	8004cdc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004cca:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <xTimerGenericCommand+0x98>)
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	f107 0110 	add.w	r1, r7, #16
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	f7fe fd7d 	bl	80037d4 <xQueueGenericSendFromISR>
 8004cda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3728      	adds	r7, #40	; 0x28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000e14 	.word	0x20000e14

08004cec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf6:	4b22      	ldr	r3, [pc, #136]	; (8004d80 <prvProcessExpiredTimer+0x94>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fe fb39 	bl	800337c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d022      	beq.n	8004d5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	18d1      	adds	r1, r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	6978      	ldr	r0, [r7, #20]
 8004d26:	f000 f8d1 	bl	8004ecc <prvInsertTimerInActiveList>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01f      	beq.n	8004d70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d30:	2300      	movs	r3, #0
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	2300      	movs	r3, #0
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	2100      	movs	r1, #0
 8004d3a:	6978      	ldr	r0, [r7, #20]
 8004d3c:	f7ff ff88 	bl	8004c50 <xTimerGenericCommand>
 8004d40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d113      	bne.n	8004d70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	60fb      	str	r3, [r7, #12]
}
 8004d5a:	bf00      	nop
 8004d5c:	e7fe      	b.n	8004d5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	6978      	ldr	r0, [r7, #20]
 8004d76:	4798      	blx	r3
}
 8004d78:	bf00      	nop
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20000e0c 	.word	0x20000e0c

08004d84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d8c:	f107 0308 	add.w	r3, r7, #8
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 f857 	bl	8004e44 <prvGetNextExpireTime>
 8004d96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f803 	bl	8004da8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004da2:	f000 f8d5 	bl	8004f50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004da6:	e7f1      	b.n	8004d8c <prvTimerTask+0x8>

08004da8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004db2:	f7ff f9dd 	bl	8004170 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004db6:	f107 0308 	add.w	r3, r7, #8
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f866 	bl	8004e8c <prvSampleTimeNow>
 8004dc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d130      	bne.n	8004e2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <prvProcessTimerOrBlockTask+0x3c>
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d806      	bhi.n	8004de4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004dd6:	f7ff f9d9 	bl	800418c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004dda:	68f9      	ldr	r1, [r7, #12]
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff ff85 	bl	8004cec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004de2:	e024      	b.n	8004e2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d008      	beq.n	8004dfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004dea:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <prvProcessTimerOrBlockTask+0x90>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <prvProcessTimerOrBlockTask+0x50>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <prvProcessTimerOrBlockTask+0x52>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004dfc:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <prvProcessTimerOrBlockTask+0x94>)
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f7fe ff99 	bl	8003d40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e0e:	f7ff f9bd 	bl	800418c <xTaskResumeAll>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10a      	bne.n	8004e2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <prvProcessTimerOrBlockTask+0x98>)
 8004e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	f3bf 8f6f 	isb	sy
}
 8004e28:	e001      	b.n	8004e2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e2a:	f7ff f9af 	bl	800418c <xTaskResumeAll>
}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000e10 	.word	0x20000e10
 8004e3c:	20000e14 	.word	0x20000e14
 8004e40:	e000ed04 	.word	0xe000ed04

08004e44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <prvGetNextExpireTime+0x44>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <prvGetNextExpireTime+0x16>
 8004e56:	2201      	movs	r2, #1
 8004e58:	e000      	b.n	8004e5c <prvGetNextExpireTime+0x18>
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d105      	bne.n	8004e74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e68:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <prvGetNextExpireTime+0x44>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e001      	b.n	8004e78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e78:	68fb      	ldr	r3, [r7, #12]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000e0c 	.word	0x20000e0c

08004e8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e94:	f7ff fa18 	bl	80042c8 <xTaskGetTickCount>
 8004e98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <prvSampleTimeNow+0x3c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d205      	bcs.n	8004eb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ea4:	f000 f936 	bl	8005114 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e002      	b.n	8004eb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004eb6:	4a04      	ldr	r2, [pc, #16]	; (8004ec8 <prvSampleTimeNow+0x3c>)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000e1c 	.word	0x20000e1c

08004ecc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d812      	bhi.n	8004f18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d302      	bcc.n	8004f06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f00:	2301      	movs	r3, #1
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e01b      	b.n	8004f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <prvInsertTimerInActiveList+0x7c>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f7fe f9fa 	bl	800330a <vListInsert>
 8004f16:	e012      	b.n	8004f3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d206      	bcs.n	8004f2e <prvInsertTimerInActiveList+0x62>
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d302      	bcc.n	8004f2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	e007      	b.n	8004f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f2e:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <prvInsertTimerInActiveList+0x80>)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3304      	adds	r3, #4
 8004f36:	4619      	mov	r1, r3
 8004f38:	4610      	mov	r0, r2
 8004f3a:	f7fe f9e6 	bl	800330a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f3e:	697b      	ldr	r3, [r7, #20]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20000e10 	.word	0x20000e10
 8004f4c:	20000e0c 	.word	0x20000e0c

08004f50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08e      	sub	sp, #56	; 0x38
 8004f54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f56:	e0ca      	b.n	80050ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	da18      	bge.n	8004f90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f5e:	1d3b      	adds	r3, r7, #4
 8004f60:	3304      	adds	r3, #4
 8004f62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	61fb      	str	r3, [r7, #28]
}
 8004f7c:	bf00      	nop
 8004f7e:	e7fe      	b.n	8004f7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f86:	6850      	ldr	r0, [r2, #4]
 8004f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f8a:	6892      	ldr	r2, [r2, #8]
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f2c0 80aa 	blt.w	80050ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d004      	beq.n	8004fae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fe f9e7 	bl	800337c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fae:	463b      	mov	r3, r7
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff ff6b 	bl	8004e8c <prvSampleTimeNow>
 8004fb6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b09      	cmp	r3, #9
 8004fbc:	f200 8097 	bhi.w	80050ee <prvProcessReceivedCommands+0x19e>
 8004fc0:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <prvProcessReceivedCommands+0x78>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	08004ff1 	.word	0x08004ff1
 8004fd4:	08005065 	.word	0x08005065
 8004fd8:	08005079 	.word	0x08005079
 8004fdc:	080050c3 	.word	0x080050c3
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08004ff1 	.word	0x08004ff1
 8004fe8:	08005065 	.word	0x08005065
 8004fec:	08005079 	.word	0x08005079
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	18d1      	adds	r1, r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005010:	f7ff ff5c 	bl	8004ecc <prvInsertTimerInActiveList>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d069      	beq.n	80050ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005020:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d05e      	beq.n	80050ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	441a      	add	r2, r3
 8005038:	2300      	movs	r3, #0
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	2300      	movs	r3, #0
 800503e:	2100      	movs	r1, #0
 8005040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005042:	f7ff fe05 	bl	8004c50 <xTimerGenericCommand>
 8005046:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d14f      	bne.n	80050ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	61bb      	str	r3, [r7, #24]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	b2da      	uxtb	r2, r3
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005076:	e03a      	b.n	80050ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	b2da      	uxtb	r2, r3
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	617b      	str	r3, [r7, #20]
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	18d1      	adds	r1, r2, r3
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050bc:	f7ff ff06 	bl	8004ecc <prvInsertTimerInActiveList>
					break;
 80050c0:	e015      	b.n	80050ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d103      	bne.n	80050d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80050d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d2:	f000 fc1d 	bl	8005910 <vPortFree>
 80050d6:	e00a      	b.n	80050ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80050ea:	e000      	b.n	80050ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80050ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050ee:	4b08      	ldr	r3, [pc, #32]	; (8005110 <prvProcessReceivedCommands+0x1c0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	1d39      	adds	r1, r7, #4
 80050f4:	2200      	movs	r2, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe fc08 	bl	800390c <xQueueReceive>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f47f af2a 	bne.w	8004f58 <prvProcessReceivedCommands+0x8>
	}
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	3730      	adds	r7, #48	; 0x30
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000e14 	.word	0x20000e14

08005114 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800511a:	e048      	b.n	80051ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800511c:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005126:	4b2b      	ldr	r3, [pc, #172]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	3304      	adds	r3, #4
 8005134:	4618      	mov	r0, r3
 8005136:	f7fe f921 	bl	800337c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d02e      	beq.n	80051ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	429a      	cmp	r2, r3
 8005160:	d90e      	bls.n	8005180 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800516e:	4b19      	ldr	r3, [pc, #100]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3304      	adds	r3, #4
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f7fe f8c6 	bl	800330a <vListInsert>
 800517e:	e016      	b.n	80051ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005180:	2300      	movs	r3, #0
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	2100      	movs	r1, #0
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f7ff fd60 	bl	8004c50 <xTimerGenericCommand>
 8005190:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	603b      	str	r3, [r7, #0]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1b1      	bne.n	800511c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051b8:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <prvSwitchTimerLists+0xc4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a04      	ldr	r2, [pc, #16]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 80051c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051c6:	4a04      	ldr	r2, [pc, #16]	; (80051d8 <prvSwitchTimerLists+0xc4>)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	6013      	str	r3, [r2, #0]
}
 80051cc:	bf00      	nop
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000e0c 	.word	0x20000e0c
 80051d8:	20000e10 	.word	0x20000e10

080051dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051e2:	f000 f9a7 	bl	8005534 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051e6:	4b15      	ldr	r3, [pc, #84]	; (800523c <prvCheckForValidListAndQueue+0x60>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d120      	bne.n	8005230 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80051ee:	4814      	ldr	r0, [pc, #80]	; (8005240 <prvCheckForValidListAndQueue+0x64>)
 80051f0:	f7fe f83a 	bl	8003268 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80051f4:	4813      	ldr	r0, [pc, #76]	; (8005244 <prvCheckForValidListAndQueue+0x68>)
 80051f6:	f7fe f837 	bl	8003268 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80051fa:	4b13      	ldr	r3, [pc, #76]	; (8005248 <prvCheckForValidListAndQueue+0x6c>)
 80051fc:	4a10      	ldr	r2, [pc, #64]	; (8005240 <prvCheckForValidListAndQueue+0x64>)
 80051fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005200:	4b12      	ldr	r3, [pc, #72]	; (800524c <prvCheckForValidListAndQueue+0x70>)
 8005202:	4a10      	ldr	r2, [pc, #64]	; (8005244 <prvCheckForValidListAndQueue+0x68>)
 8005204:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005206:	2300      	movs	r3, #0
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	4b11      	ldr	r3, [pc, #68]	; (8005250 <prvCheckForValidListAndQueue+0x74>)
 800520c:	4a11      	ldr	r2, [pc, #68]	; (8005254 <prvCheckForValidListAndQueue+0x78>)
 800520e:	2110      	movs	r1, #16
 8005210:	200a      	movs	r0, #10
 8005212:	f7fe f945 	bl	80034a0 <xQueueGenericCreateStatic>
 8005216:	4603      	mov	r3, r0
 8005218:	4a08      	ldr	r2, [pc, #32]	; (800523c <prvCheckForValidListAndQueue+0x60>)
 800521a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800521c:	4b07      	ldr	r3, [pc, #28]	; (800523c <prvCheckForValidListAndQueue+0x60>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <prvCheckForValidListAndQueue+0x60>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	490b      	ldr	r1, [pc, #44]	; (8005258 <prvCheckForValidListAndQueue+0x7c>)
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe fd5e 	bl	8003cec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005230:	f000 f9b0 	bl	8005594 <vPortExitCritical>
}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000e14 	.word	0x20000e14
 8005240:	20000de4 	.word	0x20000de4
 8005244:	20000df8 	.word	0x20000df8
 8005248:	20000e0c 	.word	0x20000e0c
 800524c:	20000e10 	.word	0x20000e10
 8005250:	20000ec0 	.word	0x20000ec0
 8005254:	20000e20 	.word	0x20000e20
 8005258:	080065f4 	.word	0x080065f4

0800525c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <pvTimerGetTimerID+0x28>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	60fb      	str	r3, [r7, #12]
}
 8005280:	bf00      	nop
 8005282:	e7fe      	b.n	8005282 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8005284:	f000 f956 	bl	8005534 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800528e:	f000 f981 	bl	8005594 <vPortExitCritical>

	return pvReturn;
 8005292:	693b      	ldr	r3, [r7, #16]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <vTimerSetTimerID+0x2a>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	60bb      	str	r3, [r7, #8]
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 80052c6:	f000 f935 	bl	8005534 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 80052d0:	f000 f960 	bl	8005594 <vPortExitCritical>
}
 80052d4:	bf00      	nop
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3b04      	subs	r3, #4
 80052ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3b04      	subs	r3, #4
 80052fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f023 0201 	bic.w	r2, r3, #1
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3b04      	subs	r3, #4
 800530a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800530c:	4a0c      	ldr	r2, [pc, #48]	; (8005340 <pxPortInitialiseStack+0x64>)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3b14      	subs	r3, #20
 8005316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3b04      	subs	r3, #4
 8005322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f06f 0202 	mvn.w	r2, #2
 800532a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3b20      	subs	r3, #32
 8005330:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005332:	68fb      	ldr	r3, [r7, #12]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	08005345 	.word	0x08005345

08005344 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800534e:	4b12      	ldr	r3, [pc, #72]	; (8005398 <prvTaskExitError+0x54>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005356:	d00a      	beq.n	800536e <prvTaskExitError+0x2a>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	60fb      	str	r3, [r7, #12]
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <prvTaskExitError+0x28>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	60bb      	str	r3, [r7, #8]
}
 8005380:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005382:	bf00      	nop
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0fc      	beq.n	8005384 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800538a:	bf00      	nop
 800538c:	bf00      	nop
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	2000000c 	.word	0x2000000c
 800539c:	00000000 	.word	0x00000000

080053a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053a0:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <pxCurrentTCBConst2>)
 80053a2:	6819      	ldr	r1, [r3, #0]
 80053a4:	6808      	ldr	r0, [r1, #0]
 80053a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053aa:	f380 8809 	msr	PSP, r0
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f04f 0000 	mov.w	r0, #0
 80053b6:	f380 8811 	msr	BASEPRI, r0
 80053ba:	4770      	bx	lr
 80053bc:	f3af 8000 	nop.w

080053c0 <pxCurrentTCBConst2>:
 80053c0:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop

080053c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053c8:	4808      	ldr	r0, [pc, #32]	; (80053ec <prvPortStartFirstTask+0x24>)
 80053ca:	6800      	ldr	r0, [r0, #0]
 80053cc:	6800      	ldr	r0, [r0, #0]
 80053ce:	f380 8808 	msr	MSP, r0
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8814 	msr	CONTROL, r0
 80053da:	b662      	cpsie	i
 80053dc:	b661      	cpsie	f
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	df00      	svc	0
 80053e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053ea:	bf00      	nop
 80053ec:	e000ed08 	.word	0xe000ed08

080053f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053f6:	4b46      	ldr	r3, [pc, #280]	; (8005510 <xPortStartScheduler+0x120>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a46      	ldr	r2, [pc, #280]	; (8005514 <xPortStartScheduler+0x124>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10a      	bne.n	8005416 <xPortStartScheduler+0x26>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	613b      	str	r3, [r7, #16]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005416:	4b3e      	ldr	r3, [pc, #248]	; (8005510 <xPortStartScheduler+0x120>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a3f      	ldr	r2, [pc, #252]	; (8005518 <xPortStartScheduler+0x128>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d10a      	bne.n	8005436 <xPortStartScheduler+0x46>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	60fb      	str	r3, [r7, #12]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005436:	4b39      	ldr	r3, [pc, #228]	; (800551c <xPortStartScheduler+0x12c>)
 8005438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	22ff      	movs	r2, #255	; 0xff
 8005446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005458:	b2da      	uxtb	r2, r3
 800545a:	4b31      	ldr	r3, [pc, #196]	; (8005520 <xPortStartScheduler+0x130>)
 800545c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800545e:	4b31      	ldr	r3, [pc, #196]	; (8005524 <xPortStartScheduler+0x134>)
 8005460:	2207      	movs	r2, #7
 8005462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005464:	e009      	b.n	800547a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005466:	4b2f      	ldr	r3, [pc, #188]	; (8005524 <xPortStartScheduler+0x134>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3b01      	subs	r3, #1
 800546c:	4a2d      	ldr	r2, [pc, #180]	; (8005524 <xPortStartScheduler+0x134>)
 800546e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	b2db      	uxtb	r3, r3
 8005478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800547a:	78fb      	ldrb	r3, [r7, #3]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d0ef      	beq.n	8005466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005486:	4b27      	ldr	r3, [pc, #156]	; (8005524 <xPortStartScheduler+0x134>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f1c3 0307 	rsb	r3, r3, #7
 800548e:	2b04      	cmp	r3, #4
 8005490:	d00a      	beq.n	80054a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	60bb      	str	r3, [r7, #8]
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054a8:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <xPortStartScheduler+0x134>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <xPortStartScheduler+0x134>)
 80054b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054b2:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <xPortStartScheduler+0x134>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054ba:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <xPortStartScheduler+0x134>)
 80054bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054c6:	4b18      	ldr	r3, [pc, #96]	; (8005528 <xPortStartScheduler+0x138>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a17      	ldr	r2, [pc, #92]	; (8005528 <xPortStartScheduler+0x138>)
 80054cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054d2:	4b15      	ldr	r3, [pc, #84]	; (8005528 <xPortStartScheduler+0x138>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a14      	ldr	r2, [pc, #80]	; (8005528 <xPortStartScheduler+0x138>)
 80054d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054de:	f000 f8dd 	bl	800569c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <xPortStartScheduler+0x13c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054e8:	f000 f8fc 	bl	80056e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054ec:	4b10      	ldr	r3, [pc, #64]	; (8005530 <xPortStartScheduler+0x140>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a0f      	ldr	r2, [pc, #60]	; (8005530 <xPortStartScheduler+0x140>)
 80054f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054f8:	f7ff ff66 	bl	80053c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054fc:	f7fe ffae 	bl	800445c <vTaskSwitchContext>
	prvTaskExitError();
 8005500:	f7ff ff20 	bl	8005344 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	e000ed00 	.word	0xe000ed00
 8005514:	410fc271 	.word	0x410fc271
 8005518:	410fc270 	.word	0x410fc270
 800551c:	e000e400 	.word	0xe000e400
 8005520:	20000f10 	.word	0x20000f10
 8005524:	20000f14 	.word	0x20000f14
 8005528:	e000ed20 	.word	0xe000ed20
 800552c:	2000000c 	.word	0x2000000c
 8005530:	e000ef34 	.word	0xe000ef34

08005534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	607b      	str	r3, [r7, #4]
}
 800554c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800554e:	4b0f      	ldr	r3, [pc, #60]	; (800558c <vPortEnterCritical+0x58>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3301      	adds	r3, #1
 8005554:	4a0d      	ldr	r2, [pc, #52]	; (800558c <vPortEnterCritical+0x58>)
 8005556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005558:	4b0c      	ldr	r3, [pc, #48]	; (800558c <vPortEnterCritical+0x58>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10f      	bne.n	8005580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <vPortEnterCritical+0x5c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <vPortEnterCritical+0x4c>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	603b      	str	r3, [r7, #0]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <vPortEnterCritical+0x4a>
	}
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	2000000c 	.word	0x2000000c
 8005590:	e000ed04 	.word	0xe000ed04

08005594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800559a:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <vPortExitCritical+0x50>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <vPortExitCritical+0x24>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	607b      	str	r3, [r7, #4]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <vPortExitCritical+0x50>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3b01      	subs	r3, #1
 80055be:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <vPortExitCritical+0x50>)
 80055c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055c2:	4b08      	ldr	r3, [pc, #32]	; (80055e4 <vPortExitCritical+0x50>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d105      	bne.n	80055d6 <vPortExitCritical+0x42>
 80055ca:	2300      	movs	r3, #0
 80055cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f383 8811 	msr	BASEPRI, r3
}
 80055d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	2000000c 	.word	0x2000000c
	...

080055f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055f0:	f3ef 8009 	mrs	r0, PSP
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	4b15      	ldr	r3, [pc, #84]	; (8005650 <pxCurrentTCBConst>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	f01e 0f10 	tst.w	lr, #16
 8005600:	bf08      	it	eq
 8005602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560a:	6010      	str	r0, [r2, #0]
 800560c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005614:	f380 8811 	msr	BASEPRI, r0
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f7fe ff1c 	bl	800445c <vTaskSwitchContext>
 8005624:	f04f 0000 	mov.w	r0, #0
 8005628:	f380 8811 	msr	BASEPRI, r0
 800562c:	bc09      	pop	{r0, r3}
 800562e:	6819      	ldr	r1, [r3, #0]
 8005630:	6808      	ldr	r0, [r1, #0]
 8005632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005636:	f01e 0f10 	tst.w	lr, #16
 800563a:	bf08      	it	eq
 800563c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005640:	f380 8809 	msr	PSP, r0
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	f3af 8000 	nop.w

08005650 <pxCurrentTCBConst>:
 8005650:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop

08005658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	607b      	str	r3, [r7, #4]
}
 8005670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005672:	f7fe fe39 	bl	80042e8 <xTaskIncrementTick>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <xPortSysTickHandler+0x40>)
 800567e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	2300      	movs	r3, #0
 8005686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f383 8811 	msr	BASEPRI, r3
}
 800568e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	e000ed04 	.word	0xe000ed04

0800569c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <vPortSetupTimerInterrupt+0x34>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <vPortSetupTimerInterrupt+0x38>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056ac:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <vPortSetupTimerInterrupt+0x3c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <vPortSetupTimerInterrupt+0x40>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	099b      	lsrs	r3, r3, #6
 80056b8:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <vPortSetupTimerInterrupt+0x44>)
 80056ba:	3b01      	subs	r3, #1
 80056bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056be:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <vPortSetupTimerInterrupt+0x34>)
 80056c0:	2207      	movs	r2, #7
 80056c2:	601a      	str	r2, [r3, #0]
}
 80056c4:	bf00      	nop
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	e000e010 	.word	0xe000e010
 80056d4:	e000e018 	.word	0xe000e018
 80056d8:	20000000 	.word	0x20000000
 80056dc:	10624dd3 	.word	0x10624dd3
 80056e0:	e000e014 	.word	0xe000e014

080056e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056f4 <vPortEnableVFP+0x10>
 80056e8:	6801      	ldr	r1, [r0, #0]
 80056ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056ee:	6001      	str	r1, [r0, #0]
 80056f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056f2:	bf00      	nop
 80056f4:	e000ed88 	.word	0xe000ed88

080056f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056fe:	f3ef 8305 	mrs	r3, IPSR
 8005702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b0f      	cmp	r3, #15
 8005708:	d914      	bls.n	8005734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800570a:	4a17      	ldr	r2, [pc, #92]	; (8005768 <vPortValidateInterruptPriority+0x70>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005714:	4b15      	ldr	r3, [pc, #84]	; (800576c <vPortValidateInterruptPriority+0x74>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	7afa      	ldrb	r2, [r7, #11]
 800571a:	429a      	cmp	r2, r3
 800571c:	d20a      	bcs.n	8005734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	607b      	str	r3, [r7, #4]
}
 8005730:	bf00      	nop
 8005732:	e7fe      	b.n	8005732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005734:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <vPortValidateInterruptPriority+0x78>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <vPortValidateInterruptPriority+0x7c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d90a      	bls.n	800575a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	603b      	str	r3, [r7, #0]
}
 8005756:	bf00      	nop
 8005758:	e7fe      	b.n	8005758 <vPortValidateInterruptPriority+0x60>
	}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	e000e3f0 	.word	0xe000e3f0
 800576c:	20000f10 	.word	0x20000f10
 8005770:	e000ed0c 	.word	0xe000ed0c
 8005774:	20000f14 	.word	0x20000f14

08005778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005780:	2300      	movs	r3, #0
 8005782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005784:	f7fe fcf4 	bl	8004170 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005788:	4b5b      	ldr	r3, [pc, #364]	; (80058f8 <pvPortMalloc+0x180>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005790:	f000 f920 	bl	80059d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005794:	4b59      	ldr	r3, [pc, #356]	; (80058fc <pvPortMalloc+0x184>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	f040 8093 	bne.w	80058c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01d      	beq.n	80057e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057a8:	2208      	movs	r2, #8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4413      	add	r3, r2
 80057ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d014      	beq.n	80057e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f023 0307 	bic.w	r3, r3, #7
 80057c0:	3308      	adds	r3, #8
 80057c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <pvPortMalloc+0x6c>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	617b      	str	r3, [r7, #20]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d06e      	beq.n	80058c8 <pvPortMalloc+0x150>
 80057ea:	4b45      	ldr	r3, [pc, #276]	; (8005900 <pvPortMalloc+0x188>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d869      	bhi.n	80058c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057f4:	4b43      	ldr	r3, [pc, #268]	; (8005904 <pvPortMalloc+0x18c>)
 80057f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057f8:	4b42      	ldr	r3, [pc, #264]	; (8005904 <pvPortMalloc+0x18c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057fe:	e004      	b.n	800580a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d903      	bls.n	800581c <pvPortMalloc+0xa4>
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1f1      	bne.n	8005800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800581c:	4b36      	ldr	r3, [pc, #216]	; (80058f8 <pvPortMalloc+0x180>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005822:	429a      	cmp	r2, r3
 8005824:	d050      	beq.n	80058c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2208      	movs	r2, #8
 800582c:	4413      	add	r3, r2
 800582e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	1ad2      	subs	r2, r2, r3
 8005840:	2308      	movs	r3, #8
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	429a      	cmp	r2, r3
 8005846:	d91f      	bls.n	8005888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4413      	add	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <pvPortMalloc+0xf8>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	613b      	str	r3, [r7, #16]
}
 800586c:	bf00      	nop
 800586e:	e7fe      	b.n	800586e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	1ad2      	subs	r2, r2, r3
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005882:	69b8      	ldr	r0, [r7, #24]
 8005884:	f000 f908 	bl	8005a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005888:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <pvPortMalloc+0x188>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <pvPortMalloc+0x188>)
 8005894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005896:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <pvPortMalloc+0x188>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	4b1b      	ldr	r3, [pc, #108]	; (8005908 <pvPortMalloc+0x190>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d203      	bcs.n	80058aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058a2:	4b17      	ldr	r3, [pc, #92]	; (8005900 <pvPortMalloc+0x188>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a18      	ldr	r2, [pc, #96]	; (8005908 <pvPortMalloc+0x190>)
 80058a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	4b13      	ldr	r3, [pc, #76]	; (80058fc <pvPortMalloc+0x184>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058be:	4b13      	ldr	r3, [pc, #76]	; (800590c <pvPortMalloc+0x194>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3301      	adds	r3, #1
 80058c4:	4a11      	ldr	r2, [pc, #68]	; (800590c <pvPortMalloc+0x194>)
 80058c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058c8:	f7fe fc60 	bl	800418c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <pvPortMalloc+0x174>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	60fb      	str	r3, [r7, #12]
}
 80058e8:	bf00      	nop
 80058ea:	e7fe      	b.n	80058ea <pvPortMalloc+0x172>
	return pvReturn;
 80058ec:	69fb      	ldr	r3, [r7, #28]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3728      	adds	r7, #40	; 0x28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20004b20 	.word	0x20004b20
 80058fc:	20004b34 	.word	0x20004b34
 8005900:	20004b24 	.word	0x20004b24
 8005904:	20004b18 	.word	0x20004b18
 8005908:	20004b28 	.word	0x20004b28
 800590c:	20004b2c 	.word	0x20004b2c

08005910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d04d      	beq.n	80059be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005922:	2308      	movs	r3, #8
 8005924:	425b      	negs	r3, r3
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4413      	add	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <vPortFree+0xb8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4013      	ands	r3, r2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <vPortFree+0x44>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	60fb      	str	r3, [r7, #12]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <vPortFree+0x62>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60bb      	str	r3, [r7, #8]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	4b14      	ldr	r3, [pc, #80]	; (80059c8 <vPortFree+0xb8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01e      	beq.n	80059be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d11a      	bne.n	80059be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	4b0e      	ldr	r3, [pc, #56]	; (80059c8 <vPortFree+0xb8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	43db      	mvns	r3, r3
 8005992:	401a      	ands	r2, r3
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005998:	f7fe fbea 	bl	8004170 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <vPortFree+0xbc>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4413      	add	r3, r2
 80059a6:	4a09      	ldr	r2, [pc, #36]	; (80059cc <vPortFree+0xbc>)
 80059a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059aa:	6938      	ldr	r0, [r7, #16]
 80059ac:	f000 f874 	bl	8005a98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059b0:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <vPortFree+0xc0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3301      	adds	r3, #1
 80059b6:	4a06      	ldr	r2, [pc, #24]	; (80059d0 <vPortFree+0xc0>)
 80059b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059ba:	f7fe fbe7 	bl	800418c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059be:	bf00      	nop
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20004b34 	.word	0x20004b34
 80059cc:	20004b24 	.word	0x20004b24
 80059d0:	20004b30 	.word	0x20004b30

080059d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80059de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059e0:	4b27      	ldr	r3, [pc, #156]	; (8005a80 <prvHeapInit+0xac>)
 80059e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00c      	beq.n	8005a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3307      	adds	r3, #7
 80059f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0307 	bic.w	r3, r3, #7
 80059fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	4a1f      	ldr	r2, [pc, #124]	; (8005a80 <prvHeapInit+0xac>)
 8005a04:	4413      	add	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a0c:	4a1d      	ldr	r2, [pc, #116]	; (8005a84 <prvHeapInit+0xb0>)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a12:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <prvHeapInit+0xb0>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a20:	2208      	movs	r2, #8
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0307 	bic.w	r3, r3, #7
 8005a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <prvHeapInit+0xb4>)
 8005a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <prvHeapInit+0xb4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <prvHeapInit+0xb4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	1ad2      	subs	r2, r2, r3
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a54:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <prvHeapInit+0xb4>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <prvHeapInit+0xb8>)
 8005a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4a09      	ldr	r2, [pc, #36]	; (8005a90 <prvHeapInit+0xbc>)
 8005a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a6c:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <prvHeapInit+0xc0>)
 8005a6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a72:	601a      	str	r2, [r3, #0]
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	20000f18 	.word	0x20000f18
 8005a84:	20004b18 	.word	0x20004b18
 8005a88:	20004b20 	.word	0x20004b20
 8005a8c:	20004b28 	.word	0x20004b28
 8005a90:	20004b24 	.word	0x20004b24
 8005a94:	20004b34 	.word	0x20004b34

08005a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005aa0:	4b28      	ldr	r3, [pc, #160]	; (8005b44 <prvInsertBlockIntoFreeList+0xac>)
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	e002      	b.n	8005aac <prvInsertBlockIntoFreeList+0x14>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d8f7      	bhi.n	8005aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d108      	bne.n	8005ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	441a      	add	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	441a      	add	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d118      	bne.n	8005b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b15      	ldr	r3, [pc, #84]	; (8005b48 <prvInsertBlockIntoFreeList+0xb0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d00d      	beq.n	8005b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	441a      	add	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	e008      	b.n	8005b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b16:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <prvInsertBlockIntoFreeList+0xb0>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	e003      	b.n	8005b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d002      	beq.n	8005b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20004b18 	.word	0x20004b18
 8005b48:	20004b20 	.word	0x20004b20

08005b4c <__errno>:
 8005b4c:	4b01      	ldr	r3, [pc, #4]	; (8005b54 <__errno+0x8>)
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000010 	.word	0x20000010

08005b58 <__libc_init_array>:
 8005b58:	b570      	push	{r4, r5, r6, lr}
 8005b5a:	4d0d      	ldr	r5, [pc, #52]	; (8005b90 <__libc_init_array+0x38>)
 8005b5c:	4c0d      	ldr	r4, [pc, #52]	; (8005b94 <__libc_init_array+0x3c>)
 8005b5e:	1b64      	subs	r4, r4, r5
 8005b60:	10a4      	asrs	r4, r4, #2
 8005b62:	2600      	movs	r6, #0
 8005b64:	42a6      	cmp	r6, r4
 8005b66:	d109      	bne.n	8005b7c <__libc_init_array+0x24>
 8005b68:	4d0b      	ldr	r5, [pc, #44]	; (8005b98 <__libc_init_array+0x40>)
 8005b6a:	4c0c      	ldr	r4, [pc, #48]	; (8005b9c <__libc_init_array+0x44>)
 8005b6c:	f000 fcf8 	bl	8006560 <_init>
 8005b70:	1b64      	subs	r4, r4, r5
 8005b72:	10a4      	asrs	r4, r4, #2
 8005b74:	2600      	movs	r6, #0
 8005b76:	42a6      	cmp	r6, r4
 8005b78:	d105      	bne.n	8005b86 <__libc_init_array+0x2e>
 8005b7a:	bd70      	pop	{r4, r5, r6, pc}
 8005b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b80:	4798      	blx	r3
 8005b82:	3601      	adds	r6, #1
 8005b84:	e7ee      	b.n	8005b64 <__libc_init_array+0xc>
 8005b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8a:	4798      	blx	r3
 8005b8c:	3601      	adds	r6, #1
 8005b8e:	e7f2      	b.n	8005b76 <__libc_init_array+0x1e>
 8005b90:	080066b0 	.word	0x080066b0
 8005b94:	080066b0 	.word	0x080066b0
 8005b98:	080066b0 	.word	0x080066b0
 8005b9c:	080066b4 	.word	0x080066b4

08005ba0 <__retarget_lock_acquire_recursive>:
 8005ba0:	4770      	bx	lr

08005ba2 <__retarget_lock_release_recursive>:
 8005ba2:	4770      	bx	lr

08005ba4 <memcpy>:
 8005ba4:	440a      	add	r2, r1
 8005ba6:	4291      	cmp	r1, r2
 8005ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bac:	d100      	bne.n	8005bb0 <memcpy+0xc>
 8005bae:	4770      	bx	lr
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bba:	4291      	cmp	r1, r2
 8005bbc:	d1f9      	bne.n	8005bb2 <memcpy+0xe>
 8005bbe:	bd10      	pop	{r4, pc}

08005bc0 <memset>:
 8005bc0:	4402      	add	r2, r0
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d100      	bne.n	8005bca <memset+0xa>
 8005bc8:	4770      	bx	lr
 8005bca:	f803 1b01 	strb.w	r1, [r3], #1
 8005bce:	e7f9      	b.n	8005bc4 <memset+0x4>

08005bd0 <sbrk_aligned>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	4e0e      	ldr	r6, [pc, #56]	; (8005c0c <sbrk_aligned+0x3c>)
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	6831      	ldr	r1, [r6, #0]
 8005bd8:	4605      	mov	r5, r0
 8005bda:	b911      	cbnz	r1, 8005be2 <sbrk_aligned+0x12>
 8005bdc:	f000 f8f6 	bl	8005dcc <_sbrk_r>
 8005be0:	6030      	str	r0, [r6, #0]
 8005be2:	4621      	mov	r1, r4
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 f8f1 	bl	8005dcc <_sbrk_r>
 8005bea:	1c43      	adds	r3, r0, #1
 8005bec:	d00a      	beq.n	8005c04 <sbrk_aligned+0x34>
 8005bee:	1cc4      	adds	r4, r0, #3
 8005bf0:	f024 0403 	bic.w	r4, r4, #3
 8005bf4:	42a0      	cmp	r0, r4
 8005bf6:	d007      	beq.n	8005c08 <sbrk_aligned+0x38>
 8005bf8:	1a21      	subs	r1, r4, r0
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f000 f8e6 	bl	8005dcc <_sbrk_r>
 8005c00:	3001      	adds	r0, #1
 8005c02:	d101      	bne.n	8005c08 <sbrk_aligned+0x38>
 8005c04:	f04f 34ff 	mov.w	r4, #4294967295
 8005c08:	4620      	mov	r0, r4
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	20004b40 	.word	0x20004b40

08005c10 <_malloc_r>:
 8005c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c14:	1ccd      	adds	r5, r1, #3
 8005c16:	f025 0503 	bic.w	r5, r5, #3
 8005c1a:	3508      	adds	r5, #8
 8005c1c:	2d0c      	cmp	r5, #12
 8005c1e:	bf38      	it	cc
 8005c20:	250c      	movcc	r5, #12
 8005c22:	2d00      	cmp	r5, #0
 8005c24:	4607      	mov	r7, r0
 8005c26:	db01      	blt.n	8005c2c <_malloc_r+0x1c>
 8005c28:	42a9      	cmp	r1, r5
 8005c2a:	d905      	bls.n	8005c38 <_malloc_r+0x28>
 8005c2c:	230c      	movs	r3, #12
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	2600      	movs	r6, #0
 8005c32:	4630      	mov	r0, r6
 8005c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c38:	4e2e      	ldr	r6, [pc, #184]	; (8005cf4 <_malloc_r+0xe4>)
 8005c3a:	f000 f8f7 	bl	8005e2c <__malloc_lock>
 8005c3e:	6833      	ldr	r3, [r6, #0]
 8005c40:	461c      	mov	r4, r3
 8005c42:	bb34      	cbnz	r4, 8005c92 <_malloc_r+0x82>
 8005c44:	4629      	mov	r1, r5
 8005c46:	4638      	mov	r0, r7
 8005c48:	f7ff ffc2 	bl	8005bd0 <sbrk_aligned>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	4604      	mov	r4, r0
 8005c50:	d14d      	bne.n	8005cee <_malloc_r+0xde>
 8005c52:	6834      	ldr	r4, [r6, #0]
 8005c54:	4626      	mov	r6, r4
 8005c56:	2e00      	cmp	r6, #0
 8005c58:	d140      	bne.n	8005cdc <_malloc_r+0xcc>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4638      	mov	r0, r7
 8005c60:	eb04 0803 	add.w	r8, r4, r3
 8005c64:	f000 f8b2 	bl	8005dcc <_sbrk_r>
 8005c68:	4580      	cmp	r8, r0
 8005c6a:	d13a      	bne.n	8005ce2 <_malloc_r+0xd2>
 8005c6c:	6821      	ldr	r1, [r4, #0]
 8005c6e:	3503      	adds	r5, #3
 8005c70:	1a6d      	subs	r5, r5, r1
 8005c72:	f025 0503 	bic.w	r5, r5, #3
 8005c76:	3508      	adds	r5, #8
 8005c78:	2d0c      	cmp	r5, #12
 8005c7a:	bf38      	it	cc
 8005c7c:	250c      	movcc	r5, #12
 8005c7e:	4629      	mov	r1, r5
 8005c80:	4638      	mov	r0, r7
 8005c82:	f7ff ffa5 	bl	8005bd0 <sbrk_aligned>
 8005c86:	3001      	adds	r0, #1
 8005c88:	d02b      	beq.n	8005ce2 <_malloc_r+0xd2>
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	442b      	add	r3, r5
 8005c8e:	6023      	str	r3, [r4, #0]
 8005c90:	e00e      	b.n	8005cb0 <_malloc_r+0xa0>
 8005c92:	6822      	ldr	r2, [r4, #0]
 8005c94:	1b52      	subs	r2, r2, r5
 8005c96:	d41e      	bmi.n	8005cd6 <_malloc_r+0xc6>
 8005c98:	2a0b      	cmp	r2, #11
 8005c9a:	d916      	bls.n	8005cca <_malloc_r+0xba>
 8005c9c:	1961      	adds	r1, r4, r5
 8005c9e:	42a3      	cmp	r3, r4
 8005ca0:	6025      	str	r5, [r4, #0]
 8005ca2:	bf18      	it	ne
 8005ca4:	6059      	strne	r1, [r3, #4]
 8005ca6:	6863      	ldr	r3, [r4, #4]
 8005ca8:	bf08      	it	eq
 8005caa:	6031      	streq	r1, [r6, #0]
 8005cac:	5162      	str	r2, [r4, r5]
 8005cae:	604b      	str	r3, [r1, #4]
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	f104 060b 	add.w	r6, r4, #11
 8005cb6:	f000 f8bf 	bl	8005e38 <__malloc_unlock>
 8005cba:	f026 0607 	bic.w	r6, r6, #7
 8005cbe:	1d23      	adds	r3, r4, #4
 8005cc0:	1af2      	subs	r2, r6, r3
 8005cc2:	d0b6      	beq.n	8005c32 <_malloc_r+0x22>
 8005cc4:	1b9b      	subs	r3, r3, r6
 8005cc6:	50a3      	str	r3, [r4, r2]
 8005cc8:	e7b3      	b.n	8005c32 <_malloc_r+0x22>
 8005cca:	6862      	ldr	r2, [r4, #4]
 8005ccc:	42a3      	cmp	r3, r4
 8005cce:	bf0c      	ite	eq
 8005cd0:	6032      	streq	r2, [r6, #0]
 8005cd2:	605a      	strne	r2, [r3, #4]
 8005cd4:	e7ec      	b.n	8005cb0 <_malloc_r+0xa0>
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	6864      	ldr	r4, [r4, #4]
 8005cda:	e7b2      	b.n	8005c42 <_malloc_r+0x32>
 8005cdc:	4634      	mov	r4, r6
 8005cde:	6876      	ldr	r6, [r6, #4]
 8005ce0:	e7b9      	b.n	8005c56 <_malloc_r+0x46>
 8005ce2:	230c      	movs	r3, #12
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	f000 f8a6 	bl	8005e38 <__malloc_unlock>
 8005cec:	e7a1      	b.n	8005c32 <_malloc_r+0x22>
 8005cee:	6025      	str	r5, [r4, #0]
 8005cf0:	e7de      	b.n	8005cb0 <_malloc_r+0xa0>
 8005cf2:	bf00      	nop
 8005cf4:	20004b3c 	.word	0x20004b3c

08005cf8 <cleanup_glue>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	6809      	ldr	r1, [r1, #0]
 8005cfe:	4605      	mov	r5, r0
 8005d00:	b109      	cbz	r1, 8005d06 <cleanup_glue+0xe>
 8005d02:	f7ff fff9 	bl	8005cf8 <cleanup_glue>
 8005d06:	4621      	mov	r1, r4
 8005d08:	4628      	mov	r0, r5
 8005d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d0e:	f000 b899 	b.w	8005e44 <_free_r>
	...

08005d14 <_reclaim_reent>:
 8005d14:	4b2c      	ldr	r3, [pc, #176]	; (8005dc8 <_reclaim_reent+0xb4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4283      	cmp	r3, r0
 8005d1a:	b570      	push	{r4, r5, r6, lr}
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	d051      	beq.n	8005dc4 <_reclaim_reent+0xb0>
 8005d20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d22:	b143      	cbz	r3, 8005d36 <_reclaim_reent+0x22>
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d14a      	bne.n	8005dc0 <_reclaim_reent+0xac>
 8005d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d2c:	6819      	ldr	r1, [r3, #0]
 8005d2e:	b111      	cbz	r1, 8005d36 <_reclaim_reent+0x22>
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 f887 	bl	8005e44 <_free_r>
 8005d36:	6961      	ldr	r1, [r4, #20]
 8005d38:	b111      	cbz	r1, 8005d40 <_reclaim_reent+0x2c>
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 f882 	bl	8005e44 <_free_r>
 8005d40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d42:	b111      	cbz	r1, 8005d4a <_reclaim_reent+0x36>
 8005d44:	4620      	mov	r0, r4
 8005d46:	f000 f87d 	bl	8005e44 <_free_r>
 8005d4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005d4c:	b111      	cbz	r1, 8005d54 <_reclaim_reent+0x40>
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f000 f878 	bl	8005e44 <_free_r>
 8005d54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005d56:	b111      	cbz	r1, 8005d5e <_reclaim_reent+0x4a>
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 f873 	bl	8005e44 <_free_r>
 8005d5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d60:	b111      	cbz	r1, 8005d68 <_reclaim_reent+0x54>
 8005d62:	4620      	mov	r0, r4
 8005d64:	f000 f86e 	bl	8005e44 <_free_r>
 8005d68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005d6a:	b111      	cbz	r1, 8005d72 <_reclaim_reent+0x5e>
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f000 f869 	bl	8005e44 <_free_r>
 8005d72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005d74:	b111      	cbz	r1, 8005d7c <_reclaim_reent+0x68>
 8005d76:	4620      	mov	r0, r4
 8005d78:	f000 f864 	bl	8005e44 <_free_r>
 8005d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d7e:	b111      	cbz	r1, 8005d86 <_reclaim_reent+0x72>
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 f85f 	bl	8005e44 <_free_r>
 8005d86:	69a3      	ldr	r3, [r4, #24]
 8005d88:	b1e3      	cbz	r3, 8005dc4 <_reclaim_reent+0xb0>
 8005d8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	4798      	blx	r3
 8005d90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005d92:	b1b9      	cbz	r1, 8005dc4 <_reclaim_reent+0xb0>
 8005d94:	4620      	mov	r0, r4
 8005d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d9a:	f7ff bfad 	b.w	8005cf8 <cleanup_glue>
 8005d9e:	5949      	ldr	r1, [r1, r5]
 8005da0:	b941      	cbnz	r1, 8005db4 <_reclaim_reent+0xa0>
 8005da2:	3504      	adds	r5, #4
 8005da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da6:	2d80      	cmp	r5, #128	; 0x80
 8005da8:	68d9      	ldr	r1, [r3, #12]
 8005daa:	d1f8      	bne.n	8005d9e <_reclaim_reent+0x8a>
 8005dac:	4620      	mov	r0, r4
 8005dae:	f000 f849 	bl	8005e44 <_free_r>
 8005db2:	e7ba      	b.n	8005d2a <_reclaim_reent+0x16>
 8005db4:	680e      	ldr	r6, [r1, #0]
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 f844 	bl	8005e44 <_free_r>
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	e7ef      	b.n	8005da0 <_reclaim_reent+0x8c>
 8005dc0:	2500      	movs	r5, #0
 8005dc2:	e7ef      	b.n	8005da4 <_reclaim_reent+0x90>
 8005dc4:	bd70      	pop	{r4, r5, r6, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000010 	.word	0x20000010

08005dcc <_sbrk_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d06      	ldr	r5, [pc, #24]	; (8005de8 <_sbrk_r+0x1c>)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	f7fa fe98 	bl	8000b0c <_sbrk>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_sbrk_r+0x1a>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_sbrk_r+0x1a>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	20004b44 	.word	0x20004b44

08005dec <siprintf>:
 8005dec:	b40e      	push	{r1, r2, r3}
 8005dee:	b500      	push	{lr}
 8005df0:	b09c      	sub	sp, #112	; 0x70
 8005df2:	ab1d      	add	r3, sp, #116	; 0x74
 8005df4:	9002      	str	r0, [sp, #8]
 8005df6:	9006      	str	r0, [sp, #24]
 8005df8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dfc:	4809      	ldr	r0, [pc, #36]	; (8005e24 <siprintf+0x38>)
 8005dfe:	9107      	str	r1, [sp, #28]
 8005e00:	9104      	str	r1, [sp, #16]
 8005e02:	4909      	ldr	r1, [pc, #36]	; (8005e28 <siprintf+0x3c>)
 8005e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e08:	9105      	str	r1, [sp, #20]
 8005e0a:	6800      	ldr	r0, [r0, #0]
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	a902      	add	r1, sp, #8
 8005e10:	f000 f8c0 	bl	8005f94 <_svfiprintf_r>
 8005e14:	9b02      	ldr	r3, [sp, #8]
 8005e16:	2200      	movs	r2, #0
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	b01c      	add	sp, #112	; 0x70
 8005e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e20:	b003      	add	sp, #12
 8005e22:	4770      	bx	lr
 8005e24:	20000010 	.word	0x20000010
 8005e28:	ffff0208 	.word	0xffff0208

08005e2c <__malloc_lock>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	; (8005e34 <__malloc_lock+0x8>)
 8005e2e:	f7ff beb7 	b.w	8005ba0 <__retarget_lock_acquire_recursive>
 8005e32:	bf00      	nop
 8005e34:	20004b38 	.word	0x20004b38

08005e38 <__malloc_unlock>:
 8005e38:	4801      	ldr	r0, [pc, #4]	; (8005e40 <__malloc_unlock+0x8>)
 8005e3a:	f7ff beb2 	b.w	8005ba2 <__retarget_lock_release_recursive>
 8005e3e:	bf00      	nop
 8005e40:	20004b38 	.word	0x20004b38

08005e44 <_free_r>:
 8005e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e46:	2900      	cmp	r1, #0
 8005e48:	d044      	beq.n	8005ed4 <_free_r+0x90>
 8005e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e4e:	9001      	str	r0, [sp, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f1a1 0404 	sub.w	r4, r1, #4
 8005e56:	bfb8      	it	lt
 8005e58:	18e4      	addlt	r4, r4, r3
 8005e5a:	f7ff ffe7 	bl	8005e2c <__malloc_lock>
 8005e5e:	4a1e      	ldr	r2, [pc, #120]	; (8005ed8 <_free_r+0x94>)
 8005e60:	9801      	ldr	r0, [sp, #4]
 8005e62:	6813      	ldr	r3, [r2, #0]
 8005e64:	b933      	cbnz	r3, 8005e74 <_free_r+0x30>
 8005e66:	6063      	str	r3, [r4, #4]
 8005e68:	6014      	str	r4, [r2, #0]
 8005e6a:	b003      	add	sp, #12
 8005e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e70:	f7ff bfe2 	b.w	8005e38 <__malloc_unlock>
 8005e74:	42a3      	cmp	r3, r4
 8005e76:	d908      	bls.n	8005e8a <_free_r+0x46>
 8005e78:	6825      	ldr	r5, [r4, #0]
 8005e7a:	1961      	adds	r1, r4, r5
 8005e7c:	428b      	cmp	r3, r1
 8005e7e:	bf01      	itttt	eq
 8005e80:	6819      	ldreq	r1, [r3, #0]
 8005e82:	685b      	ldreq	r3, [r3, #4]
 8005e84:	1949      	addeq	r1, r1, r5
 8005e86:	6021      	streq	r1, [r4, #0]
 8005e88:	e7ed      	b.n	8005e66 <_free_r+0x22>
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	b10b      	cbz	r3, 8005e94 <_free_r+0x50>
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	d9fa      	bls.n	8005e8a <_free_r+0x46>
 8005e94:	6811      	ldr	r1, [r2, #0]
 8005e96:	1855      	adds	r5, r2, r1
 8005e98:	42a5      	cmp	r5, r4
 8005e9a:	d10b      	bne.n	8005eb4 <_free_r+0x70>
 8005e9c:	6824      	ldr	r4, [r4, #0]
 8005e9e:	4421      	add	r1, r4
 8005ea0:	1854      	adds	r4, r2, r1
 8005ea2:	42a3      	cmp	r3, r4
 8005ea4:	6011      	str	r1, [r2, #0]
 8005ea6:	d1e0      	bne.n	8005e6a <_free_r+0x26>
 8005ea8:	681c      	ldr	r4, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	6053      	str	r3, [r2, #4]
 8005eae:	4421      	add	r1, r4
 8005eb0:	6011      	str	r1, [r2, #0]
 8005eb2:	e7da      	b.n	8005e6a <_free_r+0x26>
 8005eb4:	d902      	bls.n	8005ebc <_free_r+0x78>
 8005eb6:	230c      	movs	r3, #12
 8005eb8:	6003      	str	r3, [r0, #0]
 8005eba:	e7d6      	b.n	8005e6a <_free_r+0x26>
 8005ebc:	6825      	ldr	r5, [r4, #0]
 8005ebe:	1961      	adds	r1, r4, r5
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	bf04      	itt	eq
 8005ec4:	6819      	ldreq	r1, [r3, #0]
 8005ec6:	685b      	ldreq	r3, [r3, #4]
 8005ec8:	6063      	str	r3, [r4, #4]
 8005eca:	bf04      	itt	eq
 8005ecc:	1949      	addeq	r1, r1, r5
 8005ece:	6021      	streq	r1, [r4, #0]
 8005ed0:	6054      	str	r4, [r2, #4]
 8005ed2:	e7ca      	b.n	8005e6a <_free_r+0x26>
 8005ed4:	b003      	add	sp, #12
 8005ed6:	bd30      	pop	{r4, r5, pc}
 8005ed8:	20004b3c 	.word	0x20004b3c

08005edc <__ssputs_r>:
 8005edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee0:	688e      	ldr	r6, [r1, #8]
 8005ee2:	429e      	cmp	r6, r3
 8005ee4:	4682      	mov	sl, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	4690      	mov	r8, r2
 8005eea:	461f      	mov	r7, r3
 8005eec:	d838      	bhi.n	8005f60 <__ssputs_r+0x84>
 8005eee:	898a      	ldrh	r2, [r1, #12]
 8005ef0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ef4:	d032      	beq.n	8005f5c <__ssputs_r+0x80>
 8005ef6:	6825      	ldr	r5, [r4, #0]
 8005ef8:	6909      	ldr	r1, [r1, #16]
 8005efa:	eba5 0901 	sub.w	r9, r5, r1
 8005efe:	6965      	ldr	r5, [r4, #20]
 8005f00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f08:	3301      	adds	r3, #1
 8005f0a:	444b      	add	r3, r9
 8005f0c:	106d      	asrs	r5, r5, #1
 8005f0e:	429d      	cmp	r5, r3
 8005f10:	bf38      	it	cc
 8005f12:	461d      	movcc	r5, r3
 8005f14:	0553      	lsls	r3, r2, #21
 8005f16:	d531      	bpl.n	8005f7c <__ssputs_r+0xa0>
 8005f18:	4629      	mov	r1, r5
 8005f1a:	f7ff fe79 	bl	8005c10 <_malloc_r>
 8005f1e:	4606      	mov	r6, r0
 8005f20:	b950      	cbnz	r0, 8005f38 <__ssputs_r+0x5c>
 8005f22:	230c      	movs	r3, #12
 8005f24:	f8ca 3000 	str.w	r3, [sl]
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f2e:	81a3      	strh	r3, [r4, #12]
 8005f30:	f04f 30ff 	mov.w	r0, #4294967295
 8005f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f38:	6921      	ldr	r1, [r4, #16]
 8005f3a:	464a      	mov	r2, r9
 8005f3c:	f7ff fe32 	bl	8005ba4 <memcpy>
 8005f40:	89a3      	ldrh	r3, [r4, #12]
 8005f42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4a:	81a3      	strh	r3, [r4, #12]
 8005f4c:	6126      	str	r6, [r4, #16]
 8005f4e:	6165      	str	r5, [r4, #20]
 8005f50:	444e      	add	r6, r9
 8005f52:	eba5 0509 	sub.w	r5, r5, r9
 8005f56:	6026      	str	r6, [r4, #0]
 8005f58:	60a5      	str	r5, [r4, #8]
 8005f5a:	463e      	mov	r6, r7
 8005f5c:	42be      	cmp	r6, r7
 8005f5e:	d900      	bls.n	8005f62 <__ssputs_r+0x86>
 8005f60:	463e      	mov	r6, r7
 8005f62:	6820      	ldr	r0, [r4, #0]
 8005f64:	4632      	mov	r2, r6
 8005f66:	4641      	mov	r1, r8
 8005f68:	f000 faa8 	bl	80064bc <memmove>
 8005f6c:	68a3      	ldr	r3, [r4, #8]
 8005f6e:	1b9b      	subs	r3, r3, r6
 8005f70:	60a3      	str	r3, [r4, #8]
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	4433      	add	r3, r6
 8005f76:	6023      	str	r3, [r4, #0]
 8005f78:	2000      	movs	r0, #0
 8005f7a:	e7db      	b.n	8005f34 <__ssputs_r+0x58>
 8005f7c:	462a      	mov	r2, r5
 8005f7e:	f000 fab7 	bl	80064f0 <_realloc_r>
 8005f82:	4606      	mov	r6, r0
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d1e1      	bne.n	8005f4c <__ssputs_r+0x70>
 8005f88:	6921      	ldr	r1, [r4, #16]
 8005f8a:	4650      	mov	r0, sl
 8005f8c:	f7ff ff5a 	bl	8005e44 <_free_r>
 8005f90:	e7c7      	b.n	8005f22 <__ssputs_r+0x46>
	...

08005f94 <_svfiprintf_r>:
 8005f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f98:	4698      	mov	r8, r3
 8005f9a:	898b      	ldrh	r3, [r1, #12]
 8005f9c:	061b      	lsls	r3, r3, #24
 8005f9e:	b09d      	sub	sp, #116	; 0x74
 8005fa0:	4607      	mov	r7, r0
 8005fa2:	460d      	mov	r5, r1
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	d50e      	bpl.n	8005fc6 <_svfiprintf_r+0x32>
 8005fa8:	690b      	ldr	r3, [r1, #16]
 8005faa:	b963      	cbnz	r3, 8005fc6 <_svfiprintf_r+0x32>
 8005fac:	2140      	movs	r1, #64	; 0x40
 8005fae:	f7ff fe2f 	bl	8005c10 <_malloc_r>
 8005fb2:	6028      	str	r0, [r5, #0]
 8005fb4:	6128      	str	r0, [r5, #16]
 8005fb6:	b920      	cbnz	r0, 8005fc2 <_svfiprintf_r+0x2e>
 8005fb8:	230c      	movs	r3, #12
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	e0d1      	b.n	8006166 <_svfiprintf_r+0x1d2>
 8005fc2:	2340      	movs	r3, #64	; 0x40
 8005fc4:	616b      	str	r3, [r5, #20]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fca:	2320      	movs	r3, #32
 8005fcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fd4:	2330      	movs	r3, #48	; 0x30
 8005fd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006180 <_svfiprintf_r+0x1ec>
 8005fda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fde:	f04f 0901 	mov.w	r9, #1
 8005fe2:	4623      	mov	r3, r4
 8005fe4:	469a      	mov	sl, r3
 8005fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fea:	b10a      	cbz	r2, 8005ff0 <_svfiprintf_r+0x5c>
 8005fec:	2a25      	cmp	r2, #37	; 0x25
 8005fee:	d1f9      	bne.n	8005fe4 <_svfiprintf_r+0x50>
 8005ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ff4:	d00b      	beq.n	800600e <_svfiprintf_r+0x7a>
 8005ff6:	465b      	mov	r3, fp
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f7ff ff6d 	bl	8005edc <__ssputs_r>
 8006002:	3001      	adds	r0, #1
 8006004:	f000 80aa 	beq.w	800615c <_svfiprintf_r+0x1c8>
 8006008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800600a:	445a      	add	r2, fp
 800600c:	9209      	str	r2, [sp, #36]	; 0x24
 800600e:	f89a 3000 	ldrb.w	r3, [sl]
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 80a2 	beq.w	800615c <_svfiprintf_r+0x1c8>
 8006018:	2300      	movs	r3, #0
 800601a:	f04f 32ff 	mov.w	r2, #4294967295
 800601e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006022:	f10a 0a01 	add.w	sl, sl, #1
 8006026:	9304      	str	r3, [sp, #16]
 8006028:	9307      	str	r3, [sp, #28]
 800602a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800602e:	931a      	str	r3, [sp, #104]	; 0x68
 8006030:	4654      	mov	r4, sl
 8006032:	2205      	movs	r2, #5
 8006034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006038:	4851      	ldr	r0, [pc, #324]	; (8006180 <_svfiprintf_r+0x1ec>)
 800603a:	f7fa f8d1 	bl	80001e0 <memchr>
 800603e:	9a04      	ldr	r2, [sp, #16]
 8006040:	b9d8      	cbnz	r0, 800607a <_svfiprintf_r+0xe6>
 8006042:	06d0      	lsls	r0, r2, #27
 8006044:	bf44      	itt	mi
 8006046:	2320      	movmi	r3, #32
 8006048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800604c:	0711      	lsls	r1, r2, #28
 800604e:	bf44      	itt	mi
 8006050:	232b      	movmi	r3, #43	; 0x2b
 8006052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006056:	f89a 3000 	ldrb.w	r3, [sl]
 800605a:	2b2a      	cmp	r3, #42	; 0x2a
 800605c:	d015      	beq.n	800608a <_svfiprintf_r+0xf6>
 800605e:	9a07      	ldr	r2, [sp, #28]
 8006060:	4654      	mov	r4, sl
 8006062:	2000      	movs	r0, #0
 8006064:	f04f 0c0a 	mov.w	ip, #10
 8006068:	4621      	mov	r1, r4
 800606a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800606e:	3b30      	subs	r3, #48	; 0x30
 8006070:	2b09      	cmp	r3, #9
 8006072:	d94e      	bls.n	8006112 <_svfiprintf_r+0x17e>
 8006074:	b1b0      	cbz	r0, 80060a4 <_svfiprintf_r+0x110>
 8006076:	9207      	str	r2, [sp, #28]
 8006078:	e014      	b.n	80060a4 <_svfiprintf_r+0x110>
 800607a:	eba0 0308 	sub.w	r3, r0, r8
 800607e:	fa09 f303 	lsl.w	r3, r9, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	9304      	str	r3, [sp, #16]
 8006086:	46a2      	mov	sl, r4
 8006088:	e7d2      	b.n	8006030 <_svfiprintf_r+0x9c>
 800608a:	9b03      	ldr	r3, [sp, #12]
 800608c:	1d19      	adds	r1, r3, #4
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	9103      	str	r1, [sp, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	bfbb      	ittet	lt
 8006096:	425b      	neglt	r3, r3
 8006098:	f042 0202 	orrlt.w	r2, r2, #2
 800609c:	9307      	strge	r3, [sp, #28]
 800609e:	9307      	strlt	r3, [sp, #28]
 80060a0:	bfb8      	it	lt
 80060a2:	9204      	strlt	r2, [sp, #16]
 80060a4:	7823      	ldrb	r3, [r4, #0]
 80060a6:	2b2e      	cmp	r3, #46	; 0x2e
 80060a8:	d10c      	bne.n	80060c4 <_svfiprintf_r+0x130>
 80060aa:	7863      	ldrb	r3, [r4, #1]
 80060ac:	2b2a      	cmp	r3, #42	; 0x2a
 80060ae:	d135      	bne.n	800611c <_svfiprintf_r+0x188>
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	1d1a      	adds	r2, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	9203      	str	r2, [sp, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bfb8      	it	lt
 80060bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80060c0:	3402      	adds	r4, #2
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006190 <_svfiprintf_r+0x1fc>
 80060c8:	7821      	ldrb	r1, [r4, #0]
 80060ca:	2203      	movs	r2, #3
 80060cc:	4650      	mov	r0, sl
 80060ce:	f7fa f887 	bl	80001e0 <memchr>
 80060d2:	b140      	cbz	r0, 80060e6 <_svfiprintf_r+0x152>
 80060d4:	2340      	movs	r3, #64	; 0x40
 80060d6:	eba0 000a 	sub.w	r0, r0, sl
 80060da:	fa03 f000 	lsl.w	r0, r3, r0
 80060de:	9b04      	ldr	r3, [sp, #16]
 80060e0:	4303      	orrs	r3, r0
 80060e2:	3401      	adds	r4, #1
 80060e4:	9304      	str	r3, [sp, #16]
 80060e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ea:	4826      	ldr	r0, [pc, #152]	; (8006184 <_svfiprintf_r+0x1f0>)
 80060ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060f0:	2206      	movs	r2, #6
 80060f2:	f7fa f875 	bl	80001e0 <memchr>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d038      	beq.n	800616c <_svfiprintf_r+0x1d8>
 80060fa:	4b23      	ldr	r3, [pc, #140]	; (8006188 <_svfiprintf_r+0x1f4>)
 80060fc:	bb1b      	cbnz	r3, 8006146 <_svfiprintf_r+0x1b2>
 80060fe:	9b03      	ldr	r3, [sp, #12]
 8006100:	3307      	adds	r3, #7
 8006102:	f023 0307 	bic.w	r3, r3, #7
 8006106:	3308      	adds	r3, #8
 8006108:	9303      	str	r3, [sp, #12]
 800610a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800610c:	4433      	add	r3, r6
 800610e:	9309      	str	r3, [sp, #36]	; 0x24
 8006110:	e767      	b.n	8005fe2 <_svfiprintf_r+0x4e>
 8006112:	fb0c 3202 	mla	r2, ip, r2, r3
 8006116:	460c      	mov	r4, r1
 8006118:	2001      	movs	r0, #1
 800611a:	e7a5      	b.n	8006068 <_svfiprintf_r+0xd4>
 800611c:	2300      	movs	r3, #0
 800611e:	3401      	adds	r4, #1
 8006120:	9305      	str	r3, [sp, #20]
 8006122:	4619      	mov	r1, r3
 8006124:	f04f 0c0a 	mov.w	ip, #10
 8006128:	4620      	mov	r0, r4
 800612a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800612e:	3a30      	subs	r2, #48	; 0x30
 8006130:	2a09      	cmp	r2, #9
 8006132:	d903      	bls.n	800613c <_svfiprintf_r+0x1a8>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0c5      	beq.n	80060c4 <_svfiprintf_r+0x130>
 8006138:	9105      	str	r1, [sp, #20]
 800613a:	e7c3      	b.n	80060c4 <_svfiprintf_r+0x130>
 800613c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006140:	4604      	mov	r4, r0
 8006142:	2301      	movs	r3, #1
 8006144:	e7f0      	b.n	8006128 <_svfiprintf_r+0x194>
 8006146:	ab03      	add	r3, sp, #12
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	462a      	mov	r2, r5
 800614c:	4b0f      	ldr	r3, [pc, #60]	; (800618c <_svfiprintf_r+0x1f8>)
 800614e:	a904      	add	r1, sp, #16
 8006150:	4638      	mov	r0, r7
 8006152:	f3af 8000 	nop.w
 8006156:	1c42      	adds	r2, r0, #1
 8006158:	4606      	mov	r6, r0
 800615a:	d1d6      	bne.n	800610a <_svfiprintf_r+0x176>
 800615c:	89ab      	ldrh	r3, [r5, #12]
 800615e:	065b      	lsls	r3, r3, #25
 8006160:	f53f af2c 	bmi.w	8005fbc <_svfiprintf_r+0x28>
 8006164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006166:	b01d      	add	sp, #116	; 0x74
 8006168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616c:	ab03      	add	r3, sp, #12
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	462a      	mov	r2, r5
 8006172:	4b06      	ldr	r3, [pc, #24]	; (800618c <_svfiprintf_r+0x1f8>)
 8006174:	a904      	add	r1, sp, #16
 8006176:	4638      	mov	r0, r7
 8006178:	f000 f87a 	bl	8006270 <_printf_i>
 800617c:	e7eb      	b.n	8006156 <_svfiprintf_r+0x1c2>
 800617e:	bf00      	nop
 8006180:	08006674 	.word	0x08006674
 8006184:	0800667e 	.word	0x0800667e
 8006188:	00000000 	.word	0x00000000
 800618c:	08005edd 	.word	0x08005edd
 8006190:	0800667a 	.word	0x0800667a

08006194 <_printf_common>:
 8006194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006198:	4616      	mov	r6, r2
 800619a:	4699      	mov	r9, r3
 800619c:	688a      	ldr	r2, [r1, #8]
 800619e:	690b      	ldr	r3, [r1, #16]
 80061a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061a4:	4293      	cmp	r3, r2
 80061a6:	bfb8      	it	lt
 80061a8:	4613      	movlt	r3, r2
 80061aa:	6033      	str	r3, [r6, #0]
 80061ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061b0:	4607      	mov	r7, r0
 80061b2:	460c      	mov	r4, r1
 80061b4:	b10a      	cbz	r2, 80061ba <_printf_common+0x26>
 80061b6:	3301      	adds	r3, #1
 80061b8:	6033      	str	r3, [r6, #0]
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	0699      	lsls	r1, r3, #26
 80061be:	bf42      	ittt	mi
 80061c0:	6833      	ldrmi	r3, [r6, #0]
 80061c2:	3302      	addmi	r3, #2
 80061c4:	6033      	strmi	r3, [r6, #0]
 80061c6:	6825      	ldr	r5, [r4, #0]
 80061c8:	f015 0506 	ands.w	r5, r5, #6
 80061cc:	d106      	bne.n	80061dc <_printf_common+0x48>
 80061ce:	f104 0a19 	add.w	sl, r4, #25
 80061d2:	68e3      	ldr	r3, [r4, #12]
 80061d4:	6832      	ldr	r2, [r6, #0]
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	42ab      	cmp	r3, r5
 80061da:	dc26      	bgt.n	800622a <_printf_common+0x96>
 80061dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061e0:	1e13      	subs	r3, r2, #0
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	bf18      	it	ne
 80061e6:	2301      	movne	r3, #1
 80061e8:	0692      	lsls	r2, r2, #26
 80061ea:	d42b      	bmi.n	8006244 <_printf_common+0xb0>
 80061ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061f0:	4649      	mov	r1, r9
 80061f2:	4638      	mov	r0, r7
 80061f4:	47c0      	blx	r8
 80061f6:	3001      	adds	r0, #1
 80061f8:	d01e      	beq.n	8006238 <_printf_common+0xa4>
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	68e5      	ldr	r5, [r4, #12]
 80061fe:	6832      	ldr	r2, [r6, #0]
 8006200:	f003 0306 	and.w	r3, r3, #6
 8006204:	2b04      	cmp	r3, #4
 8006206:	bf08      	it	eq
 8006208:	1aad      	subeq	r5, r5, r2
 800620a:	68a3      	ldr	r3, [r4, #8]
 800620c:	6922      	ldr	r2, [r4, #16]
 800620e:	bf0c      	ite	eq
 8006210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006214:	2500      	movne	r5, #0
 8006216:	4293      	cmp	r3, r2
 8006218:	bfc4      	itt	gt
 800621a:	1a9b      	subgt	r3, r3, r2
 800621c:	18ed      	addgt	r5, r5, r3
 800621e:	2600      	movs	r6, #0
 8006220:	341a      	adds	r4, #26
 8006222:	42b5      	cmp	r5, r6
 8006224:	d11a      	bne.n	800625c <_printf_common+0xc8>
 8006226:	2000      	movs	r0, #0
 8006228:	e008      	b.n	800623c <_printf_common+0xa8>
 800622a:	2301      	movs	r3, #1
 800622c:	4652      	mov	r2, sl
 800622e:	4649      	mov	r1, r9
 8006230:	4638      	mov	r0, r7
 8006232:	47c0      	blx	r8
 8006234:	3001      	adds	r0, #1
 8006236:	d103      	bne.n	8006240 <_printf_common+0xac>
 8006238:	f04f 30ff 	mov.w	r0, #4294967295
 800623c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006240:	3501      	adds	r5, #1
 8006242:	e7c6      	b.n	80061d2 <_printf_common+0x3e>
 8006244:	18e1      	adds	r1, r4, r3
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	2030      	movs	r0, #48	; 0x30
 800624a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800624e:	4422      	add	r2, r4
 8006250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006258:	3302      	adds	r3, #2
 800625a:	e7c7      	b.n	80061ec <_printf_common+0x58>
 800625c:	2301      	movs	r3, #1
 800625e:	4622      	mov	r2, r4
 8006260:	4649      	mov	r1, r9
 8006262:	4638      	mov	r0, r7
 8006264:	47c0      	blx	r8
 8006266:	3001      	adds	r0, #1
 8006268:	d0e6      	beq.n	8006238 <_printf_common+0xa4>
 800626a:	3601      	adds	r6, #1
 800626c:	e7d9      	b.n	8006222 <_printf_common+0x8e>
	...

08006270 <_printf_i>:
 8006270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006274:	7e0f      	ldrb	r7, [r1, #24]
 8006276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006278:	2f78      	cmp	r7, #120	; 0x78
 800627a:	4691      	mov	r9, r2
 800627c:	4680      	mov	r8, r0
 800627e:	460c      	mov	r4, r1
 8006280:	469a      	mov	sl, r3
 8006282:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006286:	d807      	bhi.n	8006298 <_printf_i+0x28>
 8006288:	2f62      	cmp	r7, #98	; 0x62
 800628a:	d80a      	bhi.n	80062a2 <_printf_i+0x32>
 800628c:	2f00      	cmp	r7, #0
 800628e:	f000 80d8 	beq.w	8006442 <_printf_i+0x1d2>
 8006292:	2f58      	cmp	r7, #88	; 0x58
 8006294:	f000 80a3 	beq.w	80063de <_printf_i+0x16e>
 8006298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800629c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062a0:	e03a      	b.n	8006318 <_printf_i+0xa8>
 80062a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062a6:	2b15      	cmp	r3, #21
 80062a8:	d8f6      	bhi.n	8006298 <_printf_i+0x28>
 80062aa:	a101      	add	r1, pc, #4	; (adr r1, 80062b0 <_printf_i+0x40>)
 80062ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062b0:	08006309 	.word	0x08006309
 80062b4:	0800631d 	.word	0x0800631d
 80062b8:	08006299 	.word	0x08006299
 80062bc:	08006299 	.word	0x08006299
 80062c0:	08006299 	.word	0x08006299
 80062c4:	08006299 	.word	0x08006299
 80062c8:	0800631d 	.word	0x0800631d
 80062cc:	08006299 	.word	0x08006299
 80062d0:	08006299 	.word	0x08006299
 80062d4:	08006299 	.word	0x08006299
 80062d8:	08006299 	.word	0x08006299
 80062dc:	08006429 	.word	0x08006429
 80062e0:	0800634d 	.word	0x0800634d
 80062e4:	0800640b 	.word	0x0800640b
 80062e8:	08006299 	.word	0x08006299
 80062ec:	08006299 	.word	0x08006299
 80062f0:	0800644b 	.word	0x0800644b
 80062f4:	08006299 	.word	0x08006299
 80062f8:	0800634d 	.word	0x0800634d
 80062fc:	08006299 	.word	0x08006299
 8006300:	08006299 	.word	0x08006299
 8006304:	08006413 	.word	0x08006413
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	1d1a      	adds	r2, r3, #4
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	602a      	str	r2, [r5, #0]
 8006310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006318:	2301      	movs	r3, #1
 800631a:	e0a3      	b.n	8006464 <_printf_i+0x1f4>
 800631c:	6820      	ldr	r0, [r4, #0]
 800631e:	6829      	ldr	r1, [r5, #0]
 8006320:	0606      	lsls	r6, r0, #24
 8006322:	f101 0304 	add.w	r3, r1, #4
 8006326:	d50a      	bpl.n	800633e <_printf_i+0xce>
 8006328:	680e      	ldr	r6, [r1, #0]
 800632a:	602b      	str	r3, [r5, #0]
 800632c:	2e00      	cmp	r6, #0
 800632e:	da03      	bge.n	8006338 <_printf_i+0xc8>
 8006330:	232d      	movs	r3, #45	; 0x2d
 8006332:	4276      	negs	r6, r6
 8006334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006338:	485e      	ldr	r0, [pc, #376]	; (80064b4 <_printf_i+0x244>)
 800633a:	230a      	movs	r3, #10
 800633c:	e019      	b.n	8006372 <_printf_i+0x102>
 800633e:	680e      	ldr	r6, [r1, #0]
 8006340:	602b      	str	r3, [r5, #0]
 8006342:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006346:	bf18      	it	ne
 8006348:	b236      	sxthne	r6, r6
 800634a:	e7ef      	b.n	800632c <_printf_i+0xbc>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	6820      	ldr	r0, [r4, #0]
 8006350:	1d19      	adds	r1, r3, #4
 8006352:	6029      	str	r1, [r5, #0]
 8006354:	0601      	lsls	r1, r0, #24
 8006356:	d501      	bpl.n	800635c <_printf_i+0xec>
 8006358:	681e      	ldr	r6, [r3, #0]
 800635a:	e002      	b.n	8006362 <_printf_i+0xf2>
 800635c:	0646      	lsls	r6, r0, #25
 800635e:	d5fb      	bpl.n	8006358 <_printf_i+0xe8>
 8006360:	881e      	ldrh	r6, [r3, #0]
 8006362:	4854      	ldr	r0, [pc, #336]	; (80064b4 <_printf_i+0x244>)
 8006364:	2f6f      	cmp	r7, #111	; 0x6f
 8006366:	bf0c      	ite	eq
 8006368:	2308      	moveq	r3, #8
 800636a:	230a      	movne	r3, #10
 800636c:	2100      	movs	r1, #0
 800636e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006372:	6865      	ldr	r5, [r4, #4]
 8006374:	60a5      	str	r5, [r4, #8]
 8006376:	2d00      	cmp	r5, #0
 8006378:	bfa2      	ittt	ge
 800637a:	6821      	ldrge	r1, [r4, #0]
 800637c:	f021 0104 	bicge.w	r1, r1, #4
 8006380:	6021      	strge	r1, [r4, #0]
 8006382:	b90e      	cbnz	r6, 8006388 <_printf_i+0x118>
 8006384:	2d00      	cmp	r5, #0
 8006386:	d04d      	beq.n	8006424 <_printf_i+0x1b4>
 8006388:	4615      	mov	r5, r2
 800638a:	fbb6 f1f3 	udiv	r1, r6, r3
 800638e:	fb03 6711 	mls	r7, r3, r1, r6
 8006392:	5dc7      	ldrb	r7, [r0, r7]
 8006394:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006398:	4637      	mov	r7, r6
 800639a:	42bb      	cmp	r3, r7
 800639c:	460e      	mov	r6, r1
 800639e:	d9f4      	bls.n	800638a <_printf_i+0x11a>
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d10b      	bne.n	80063bc <_printf_i+0x14c>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	07de      	lsls	r6, r3, #31
 80063a8:	d508      	bpl.n	80063bc <_printf_i+0x14c>
 80063aa:	6923      	ldr	r3, [r4, #16]
 80063ac:	6861      	ldr	r1, [r4, #4]
 80063ae:	4299      	cmp	r1, r3
 80063b0:	bfde      	ittt	le
 80063b2:	2330      	movle	r3, #48	; 0x30
 80063b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063bc:	1b52      	subs	r2, r2, r5
 80063be:	6122      	str	r2, [r4, #16]
 80063c0:	f8cd a000 	str.w	sl, [sp]
 80063c4:	464b      	mov	r3, r9
 80063c6:	aa03      	add	r2, sp, #12
 80063c8:	4621      	mov	r1, r4
 80063ca:	4640      	mov	r0, r8
 80063cc:	f7ff fee2 	bl	8006194 <_printf_common>
 80063d0:	3001      	adds	r0, #1
 80063d2:	d14c      	bne.n	800646e <_printf_i+0x1fe>
 80063d4:	f04f 30ff 	mov.w	r0, #4294967295
 80063d8:	b004      	add	sp, #16
 80063da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063de:	4835      	ldr	r0, [pc, #212]	; (80064b4 <_printf_i+0x244>)
 80063e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063e4:	6829      	ldr	r1, [r5, #0]
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80063ec:	6029      	str	r1, [r5, #0]
 80063ee:	061d      	lsls	r5, r3, #24
 80063f0:	d514      	bpl.n	800641c <_printf_i+0x1ac>
 80063f2:	07df      	lsls	r7, r3, #31
 80063f4:	bf44      	itt	mi
 80063f6:	f043 0320 	orrmi.w	r3, r3, #32
 80063fa:	6023      	strmi	r3, [r4, #0]
 80063fc:	b91e      	cbnz	r6, 8006406 <_printf_i+0x196>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	f023 0320 	bic.w	r3, r3, #32
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	2310      	movs	r3, #16
 8006408:	e7b0      	b.n	800636c <_printf_i+0xfc>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	f043 0320 	orr.w	r3, r3, #32
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	2378      	movs	r3, #120	; 0x78
 8006414:	4828      	ldr	r0, [pc, #160]	; (80064b8 <_printf_i+0x248>)
 8006416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800641a:	e7e3      	b.n	80063e4 <_printf_i+0x174>
 800641c:	0659      	lsls	r1, r3, #25
 800641e:	bf48      	it	mi
 8006420:	b2b6      	uxthmi	r6, r6
 8006422:	e7e6      	b.n	80063f2 <_printf_i+0x182>
 8006424:	4615      	mov	r5, r2
 8006426:	e7bb      	b.n	80063a0 <_printf_i+0x130>
 8006428:	682b      	ldr	r3, [r5, #0]
 800642a:	6826      	ldr	r6, [r4, #0]
 800642c:	6961      	ldr	r1, [r4, #20]
 800642e:	1d18      	adds	r0, r3, #4
 8006430:	6028      	str	r0, [r5, #0]
 8006432:	0635      	lsls	r5, r6, #24
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	d501      	bpl.n	800643c <_printf_i+0x1cc>
 8006438:	6019      	str	r1, [r3, #0]
 800643a:	e002      	b.n	8006442 <_printf_i+0x1d2>
 800643c:	0670      	lsls	r0, r6, #25
 800643e:	d5fb      	bpl.n	8006438 <_printf_i+0x1c8>
 8006440:	8019      	strh	r1, [r3, #0]
 8006442:	2300      	movs	r3, #0
 8006444:	6123      	str	r3, [r4, #16]
 8006446:	4615      	mov	r5, r2
 8006448:	e7ba      	b.n	80063c0 <_printf_i+0x150>
 800644a:	682b      	ldr	r3, [r5, #0]
 800644c:	1d1a      	adds	r2, r3, #4
 800644e:	602a      	str	r2, [r5, #0]
 8006450:	681d      	ldr	r5, [r3, #0]
 8006452:	6862      	ldr	r2, [r4, #4]
 8006454:	2100      	movs	r1, #0
 8006456:	4628      	mov	r0, r5
 8006458:	f7f9 fec2 	bl	80001e0 <memchr>
 800645c:	b108      	cbz	r0, 8006462 <_printf_i+0x1f2>
 800645e:	1b40      	subs	r0, r0, r5
 8006460:	6060      	str	r0, [r4, #4]
 8006462:	6863      	ldr	r3, [r4, #4]
 8006464:	6123      	str	r3, [r4, #16]
 8006466:	2300      	movs	r3, #0
 8006468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800646c:	e7a8      	b.n	80063c0 <_printf_i+0x150>
 800646e:	6923      	ldr	r3, [r4, #16]
 8006470:	462a      	mov	r2, r5
 8006472:	4649      	mov	r1, r9
 8006474:	4640      	mov	r0, r8
 8006476:	47d0      	blx	sl
 8006478:	3001      	adds	r0, #1
 800647a:	d0ab      	beq.n	80063d4 <_printf_i+0x164>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	079b      	lsls	r3, r3, #30
 8006480:	d413      	bmi.n	80064aa <_printf_i+0x23a>
 8006482:	68e0      	ldr	r0, [r4, #12]
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	4298      	cmp	r0, r3
 8006488:	bfb8      	it	lt
 800648a:	4618      	movlt	r0, r3
 800648c:	e7a4      	b.n	80063d8 <_printf_i+0x168>
 800648e:	2301      	movs	r3, #1
 8006490:	4632      	mov	r2, r6
 8006492:	4649      	mov	r1, r9
 8006494:	4640      	mov	r0, r8
 8006496:	47d0      	blx	sl
 8006498:	3001      	adds	r0, #1
 800649a:	d09b      	beq.n	80063d4 <_printf_i+0x164>
 800649c:	3501      	adds	r5, #1
 800649e:	68e3      	ldr	r3, [r4, #12]
 80064a0:	9903      	ldr	r1, [sp, #12]
 80064a2:	1a5b      	subs	r3, r3, r1
 80064a4:	42ab      	cmp	r3, r5
 80064a6:	dcf2      	bgt.n	800648e <_printf_i+0x21e>
 80064a8:	e7eb      	b.n	8006482 <_printf_i+0x212>
 80064aa:	2500      	movs	r5, #0
 80064ac:	f104 0619 	add.w	r6, r4, #25
 80064b0:	e7f5      	b.n	800649e <_printf_i+0x22e>
 80064b2:	bf00      	nop
 80064b4:	08006685 	.word	0x08006685
 80064b8:	08006696 	.word	0x08006696

080064bc <memmove>:
 80064bc:	4288      	cmp	r0, r1
 80064be:	b510      	push	{r4, lr}
 80064c0:	eb01 0402 	add.w	r4, r1, r2
 80064c4:	d902      	bls.n	80064cc <memmove+0x10>
 80064c6:	4284      	cmp	r4, r0
 80064c8:	4623      	mov	r3, r4
 80064ca:	d807      	bhi.n	80064dc <memmove+0x20>
 80064cc:	1e43      	subs	r3, r0, #1
 80064ce:	42a1      	cmp	r1, r4
 80064d0:	d008      	beq.n	80064e4 <memmove+0x28>
 80064d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064da:	e7f8      	b.n	80064ce <memmove+0x12>
 80064dc:	4402      	add	r2, r0
 80064de:	4601      	mov	r1, r0
 80064e0:	428a      	cmp	r2, r1
 80064e2:	d100      	bne.n	80064e6 <memmove+0x2a>
 80064e4:	bd10      	pop	{r4, pc}
 80064e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064ee:	e7f7      	b.n	80064e0 <memmove+0x24>

080064f0 <_realloc_r>:
 80064f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f4:	4680      	mov	r8, r0
 80064f6:	4614      	mov	r4, r2
 80064f8:	460e      	mov	r6, r1
 80064fa:	b921      	cbnz	r1, 8006506 <_realloc_r+0x16>
 80064fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006500:	4611      	mov	r1, r2
 8006502:	f7ff bb85 	b.w	8005c10 <_malloc_r>
 8006506:	b92a      	cbnz	r2, 8006514 <_realloc_r+0x24>
 8006508:	f7ff fc9c 	bl	8005e44 <_free_r>
 800650c:	4625      	mov	r5, r4
 800650e:	4628      	mov	r0, r5
 8006510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006514:	f000 f81b 	bl	800654e <_malloc_usable_size_r>
 8006518:	4284      	cmp	r4, r0
 800651a:	4607      	mov	r7, r0
 800651c:	d802      	bhi.n	8006524 <_realloc_r+0x34>
 800651e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006522:	d812      	bhi.n	800654a <_realloc_r+0x5a>
 8006524:	4621      	mov	r1, r4
 8006526:	4640      	mov	r0, r8
 8006528:	f7ff fb72 	bl	8005c10 <_malloc_r>
 800652c:	4605      	mov	r5, r0
 800652e:	2800      	cmp	r0, #0
 8006530:	d0ed      	beq.n	800650e <_realloc_r+0x1e>
 8006532:	42bc      	cmp	r4, r7
 8006534:	4622      	mov	r2, r4
 8006536:	4631      	mov	r1, r6
 8006538:	bf28      	it	cs
 800653a:	463a      	movcs	r2, r7
 800653c:	f7ff fb32 	bl	8005ba4 <memcpy>
 8006540:	4631      	mov	r1, r6
 8006542:	4640      	mov	r0, r8
 8006544:	f7ff fc7e 	bl	8005e44 <_free_r>
 8006548:	e7e1      	b.n	800650e <_realloc_r+0x1e>
 800654a:	4635      	mov	r5, r6
 800654c:	e7df      	b.n	800650e <_realloc_r+0x1e>

0800654e <_malloc_usable_size_r>:
 800654e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006552:	1f18      	subs	r0, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	bfbc      	itt	lt
 8006558:	580b      	ldrlt	r3, [r1, r0]
 800655a:	18c0      	addlt	r0, r0, r3
 800655c:	4770      	bx	lr
	...

08006560 <_init>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	bf00      	nop
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr

0800656c <_fini>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	bf00      	nop
 8006570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006572:	bc08      	pop	{r3}
 8006574:	469e      	mov	lr, r3
 8006576:	4770      	bx	lr
