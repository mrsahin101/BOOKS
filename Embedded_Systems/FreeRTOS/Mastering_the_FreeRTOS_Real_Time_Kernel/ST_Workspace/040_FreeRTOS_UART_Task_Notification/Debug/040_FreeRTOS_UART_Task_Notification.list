
040_FreeRTOS_UART_Task_Notification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005ce0  08005ce0  00015ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d88  08005d88  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d90  08005d90  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d94  08005d94  00015d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ad0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b44  20004b44  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001952e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032af  00000000  00000000  000395d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  0003c888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001320  00000000  00000000  0003dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002fbf  00000000  00000000  0003efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f23  00000000  00000000  00041f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d41a2  00000000  00000000  00057ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c064  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000588c  00000000  00000000  0012c0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cc8 	.word	0x08005cc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005cc8 	.word	0x08005cc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <xUART_Send>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
BaseType_t xUART_Send()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;
	// getting task handle of caller task
	pxUARTInstance.xTaskToNotify = xTaskGetCurrentTaskHandle();
 80004ea:	f004 f999 	bl	8004820 <xTaskGetCurrentTaskHandle>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <xUART_Send+0x44>)
 80004f2:	6013      	str	r3, [r2, #0]
	ulTaskNotifyTake(pdTRUE, 0);
 80004f4:	2100      	movs	r1, #0
 80004f6:	2001      	movs	r0, #1
 80004f8:	f004 fa2e 	bl	8004958 <ulTaskNotifyTake>

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)pxUARTInstance.DataSource, pxUARTInstance.uxLength);
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <xUART_Send+0x44>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	4a09      	ldr	r2, [pc, #36]	; (8000528 <xUART_Send+0x44>)
 8000502:	6892      	ldr	r2, [r2, #8]
 8000504:	b292      	uxth	r2, r2
 8000506:	4619      	mov	r1, r3
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <xUART_Send+0x48>)
 800050a:	f001 fe5c 	bl	80021c6 <HAL_UART_Transmit_IT>

	xReturn = (BaseType_t) ulTaskNotifyTake(pdTRUE, pxUARTInstance.Timeout);
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <xUART_Send+0x44>)
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	4619      	mov	r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	f004 fa1f 	bl	8004958 <ulTaskNotifyTake>
 800051a:	4603      	mov	r3, r0
 800051c:	607b      	str	r3, [r7, #4]

	return xReturn;
 800051e:	687b      	ldr	r3, [r7, #4]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200000d4 	.word	0x200000d4
 800052c:	20000090 	.word	0x20000090

08000530 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]

	vTaskNotifyGiveFromISR(pxUARTInstance.xTaskToNotify, &xHigherPriorityTaskWoken);
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <HAL_UART_TxCpltCallback+0x3c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f107 020c 	add.w	r2, r7, #12
 8000544:	4611      	mov	r1, r2
 8000546:	4618      	mov	r0, r3
 8000548:	f004 fa52 	bl	80049f0 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d007      	beq.n	8000562 <HAL_UART_TxCpltCallback+0x32>
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <HAL_UART_TxCpltCallback+0x40>)
 8000554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	f3bf 8f4f 	dsb	sy
 800055e:	f3bf 8f6f 	isb	sy

}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000d4 	.word	0x200000d4
 8000570:	e000ed04 	.word	0xe000ed04

08000574 <vTask1>:
void vTask1(void *pvParameters)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturnedValue;
	const char *msg = "Hello World\r\n";
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <vTask1+0x6c>)
 800057e:	60fb      	str	r3, [r7, #12]
	pxUARTInstance.DataSource = msg;
 8000580:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <vTask1+0x70>)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	6053      	str	r3, [r2, #4]
	pxUARTInstance.uxLength = strlen(msg);
 8000586:	68f8      	ldr	r0, [r7, #12]
 8000588:	f7ff fe22 	bl	80001d0 <strlen>
 800058c:	4603      	mov	r3, r0
 800058e:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <vTask1+0x70>)
 8000590:	6093      	str	r3, [r2, #8]
	pxUARTInstance.Timeout = pdMS_TO_TICKS(10);
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <vTask1+0x70>)
 8000594:	220a      	movs	r2, #10
 8000596:	60da      	str	r2, [r3, #12]

	for(;;)
	{
		xReturnedValue = xUART_Send();
 8000598:	f7ff ffa4 	bl	80004e4 <xUART_Send>
 800059c:	60b8      	str	r0, [r7, #8]
		if(xReturnedValue == pdPASS)
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d10c      	bne.n	80005be <vTask1+0x4a>
		{
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005aa:	480f      	ldr	r0, [pc, #60]	; (80005e8 <vTask1+0x74>)
 80005ac:	f000 fe08 	bl	80011c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <vTask1+0x74>)
 80005b8:	f000 fe02 	bl	80011c0 <HAL_GPIO_WritePin>
 80005bc:	e00b      	b.n	80005d6 <vTask1+0x62>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <vTask1+0x74>)
 80005c6:	f000 fdfb 	bl	80011c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <vTask1+0x74>)
 80005d2:	f000 fdf5 	bl	80011c0 <HAL_GPIO_WritePin>
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 80005d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005da:	f003 fc91 	bl	8003f00 <vTaskDelay>
		xReturnedValue = xUART_Send();
 80005de:	e7db      	b.n	8000598 <vTask1+0x24>
 80005e0:	08005ce0 	.word	0x08005ce0
 80005e4:	200000d4 	.word	0x200000d4
 80005e8:	40020c00 	.word	0x40020c00

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fa93 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f815 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f8a7 	bl	800074c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f87b 	bl	80006f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(vTask1, "Task1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000602:	2300      	movs	r3, #0
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2301      	movs	r3, #1
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	4903      	ldr	r1, [pc, #12]	; (800061c <main+0x30>)
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <main+0x34>)
 8000612:	f003 fb1a 	bl	8003c4a <xTaskCreate>
  vTaskStartScheduler();
 8000616:	f003 fca7 	bl	8003f68 <vTaskStartScheduler>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061a:	e7fe      	b.n	800061a <main+0x2e>
 800061c:	08005cf0 	.word	0x08005cf0
 8000620:	08000575 	.word	0x08000575

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f005 fa7e 	bl	8005b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <SystemClock_Config+0xcc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemClock_Config+0xd0>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000694:	2308      	movs	r3, #8
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000698:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800069c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a2:	2307      	movs	r3, #7
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fdc6 	bl	800123c <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006b6:	f000 f8c5 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2302      	movs	r3, #2
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2105      	movs	r1, #5
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f827 	bl	800172c <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e4:	f000 f8ae 	bl	8000844 <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	; 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_USART2_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000730:	f001 fcfc 	bl	800212c <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f000 f883 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000090 	.word	0x20000090
 8000748:	40004400 	.word	0x40004400

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_GPIO_Init+0xc8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <MX_GPIO_Init+0xc8>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <MX_GPIO_Init+0xc8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_GPIO_Init+0xc8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a23      	ldr	r2, [pc, #140]	; (8000814 <MX_GPIO_Init+0xc8>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_GPIO_Init+0xc8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_GPIO_Init+0xc8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_GPIO_Init+0xc8>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_GPIO_Init+0xc8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007bc:	4816      	ldr	r0, [pc, #88]	; (8000818 <MX_GPIO_Init+0xcc>)
 80007be:	f000 fcff 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007c2:	2301      	movs	r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_GPIO_Init+0xd0>)
 80007d8:	f000 fb56 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007dc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4808      	ldr	r0, [pc, #32]	; (8000818 <MX_GPIO_Init+0xcc>)
 80007f6:	f000 fb47 	bl	8000e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2105      	movs	r1, #5
 80007fe:	2006      	movs	r0, #6
 8000800:	f000 fa86 	bl	8000d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000804:	2006      	movs	r0, #6
 8000806:	f000 fa9f 	bl	8000d48 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080a:	bf00      	nop
 800080c:	3720      	adds	r7, #32
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40020c00 	.word	0x40020c00
 800081c:	40020000 	.word	0x40020000

08000820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000832:	f000 f995 	bl	8000b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40002000 	.word	0x40002000

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_MspInit+0x54>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <HAL_MspInit+0x54>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_MspInit+0x54>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_MspInit+0x54>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_MspInit+0x54>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_MspInit+0x54>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	210f      	movs	r1, #15
 8000892:	f06f 0001 	mvn.w	r0, #1
 8000896:	f000 fa3b 	bl	8000d10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <HAL_UART_MspInit+0x94>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d133      	bne.n	8000932 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a14      	ldr	r2, [pc, #80]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000902:	230c      	movs	r3, #12
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000912:	2307      	movs	r3, #7
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <HAL_UART_MspInit+0x9c>)
 800091e:	f000 fab3 	bl	8000e88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2105      	movs	r1, #5
 8000926:	2026      	movs	r0, #38	; 0x26
 8000928:	f000 f9f2 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800092c:	2026      	movs	r0, #38	; 0x26
 800092e:	f000 fa0b 	bl	8000d48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000932:	bf00      	nop
 8000934:	3728      	adds	r7, #40	; 0x28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40004400 	.word	0x40004400
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000

08000948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	; 0x38
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	4b33      	ldr	r3, [pc, #204]	; (8000a2c <HAL_InitTick+0xe4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a32      	ldr	r2, [pc, #200]	; (8000a2c <HAL_InitTick+0xe4>)
 8000962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
 8000968:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <HAL_InitTick+0xe4>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000974:	f107 0210 	add.w	r2, r7, #16
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f001 f8f4 	bl	8001b6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000984:	6a3b      	ldr	r3, [r7, #32]
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098a:	2b00      	cmp	r3, #0
 800098c:	d103      	bne.n	8000996 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800098e:	f001 f8c5 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8000992:	6378      	str	r0, [r7, #52]	; 0x34
 8000994:	e004      	b.n	80009a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000996:	f001 f8c1 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 800099a:	4603      	mov	r3, r0
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a2:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <HAL_InitTick+0xe8>)
 80009a4:	fba2 2303 	umull	r2, r3, r2, r3
 80009a8:	0c9b      	lsrs	r3, r3, #18
 80009aa:	3b01      	subs	r3, #1
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <HAL_InitTick+0xec>)
 80009b0:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <HAL_InitTick+0xf0>)
 80009b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <HAL_InitTick+0xec>)
 80009b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ba:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80009bc:	4a1d      	ldr	r2, [pc, #116]	; (8000a34 <HAL_InitTick+0xec>)
 80009be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <HAL_InitTick+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <HAL_InitTick+0xec>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <HAL_InitTick+0xec>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80009d4:	4817      	ldr	r0, [pc, #92]	; (8000a34 <HAL_InitTick+0xec>)
 80009d6:	f001 f8fb 	bl	8001bd0 <HAL_TIM_Base_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d11b      	bne.n	8000a20 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80009e8:	4812      	ldr	r0, [pc, #72]	; (8000a34 <HAL_InitTick+0xec>)
 80009ea:	f001 f94b 	bl	8001c84 <HAL_TIM_Base_Start_IT>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d111      	bne.n	8000a20 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80009fc:	202d      	movs	r0, #45	; 0x2d
 80009fe:	f000 f9a3 	bl	8000d48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d808      	bhi.n	8000a1a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	202d      	movs	r0, #45	; 0x2d
 8000a0e:	f000 f97f 	bl	8000d10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_InitTick+0xf4>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	e002      	b.n	8000a20 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3738      	adds	r7, #56	; 0x38
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	431bde83 	.word	0x431bde83
 8000a34:	200000e4 	.word	0x200000e4
 8000a38:	40002000 	.word	0x40002000
 8000a3c:	20000004 	.word	0x20000004

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f000 fbbf 	bl	80011f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <USART2_IRQHandler+0x10>)
 8000a82:	f001 fbe5 	bl	8002250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000090 	.word	0x20000090

08000a90 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000a96:	f001 f965 	bl	8001d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000e4 	.word	0x200000e4

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ace:	490e      	ldr	r1, [pc, #56]	; (8000b08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ae4:	4c0b      	ldr	r4, [pc, #44]	; (8000b14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000af2:	f7ff ffd7 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f004 ffe9 	bl	8005acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fd77 	bl	80005ec <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b0c:	08005d98 	.word	0x08005d98
  ldr r2, =_sbss
 8000b10:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b14:	20004b44 	.word	0x20004b44

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <HAL_Init+0x40>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_Init+0x40>)
 8000b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_Init+0x40>)
 8000b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f8d8 	bl	8000cfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff fefc 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff fe7e 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023c00 	.word	0x40023c00

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	2000012c 	.word	0x2000012c

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	2000012c 	.word	0x2000012c

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	; (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff4c 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d22:	f7ff ff61 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	6978      	ldr	r0, [r7, #20]
 8000d2e:	f7ff ffb1 	bl	8000c94 <NVIC_EncodePriority>
 8000d32:	4602      	mov	r2, r0
 8000d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff80 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff54 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d72:	f7ff ff09 	bl	8000b88 <HAL_GetTick>
 8000d76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d008      	beq.n	8000d96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e052      	b.n	8000e3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0216 	bic.w	r2, r2, #22
 8000da4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	695a      	ldr	r2, [r3, #20]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000db4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d103      	bne.n	8000dc6 <HAL_DMA_Abort+0x62>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d007      	beq.n	8000dd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 0208 	bic.w	r2, r2, #8
 8000dd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0201 	bic.w	r2, r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000de6:	e013      	b.n	8000e10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000de8:	f7ff fece 	bl	8000b88 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b05      	cmp	r3, #5
 8000df4:	d90c      	bls.n	8000e10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2220      	movs	r2, #32
 8000dfa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2203      	movs	r2, #3
 8000e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e015      	b.n	8000e3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1e4      	bne.n	8000de8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e22:	223f      	movs	r2, #63	; 0x3f
 8000e24:	409a      	lsls	r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d004      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00c      	b.n	8000e7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2205      	movs	r2, #5
 8000e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0201 	bic.w	r2, r2, #1
 8000e78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	e16b      	b.n	800117c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 815a 	bne.w	8001176 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d005      	beq.n	8000eda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d130      	bne.n	8000f3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f10:	2201      	movs	r2, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	091b      	lsrs	r3, r3, #4
 8000f26:	f003 0201 	and.w	r2, r3, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d017      	beq.n	8000f78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d123      	bne.n	8000fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	69b9      	ldr	r1, [r7, #24]
 8000fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0203 	and.w	r2, r3, #3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80b4 	beq.w	8001176 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b60      	ldr	r3, [pc, #384]	; (8001194 <HAL_GPIO_Init+0x30c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a5f      	ldr	r2, [pc, #380]	; (8001194 <HAL_GPIO_Init+0x30c>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <HAL_GPIO_Init+0x30c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800102a:	4a5b      	ldr	r2, [pc, #364]	; (8001198 <HAL_GPIO_Init+0x310>)
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a52      	ldr	r2, [pc, #328]	; (800119c <HAL_GPIO_Init+0x314>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d02b      	beq.n	80010ae <HAL_GPIO_Init+0x226>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a51      	ldr	r2, [pc, #324]	; (80011a0 <HAL_GPIO_Init+0x318>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d025      	beq.n	80010aa <HAL_GPIO_Init+0x222>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a50      	ldr	r2, [pc, #320]	; (80011a4 <HAL_GPIO_Init+0x31c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d01f      	beq.n	80010a6 <HAL_GPIO_Init+0x21e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4f      	ldr	r2, [pc, #316]	; (80011a8 <HAL_GPIO_Init+0x320>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d019      	beq.n	80010a2 <HAL_GPIO_Init+0x21a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4e      	ldr	r2, [pc, #312]	; (80011ac <HAL_GPIO_Init+0x324>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0x216>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4d      	ldr	r2, [pc, #308]	; (80011b0 <HAL_GPIO_Init+0x328>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00d      	beq.n	800109a <HAL_GPIO_Init+0x212>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4c      	ldr	r2, [pc, #304]	; (80011b4 <HAL_GPIO_Init+0x32c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x20e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4b      	ldr	r2, [pc, #300]	; (80011b8 <HAL_GPIO_Init+0x330>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_GPIO_Init+0x20a>
 800108e:	2307      	movs	r3, #7
 8001090:	e00e      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 8001092:	2308      	movs	r3, #8
 8001094:	e00c      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 8001096:	2306      	movs	r3, #6
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 800109a:	2305      	movs	r3, #5
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 800109e:	2304      	movs	r3, #4
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 80010ae:	2300      	movs	r3, #0
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c0:	4935      	ldr	r1, [pc, #212]	; (8001198 <HAL_GPIO_Init+0x310>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_GPIO_Init+0x334>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f2:	4a32      	ldr	r2, [pc, #200]	; (80011bc <HAL_GPIO_Init+0x334>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f8:	4b30      	ldr	r3, [pc, #192]	; (80011bc <HAL_GPIO_Init+0x334>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800111c:	4a27      	ldr	r2, [pc, #156]	; (80011bc <HAL_GPIO_Init+0x334>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <HAL_GPIO_Init+0x334>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001146:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <HAL_GPIO_Init+0x334>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_GPIO_Init+0x334>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001170:	4a12      	ldr	r2, [pc, #72]	; (80011bc <HAL_GPIO_Init+0x334>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	f67f ae90 	bls.w	8000ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40013800 	.word	0x40013800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40021800 	.word	0x40021800
 80011b8:	40021c00 	.word	0x40021c00
 80011bc:	40013c00 	.word	0x40013c00

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011dc:	e003      	b.n	80011e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	619a      	str	r2, [r3, #24]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001200:	695a      	ldr	r2, [r3, #20]
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	4013      	ands	r3, r2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d006      	beq.n	8001218 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f806 	bl	8001224 <HAL_GPIO_EXTI_Callback>
  }
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e267      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d075      	beq.n	8001346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125a:	4b88      	ldr	r3, [pc, #544]	; (800147c <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b04      	cmp	r3, #4
 8001264:	d00c      	beq.n	8001280 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	4b85      	ldr	r3, [pc, #532]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126e:	2b08      	cmp	r3, #8
 8001270:	d112      	bne.n	8001298 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001272:	4b82      	ldr	r3, [pc, #520]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800127e:	d10b      	bne.n	8001298 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001280:	4b7e      	ldr	r3, [pc, #504]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d05b      	beq.n	8001344 <HAL_RCC_OscConfig+0x108>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d157      	bne.n	8001344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e242      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a0:	d106      	bne.n	80012b0 <HAL_RCC_OscConfig+0x74>
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a75      	ldr	r2, [pc, #468]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e01d      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x98>
 80012ba:	4b70      	ldr	r3, [pc, #448]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6f      	ldr	r2, [pc, #444]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b6d      	ldr	r3, [pc, #436]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a6c      	ldr	r2, [pc, #432]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012d4:	4b69      	ldr	r3, [pc, #420]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a68      	ldr	r2, [pc, #416]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b66      	ldr	r3, [pc, #408]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a65      	ldr	r2, [pc, #404]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d013      	beq.n	800131c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fc48 	bl	8000b88 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fc44 	bl	8000b88 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e207      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b5b      	ldr	r3, [pc, #364]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0xc0>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fc34 	bl	8000b88 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fc30 	bl	8000b88 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1f3      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	4b51      	ldr	r3, [pc, #324]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0xe8>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d063      	beq.n	800141a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001352:	4b4a      	ldr	r3, [pc, #296]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001366:	2b08      	cmp	r3, #8
 8001368:	d11c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136a:	4b44      	ldr	r3, [pc, #272]	; (800147c <HAL_RCC_OscConfig+0x240>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d116      	bne.n	80013a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_RCC_OscConfig+0x152>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e1c7      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b3b      	ldr	r3, [pc, #236]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4937      	ldr	r1, [pc, #220]	; (800147c <HAL_RCC_OscConfig+0x240>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	e03a      	b.n	800141a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d020      	beq.n	80013ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ac:	4b34      	ldr	r3, [pc, #208]	; (8001480 <HAL_RCC_OscConfig+0x244>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b2:	f7ff fbe9 	bl	8000b88 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fbe5 	bl	8000b88 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e1a8      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4925      	ldr	r1, [pc, #148]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
 80013ec:	e015      	b.n	800141a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <HAL_RCC_OscConfig+0x244>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fbc8 	bl	8000b88 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fbc4 	bl	8000b88 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e187      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d036      	beq.n	8001494 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d016      	beq.n	800145c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_RCC_OscConfig+0x248>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001434:	f7ff fba8 	bl	8000b88 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fba4 	bl	8000b88 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e167      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x200>
 800145a:	e01b      	b.n	8001494 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_RCC_OscConfig+0x248>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff fb91 	bl	8000b88 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	e00e      	b.n	8001488 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146a:	f7ff fb8d 	bl	8000b88 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d907      	bls.n	8001488 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e150      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
 800147c:	40023800 	.word	0x40023800
 8001480:	42470000 	.word	0x42470000
 8001484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	4b88      	ldr	r3, [pc, #544]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800148a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ea      	bne.n	800146a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 8097 	beq.w	80015d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a6:	4b81      	ldr	r3, [pc, #516]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10f      	bne.n	80014d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b7d      	ldr	r3, [pc, #500]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a7c      	ldr	r2, [pc, #496]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b77      	ldr	r3, [pc, #476]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d118      	bne.n	8001510 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014de:	4b74      	ldr	r3, [pc, #464]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a73      	ldr	r2, [pc, #460]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fb4d 	bl	8000b88 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff fb49 	bl	8000b88 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e10c      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	4b6a      	ldr	r3, [pc, #424]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x2ea>
 8001518:	4b64      	ldr	r3, [pc, #400]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a63      	ldr	r2, [pc, #396]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
 8001524:	e01c      	b.n	8001560 <HAL_RCC_OscConfig+0x324>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b05      	cmp	r3, #5
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x30c>
 800152e:	4b5f      	ldr	r3, [pc, #380]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a5e      	ldr	r2, [pc, #376]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
 800153a:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153e:	4a5b      	ldr	r2, [pc, #364]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6713      	str	r3, [r2, #112]	; 0x70
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0x324>
 8001548:	4b58      	ldr	r3, [pc, #352]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a57      	ldr	r2, [pc, #348]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	4b55      	ldr	r3, [pc, #340]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a54      	ldr	r2, [pc, #336]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800155a:	f023 0304 	bic.w	r3, r3, #4
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d015      	beq.n	8001594 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff fb0e 	bl	8000b88 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	e00a      	b.n	8001586 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001570:	f7ff fb0a 	bl	8000b88 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e0cb      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0ee      	beq.n	8001570 <HAL_RCC_OscConfig+0x334>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff faf8 	bl	8000b88 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7ff faf4 	bl	8000b88 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e0b5      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ee      	bne.n	800159c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d105      	bne.n	80015d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	4a38      	ldr	r2, [pc, #224]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a1 	beq.w	800171c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015da:	4b34      	ldr	r3, [pc, #208]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d05c      	beq.n	80016a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d141      	bne.n	8001672 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <HAL_RCC_OscConfig+0x478>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fac8 	bl	8000b88 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff fac4 	bl	8000b88 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e087      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	3b01      	subs	r3, #1
 8001634:	041b      	lsls	r3, r3, #16
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	491b      	ldr	r1, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x478>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fa9d 	bl	8000b88 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff fa99 	bl	8000b88 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e05c      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x416>
 8001670:	e054      	b.n	800171c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_RCC_OscConfig+0x478>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fa86 	bl	8000b88 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fa82 	bl	8000b88 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e045      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x444>
 800169e:	e03d      	b.n	800171c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e038      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000
 80016b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x4ec>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d028      	beq.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d121      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d11a      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e8:	4013      	ands	r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d111      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	3b01      	subs	r3, #1
 8001702:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d107      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0cc      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d90c      	bls.n	8001768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0b8      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001780:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a4:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	494d      	ldr	r1, [pc, #308]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d044      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d119      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e07f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e067      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4934      	ldr	r1, [pc, #208]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7ff f9b4 	bl	8000b88 <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff f9b0 	bl	8000b88 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e04f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d20c      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e032      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4916      	ldr	r1, [pc, #88]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	490e      	ldr	r1, [pc, #56]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b2:	f000 f821 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	490a      	ldr	r1, [pc, #40]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	5ccb      	ldrb	r3, [r1, r3]
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f838 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	08005d10 	.word	0x08005d10
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018fc:	b094      	sub	sp, #80	; 0x50
 80018fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
 8001904:	2300      	movs	r3, #0
 8001906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001908:	2300      	movs	r3, #0
 800190a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001910:	4b79      	ldr	r3, [pc, #484]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d00d      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x40>
 800191c:	2b08      	cmp	r3, #8
 800191e:	f200 80e1 	bhi.w	8001ae4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x34>
 8001926:	2b04      	cmp	r3, #4
 8001928:	d003      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x3a>
 800192a:	e0db      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b73      	ldr	r3, [pc, #460]	; (8001afc <HAL_RCC_GetSysClockFreq+0x204>)
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001930:	e0db      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001932:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001936:	e0d8      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001938:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001940:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001942:	4b6d      	ldr	r3, [pc, #436]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d063      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194e:	4b6a      	ldr	r3, [pc, #424]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	099b      	lsrs	r3, r3, #6
 8001954:	2200      	movs	r2, #0
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
 8001958:	63fa      	str	r2, [r7, #60]	; 0x3c
 800195a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800195c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
 8001966:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800196a:	4622      	mov	r2, r4
 800196c:	462b      	mov	r3, r5
 800196e:	f04f 0000 	mov.w	r0, #0
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	0159      	lsls	r1, r3, #5
 8001978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800197c:	0150      	lsls	r0, r2, #5
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4621      	mov	r1, r4
 8001984:	1a51      	subs	r1, r2, r1
 8001986:	6139      	str	r1, [r7, #16]
 8001988:	4629      	mov	r1, r5
 800198a:	eb63 0301 	sbc.w	r3, r3, r1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800199c:	4659      	mov	r1, fp
 800199e:	018b      	lsls	r3, r1, #6
 80019a0:	4651      	mov	r1, sl
 80019a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a6:	4651      	mov	r1, sl
 80019a8:	018a      	lsls	r2, r1, #6
 80019aa:	4651      	mov	r1, sl
 80019ac:	ebb2 0801 	subs.w	r8, r2, r1
 80019b0:	4659      	mov	r1, fp
 80019b2:	eb63 0901 	sbc.w	r9, r3, r1
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ca:	4690      	mov	r8, r2
 80019cc:	4699      	mov	r9, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	eb18 0303 	adds.w	r3, r8, r3
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	462b      	mov	r3, r5
 80019d8:	eb49 0303 	adc.w	r3, r9, r3
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ea:	4629      	mov	r1, r5
 80019ec:	024b      	lsls	r3, r1, #9
 80019ee:	4621      	mov	r1, r4
 80019f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f4:	4621      	mov	r1, r4
 80019f6:	024a      	lsls	r2, r1, #9
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fe:	2200      	movs	r2, #0
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a08:	f7fe fbea 	bl	80001e0 <__aeabi_uldivmod>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4613      	mov	r3, r2
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a14:	e058      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	099b      	lsrs	r3, r3, #6
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	4611      	mov	r1, r2
 8001a22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a26:	623b      	str	r3, [r7, #32]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a30:	4642      	mov	r2, r8
 8001a32:	464b      	mov	r3, r9
 8001a34:	f04f 0000 	mov.w	r0, #0
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	0159      	lsls	r1, r3, #5
 8001a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a42:	0150      	lsls	r0, r2, #5
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4641      	mov	r1, r8
 8001a4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a4e:	4649      	mov	r1, r9
 8001a50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a68:	ebb2 040a 	subs.w	r4, r2, sl
 8001a6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	00eb      	lsls	r3, r5, #3
 8001a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7e:	00e2      	lsls	r2, r4, #3
 8001a80:	4614      	mov	r4, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	4643      	mov	r3, r8
 8001a86:	18e3      	adds	r3, r4, r3
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	464b      	mov	r3, r9
 8001a8c:	eb45 0303 	adc.w	r3, r5, r3
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	028b      	lsls	r3, r1, #10
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	028a      	lsls	r2, r1, #10
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	61fa      	str	r2, [r7, #28]
 8001ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001abc:	f7fe fb90 	bl	80001e0 <__aeabi_uldivmod>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ad8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae2:	e002      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3750      	adds	r7, #80	; 0x50
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	007a1200 	.word	0x007a1200

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0a9b      	lsrs	r3, r3, #10
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	08005d20 	.word	0x08005d20

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b48:	f7ff ffdc 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0b5b      	lsrs	r3, r3, #13
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08005d20 	.word	0x08005d20

08001b6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	220f      	movs	r2, #15
 8001b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0203 	and.w	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	08db      	lsrs	r3, r3, #3
 8001ba6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <HAL_RCC_GetClockConfig+0x60>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0207 	and.w	r2, r3, #7
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40023c00 	.word	0x40023c00

08001bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e041      	b.n	8001c66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f839 	bl	8001c6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f000 f9d8 	bl	8001fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d001      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e04e      	b.n	8001d3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a23      	ldr	r2, [pc, #140]	; (8001d48 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d022      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc6:	d01d      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <HAL_TIM_Base_Start_IT+0xc8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d018      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1e      	ldr	r2, [pc, #120]	; (8001d50 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d013      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00e      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1b      	ldr	r2, [pc, #108]	; (8001d58 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d009      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <HAL_TIM_Base_Start_IT+0xd8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d004      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d111      	bne.n	8001d28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d010      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d26:	e007      	b.n	8001d38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	40000800 	.word	0x40000800
 8001d54:	40000c00 	.word	0x40000c00
 8001d58:	40010400 	.word	0x40010400
 8001d5c:	40014000 	.word	0x40014000
 8001d60:	40001800 	.word	0x40001800

08001d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d122      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d11b      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0202 	mvn.w	r2, #2
 8001d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8ee 	bl	8001f88 <HAL_TIM_IC_CaptureCallback>
 8001dac:	e005      	b.n	8001dba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8e0 	bl	8001f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f8f1 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d122      	bne.n	8001e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d11b      	bne.n	8001e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0204 	mvn.w	r2, #4
 8001de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8c4 	bl	8001f88 <HAL_TIM_IC_CaptureCallback>
 8001e00:	e005      	b.n	8001e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8b6 	bl	8001f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f8c7 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d122      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d11b      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0208 	mvn.w	r2, #8
 8001e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f89a 	bl	8001f88 <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f88c 	bl	8001f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f89d 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b10      	cmp	r3, #16
 8001e74:	d122      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b10      	cmp	r3, #16
 8001e82:	d11b      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0210 	mvn.w	r2, #16
 8001e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2208      	movs	r2, #8
 8001e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f870 	bl	8001f88 <HAL_TIM_IC_CaptureCallback>
 8001ea8:	e005      	b.n	8001eb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f862 	bl	8001f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f873 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d107      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0201 	mvn.w	r2, #1
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fc9c 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef2:	2b80      	cmp	r3, #128	; 0x80
 8001ef4:	d10e      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f00:	2b80      	cmp	r3, #128	; 0x80
 8001f02:	d107      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f902 	bl	8002118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	2b40      	cmp	r3, #64	; 0x40
 8001f20:	d10e      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2c:	2b40      	cmp	r3, #64	; 0x40
 8001f2e:	d107      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f838 	bl	8001fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	d10e      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d107      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0220 	mvn.w	r2, #32
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8cc 	bl	8002104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a40      	ldr	r2, [pc, #256]	; (80020d8 <TIM_Base_SetConfig+0x114>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d013      	beq.n	8002004 <TIM_Base_SetConfig+0x40>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe2:	d00f      	beq.n	8002004 <TIM_Base_SetConfig+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3d      	ldr	r2, [pc, #244]	; (80020dc <TIM_Base_SetConfig+0x118>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00b      	beq.n	8002004 <TIM_Base_SetConfig+0x40>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a3c      	ldr	r2, [pc, #240]	; (80020e0 <TIM_Base_SetConfig+0x11c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <TIM_Base_SetConfig+0x40>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a3b      	ldr	r2, [pc, #236]	; (80020e4 <TIM_Base_SetConfig+0x120>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <TIM_Base_SetConfig+0x40>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a3a      	ldr	r2, [pc, #232]	; (80020e8 <TIM_Base_SetConfig+0x124>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d108      	bne.n	8002016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2f      	ldr	r2, [pc, #188]	; (80020d8 <TIM_Base_SetConfig+0x114>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d02b      	beq.n	8002076 <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002024:	d027      	beq.n	8002076 <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a2c      	ldr	r2, [pc, #176]	; (80020dc <TIM_Base_SetConfig+0x118>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d023      	beq.n	8002076 <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a2b      	ldr	r2, [pc, #172]	; (80020e0 <TIM_Base_SetConfig+0x11c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01f      	beq.n	8002076 <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <TIM_Base_SetConfig+0x120>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d01b      	beq.n	8002076 <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a29      	ldr	r2, [pc, #164]	; (80020e8 <TIM_Base_SetConfig+0x124>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d017      	beq.n	8002076 <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a28      	ldr	r2, [pc, #160]	; (80020ec <TIM_Base_SetConfig+0x128>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <TIM_Base_SetConfig+0x12c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00f      	beq.n	8002076 <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <TIM_Base_SetConfig+0x130>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00b      	beq.n	8002076 <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a25      	ldr	r2, [pc, #148]	; (80020f8 <TIM_Base_SetConfig+0x134>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a24      	ldr	r2, [pc, #144]	; (80020fc <TIM_Base_SetConfig+0x138>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d003      	beq.n	8002076 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a23      	ldr	r2, [pc, #140]	; (8002100 <TIM_Base_SetConfig+0x13c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d108      	bne.n	8002088 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800207c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <TIM_Base_SetConfig+0x114>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d003      	beq.n	80020bc <TIM_Base_SetConfig+0xf8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <TIM_Base_SetConfig+0x124>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d103      	bne.n	80020c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	615a      	str	r2, [r3, #20]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40010000 	.word	0x40010000
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40000800 	.word	0x40000800
 80020e4:	40000c00 	.word	0x40000c00
 80020e8:	40010400 	.word	0x40010400
 80020ec:	40014000 	.word	0x40014000
 80020f0:	40014400 	.word	0x40014400
 80020f4:	40014800 	.word	0x40014800
 80020f8:	40001800 	.word	0x40001800
 80020fc:	40001c00 	.word	0x40001c00
 8002100:	40002000 	.word	0x40002000

08002104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e03f      	b.n	80021be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fba8 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2224      	movs	r2, #36	; 0x24
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800216e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 fcb5 	bl	8002ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	4613      	mov	r3, r2
 80021d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d130      	bne.n	8002242 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <HAL_UART_Transmit_IT+0x26>
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e029      	b.n	8002244 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_UART_Transmit_IT+0x38>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e022      	b.n	8002244 <HAL_UART_Transmit_IT+0x7e>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	88fa      	ldrh	r2, [r7, #6]
 8002210:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	88fa      	ldrh	r2, [r7, #6]
 8002216:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2221      	movs	r2, #33	; 0x21
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800223c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e000      	b.n	8002244 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002242:	2302      	movs	r3, #2
  }
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b0ba      	sub	sp, #232	; 0xe8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800228e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10f      	bne.n	80022b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_UART_IRQHandler+0x66>
 80022a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fb5b 	bl	800296a <UART_Receive_IT>
      return;
 80022b4:	e256      	b.n	8002764 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80de 	beq.w	800247c <HAL_UART_IRQHandler+0x22c>
 80022c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d106      	bne.n	80022da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80d1 	beq.w	800247c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_UART_IRQHandler+0xae>
 80022e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_UART_IRQHandler+0xd2>
 800230a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f043 0202 	orr.w	r2, r3, #2
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00b      	beq.n	8002346 <HAL_UART_IRQHandler+0xf6>
 800232e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f043 0204 	orr.w	r2, r3, #4
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d011      	beq.n	8002376 <HAL_UART_IRQHandler+0x126>
 8002352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800235e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f043 0208 	orr.w	r2, r3, #8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 81ed 	beq.w	800275a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_UART_IRQHandler+0x14e>
 800238c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002390:	f003 0320 	and.w	r3, r3, #32
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fae6 	bl	800296a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d103      	bne.n	80023ca <HAL_UART_IRQHandler+0x17a>
 80023c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d04f      	beq.n	800246a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f9ee 	bl	80027ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023da:	2b40      	cmp	r3, #64	; 0x40
 80023dc:	d141      	bne.n	8002462 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3314      	adds	r3, #20
 80023e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023ec:	e853 3f00 	ldrex	r3, [r3]
 80023f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80023f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3314      	adds	r3, #20
 8002406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800240a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800240e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800241a:	e841 2300 	strex	r3, r2, [r1]
 800241e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1d9      	bne.n	80023de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	2b00      	cmp	r3, #0
 8002430:	d013      	beq.n	800245a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	4a7d      	ldr	r2, [pc, #500]	; (800262c <HAL_UART_IRQHandler+0x3dc>)
 8002438:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fd00 	bl	8000e44 <HAL_DMA_Abort_IT>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002454:	4610      	mov	r0, r2
 8002456:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002458:	e00e      	b.n	8002478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f990 	bl	8002780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002460:	e00a      	b.n	8002478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f98c 	bl	8002780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002468:	e006      	b.n	8002478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f988 	bl	8002780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002476:	e170      	b.n	800275a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002478:	bf00      	nop
    return;
 800247a:	e16e      	b.n	800275a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	2b01      	cmp	r3, #1
 8002482:	f040 814a 	bne.w	800271a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8143 	beq.w	800271a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 813c 	beq.w	800271a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b40      	cmp	r3, #64	; 0x40
 80024c4:	f040 80b4 	bne.w	8002630 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8140 	beq.w	800275e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024e6:	429a      	cmp	r2, r3
 80024e8:	f080 8139 	bcs.w	800275e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024fe:	f000 8088 	beq.w	8002612 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	330c      	adds	r3, #12
 8002508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800250c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002510:	e853 3f00 	ldrex	r3, [r3]
 8002514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800251c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	330c      	adds	r3, #12
 800252a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800252e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002536:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800253a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800253e:	e841 2300 	strex	r3, r2, [r1]
 8002542:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1d9      	bne.n	8002502 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3314      	adds	r3, #20
 8002554:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002558:	e853 3f00 	ldrex	r3, [r3]
 800255c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800255e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3314      	adds	r3, #20
 800256e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002572:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002576:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002578:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800257a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800257e:	e841 2300 	strex	r3, r2, [r1]
 8002582:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1e1      	bne.n	800254e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3314      	adds	r3, #20
 8002590:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002594:	e853 3f00 	ldrex	r3, [r3]
 8002598:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800259a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800259c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3314      	adds	r3, #20
 80025aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025b6:	e841 2300 	strex	r3, r2, [r1]
 80025ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80025bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1e3      	bne.n	800258a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80025e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e2:	f023 0310 	bic.w	r3, r3, #16
 80025e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	330c      	adds	r3, #12
 80025f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80025f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025fc:	e841 2300 	strex	r3, r2, [r1]
 8002600:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e3      	bne.n	80025d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fba9 	bl	8000d64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800261a:	b29b      	uxth	r3, r3
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	b29b      	uxth	r3, r3
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8b6 	bl	8002794 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002628:	e099      	b.n	800275e <HAL_UART_IRQHandler+0x50e>
 800262a:	bf00      	nop
 800262c:	08002873 	.word	0x08002873
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002638:	b29b      	uxth	r3, r3
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 808b 	beq.w	8002762 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800264c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 8086 	beq.w	8002762 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	330c      	adds	r3, #12
 800265c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	e853 3f00 	ldrex	r3, [r3]
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800266c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800267a:	647a      	str	r2, [r7, #68]	; 0x44
 800267c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002682:	e841 2300 	strex	r3, r2, [r1]
 8002686:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e3      	bne.n	8002656 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3314      	adds	r3, #20
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	e853 3f00 	ldrex	r3, [r3]
 800269c:	623b      	str	r3, [r7, #32]
   return(result);
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3314      	adds	r3, #20
 80026ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026b2:	633a      	str	r2, [r7, #48]	; 0x30
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ba:	e841 2300 	strex	r3, r2, [r1]
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1e3      	bne.n	800268e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	330c      	adds	r3, #12
 80026da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	e853 3f00 	ldrex	r3, [r3]
 80026e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f023 0310 	bic.w	r3, r3, #16
 80026ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80026f8:	61fa      	str	r2, [r7, #28]
 80026fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fc:	69b9      	ldr	r1, [r7, #24]
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	e841 2300 	strex	r3, r2, [r1]
 8002704:	617b      	str	r3, [r7, #20]
   return(result);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1e3      	bne.n	80026d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800270c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002710:	4619      	mov	r1, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f83e 	bl	8002794 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002718:	e023      	b.n	8002762 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800271a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_UART_IRQHandler+0x4ea>
 8002726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f8b1 	bl	800289a <UART_Transmit_IT>
    return;
 8002738:	e014      	b.n	8002764 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800273a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00e      	beq.n	8002764 <HAL_UART_IRQHandler+0x514>
 8002746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800274a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f8f1 	bl	800293a <UART_EndTransmit_IT>
    return;
 8002758:	e004      	b.n	8002764 <HAL_UART_IRQHandler+0x514>
    return;
 800275a:	bf00      	nop
 800275c:	e002      	b.n	8002764 <HAL_UART_IRQHandler+0x514>
      return;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <HAL_UART_IRQHandler+0x514>
      return;
 8002762:	bf00      	nop
  }
}
 8002764:	37e8      	adds	r7, #232	; 0xe8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop

0800276c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b095      	sub	sp, #84	; 0x54
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	330c      	adds	r3, #12
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027be:	e853 3f00 	ldrex	r3, [r3]
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	330c      	adds	r3, #12
 80027d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027d4:	643a      	str	r2, [r7, #64]	; 0x40
 80027d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027dc:	e841 2300 	strex	r3, r2, [r1]
 80027e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1e5      	bne.n	80027b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3314      	adds	r3, #20
 80027ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	e853 3f00 	ldrex	r3, [r3]
 80027f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3314      	adds	r3, #20
 8002806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002808:	62fa      	str	r2, [r7, #44]	; 0x2c
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800280e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002810:	e841 2300 	strex	r3, r2, [r1]
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e5      	bne.n	80027e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	2b01      	cmp	r3, #1
 8002822:	d119      	bne.n	8002858 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	330c      	adds	r3, #12
 800282a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	e853 3f00 	ldrex	r3, [r3]
 8002832:	60bb      	str	r3, [r7, #8]
   return(result);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f023 0310 	bic.w	r3, r3, #16
 800283a:	647b      	str	r3, [r7, #68]	; 0x44
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	330c      	adds	r3, #12
 8002842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002844:	61ba      	str	r2, [r7, #24]
 8002846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002848:	6979      	ldr	r1, [r7, #20]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	e841 2300 	strex	r3, r2, [r1]
 8002850:	613b      	str	r3, [r7, #16]
   return(result);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e5      	bne.n	8002824 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002866:	bf00      	nop
 8002868:	3754      	adds	r7, #84	; 0x54
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff ff77 	bl	8002780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800289a:	b480      	push	{r7}
 800289c:	b085      	sub	sp, #20
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b21      	cmp	r3, #33	; 0x21
 80028ac:	d13e      	bne.n	800292c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b6:	d114      	bne.n	80028e2 <UART_Transmit_IT+0x48>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d110      	bne.n	80028e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	1c9a      	adds	r2, r3, #2
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	621a      	str	r2, [r3, #32]
 80028e0:	e008      	b.n	80028f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	1c59      	adds	r1, r3, #1
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6211      	str	r1, [r2, #32]
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4619      	mov	r1, r3
 8002902:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10f      	bne.n	8002928 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002916:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002926:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	e000      	b.n	800292e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
  }
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002950:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fd fde8 	bl	8000530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b08c      	sub	sp, #48	; 0x30
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b22      	cmp	r3, #34	; 0x22
 800297c:	f040 80ab 	bne.w	8002ad6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002988:	d117      	bne.n	80029ba <UART_Receive_IT+0x50>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d113      	bne.n	80029ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002992:	2300      	movs	r3, #0
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	1c9a      	adds	r2, r3, #2
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
 80029b8:	e026      	b.n	8002a08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029cc:	d007      	beq.n	80029de <UART_Receive_IT+0x74>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10a      	bne.n	80029ec <UART_Receive_IT+0x82>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e008      	b.n	80029fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4619      	mov	r1, r3
 8002a16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d15a      	bne.n	8002ad2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0220 	bic.w	r2, r2, #32
 8002a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d135      	bne.n	8002ac8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	330c      	adds	r3, #12
 8002a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	e853 3f00 	ldrex	r3, [r3]
 8002a70:	613b      	str	r3, [r7, #16]
   return(result);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f023 0310 	bic.w	r3, r3, #16
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	330c      	adds	r3, #12
 8002a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a82:	623a      	str	r2, [r7, #32]
 8002a84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a86:	69f9      	ldr	r1, [r7, #28]
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	e841 2300 	strex	r3, r2, [r1]
 8002a8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1e5      	bne.n	8002a62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d10a      	bne.n	8002aba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fe67 	bl	8002794 <HAL_UARTEx_RxEventCallback>
 8002ac6:	e002      	b.n	8002ace <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fe4f 	bl	800276c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e002      	b.n	8002ad8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3730      	adds	r7, #48	; 0x30
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae4:	b0c0      	sub	sp, #256	; 0x100
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afc:	68d9      	ldr	r1, [r3, #12]
 8002afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	ea40 0301 	orr.w	r3, r0, r1
 8002b08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b38:	f021 010c 	bic.w	r1, r1, #12
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b46:	430b      	orrs	r3, r1
 8002b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5a:	6999      	ldr	r1, [r3, #24]
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	ea40 0301 	orr.w	r3, r0, r1
 8002b66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b8f      	ldr	r3, [pc, #572]	; (8002dac <UART_SetConfig+0x2cc>)
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d005      	beq.n	8002b80 <UART_SetConfig+0xa0>
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4b8d      	ldr	r3, [pc, #564]	; (8002db0 <UART_SetConfig+0x2d0>)
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d104      	bne.n	8002b8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b80:	f7fe ffe0 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 8002b84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b88:	e003      	b.n	8002b92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b8a:	f7fe ffc7 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8002b8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b9c:	f040 810c 	bne.w	8002db8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002baa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	1891      	adds	r1, r2, r2
 8002bb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bba:	415b      	adcs	r3, r3
 8002bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	eb12 0801 	adds.w	r8, r2, r1
 8002bc8:	4629      	mov	r1, r5
 8002bca:	eb43 0901 	adc.w	r9, r3, r1
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002be2:	4690      	mov	r8, r2
 8002be4:	4699      	mov	r9, r3
 8002be6:	4623      	mov	r3, r4
 8002be8:	eb18 0303 	adds.w	r3, r8, r3
 8002bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bf0:	462b      	mov	r3, r5
 8002bf2:	eb49 0303 	adc.w	r3, r9, r3
 8002bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c0e:	460b      	mov	r3, r1
 8002c10:	18db      	adds	r3, r3, r3
 8002c12:	653b      	str	r3, [r7, #80]	; 0x50
 8002c14:	4613      	mov	r3, r2
 8002c16:	eb42 0303 	adc.w	r3, r2, r3
 8002c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c24:	f7fd fadc 	bl	80001e0 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4b61      	ldr	r3, [pc, #388]	; (8002db4 <UART_SetConfig+0x2d4>)
 8002c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	011c      	lsls	r4, r3, #4
 8002c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c48:	4642      	mov	r2, r8
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	1891      	adds	r1, r2, r2
 8002c4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c50:	415b      	adcs	r3, r3
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c58:	4641      	mov	r1, r8
 8002c5a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c5e:	4649      	mov	r1, r9
 8002c60:	eb43 0b01 	adc.w	fp, r3, r1
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c78:	4692      	mov	sl, r2
 8002c7a:	469b      	mov	fp, r3
 8002c7c:	4643      	mov	r3, r8
 8002c7e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c86:	464b      	mov	r3, r9
 8002c88:	eb4b 0303 	adc.w	r3, fp, r3
 8002c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ca0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	18db      	adds	r3, r3, r3
 8002ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8002caa:	4613      	mov	r3, r2
 8002cac:	eb42 0303 	adc.w	r3, r2, r3
 8002cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8002cb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cba:	f7fd fa91 	bl	80001e0 <__aeabi_uldivmod>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <UART_SetConfig+0x2d4>)
 8002cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	2264      	movs	r2, #100	; 0x64
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	1acb      	subs	r3, r1, r3
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cda:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <UART_SetConfig+0x2d4>)
 8002cdc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ce8:	441c      	add	r4, r3
 8002cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cfc:	4642      	mov	r2, r8
 8002cfe:	464b      	mov	r3, r9
 8002d00:	1891      	adds	r1, r2, r2
 8002d02:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d04:	415b      	adcs	r3, r3
 8002d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d0c:	4641      	mov	r1, r8
 8002d0e:	1851      	adds	r1, r2, r1
 8002d10:	6339      	str	r1, [r7, #48]	; 0x30
 8002d12:	4649      	mov	r1, r9
 8002d14:	414b      	adcs	r3, r1
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d24:	4659      	mov	r1, fp
 8002d26:	00cb      	lsls	r3, r1, #3
 8002d28:	4651      	mov	r1, sl
 8002d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d2e:	4651      	mov	r1, sl
 8002d30:	00ca      	lsls	r2, r1, #3
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	4642      	mov	r2, r8
 8002d3a:	189b      	adds	r3, r3, r2
 8002d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d40:	464b      	mov	r3, r9
 8002d42:	460a      	mov	r2, r1
 8002d44:	eb42 0303 	adc.w	r3, r2, r3
 8002d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d60:	460b      	mov	r3, r1
 8002d62:	18db      	adds	r3, r3, r3
 8002d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d66:	4613      	mov	r3, r2
 8002d68:	eb42 0303 	adc.w	r3, r2, r3
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d76:	f7fd fa33 	bl	80001e0 <__aeabi_uldivmod>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <UART_SetConfig+0x2d4>)
 8002d80:	fba3 1302 	umull	r1, r3, r3, r2
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	2164      	movs	r1, #100	; 0x64
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	3332      	adds	r3, #50	; 0x32
 8002d92:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <UART_SetConfig+0x2d4>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	f003 0207 	and.w	r2, r3, #7
 8002d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4422      	add	r2, r4
 8002da6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002da8:	e105      	b.n	8002fb6 <UART_SetConfig+0x4d6>
 8002daa:	bf00      	nop
 8002dac:	40011000 	.word	0x40011000
 8002db0:	40011400 	.word	0x40011400
 8002db4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dca:	4642      	mov	r2, r8
 8002dcc:	464b      	mov	r3, r9
 8002dce:	1891      	adds	r1, r2, r2
 8002dd0:	6239      	str	r1, [r7, #32]
 8002dd2:	415b      	adcs	r3, r3
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dda:	4641      	mov	r1, r8
 8002ddc:	1854      	adds	r4, r2, r1
 8002dde:	4649      	mov	r1, r9
 8002de0:	eb43 0501 	adc.w	r5, r3, r1
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	00eb      	lsls	r3, r5, #3
 8002dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002df2:	00e2      	lsls	r2, r4, #3
 8002df4:	4614      	mov	r4, r2
 8002df6:	461d      	mov	r5, r3
 8002df8:	4643      	mov	r3, r8
 8002dfa:	18e3      	adds	r3, r4, r3
 8002dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e00:	464b      	mov	r3, r9
 8002e02:	eb45 0303 	adc.w	r3, r5, r3
 8002e06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e26:	4629      	mov	r1, r5
 8002e28:	008b      	lsls	r3, r1, #2
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e30:	4621      	mov	r1, r4
 8002e32:	008a      	lsls	r2, r1, #2
 8002e34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e38:	f7fd f9d2 	bl	80001e0 <__aeabi_uldivmod>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4b60      	ldr	r3, [pc, #384]	; (8002fc4 <UART_SetConfig+0x4e4>)
 8002e42:	fba3 2302 	umull	r2, r3, r3, r2
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	011c      	lsls	r4, r3, #4
 8002e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e5c:	4642      	mov	r2, r8
 8002e5e:	464b      	mov	r3, r9
 8002e60:	1891      	adds	r1, r2, r2
 8002e62:	61b9      	str	r1, [r7, #24]
 8002e64:	415b      	adcs	r3, r3
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e6c:	4641      	mov	r1, r8
 8002e6e:	1851      	adds	r1, r2, r1
 8002e70:	6139      	str	r1, [r7, #16]
 8002e72:	4649      	mov	r1, r9
 8002e74:	414b      	adcs	r3, r1
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e84:	4659      	mov	r1, fp
 8002e86:	00cb      	lsls	r3, r1, #3
 8002e88:	4651      	mov	r1, sl
 8002e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e8e:	4651      	mov	r1, sl
 8002e90:	00ca      	lsls	r2, r1, #3
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	4603      	mov	r3, r0
 8002e98:	4642      	mov	r2, r8
 8002e9a:	189b      	adds	r3, r3, r2
 8002e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ea0:	464b      	mov	r3, r9
 8002ea2:	460a      	mov	r2, r1
 8002ea4:	eb42 0303 	adc.w	r3, r2, r3
 8002ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	008b      	lsls	r3, r1, #2
 8002ec8:	4641      	mov	r1, r8
 8002eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ece:	4641      	mov	r1, r8
 8002ed0:	008a      	lsls	r2, r1, #2
 8002ed2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ed6:	f7fd f983 	bl	80001e0 <__aeabi_uldivmod>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <UART_SetConfig+0x4e4>)
 8002ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	2164      	movs	r1, #100	; 0x64
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	3332      	adds	r3, #50	; 0x32
 8002ef2:	4a34      	ldr	r2, [pc, #208]	; (8002fc4 <UART_SetConfig+0x4e4>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002efe:	441c      	add	r4, r3
 8002f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f04:	2200      	movs	r2, #0
 8002f06:	673b      	str	r3, [r7, #112]	; 0x70
 8002f08:	677a      	str	r2, [r7, #116]	; 0x74
 8002f0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f0e:	4642      	mov	r2, r8
 8002f10:	464b      	mov	r3, r9
 8002f12:	1891      	adds	r1, r2, r2
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	415b      	adcs	r3, r3
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f1e:	4641      	mov	r1, r8
 8002f20:	1851      	adds	r1, r2, r1
 8002f22:	6039      	str	r1, [r7, #0]
 8002f24:	4649      	mov	r1, r9
 8002f26:	414b      	adcs	r3, r1
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f36:	4659      	mov	r1, fp
 8002f38:	00cb      	lsls	r3, r1, #3
 8002f3a:	4651      	mov	r1, sl
 8002f3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f40:	4651      	mov	r1, sl
 8002f42:	00ca      	lsls	r2, r1, #3
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4642      	mov	r2, r8
 8002f4c:	189b      	adds	r3, r3, r2
 8002f4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f50:	464b      	mov	r3, r9
 8002f52:	460a      	mov	r2, r1
 8002f54:	eb42 0303 	adc.w	r3, r2, r3
 8002f58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	663b      	str	r3, [r7, #96]	; 0x60
 8002f64:	667a      	str	r2, [r7, #100]	; 0x64
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f72:	4649      	mov	r1, r9
 8002f74:	008b      	lsls	r3, r1, #2
 8002f76:	4641      	mov	r1, r8
 8002f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	008a      	lsls	r2, r1, #2
 8002f80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f84:	f7fd f92c 	bl	80001e0 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <UART_SetConfig+0x4e4>)
 8002f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2164      	movs	r1, #100	; 0x64
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	3332      	adds	r3, #50	; 0x32
 8002fa0:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <UART_SetConfig+0x4e4>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	f003 020f 	and.w	r2, r3, #15
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4422      	add	r2, r4
 8002fb4:	609a      	str	r2, [r3, #8]
}
 8002fb6:	bf00      	nop
 8002fb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fc2:	bf00      	nop
 8002fc4:	51eb851f 	.word	0x51eb851f

08002fc8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <SysTick_Handler+0x1c>)
 8002fce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002fd0:	f001 fc36 	bl	8004840 <xTaskGetSchedulerState>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d001      	beq.n	8002fde <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002fda:	f002 fafd 	bl	80055d8 <xPortSysTickHandler>
  }
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	e000e010 	.word	0xe000e010

08002fe8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4a07      	ldr	r2, [pc, #28]	; (8003014 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ff8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	4a06      	ldr	r2, [pc, #24]	; (8003018 <vApplicationGetIdleTaskMemory+0x30>)
 8002ffe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	601a      	str	r2, [r3, #0]
}
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000130 	.word	0x20000130
 8003018:	200001ec 	.word	0x200001ec

0800301c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a07      	ldr	r2, [pc, #28]	; (8003048 <vApplicationGetTimerTaskMemory+0x2c>)
 800302c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4a06      	ldr	r2, [pc, #24]	; (800304c <vApplicationGetTimerTaskMemory+0x30>)
 8003032:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800303a:	601a      	str	r2, [r3, #0]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	200003ec 	.word	0x200003ec
 800304c:	200004a8 	.word	0x200004a8

08003050 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f103 0208 	add.w	r2, r3, #8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f04f 32ff 	mov.w	r2, #4294967295
 8003068:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f103 0208 	add.w	r2, r3, #8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f103 0208 	add.w	r2, r3, #8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030aa:	b480      	push	{r7}
 80030ac:	b085      	sub	sp, #20
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d103      	bne.n	8003112 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e00c      	b.n	800312c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3308      	adds	r3, #8
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	e002      	b.n	8003120 <vListInsert+0x2e>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	429a      	cmp	r2, r3
 800312a:	d2f6      	bcs.n	800311a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	601a      	str	r2, [r3, #0]
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6892      	ldr	r2, [r2, #8]
 800317a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6852      	ldr	r2, [r2, #4]
 8003184:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d103      	bne.n	8003198 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	1e5a      	subs	r2, r3, #1
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10a      	bne.n	80031e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031de:	bf00      	nop
 80031e0:	e7fe      	b.n	80031e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80031e2:	f002 f967 	bl	80054b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	441a      	add	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	3b01      	subs	r3, #1
 8003214:	68f9      	ldr	r1, [r7, #12]
 8003216:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	441a      	add	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	22ff      	movs	r2, #255	; 0xff
 800322e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d114      	bne.n	8003262 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01a      	beq.n	8003276 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3310      	adds	r3, #16
 8003244:	4618      	mov	r0, r3
 8003246:	f001 f929 	bl	800449c <xTaskRemoveFromEventList>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d012      	beq.n	8003276 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <xQueueGenericReset+0xcc>)
 8003252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	e009      	b.n	8003276 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3310      	adds	r3, #16
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fef2 	bl	8003050 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3324      	adds	r3, #36	; 0x24
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff feed 	bl	8003050 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003276:	f002 f94d 	bl	8005514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800327a:	2301      	movs	r3, #1
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	e000ed04 	.word	0xe000ed04

08003288 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08e      	sub	sp, #56	; 0x38
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032ca:	bf00      	nop
 80032cc:	e7fe      	b.n	80032cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <xQueueGenericCreateStatic+0x52>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <xQueueGenericCreateStatic+0x56>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <xQueueGenericCreateStatic+0x58>
 80032de:	2300      	movs	r3, #0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	623b      	str	r3, [r7, #32]
}
 80032f6:	bf00      	nop
 80032f8:	e7fe      	b.n	80032f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <xQueueGenericCreateStatic+0x7e>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <xQueueGenericCreateStatic+0x82>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <xQueueGenericCreateStatic+0x84>
 800330a:	2300      	movs	r3, #0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	61fb      	str	r3, [r7, #28]
}
 8003322:	bf00      	nop
 8003324:	e7fe      	b.n	8003324 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003326:	2350      	movs	r3, #80	; 0x50
 8003328:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b50      	cmp	r3, #80	; 0x50
 800332e:	d00a      	beq.n	8003346 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	61bb      	str	r3, [r7, #24]
}
 8003342:	bf00      	nop
 8003344:	e7fe      	b.n	8003344 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003346:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00d      	beq.n	800336e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800335a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	4613      	mov	r3, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f805 	bl	8003378 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003370:	4618      	mov	r0, r3
 8003372:	3730      	adds	r7, #48	; 0x30
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d103      	bne.n	8003394 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e002      	b.n	800339a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033a6:	2101      	movs	r1, #1
 80033a8:	69b8      	ldr	r0, [r7, #24]
 80033aa:	f7ff ff05 	bl	80031b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08e      	sub	sp, #56	; 0x38
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033ce:	2300      	movs	r3, #0
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <xQueueGenericSend+0x32>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033ee:	bf00      	nop
 80033f0:	e7fe      	b.n	80033f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d103      	bne.n	8003400 <xQueueGenericSend+0x40>
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <xQueueGenericSend+0x44>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <xQueueGenericSend+0x46>
 8003404:	2300      	movs	r3, #0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <xQueueGenericSend+0x60>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d103      	bne.n	800342e <xQueueGenericSend+0x6e>
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <xQueueGenericSend+0x72>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <xQueueGenericSend+0x74>
 8003432:	2300      	movs	r3, #0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <xQueueGenericSend+0x8e>
	__asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	623b      	str	r3, [r7, #32]
}
 800344a:	bf00      	nop
 800344c:	e7fe      	b.n	800344c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800344e:	f001 f9f7 	bl	8004840 <xTaskGetSchedulerState>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d102      	bne.n	800345e <xQueueGenericSend+0x9e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <xQueueGenericSend+0xa2>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <xQueueGenericSend+0xa4>
 8003462:	2300      	movs	r3, #0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <xQueueGenericSend+0xbe>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	61fb      	str	r3, [r7, #28]
}
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800347e:	f002 f819 	bl	80054b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <xQueueGenericSend+0xd4>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d129      	bne.n	80034e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800349a:	f000 fa0b 	bl	80038b4 <prvCopyDataToQueue>
 800349e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d010      	beq.n	80034ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	3324      	adds	r3, #36	; 0x24
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fff5 	bl	800449c <xTaskRemoveFromEventList>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d013      	beq.n	80034e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034b8:	4b3f      	ldr	r3, [pc, #252]	; (80035b8 <xQueueGenericSend+0x1f8>)
 80034ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	e00a      	b.n	80034e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034d0:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <xQueueGenericSend+0x1f8>)
 80034d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034e0:	f002 f818 	bl	8005514 <vPortExitCritical>
				return pdPASS;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e063      	b.n	80035b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d103      	bne.n	80034f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034ee:	f002 f811 	bl	8005514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e05c      	b.n	80035b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	4618      	mov	r0, r3
 8003502:	f001 f82f 	bl	8004564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003506:	2301      	movs	r3, #1
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800350a:	f002 f803 	bl	8005514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800350e:	f000 fd9b 	bl	8004048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003512:	f001 ffcf 	bl	80054b4 <vPortEnterCritical>
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800351c:	b25b      	sxtb	r3, r3
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d103      	bne.n	800352c <xQueueGenericSend+0x16c>
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003532:	b25b      	sxtb	r3, r3
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d103      	bne.n	8003542 <xQueueGenericSend+0x182>
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003542:	f001 ffe7 	bl	8005514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003546:	1d3a      	adds	r2, r7, #4
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f001 f81e 	bl	8004590 <xTaskCheckForTimeOut>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d124      	bne.n	80035a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800355a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800355c:	f000 faa2 	bl	8003aa4 <prvIsQueueFull>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d018      	beq.n	8003598 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	3310      	adds	r3, #16
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f000 ff44 	bl	80043fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003576:	f000 fa2d 	bl	80039d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800357a:	f000 fd73 	bl	8004064 <xTaskResumeAll>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	f47f af7c 	bne.w	800347e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <xQueueGenericSend+0x1f8>)
 8003588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	e772      	b.n	800347e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800359a:	f000 fa1b 	bl	80039d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800359e:	f000 fd61 	bl	8004064 <xTaskResumeAll>
 80035a2:	e76c      	b.n	800347e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035a6:	f000 fa15 	bl	80039d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035aa:	f000 fd5b 	bl	8004064 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3738      	adds	r7, #56	; 0x38
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b090      	sub	sp, #64	; 0x40
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d103      	bne.n	80035f8 <xQueueGenericSendFromISR+0x3c>
 80035f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <xQueueGenericSendFromISR+0x40>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <xQueueGenericSendFromISR+0x42>
 80035fc:	2300      	movs	r3, #0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10a      	bne.n	8003618 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003614:	bf00      	nop
 8003616:	e7fe      	b.n	8003616 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d103      	bne.n	8003626 <xQueueGenericSendFromISR+0x6a>
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <xQueueGenericSendFromISR+0x6e>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <xQueueGenericSendFromISR+0x70>
 800362a:	2300      	movs	r3, #0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	623b      	str	r3, [r7, #32]
}
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003646:	f002 f817 	bl	8005678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800364a:	f3ef 8211 	mrs	r2, BASEPRI
 800364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	61fa      	str	r2, [r7, #28]
 8003660:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003662:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003664:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <xQueueGenericSendFromISR+0xbc>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d12f      	bne.n	80036d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800367e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800368e:	f000 f911 	bl	80038b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003692:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d112      	bne.n	80036c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d016      	beq.n	80036d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	3324      	adds	r3, #36	; 0x24
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fef7 	bl	800449c <xTaskRemoveFromEventList>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00e      	beq.n	80036d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e007      	b.n	80036d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036c6:	3301      	adds	r3, #1
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	b25a      	sxtb	r2, r3
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80036d2:	2301      	movs	r3, #1
 80036d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80036d6:	e001      	b.n	80036dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3740      	adds	r7, #64	; 0x40
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08c      	sub	sp, #48	; 0x30
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003700:	2300      	movs	r3, #0
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <xQueueReceive+0x30>
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	623b      	str	r3, [r7, #32]
}
 8003720:	bf00      	nop
 8003722:	e7fe      	b.n	8003722 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <xQueueReceive+0x3e>
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <xQueueReceive+0x42>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <xQueueReceive+0x44>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10a      	bne.n	8003752 <xQueueReceive+0x5e>
	__asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	61fb      	str	r3, [r7, #28]
}
 800374e:	bf00      	nop
 8003750:	e7fe      	b.n	8003750 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003752:	f001 f875 	bl	8004840 <xTaskGetSchedulerState>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d102      	bne.n	8003762 <xQueueReceive+0x6e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <xQueueReceive+0x72>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <xQueueReceive+0x74>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <xQueueReceive+0x8e>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	61bb      	str	r3, [r7, #24]
}
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003782:	f001 fe97 	bl	80054b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01f      	beq.n	80037d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003796:	f000 f8f7 	bl	8003988 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	1e5a      	subs	r2, r3, #1
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00f      	beq.n	80037ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	3310      	adds	r3, #16
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fe74 	bl	800449c <xTaskRemoveFromEventList>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037ba:	4b3d      	ldr	r3, [pc, #244]	; (80038b0 <xQueueReceive+0x1bc>)
 80037bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037ca:	f001 fea3 	bl	8005514 <vPortExitCritical>
				return pdPASS;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e069      	b.n	80038a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d103      	bne.n	80037e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037d8:	f001 fe9c 	bl	8005514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037dc:	2300      	movs	r3, #0
 80037de:	e062      	b.n	80038a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037e6:	f107 0310 	add.w	r3, r7, #16
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 feba 	bl	8004564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037f0:	2301      	movs	r3, #1
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037f4:	f001 fe8e 	bl	8005514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037f8:	f000 fc26 	bl	8004048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037fc:	f001 fe5a 	bl	80054b4 <vPortEnterCritical>
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003806:	b25b      	sxtb	r3, r3
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d103      	bne.n	8003816 <xQueueReceive+0x122>
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800381c:	b25b      	sxtb	r3, r3
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003822:	d103      	bne.n	800382c <xQueueReceive+0x138>
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800382c:	f001 fe72 	bl	8005514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003830:	1d3a      	adds	r2, r7, #4
 8003832:	f107 0310 	add.w	r3, r7, #16
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fea9 	bl	8004590 <xTaskCheckForTimeOut>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d123      	bne.n	800388c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003846:	f000 f917 	bl	8003a78 <prvIsQueueEmpty>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d017      	beq.n	8003880 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	3324      	adds	r3, #36	; 0x24
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fdcf 	bl	80043fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800385e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003860:	f000 f8b8 	bl	80039d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003864:	f000 fbfe 	bl	8004064 <xTaskResumeAll>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d189      	bne.n	8003782 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <xQueueReceive+0x1bc>)
 8003870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	e780      	b.n	8003782 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003882:	f000 f8a7 	bl	80039d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003886:	f000 fbed 	bl	8004064 <xTaskResumeAll>
 800388a:	e77a      	b.n	8003782 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800388c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800388e:	f000 f8a1 	bl	80039d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003892:	f000 fbe7 	bl	8004064 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003898:	f000 f8ee 	bl	8003a78 <prvIsQueueEmpty>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f43f af6f 	beq.w	8003782 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3730      	adds	r7, #48	; 0x30
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	e000ed04 	.word	0xe000ed04

080038b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10d      	bne.n	80038ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d14d      	bne.n	8003976 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 ffcc 	bl	800487c <xTaskPriorityDisinherit>
 80038e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	e043      	b.n	8003976 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d119      	bne.n	8003928 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6858      	ldr	r0, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	461a      	mov	r2, r3
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	f002 f90a 	bl	8005b18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	441a      	add	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	429a      	cmp	r2, r3
 800391c:	d32b      	bcc.n	8003976 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	e026      	b.n	8003976 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	68d8      	ldr	r0, [r3, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	461a      	mov	r2, r3
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	f002 f8f0 	bl	8005b18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	425b      	negs	r3, r3
 8003942:	441a      	add	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d207      	bcs.n	8003964 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	425b      	negs	r3, r3
 800395e:	441a      	add	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d105      	bne.n	8003976 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	3b01      	subs	r3, #1
 8003974:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800397e:	697b      	ldr	r3, [r7, #20]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	441a      	add	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d303      	bcc.n	80039bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68d9      	ldr	r1, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	461a      	mov	r2, r3
 80039c6:	6838      	ldr	r0, [r7, #0]
 80039c8:	f002 f8a6 	bl	8005b18 <memcpy>
	}
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039dc:	f001 fd6a 	bl	80054b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039e8:	e011      	b.n	8003a0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d012      	beq.n	8003a18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3324      	adds	r3, #36	; 0x24
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fd50 	bl	800449c <xTaskRemoveFromEventList>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a02:	f000 fe27 	bl	8004654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	dce9      	bgt.n	80039ea <prvUnlockQueue+0x16>
 8003a16:	e000      	b.n	8003a1a <prvUnlockQueue+0x46>
					break;
 8003a18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	22ff      	movs	r2, #255	; 0xff
 8003a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a22:	f001 fd77 	bl	8005514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a26:	f001 fd45 	bl	80054b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a32:	e011      	b.n	8003a58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d012      	beq.n	8003a62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3310      	adds	r3, #16
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fd2b 	bl	800449c <xTaskRemoveFromEventList>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a4c:	f000 fe02 	bl	8004654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a50:	7bbb      	ldrb	r3, [r7, #14]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	dce9      	bgt.n	8003a34 <prvUnlockQueue+0x60>
 8003a60:	e000      	b.n	8003a64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	22ff      	movs	r2, #255	; 0xff
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a6c:	f001 fd52 	bl	8005514 <vPortExitCritical>
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a80:	f001 fd18 	bl	80054b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	e001      	b.n	8003a96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a96:	f001 fd3d 	bl	8005514 <vPortExitCritical>

	return xReturn;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003aac:	f001 fd02 	bl	80054b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d102      	bne.n	8003ac2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003abc:	2301      	movs	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e001      	b.n	8003ac6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ac6:	f001 fd25 	bl	8005514 <vPortExitCritical>

	return xReturn;
 8003aca:	68fb      	ldr	r3, [r7, #12]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	e014      	b.n	8003b0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ae4:	4a0f      	ldr	r2, [pc, #60]	; (8003b24 <vQueueAddToRegistry+0x50>)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003af0:	490c      	ldr	r1, [pc, #48]	; (8003b24 <vQueueAddToRegistry+0x50>)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <vQueueAddToRegistry+0x50>)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b06:	e006      	b.n	8003b16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b07      	cmp	r3, #7
 8003b12:	d9e7      	bls.n	8003ae4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	200008a8 	.word	0x200008a8

08003b28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b38:	f001 fcbc 	bl	80054b4 <vPortEnterCritical>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b42:	b25b      	sxtb	r3, r3
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d103      	bne.n	8003b52 <vQueueWaitForMessageRestricted+0x2a>
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b58:	b25b      	sxtb	r3, r3
 8003b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5e:	d103      	bne.n	8003b68 <vQueueWaitForMessageRestricted+0x40>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b68:	f001 fcd4 	bl	8005514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d106      	bne.n	8003b82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	3324      	adds	r3, #36	; 0x24
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fc61 	bl	8004444 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b82:	6978      	ldr	r0, [r7, #20]
 8003b84:	f7ff ff26 	bl	80039d4 <prvUnlockQueue>
	}
 8003b88:	bf00      	nop
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08e      	sub	sp, #56	; 0x38
 8003b94:	af04      	add	r7, sp, #16
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	623b      	str	r3, [r7, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	e7fe      	b.n	8003bb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	61fb      	str	r3, [r7, #28]
}
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003bd6:	23bc      	movs	r3, #188	; 0xbc
 8003bd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2bbc      	cmp	r3, #188	; 0xbc
 8003bde:	d00a      	beq.n	8003bf6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	61bb      	str	r3, [r7, #24]
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003bf6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01e      	beq.n	8003c3c <xTaskCreateStatic+0xac>
 8003bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01b      	beq.n	8003c3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c16:	2300      	movs	r3, #0
 8003c18:	9303      	str	r3, [sp, #12]
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	9302      	str	r3, [sp, #8]
 8003c1e:	f107 0314 	add.w	r3, r7, #20
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f850 	bl	8003cd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c36:	f000 f8f3 	bl	8003e20 <prvAddNewTaskToReadyList>
 8003c3a:	e001      	b.n	8003c40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c40:	697b      	ldr	r3, [r7, #20]
	}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3728      	adds	r7, #40	; 0x28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b08c      	sub	sp, #48	; 0x30
 8003c4e:	af04      	add	r7, sp, #16
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 fd4a 	bl	80056f8 <pvPortMalloc>
 8003c64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c6c:	20bc      	movs	r0, #188	; 0xbc
 8003c6e:	f001 fd43 	bl	80056f8 <pvPortMalloc>
 8003c72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c80:	e005      	b.n	8003c8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c82:	6978      	ldr	r0, [r7, #20]
 8003c84:	f001 fe04 	bl	8005890 <vPortFree>
 8003c88:	e001      	b.n	8003c8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d017      	beq.n	8003cc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c9c:	88fa      	ldrh	r2, [r7, #6]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9303      	str	r3, [sp, #12]
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	9302      	str	r3, [sp, #8]
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f80e 	bl	8003cd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cb8:	69f8      	ldr	r0, [r7, #28]
 8003cba:	f000 f8b1 	bl	8003e20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	e002      	b.n	8003cca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cca:	69bb      	ldr	r3, [r7, #24]
	}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3720      	adds	r7, #32
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	461a      	mov	r2, r3
 8003cec:	21a5      	movs	r1, #165	; 0xa5
 8003cee:	f001 ff21 	bl	8005b34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f023 0307 	bic.w	r3, r3, #7
 8003d0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	617b      	str	r3, [r7, #20]
}
 8003d28:	bf00      	nop
 8003d2a:	e7fe      	b.n	8003d2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01f      	beq.n	8003d72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	e012      	b.n	8003d5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	7819      	ldrb	r1, [r3, #0]
 8003d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4413      	add	r3, r2
 8003d46:	3334      	adds	r3, #52	; 0x34
 8003d48:	460a      	mov	r2, r1
 8003d4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d006      	beq.n	8003d66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	2b0f      	cmp	r3, #15
 8003d62:	d9e9      	bls.n	8003d38 <prvInitialiseNewTask+0x64>
 8003d64:	e000      	b.n	8003d68 <prvInitialiseNewTask+0x94>
			{
				break;
 8003d66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d70:	e003      	b.n	8003d7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	2b37      	cmp	r3, #55	; 0x37
 8003d7e:	d901      	bls.n	8003d84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d80:	2337      	movs	r3, #55	; 0x37
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	2200      	movs	r2, #0
 8003d94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff f978 	bl	8003090 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	3318      	adds	r3, #24
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff f973 	bl	8003090 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	3354      	adds	r3, #84	; 0x54
 8003dd4:	2260      	movs	r2, #96	; 0x60
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 feab 	bl	8005b34 <memset>
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	4a0c      	ldr	r2, [pc, #48]	; (8003e14 <prvInitialiseNewTask+0x140>)
 8003de2:	659a      	str	r2, [r3, #88]	; 0x58
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	4a0c      	ldr	r2, [pc, #48]	; (8003e18 <prvInitialiseNewTask+0x144>)
 8003de8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <prvInitialiseNewTask+0x148>)
 8003dee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	68f9      	ldr	r1, [r7, #12]
 8003df4:	69b8      	ldr	r0, [r7, #24]
 8003df6:	f001 fa31 	bl	800525c <pxPortInitialiseStack>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e0c:	bf00      	nop
 8003e0e:	3720      	adds	r7, #32
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	08005d48 	.word	0x08005d48
 8003e18:	08005d68 	.word	0x08005d68
 8003e1c:	08005d28 	.word	0x08005d28

08003e20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e28:	f001 fb44 	bl	80054b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ee4 <prvAddNewTaskToReadyList+0xc4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	4a2c      	ldr	r2, [pc, #176]	; (8003ee4 <prvAddNewTaskToReadyList+0xc4>)
 8003e34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e36:	4b2c      	ldr	r3, [pc, #176]	; (8003ee8 <prvAddNewTaskToReadyList+0xc8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <prvAddNewTaskToReadyList+0xc8>)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e44:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <prvAddNewTaskToReadyList+0xc4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d110      	bne.n	8003e6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e4c:	f000 fc26 	bl	800469c <prvInitialiseTaskLists>
 8003e50:	e00d      	b.n	8003e6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e52:	4b26      	ldr	r3, [pc, #152]	; (8003eec <prvAddNewTaskToReadyList+0xcc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e5a:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <prvAddNewTaskToReadyList+0xc8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d802      	bhi.n	8003e6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e68:	4a1f      	ldr	r2, [pc, #124]	; (8003ee8 <prvAddNewTaskToReadyList+0xc8>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <prvAddNewTaskToReadyList+0xd0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3301      	adds	r3, #1
 8003e74:	4a1e      	ldr	r2, [pc, #120]	; (8003ef0 <prvAddNewTaskToReadyList+0xd0>)
 8003e76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <prvAddNewTaskToReadyList+0xd0>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <prvAddNewTaskToReadyList+0xd4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d903      	bls.n	8003e94 <prvAddNewTaskToReadyList+0x74>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	4a18      	ldr	r2, [pc, #96]	; (8003ef4 <prvAddNewTaskToReadyList+0xd4>)
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <prvAddNewTaskToReadyList+0xd8>)
 8003ea2:	441a      	add	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f7ff f8fd 	bl	80030aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003eb0:	f001 fb30 	bl	8005514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003eb4:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <prvAddNewTaskToReadyList+0xcc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00e      	beq.n	8003eda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <prvAddNewTaskToReadyList+0xc8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d207      	bcs.n	8003eda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003eca:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <prvAddNewTaskToReadyList+0xdc>)
 8003ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000dbc 	.word	0x20000dbc
 8003ee8:	200008e8 	.word	0x200008e8
 8003eec:	20000dc8 	.word	0x20000dc8
 8003ef0:	20000dd8 	.word	0x20000dd8
 8003ef4:	20000dc4 	.word	0x20000dc4
 8003ef8:	200008ec 	.word	0x200008ec
 8003efc:	e000ed04 	.word	0xe000ed04

08003f00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d017      	beq.n	8003f42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <vTaskDelay+0x60>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <vTaskDelay+0x30>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	60bb      	str	r3, [r7, #8]
}
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f30:	f000 f88a 	bl	8004048 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f34:	2100      	movs	r1, #0
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fdee 	bl	8004b18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f3c:	f000 f892 	bl	8004064 <xTaskResumeAll>
 8003f40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d107      	bne.n	8003f58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <vTaskDelay+0x64>)
 8003f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20000de4 	.word	0x20000de4
 8003f64:	e000ed04 	.word	0xe000ed04

08003f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	; 0x28
 8003f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f76:	463a      	mov	r2, r7
 8003f78:	1d39      	adds	r1, r7, #4
 8003f7a:	f107 0308 	add.w	r3, r7, #8
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff f832 	bl	8002fe8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f84:	6839      	ldr	r1, [r7, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	9202      	str	r2, [sp, #8]
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	2300      	movs	r3, #0
 8003f94:	460a      	mov	r2, r1
 8003f96:	4924      	ldr	r1, [pc, #144]	; (8004028 <vTaskStartScheduler+0xc0>)
 8003f98:	4824      	ldr	r0, [pc, #144]	; (800402c <vTaskStartScheduler+0xc4>)
 8003f9a:	f7ff fdf9 	bl	8003b90 <xTaskCreateStatic>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a23      	ldr	r2, [pc, #140]	; (8004030 <vTaskStartScheduler+0xc8>)
 8003fa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fa4:	4b22      	ldr	r3, [pc, #136]	; (8004030 <vTaskStartScheduler+0xc8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fac:	2301      	movs	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e001      	b.n	8003fb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d102      	bne.n	8003fc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003fbc:	f000 fe00 	bl	8004bc0 <xTimerCreateTimerTask>
 8003fc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d11b      	bne.n	8004000 <vTaskStartScheduler+0x98>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	613b      	str	r3, [r7, #16]
}
 8003fda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fdc:	4b15      	ldr	r3, [pc, #84]	; (8004034 <vTaskStartScheduler+0xcc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3354      	adds	r3, #84	; 0x54
 8003fe2:	4a15      	ldr	r2, [pc, #84]	; (8004038 <vTaskStartScheduler+0xd0>)
 8003fe4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <vTaskStartScheduler+0xd4>)
 8003fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fee:	4b14      	ldr	r3, [pc, #80]	; (8004040 <vTaskStartScheduler+0xd8>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ff4:	4b13      	ldr	r3, [pc, #76]	; (8004044 <vTaskStartScheduler+0xdc>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ffa:	f001 f9b9 	bl	8005370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ffe:	e00e      	b.n	800401e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d10a      	bne.n	800401e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	60fb      	str	r3, [r7, #12]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <vTaskStartScheduler+0xb4>
}
 800401e:	bf00      	nop
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	08005cf8 	.word	0x08005cf8
 800402c:	0800466d 	.word	0x0800466d
 8004030:	20000de0 	.word	0x20000de0
 8004034:	200008e8 	.word	0x200008e8
 8004038:	20000010 	.word	0x20000010
 800403c:	20000ddc 	.word	0x20000ddc
 8004040:	20000dc8 	.word	0x20000dc8
 8004044:	20000dc0 	.word	0x20000dc0

08004048 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <vTaskSuspendAll+0x18>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3301      	adds	r3, #1
 8004052:	4a03      	ldr	r2, [pc, #12]	; (8004060 <vTaskSuspendAll+0x18>)
 8004054:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004056:	bf00      	nop
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	20000de4 	.word	0x20000de4

08004064 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800406e:	2300      	movs	r3, #0
 8004070:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004072:	4b42      	ldr	r3, [pc, #264]	; (800417c <xTaskResumeAll+0x118>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <xTaskResumeAll+0x2c>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	603b      	str	r3, [r7, #0]
}
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004090:	f001 fa10 	bl	80054b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004094:	4b39      	ldr	r3, [pc, #228]	; (800417c <xTaskResumeAll+0x118>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3b01      	subs	r3, #1
 800409a:	4a38      	ldr	r2, [pc, #224]	; (800417c <xTaskResumeAll+0x118>)
 800409c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800409e:	4b37      	ldr	r3, [pc, #220]	; (800417c <xTaskResumeAll+0x118>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d162      	bne.n	800416c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040a6:	4b36      	ldr	r3, [pc, #216]	; (8004180 <xTaskResumeAll+0x11c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d05e      	beq.n	800416c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ae:	e02f      	b.n	8004110 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b0:	4b34      	ldr	r3, [pc, #208]	; (8004184 <xTaskResumeAll+0x120>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3318      	adds	r3, #24
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff f851 	bl	8003164 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff f84c 	bl	8003164 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d0:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <xTaskResumeAll+0x124>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d903      	bls.n	80040e0 <xTaskResumeAll+0x7c>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <xTaskResumeAll+0x124>)
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4a27      	ldr	r2, [pc, #156]	; (800418c <xTaskResumeAll+0x128>)
 80040ee:	441a      	add	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f7fe ffd7 	bl	80030aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	4b23      	ldr	r3, [pc, #140]	; (8004190 <xTaskResumeAll+0x12c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800410a:	4b22      	ldr	r3, [pc, #136]	; (8004194 <xTaskResumeAll+0x130>)
 800410c:	2201      	movs	r2, #1
 800410e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004110:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <xTaskResumeAll+0x120>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1cb      	bne.n	80040b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800411e:	f000 fb5f 	bl	80047e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <xTaskResumeAll+0x134>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d010      	beq.n	8004150 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800412e:	f000 f847 	bl	80041c0 <xTaskIncrementTick>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004138:	4b16      	ldr	r3, [pc, #88]	; (8004194 <xTaskResumeAll+0x130>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3b01      	subs	r3, #1
 8004142:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f1      	bne.n	800412e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <xTaskResumeAll+0x134>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004150:	4b10      	ldr	r3, [pc, #64]	; (8004194 <xTaskResumeAll+0x130>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d009      	beq.n	800416c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800415c:	4b0f      	ldr	r3, [pc, #60]	; (800419c <xTaskResumeAll+0x138>)
 800415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800416c:	f001 f9d2 	bl	8005514 <vPortExitCritical>

	return xAlreadyYielded;
 8004170:	68bb      	ldr	r3, [r7, #8]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000de4 	.word	0x20000de4
 8004180:	20000dbc 	.word	0x20000dbc
 8004184:	20000d7c 	.word	0x20000d7c
 8004188:	20000dc4 	.word	0x20000dc4
 800418c:	200008ec 	.word	0x200008ec
 8004190:	200008e8 	.word	0x200008e8
 8004194:	20000dd0 	.word	0x20000dd0
 8004198:	20000dcc 	.word	0x20000dcc
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <xTaskGetTickCount+0x1c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041ac:	687b      	ldr	r3, [r7, #4]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000dc0 	.word	0x20000dc0

080041c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ca:	4b4f      	ldr	r3, [pc, #316]	; (8004308 <xTaskIncrementTick+0x148>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f040 808f 	bne.w	80042f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041d4:	4b4d      	ldr	r3, [pc, #308]	; (800430c <xTaskIncrementTick+0x14c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3301      	adds	r3, #1
 80041da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041dc:	4a4b      	ldr	r2, [pc, #300]	; (800430c <xTaskIncrementTick+0x14c>)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d120      	bne.n	800422a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80041e8:	4b49      	ldr	r3, [pc, #292]	; (8004310 <xTaskIncrementTick+0x150>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <xTaskIncrementTick+0x48>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	603b      	str	r3, [r7, #0]
}
 8004204:	bf00      	nop
 8004206:	e7fe      	b.n	8004206 <xTaskIncrementTick+0x46>
 8004208:	4b41      	ldr	r3, [pc, #260]	; (8004310 <xTaskIncrementTick+0x150>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	4b41      	ldr	r3, [pc, #260]	; (8004314 <xTaskIncrementTick+0x154>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a3f      	ldr	r2, [pc, #252]	; (8004310 <xTaskIncrementTick+0x150>)
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	4a3f      	ldr	r2, [pc, #252]	; (8004314 <xTaskIncrementTick+0x154>)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	4b3e      	ldr	r3, [pc, #248]	; (8004318 <xTaskIncrementTick+0x158>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3301      	adds	r3, #1
 8004222:	4a3d      	ldr	r2, [pc, #244]	; (8004318 <xTaskIncrementTick+0x158>)
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	f000 fadb 	bl	80047e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800422a:	4b3c      	ldr	r3, [pc, #240]	; (800431c <xTaskIncrementTick+0x15c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	429a      	cmp	r2, r3
 8004232:	d349      	bcc.n	80042c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004234:	4b36      	ldr	r3, [pc, #216]	; (8004310 <xTaskIncrementTick+0x150>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d104      	bne.n	8004248 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800423e:	4b37      	ldr	r3, [pc, #220]	; (800431c <xTaskIncrementTick+0x15c>)
 8004240:	f04f 32ff 	mov.w	r2, #4294967295
 8004244:	601a      	str	r2, [r3, #0]
					break;
 8004246:	e03f      	b.n	80042c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004248:	4b31      	ldr	r3, [pc, #196]	; (8004310 <xTaskIncrementTick+0x150>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	d203      	bcs.n	8004268 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004260:	4a2e      	ldr	r2, [pc, #184]	; (800431c <xTaskIncrementTick+0x15c>)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004266:	e02f      	b.n	80042c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	3304      	adds	r3, #4
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe ff79 	bl	8003164 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	3318      	adds	r3, #24
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe ff70 	bl	8003164 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004288:	4b25      	ldr	r3, [pc, #148]	; (8004320 <xTaskIncrementTick+0x160>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d903      	bls.n	8004298 <xTaskIncrementTick+0xd8>
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	4a22      	ldr	r2, [pc, #136]	; (8004320 <xTaskIncrementTick+0x160>)
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <xTaskIncrementTick+0x164>)
 80042a6:	441a      	add	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	3304      	adds	r3, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f7fe fefb 	bl	80030aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b8:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <xTaskIncrementTick+0x168>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	429a      	cmp	r2, r3
 80042c0:	d3b8      	bcc.n	8004234 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042c2:	2301      	movs	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c6:	e7b5      	b.n	8004234 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042c8:	4b17      	ldr	r3, [pc, #92]	; (8004328 <xTaskIncrementTick+0x168>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	4915      	ldr	r1, [pc, #84]	; (8004324 <xTaskIncrementTick+0x164>)
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d901      	bls.n	80042e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80042e0:	2301      	movs	r3, #1
 80042e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042e4:	4b11      	ldr	r3, [pc, #68]	; (800432c <xTaskIncrementTick+0x16c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	e004      	b.n	80042fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042f2:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <xTaskIncrementTick+0x170>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3301      	adds	r3, #1
 80042f8:	4a0d      	ldr	r2, [pc, #52]	; (8004330 <xTaskIncrementTick+0x170>)
 80042fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042fc:	697b      	ldr	r3, [r7, #20]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000de4 	.word	0x20000de4
 800430c:	20000dc0 	.word	0x20000dc0
 8004310:	20000d74 	.word	0x20000d74
 8004314:	20000d78 	.word	0x20000d78
 8004318:	20000dd4 	.word	0x20000dd4
 800431c:	20000ddc 	.word	0x20000ddc
 8004320:	20000dc4 	.word	0x20000dc4
 8004324:	200008ec 	.word	0x200008ec
 8004328:	200008e8 	.word	0x200008e8
 800432c:	20000dd0 	.word	0x20000dd0
 8004330:	20000dcc 	.word	0x20000dcc

08004334 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800433a:	4b2a      	ldr	r3, [pc, #168]	; (80043e4 <vTaskSwitchContext+0xb0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004342:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <vTaskSwitchContext+0xb4>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004348:	e046      	b.n	80043d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800434a:	4b27      	ldr	r3, [pc, #156]	; (80043e8 <vTaskSwitchContext+0xb4>)
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004350:	4b26      	ldr	r3, [pc, #152]	; (80043ec <vTaskSwitchContext+0xb8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	e010      	b.n	800437a <vTaskSwitchContext+0x46>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <vTaskSwitchContext+0x40>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	607b      	str	r3, [r7, #4]
}
 8004370:	bf00      	nop
 8004372:	e7fe      	b.n	8004372 <vTaskSwitchContext+0x3e>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3b01      	subs	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	491d      	ldr	r1, [pc, #116]	; (80043f0 <vTaskSwitchContext+0xbc>)
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0e4      	beq.n	8004358 <vTaskSwitchContext+0x24>
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <vTaskSwitchContext+0xbc>)
 800439a:	4413      	add	r3, r2
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	3308      	adds	r3, #8
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d104      	bne.n	80043be <vTaskSwitchContext+0x8a>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a0b      	ldr	r2, [pc, #44]	; (80043f4 <vTaskSwitchContext+0xc0>)
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4a08      	ldr	r2, [pc, #32]	; (80043ec <vTaskSwitchContext+0xb8>)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <vTaskSwitchContext+0xc0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3354      	adds	r3, #84	; 0x54
 80043d4:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <vTaskSwitchContext+0xc4>)
 80043d6:	6013      	str	r3, [r2, #0]
}
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	20000de4 	.word	0x20000de4
 80043e8:	20000dd0 	.word	0x20000dd0
 80043ec:	20000dc4 	.word	0x20000dc4
 80043f0:	200008ec 	.word	0x200008ec
 80043f4:	200008e8 	.word	0x200008e8
 80043f8:	20000010 	.word	0x20000010

080043fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	60fb      	str	r3, [r7, #12]
}
 800441e:	bf00      	nop
 8004420:	e7fe      	b.n	8004420 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <vTaskPlaceOnEventList+0x44>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3318      	adds	r3, #24
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fe fe61 	bl	80030f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004430:	2101      	movs	r1, #1
 8004432:	6838      	ldr	r0, [r7, #0]
 8004434:	f000 fb70 	bl	8004b18 <prvAddCurrentTaskToDelayedList>
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	200008e8 	.word	0x200008e8

08004444 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10a      	bne.n	800446c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	617b      	str	r3, [r7, #20]
}
 8004468:	bf00      	nop
 800446a:	e7fe      	b.n	800446a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <vTaskPlaceOnEventListRestricted+0x54>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3318      	adds	r3, #24
 8004472:	4619      	mov	r1, r3
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f7fe fe18 	bl	80030aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004480:	f04f 33ff 	mov.w	r3, #4294967295
 8004484:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	68b8      	ldr	r0, [r7, #8]
 800448a:	f000 fb45 	bl	8004b18 <prvAddCurrentTaskToDelayedList>
	}
 800448e:	bf00      	nop
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	200008e8 	.word	0x200008e8

0800449c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	60fb      	str	r3, [r7, #12]
}
 80044c4:	bf00      	nop
 80044c6:	e7fe      	b.n	80044c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	3318      	adds	r3, #24
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe fe49 	bl	8003164 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044d2:	4b1e      	ldr	r3, [pc, #120]	; (800454c <xTaskRemoveFromEventList+0xb0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d11d      	bne.n	8004516 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	3304      	adds	r3, #4
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe fe40 	bl	8003164 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e8:	4b19      	ldr	r3, [pc, #100]	; (8004550 <xTaskRemoveFromEventList+0xb4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d903      	bls.n	80044f8 <xTaskRemoveFromEventList+0x5c>
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	4a16      	ldr	r2, [pc, #88]	; (8004550 <xTaskRemoveFromEventList+0xb4>)
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4a13      	ldr	r2, [pc, #76]	; (8004554 <xTaskRemoveFromEventList+0xb8>)
 8004506:	441a      	add	r2, r3
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	3304      	adds	r3, #4
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f7fe fdcb 	bl	80030aa <vListInsertEnd>
 8004514:	e005      	b.n	8004522 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	3318      	adds	r3, #24
 800451a:	4619      	mov	r1, r3
 800451c:	480e      	ldr	r0, [pc, #56]	; (8004558 <xTaskRemoveFromEventList+0xbc>)
 800451e:	f7fe fdc4 	bl	80030aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004526:	4b0d      	ldr	r3, [pc, #52]	; (800455c <xTaskRemoveFromEventList+0xc0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	429a      	cmp	r2, r3
 800452e:	d905      	bls.n	800453c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004530:	2301      	movs	r3, #1
 8004532:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004534:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <xTaskRemoveFromEventList+0xc4>)
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e001      	b.n	8004540 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004540:	697b      	ldr	r3, [r7, #20]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000de4 	.word	0x20000de4
 8004550:	20000dc4 	.word	0x20000dc4
 8004554:	200008ec 	.word	0x200008ec
 8004558:	20000d7c 	.word	0x20000d7c
 800455c:	200008e8 	.word	0x200008e8
 8004560:	20000dd0 	.word	0x20000dd0

08004564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <vTaskInternalSetTimeOutState+0x24>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <vTaskInternalSetTimeOutState+0x28>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	605a      	str	r2, [r3, #4]
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	20000dd4 	.word	0x20000dd4
 800458c:	20000dc0 	.word	0x20000dc0

08004590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	613b      	str	r3, [r7, #16]
}
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	60fb      	str	r3, [r7, #12]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80045d2:	f000 ff6f 	bl	80054b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045d6:	4b1d      	ldr	r3, [pc, #116]	; (800464c <xTaskCheckForTimeOut+0xbc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d102      	bne.n	80045f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	e023      	b.n	800463e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b15      	ldr	r3, [pc, #84]	; (8004650 <xTaskCheckForTimeOut+0xc0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d007      	beq.n	8004612 <xTaskCheckForTimeOut+0x82>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	429a      	cmp	r2, r3
 800460a:	d302      	bcc.n	8004612 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	61fb      	str	r3, [r7, #28]
 8004610:	e015      	b.n	800463e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	429a      	cmp	r2, r3
 800461a:	d20b      	bcs.n	8004634 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	1ad2      	subs	r2, r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff ff9b 	bl	8004564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	e004      	b.n	800463e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800463a:	2301      	movs	r3, #1
 800463c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800463e:	f000 ff69 	bl	8005514 <vPortExitCritical>

	return xReturn;
 8004642:	69fb      	ldr	r3, [r7, #28]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3720      	adds	r7, #32
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000dc0 	.word	0x20000dc0
 8004650:	20000dd4 	.word	0x20000dd4

08004654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004658:	4b03      	ldr	r3, [pc, #12]	; (8004668 <vTaskMissedYield+0x14>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]
}
 800465e:	bf00      	nop
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	20000dd0 	.word	0x20000dd0

0800466c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004674:	f000 f852 	bl	800471c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <prvIdleTask+0x28>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d9f9      	bls.n	8004674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <prvIdleTask+0x2c>)
 8004682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004690:	e7f0      	b.n	8004674 <prvIdleTask+0x8>
 8004692:	bf00      	nop
 8004694:	200008ec 	.word	0x200008ec
 8004698:	e000ed04 	.word	0xe000ed04

0800469c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	e00c      	b.n	80046c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4a12      	ldr	r2, [pc, #72]	; (80046fc <prvInitialiseTaskLists+0x60>)
 80046b4:	4413      	add	r3, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe fcca 	bl	8003050 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3301      	adds	r3, #1
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b37      	cmp	r3, #55	; 0x37
 80046c6:	d9ef      	bls.n	80046a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046c8:	480d      	ldr	r0, [pc, #52]	; (8004700 <prvInitialiseTaskLists+0x64>)
 80046ca:	f7fe fcc1 	bl	8003050 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046ce:	480d      	ldr	r0, [pc, #52]	; (8004704 <prvInitialiseTaskLists+0x68>)
 80046d0:	f7fe fcbe 	bl	8003050 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046d4:	480c      	ldr	r0, [pc, #48]	; (8004708 <prvInitialiseTaskLists+0x6c>)
 80046d6:	f7fe fcbb 	bl	8003050 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046da:	480c      	ldr	r0, [pc, #48]	; (800470c <prvInitialiseTaskLists+0x70>)
 80046dc:	f7fe fcb8 	bl	8003050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046e0:	480b      	ldr	r0, [pc, #44]	; (8004710 <prvInitialiseTaskLists+0x74>)
 80046e2:	f7fe fcb5 	bl	8003050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <prvInitialiseTaskLists+0x78>)
 80046e8:	4a05      	ldr	r2, [pc, #20]	; (8004700 <prvInitialiseTaskLists+0x64>)
 80046ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <prvInitialiseTaskLists+0x7c>)
 80046ee:	4a05      	ldr	r2, [pc, #20]	; (8004704 <prvInitialiseTaskLists+0x68>)
 80046f0:	601a      	str	r2, [r3, #0]
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	200008ec 	.word	0x200008ec
 8004700:	20000d4c 	.word	0x20000d4c
 8004704:	20000d60 	.word	0x20000d60
 8004708:	20000d7c 	.word	0x20000d7c
 800470c:	20000d90 	.word	0x20000d90
 8004710:	20000da8 	.word	0x20000da8
 8004714:	20000d74 	.word	0x20000d74
 8004718:	20000d78 	.word	0x20000d78

0800471c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004722:	e019      	b.n	8004758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004724:	f000 fec6 	bl	80054b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004728:	4b10      	ldr	r3, [pc, #64]	; (800476c <prvCheckTasksWaitingTermination+0x50>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3304      	adds	r3, #4
 8004734:	4618      	mov	r0, r3
 8004736:	f7fe fd15 	bl	8003164 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800473a:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <prvCheckTasksWaitingTermination+0x54>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3b01      	subs	r3, #1
 8004740:	4a0b      	ldr	r2, [pc, #44]	; (8004770 <prvCheckTasksWaitingTermination+0x54>)
 8004742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <prvCheckTasksWaitingTermination+0x58>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3b01      	subs	r3, #1
 800474a:	4a0a      	ldr	r2, [pc, #40]	; (8004774 <prvCheckTasksWaitingTermination+0x58>)
 800474c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800474e:	f000 fee1 	bl	8005514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f810 	bl	8004778 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <prvCheckTasksWaitingTermination+0x58>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e1      	bne.n	8004724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004760:	bf00      	nop
 8004762:	bf00      	nop
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000d90 	.word	0x20000d90
 8004770:	20000dbc 	.word	0x20000dbc
 8004774:	20000da4 	.word	0x20000da4

08004778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3354      	adds	r3, #84	; 0x54
 8004784:	4618      	mov	r0, r3
 8004786:	f001 f9eb 	bl	8005b60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004790:	2b00      	cmp	r3, #0
 8004792:	d108      	bne.n	80047a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	4618      	mov	r0, r3
 800479a:	f001 f879 	bl	8005890 <vPortFree>
				vPortFree( pxTCB );
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f001 f876 	bl	8005890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047a4:	e018      	b.n	80047d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d103      	bne.n	80047b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f001 f86d 	bl	8005890 <vPortFree>
	}
 80047b6:	e00f      	b.n	80047d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d00a      	beq.n	80047d8 <prvDeleteTCB+0x60>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	60fb      	str	r3, [r7, #12]
}
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <prvDeleteTCB+0x5e>
	}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <prvResetNextTaskUnblockTime+0x38>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d104      	bne.n	80047fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <prvResetNextTaskUnblockTime+0x3c>)
 80047f2:	f04f 32ff 	mov.w	r2, #4294967295
 80047f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047f8:	e008      	b.n	800480c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047fa:	4b07      	ldr	r3, [pc, #28]	; (8004818 <prvResetNextTaskUnblockTime+0x38>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	4a04      	ldr	r2, [pc, #16]	; (800481c <prvResetNextTaskUnblockTime+0x3c>)
 800480a:	6013      	str	r3, [r2, #0]
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	20000d74 	.word	0x20000d74
 800481c:	20000ddc 	.word	0x20000ddc

08004820 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004826:	4b05      	ldr	r3, [pc, #20]	; (800483c <xTaskGetCurrentTaskHandle+0x1c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800482c:	687b      	ldr	r3, [r7, #4]
	}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	200008e8 	.word	0x200008e8

08004840 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <xTaskGetSchedulerState+0x34>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d102      	bne.n	8004854 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800484e:	2301      	movs	r3, #1
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	e008      	b.n	8004866 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004854:	4b08      	ldr	r3, [pc, #32]	; (8004878 <xTaskGetSchedulerState+0x38>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d102      	bne.n	8004862 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800485c:	2302      	movs	r3, #2
 800485e:	607b      	str	r3, [r7, #4]
 8004860:	e001      	b.n	8004866 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004862:	2300      	movs	r3, #0
 8004864:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004866:	687b      	ldr	r3, [r7, #4]
	}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	20000dc8 	.word	0x20000dc8
 8004878:	20000de4 	.word	0x20000de4

0800487c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d056      	beq.n	8004940 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004892:	4b2e      	ldr	r3, [pc, #184]	; (800494c <xTaskPriorityDisinherit+0xd0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	429a      	cmp	r2, r3
 800489a:	d00a      	beq.n	80048b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	60fb      	str	r3, [r7, #12]
}
 80048ae:	bf00      	nop
 80048b0:	e7fe      	b.n	80048b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	60bb      	str	r3, [r7, #8]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d4:	1e5a      	subs	r2, r3, #1
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d02c      	beq.n	8004940 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d128      	bne.n	8004940 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	3304      	adds	r3, #4
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe fc36 	bl	8003164 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004910:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <xTaskPriorityDisinherit+0xd4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d903      	bls.n	8004920 <xTaskPriorityDisinherit+0xa4>
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	4a0c      	ldr	r2, [pc, #48]	; (8004950 <xTaskPriorityDisinherit+0xd4>)
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4a09      	ldr	r2, [pc, #36]	; (8004954 <xTaskPriorityDisinherit+0xd8>)
 800492e:	441a      	add	r2, r3
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	3304      	adds	r3, #4
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f7fe fbb7 	bl	80030aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800493c:	2301      	movs	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004940:	697b      	ldr	r3, [r7, #20]
	}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	200008e8 	.word	0x200008e8
 8004950:	20000dc4 	.word	0x20000dc4
 8004954:	200008ec 	.word	0x200008ec

08004958 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004962:	f000 fda7 	bl	80054b4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004966:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <ulTaskNotifyTake+0x90>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d113      	bne.n	800499a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004972:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <ulTaskNotifyTake+0x90>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004982:	2101      	movs	r1, #1
 8004984:	6838      	ldr	r0, [r7, #0]
 8004986:	f000 f8c7 	bl	8004b18 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800498a:	4b18      	ldr	r3, [pc, #96]	; (80049ec <ulTaskNotifyTake+0x94>)
 800498c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800499a:	f000 fdbb 	bl	8005514 <vPortExitCritical>

		taskENTER_CRITICAL();
 800499e:	f000 fd89 	bl	80054b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <ulTaskNotifyTake+0x90>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049aa:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00e      	beq.n	80049d0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <ulTaskNotifyTake+0x90>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2200      	movs	r2, #0
 80049be:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80049c2:	e005      	b.n	80049d0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80049c4:	4b08      	ldr	r3, [pc, #32]	; (80049e8 <ulTaskNotifyTake+0x90>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	3a01      	subs	r2, #1
 80049cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <ulTaskNotifyTake+0x90>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80049da:	f000 fd9b 	bl	8005514 <vPortExitCritical>

		return ulReturn;
 80049de:	68fb      	ldr	r3, [r7, #12]
	}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	200008e8 	.word	0x200008e8
 80049ec:	e000ed04 	.word	0xe000ed04

080049f0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	; 0x28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	61bb      	str	r3, [r7, #24]
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a16:	f000 fe2f 	bl	8005678 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8004a1e:	f3ef 8211 	mrs	r2, BASEPRI
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	617a      	str	r2, [r7, #20]
 8004a34:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004a36:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a38:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004a40:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004a58:	7ffb      	ldrb	r3, [r7, #31]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d146      	bne.n	8004aec <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	60fb      	str	r3, [r7, #12]
}
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a7c:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <vTaskNotifyGiveFromISR+0x110>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d11d      	bne.n	8004ac0 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	3304      	adds	r3, #4
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe fb6b 	bl	8003164 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a92:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <vTaskNotifyGiveFromISR+0x114>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d903      	bls.n	8004aa2 <vTaskNotifyGiveFromISR+0xb2>
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <vTaskNotifyGiveFromISR+0x114>)
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <vTaskNotifyGiveFromISR+0x118>)
 8004ab0:	441a      	add	r2, r3
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f7fe faf6 	bl	80030aa <vListInsertEnd>
 8004abe:	e005      	b.n	8004acc <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	3318      	adds	r3, #24
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4811      	ldr	r0, [pc, #68]	; (8004b0c <vTaskNotifyGiveFromISR+0x11c>)
 8004ac8:	f7fe faef 	bl	80030aa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <vTaskNotifyGiveFromISR+0x120>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d908      	bls.n	8004aec <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <vTaskNotifyGiveFromISR+0x124>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f383 8811 	msr	BASEPRI, r3
}
 8004af6:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8004af8:	bf00      	nop
 8004afa:	3728      	adds	r7, #40	; 0x28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000de4 	.word	0x20000de4
 8004b04:	20000dc4 	.word	0x20000dc4
 8004b08:	200008ec 	.word	0x200008ec
 8004b0c:	20000d7c 	.word	0x20000d7c
 8004b10:	200008e8 	.word	0x200008e8
 8004b14:	20000dd0 	.word	0x20000dd0

08004b18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b22:	4b21      	ldr	r3, [pc, #132]	; (8004ba8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b28:	4b20      	ldr	r3, [pc, #128]	; (8004bac <prvAddCurrentTaskToDelayedList+0x94>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fb18 	bl	8003164 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	d10a      	bne.n	8004b52 <prvAddCurrentTaskToDelayedList+0x3a>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d007      	beq.n	8004b52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b42:	4b1a      	ldr	r3, [pc, #104]	; (8004bac <prvAddCurrentTaskToDelayedList+0x94>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4819      	ldr	r0, [pc, #100]	; (8004bb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004b4c:	f7fe faad 	bl	80030aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b50:	e026      	b.n	8004ba0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4413      	add	r3, r2
 8004b58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b5a:	4b14      	ldr	r3, [pc, #80]	; (8004bac <prvAddCurrentTaskToDelayedList+0x94>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d209      	bcs.n	8004b7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <prvAddCurrentTaskToDelayedList+0x94>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f7fe fabb 	bl	80030f2 <vListInsert>
}
 8004b7c:	e010      	b.n	8004ba0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b7e:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <prvAddCurrentTaskToDelayedList+0x94>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	f7fe fab1 	bl	80030f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d202      	bcs.n	8004ba0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b9a:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	6013      	str	r3, [r2, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20000dc0 	.word	0x20000dc0
 8004bac:	200008e8 	.word	0x200008e8
 8004bb0:	20000da8 	.word	0x20000da8
 8004bb4:	20000d78 	.word	0x20000d78
 8004bb8:	20000d74 	.word	0x20000d74
 8004bbc:	20000ddc 	.word	0x20000ddc

08004bc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08a      	sub	sp, #40	; 0x28
 8004bc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004bca:	f000 fb07 	bl	80051dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004bce:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <xTimerCreateTimerTask+0x80>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d021      	beq.n	8004c1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004bde:	1d3a      	adds	r2, r7, #4
 8004be0:	f107 0108 	add.w	r1, r7, #8
 8004be4:	f107 030c 	add.w	r3, r7, #12
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fe fa17 	bl	800301c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	9202      	str	r2, [sp, #8]
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	460a      	mov	r2, r1
 8004c00:	4910      	ldr	r1, [pc, #64]	; (8004c44 <xTimerCreateTimerTask+0x84>)
 8004c02:	4811      	ldr	r0, [pc, #68]	; (8004c48 <xTimerCreateTimerTask+0x88>)
 8004c04:	f7fe ffc4 	bl	8003b90 <xTaskCreateStatic>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4a10      	ldr	r2, [pc, #64]	; (8004c4c <xTimerCreateTimerTask+0x8c>)
 8004c0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <xTimerCreateTimerTask+0x8c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c16:	2301      	movs	r3, #1
 8004c18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	613b      	str	r3, [r7, #16]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c36:	697b      	ldr	r3, [r7, #20]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000e18 	.word	0x20000e18
 8004c44:	08005d00 	.word	0x08005d00
 8004c48:	08004d85 	.word	0x08004d85
 8004c4c:	20000e1c 	.word	0x20000e1c

08004c50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	623b      	str	r3, [r7, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	e7fe      	b.n	8004c7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <xTimerGenericCommand+0x98>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d02a      	beq.n	8004cdc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b05      	cmp	r3, #5
 8004c96:	dc18      	bgt.n	8004cca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c98:	f7ff fdd2 	bl	8004840 <xTaskGetSchedulerState>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d109      	bne.n	8004cb6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ca2:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <xTimerGenericCommand+0x98>)
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	f107 0110 	add.w	r1, r7, #16
 8004caa:	2300      	movs	r3, #0
 8004cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cae:	f7fe fb87 	bl	80033c0 <xQueueGenericSend>
 8004cb2:	6278      	str	r0, [r7, #36]	; 0x24
 8004cb4:	e012      	b.n	8004cdc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <xTimerGenericCommand+0x98>)
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	f107 0110 	add.w	r1, r7, #16
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f7fe fb7d 	bl	80033c0 <xQueueGenericSend>
 8004cc6:	6278      	str	r0, [r7, #36]	; 0x24
 8004cc8:	e008      	b.n	8004cdc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004cca:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <xTimerGenericCommand+0x98>)
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	f107 0110 	add.w	r1, r7, #16
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	f7fe fc71 	bl	80035bc <xQueueGenericSendFromISR>
 8004cda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3728      	adds	r7, #40	; 0x28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000e18 	.word	0x20000e18

08004cec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf6:	4b22      	ldr	r3, [pc, #136]	; (8004d80 <prvProcessExpiredTimer+0x94>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fe fa2d 	bl	8003164 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d022      	beq.n	8004d5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	18d1      	adds	r1, r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	6978      	ldr	r0, [r7, #20]
 8004d26:	f000 f8d1 	bl	8004ecc <prvInsertTimerInActiveList>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01f      	beq.n	8004d70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d30:	2300      	movs	r3, #0
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	2300      	movs	r3, #0
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	2100      	movs	r1, #0
 8004d3a:	6978      	ldr	r0, [r7, #20]
 8004d3c:	f7ff ff88 	bl	8004c50 <xTimerGenericCommand>
 8004d40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d113      	bne.n	8004d70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	60fb      	str	r3, [r7, #12]
}
 8004d5a:	bf00      	nop
 8004d5c:	e7fe      	b.n	8004d5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	6978      	ldr	r0, [r7, #20]
 8004d76:	4798      	blx	r3
}
 8004d78:	bf00      	nop
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20000e10 	.word	0x20000e10

08004d84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d8c:	f107 0308 	add.w	r3, r7, #8
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 f857 	bl	8004e44 <prvGetNextExpireTime>
 8004d96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f803 	bl	8004da8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004da2:	f000 f8d5 	bl	8004f50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004da6:	e7f1      	b.n	8004d8c <prvTimerTask+0x8>

08004da8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004db2:	f7ff f949 	bl	8004048 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004db6:	f107 0308 	add.w	r3, r7, #8
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f866 	bl	8004e8c <prvSampleTimeNow>
 8004dc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d130      	bne.n	8004e2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <prvProcessTimerOrBlockTask+0x3c>
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d806      	bhi.n	8004de4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004dd6:	f7ff f945 	bl	8004064 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004dda:	68f9      	ldr	r1, [r7, #12]
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff ff85 	bl	8004cec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004de2:	e024      	b.n	8004e2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d008      	beq.n	8004dfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004dea:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <prvProcessTimerOrBlockTask+0x90>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <prvProcessTimerOrBlockTask+0x50>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <prvProcessTimerOrBlockTask+0x52>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004dfc:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <prvProcessTimerOrBlockTask+0x94>)
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f7fe fe8d 	bl	8003b28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e0e:	f7ff f929 	bl	8004064 <xTaskResumeAll>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10a      	bne.n	8004e2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <prvProcessTimerOrBlockTask+0x98>)
 8004e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	f3bf 8f6f 	isb	sy
}
 8004e28:	e001      	b.n	8004e2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e2a:	f7ff f91b 	bl	8004064 <xTaskResumeAll>
}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000e14 	.word	0x20000e14
 8004e3c:	20000e18 	.word	0x20000e18
 8004e40:	e000ed04 	.word	0xe000ed04

08004e44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <prvGetNextExpireTime+0x44>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <prvGetNextExpireTime+0x16>
 8004e56:	2201      	movs	r2, #1
 8004e58:	e000      	b.n	8004e5c <prvGetNextExpireTime+0x18>
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d105      	bne.n	8004e74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e68:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <prvGetNextExpireTime+0x44>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e001      	b.n	8004e78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e78:	68fb      	ldr	r3, [r7, #12]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000e10 	.word	0x20000e10

08004e8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e94:	f7ff f984 	bl	80041a0 <xTaskGetTickCount>
 8004e98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <prvSampleTimeNow+0x3c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d205      	bcs.n	8004eb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ea4:	f000 f936 	bl	8005114 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e002      	b.n	8004eb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004eb6:	4a04      	ldr	r2, [pc, #16]	; (8004ec8 <prvSampleTimeNow+0x3c>)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000e20 	.word	0x20000e20

08004ecc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d812      	bhi.n	8004f18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d302      	bcc.n	8004f06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f00:	2301      	movs	r3, #1
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e01b      	b.n	8004f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <prvInsertTimerInActiveList+0x7c>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f7fe f8ee 	bl	80030f2 <vListInsert>
 8004f16:	e012      	b.n	8004f3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d206      	bcs.n	8004f2e <prvInsertTimerInActiveList+0x62>
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d302      	bcc.n	8004f2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	e007      	b.n	8004f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f2e:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <prvInsertTimerInActiveList+0x80>)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3304      	adds	r3, #4
 8004f36:	4619      	mov	r1, r3
 8004f38:	4610      	mov	r0, r2
 8004f3a:	f7fe f8da 	bl	80030f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f3e:	697b      	ldr	r3, [r7, #20]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20000e14 	.word	0x20000e14
 8004f4c:	20000e10 	.word	0x20000e10

08004f50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08e      	sub	sp, #56	; 0x38
 8004f54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f56:	e0ca      	b.n	80050ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	da18      	bge.n	8004f90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f5e:	1d3b      	adds	r3, r7, #4
 8004f60:	3304      	adds	r3, #4
 8004f62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	61fb      	str	r3, [r7, #28]
}
 8004f7c:	bf00      	nop
 8004f7e:	e7fe      	b.n	8004f7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f86:	6850      	ldr	r0, [r2, #4]
 8004f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f8a:	6892      	ldr	r2, [r2, #8]
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f2c0 80aa 	blt.w	80050ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d004      	beq.n	8004fae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fe f8db 	bl	8003164 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fae:	463b      	mov	r3, r7
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff ff6b 	bl	8004e8c <prvSampleTimeNow>
 8004fb6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b09      	cmp	r3, #9
 8004fbc:	f200 8097 	bhi.w	80050ee <prvProcessReceivedCommands+0x19e>
 8004fc0:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <prvProcessReceivedCommands+0x78>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	08004ff1 	.word	0x08004ff1
 8004fd4:	08005065 	.word	0x08005065
 8004fd8:	08005079 	.word	0x08005079
 8004fdc:	080050c3 	.word	0x080050c3
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08004ff1 	.word	0x08004ff1
 8004fe8:	08005065 	.word	0x08005065
 8004fec:	08005079 	.word	0x08005079
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	18d1      	adds	r1, r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005010:	f7ff ff5c 	bl	8004ecc <prvInsertTimerInActiveList>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d069      	beq.n	80050ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005020:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d05e      	beq.n	80050ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	441a      	add	r2, r3
 8005038:	2300      	movs	r3, #0
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	2300      	movs	r3, #0
 800503e:	2100      	movs	r1, #0
 8005040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005042:	f7ff fe05 	bl	8004c50 <xTimerGenericCommand>
 8005046:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d14f      	bne.n	80050ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	61bb      	str	r3, [r7, #24]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	b2da      	uxtb	r2, r3
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005076:	e03a      	b.n	80050ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	b2da      	uxtb	r2, r3
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	617b      	str	r3, [r7, #20]
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	18d1      	adds	r1, r2, r3
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050bc:	f7ff ff06 	bl	8004ecc <prvInsertTimerInActiveList>
					break;
 80050c0:	e015      	b.n	80050ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d103      	bne.n	80050d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80050d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d2:	f000 fbdd 	bl	8005890 <vPortFree>
 80050d6:	e00a      	b.n	80050ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80050ea:	e000      	b.n	80050ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80050ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050ee:	4b08      	ldr	r3, [pc, #32]	; (8005110 <prvProcessReceivedCommands+0x1c0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	1d39      	adds	r1, r7, #4
 80050f4:	2200      	movs	r2, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe fafc 	bl	80036f4 <xQueueReceive>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f47f af2a 	bne.w	8004f58 <prvProcessReceivedCommands+0x8>
	}
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	3730      	adds	r7, #48	; 0x30
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000e18 	.word	0x20000e18

08005114 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800511a:	e048      	b.n	80051ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800511c:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005126:	4b2b      	ldr	r3, [pc, #172]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	3304      	adds	r3, #4
 8005134:	4618      	mov	r0, r3
 8005136:	f7fe f815 	bl	8003164 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d02e      	beq.n	80051ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	429a      	cmp	r2, r3
 8005160:	d90e      	bls.n	8005180 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800516e:	4b19      	ldr	r3, [pc, #100]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3304      	adds	r3, #4
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f7fd ffba 	bl	80030f2 <vListInsert>
 800517e:	e016      	b.n	80051ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005180:	2300      	movs	r3, #0
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	2100      	movs	r1, #0
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f7ff fd60 	bl	8004c50 <xTimerGenericCommand>
 8005190:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	603b      	str	r3, [r7, #0]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1b1      	bne.n	800511c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051b8:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <prvSwitchTimerLists+0xc4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a04      	ldr	r2, [pc, #16]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 80051c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051c6:	4a04      	ldr	r2, [pc, #16]	; (80051d8 <prvSwitchTimerLists+0xc4>)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	6013      	str	r3, [r2, #0]
}
 80051cc:	bf00      	nop
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000e10 	.word	0x20000e10
 80051d8:	20000e14 	.word	0x20000e14

080051dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051e2:	f000 f967 	bl	80054b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051e6:	4b15      	ldr	r3, [pc, #84]	; (800523c <prvCheckForValidListAndQueue+0x60>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d120      	bne.n	8005230 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80051ee:	4814      	ldr	r0, [pc, #80]	; (8005240 <prvCheckForValidListAndQueue+0x64>)
 80051f0:	f7fd ff2e 	bl	8003050 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80051f4:	4813      	ldr	r0, [pc, #76]	; (8005244 <prvCheckForValidListAndQueue+0x68>)
 80051f6:	f7fd ff2b 	bl	8003050 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80051fa:	4b13      	ldr	r3, [pc, #76]	; (8005248 <prvCheckForValidListAndQueue+0x6c>)
 80051fc:	4a10      	ldr	r2, [pc, #64]	; (8005240 <prvCheckForValidListAndQueue+0x64>)
 80051fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005200:	4b12      	ldr	r3, [pc, #72]	; (800524c <prvCheckForValidListAndQueue+0x70>)
 8005202:	4a10      	ldr	r2, [pc, #64]	; (8005244 <prvCheckForValidListAndQueue+0x68>)
 8005204:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005206:	2300      	movs	r3, #0
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	4b11      	ldr	r3, [pc, #68]	; (8005250 <prvCheckForValidListAndQueue+0x74>)
 800520c:	4a11      	ldr	r2, [pc, #68]	; (8005254 <prvCheckForValidListAndQueue+0x78>)
 800520e:	2110      	movs	r1, #16
 8005210:	200a      	movs	r0, #10
 8005212:	f7fe f839 	bl	8003288 <xQueueGenericCreateStatic>
 8005216:	4603      	mov	r3, r0
 8005218:	4a08      	ldr	r2, [pc, #32]	; (800523c <prvCheckForValidListAndQueue+0x60>)
 800521a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800521c:	4b07      	ldr	r3, [pc, #28]	; (800523c <prvCheckForValidListAndQueue+0x60>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <prvCheckForValidListAndQueue+0x60>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	490b      	ldr	r1, [pc, #44]	; (8005258 <prvCheckForValidListAndQueue+0x7c>)
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe fc52 	bl	8003ad4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005230:	f000 f970 	bl	8005514 <vPortExitCritical>
}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000e18 	.word	0x20000e18
 8005240:	20000de8 	.word	0x20000de8
 8005244:	20000dfc 	.word	0x20000dfc
 8005248:	20000e10 	.word	0x20000e10
 800524c:	20000e14 	.word	0x20000e14
 8005250:	20000ec4 	.word	0x20000ec4
 8005254:	20000e24 	.word	0x20000e24
 8005258:	08005d08 	.word	0x08005d08

0800525c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3b04      	subs	r3, #4
 800526c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3b04      	subs	r3, #4
 800527a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f023 0201 	bic.w	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3b04      	subs	r3, #4
 800528a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800528c:	4a0c      	ldr	r2, [pc, #48]	; (80052c0 <pxPortInitialiseStack+0x64>)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3b14      	subs	r3, #20
 8005296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3b04      	subs	r3, #4
 80052a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f06f 0202 	mvn.w	r2, #2
 80052aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3b20      	subs	r3, #32
 80052b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052b2:	68fb      	ldr	r3, [r7, #12]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	080052c5 	.word	0x080052c5

080052c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052ce:	4b12      	ldr	r3, [pc, #72]	; (8005318 <prvTaskExitError+0x54>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d6:	d00a      	beq.n	80052ee <prvTaskExitError+0x2a>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	60fb      	str	r3, [r7, #12]
}
 80052ea:	bf00      	nop
 80052ec:	e7fe      	b.n	80052ec <prvTaskExitError+0x28>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	60bb      	str	r3, [r7, #8]
}
 8005300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005302:	bf00      	nop
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0fc      	beq.n	8005304 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	2000000c 	.word	0x2000000c
 800531c:	00000000 	.word	0x00000000

08005320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <pxCurrentTCBConst2>)
 8005322:	6819      	ldr	r1, [r3, #0]
 8005324:	6808      	ldr	r0, [r1, #0]
 8005326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532a:	f380 8809 	msr	PSP, r0
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f04f 0000 	mov.w	r0, #0
 8005336:	f380 8811 	msr	BASEPRI, r0
 800533a:	4770      	bx	lr
 800533c:	f3af 8000 	nop.w

08005340 <pxCurrentTCBConst2>:
 8005340:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop

08005348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005348:	4808      	ldr	r0, [pc, #32]	; (800536c <prvPortStartFirstTask+0x24>)
 800534a:	6800      	ldr	r0, [r0, #0]
 800534c:	6800      	ldr	r0, [r0, #0]
 800534e:	f380 8808 	msr	MSP, r0
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f380 8814 	msr	CONTROL, r0
 800535a:	b662      	cpsie	i
 800535c:	b661      	cpsie	f
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	df00      	svc	0
 8005368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800536a:	bf00      	nop
 800536c:	e000ed08 	.word	0xe000ed08

08005370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005376:	4b46      	ldr	r3, [pc, #280]	; (8005490 <xPortStartScheduler+0x120>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a46      	ldr	r2, [pc, #280]	; (8005494 <xPortStartScheduler+0x124>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d10a      	bne.n	8005396 <xPortStartScheduler+0x26>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	613b      	str	r3, [r7, #16]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005396:	4b3e      	ldr	r3, [pc, #248]	; (8005490 <xPortStartScheduler+0x120>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a3f      	ldr	r2, [pc, #252]	; (8005498 <xPortStartScheduler+0x128>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d10a      	bne.n	80053b6 <xPortStartScheduler+0x46>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	60fb      	str	r3, [r7, #12]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053b6:	4b39      	ldr	r3, [pc, #228]	; (800549c <xPortStartScheduler+0x12c>)
 80053b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	22ff      	movs	r2, #255	; 0xff
 80053c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	4b31      	ldr	r3, [pc, #196]	; (80054a0 <xPortStartScheduler+0x130>)
 80053dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053de:	4b31      	ldr	r3, [pc, #196]	; (80054a4 <xPortStartScheduler+0x134>)
 80053e0:	2207      	movs	r2, #7
 80053e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053e4:	e009      	b.n	80053fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80053e6:	4b2f      	ldr	r3, [pc, #188]	; (80054a4 <xPortStartScheduler+0x134>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	4a2d      	ldr	r2, [pc, #180]	; (80054a4 <xPortStartScheduler+0x134>)
 80053ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005402:	2b80      	cmp	r3, #128	; 0x80
 8005404:	d0ef      	beq.n	80053e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005406:	4b27      	ldr	r3, [pc, #156]	; (80054a4 <xPortStartScheduler+0x134>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f1c3 0307 	rsb	r3, r3, #7
 800540e:	2b04      	cmp	r3, #4
 8005410:	d00a      	beq.n	8005428 <xPortStartScheduler+0xb8>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	60bb      	str	r3, [r7, #8]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005428:	4b1e      	ldr	r3, [pc, #120]	; (80054a4 <xPortStartScheduler+0x134>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <xPortStartScheduler+0x134>)
 8005430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005432:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <xPortStartScheduler+0x134>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800543a:	4a1a      	ldr	r2, [pc, #104]	; (80054a4 <xPortStartScheduler+0x134>)
 800543c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	b2da      	uxtb	r2, r3
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005446:	4b18      	ldr	r3, [pc, #96]	; (80054a8 <xPortStartScheduler+0x138>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a17      	ldr	r2, [pc, #92]	; (80054a8 <xPortStartScheduler+0x138>)
 800544c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005452:	4b15      	ldr	r3, [pc, #84]	; (80054a8 <xPortStartScheduler+0x138>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a14      	ldr	r2, [pc, #80]	; (80054a8 <xPortStartScheduler+0x138>)
 8005458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800545c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800545e:	f000 f8dd 	bl	800561c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005462:	4b12      	ldr	r3, [pc, #72]	; (80054ac <xPortStartScheduler+0x13c>)
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005468:	f000 f8fc 	bl	8005664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800546c:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <xPortStartScheduler+0x140>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a0f      	ldr	r2, [pc, #60]	; (80054b0 <xPortStartScheduler+0x140>)
 8005472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005478:	f7ff ff66 	bl	8005348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800547c:	f7fe ff5a 	bl	8004334 <vTaskSwitchContext>
	prvTaskExitError();
 8005480:	f7ff ff20 	bl	80052c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	e000ed00 	.word	0xe000ed00
 8005494:	410fc271 	.word	0x410fc271
 8005498:	410fc270 	.word	0x410fc270
 800549c:	e000e400 	.word	0xe000e400
 80054a0:	20000f14 	.word	0x20000f14
 80054a4:	20000f18 	.word	0x20000f18
 80054a8:	e000ed20 	.word	0xe000ed20
 80054ac:	2000000c 	.word	0x2000000c
 80054b0:	e000ef34 	.word	0xe000ef34

080054b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
	__asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	607b      	str	r3, [r7, #4]
}
 80054cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054ce:	4b0f      	ldr	r3, [pc, #60]	; (800550c <vPortEnterCritical+0x58>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3301      	adds	r3, #1
 80054d4:	4a0d      	ldr	r2, [pc, #52]	; (800550c <vPortEnterCritical+0x58>)
 80054d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054d8:	4b0c      	ldr	r3, [pc, #48]	; (800550c <vPortEnterCritical+0x58>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10f      	bne.n	8005500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054e0:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <vPortEnterCritical+0x5c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <vPortEnterCritical+0x4c>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	603b      	str	r3, [r7, #0]
}
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <vPortEnterCritical+0x4a>
	}
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	2000000c 	.word	0x2000000c
 8005510:	e000ed04 	.word	0xe000ed04

08005514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800551a:	4b12      	ldr	r3, [pc, #72]	; (8005564 <vPortExitCritical+0x50>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <vPortExitCritical+0x24>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	607b      	str	r3, [r7, #4]
}
 8005534:	bf00      	nop
 8005536:	e7fe      	b.n	8005536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <vPortExitCritical+0x50>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3b01      	subs	r3, #1
 800553e:	4a09      	ldr	r2, [pc, #36]	; (8005564 <vPortExitCritical+0x50>)
 8005540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005542:	4b08      	ldr	r3, [pc, #32]	; (8005564 <vPortExitCritical+0x50>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d105      	bne.n	8005556 <vPortExitCritical+0x42>
 800554a:	2300      	movs	r3, #0
 800554c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	f383 8811 	msr	BASEPRI, r3
}
 8005554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	2000000c 	.word	0x2000000c
	...

08005570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005570:	f3ef 8009 	mrs	r0, PSP
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	4b15      	ldr	r3, [pc, #84]	; (80055d0 <pxCurrentTCBConst>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	f01e 0f10 	tst.w	lr, #16
 8005580:	bf08      	it	eq
 8005582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558a:	6010      	str	r0, [r2, #0]
 800558c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005594:	f380 8811 	msr	BASEPRI, r0
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f7fe fec8 	bl	8004334 <vTaskSwitchContext>
 80055a4:	f04f 0000 	mov.w	r0, #0
 80055a8:	f380 8811 	msr	BASEPRI, r0
 80055ac:	bc09      	pop	{r0, r3}
 80055ae:	6819      	ldr	r1, [r3, #0]
 80055b0:	6808      	ldr	r0, [r1, #0]
 80055b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b6:	f01e 0f10 	tst.w	lr, #16
 80055ba:	bf08      	it	eq
 80055bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055c0:	f380 8809 	msr	PSP, r0
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	f3af 8000 	nop.w

080055d0 <pxCurrentTCBConst>:
 80055d0:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop

080055d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	607b      	str	r3, [r7, #4]
}
 80055f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055f2:	f7fe fde5 	bl	80041c0 <xTaskIncrementTick>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055fc:	4b06      	ldr	r3, [pc, #24]	; (8005618 <xPortSysTickHandler+0x40>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f383 8811 	msr	BASEPRI, r3
}
 800560e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <vPortSetupTimerInterrupt+0x34>)
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005626:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <vPortSetupTimerInterrupt+0x38>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800562c:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <vPortSetupTimerInterrupt+0x3c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a0a      	ldr	r2, [pc, #40]	; (800565c <vPortSetupTimerInterrupt+0x40>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	099b      	lsrs	r3, r3, #6
 8005638:	4a09      	ldr	r2, [pc, #36]	; (8005660 <vPortSetupTimerInterrupt+0x44>)
 800563a:	3b01      	subs	r3, #1
 800563c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800563e:	4b04      	ldr	r3, [pc, #16]	; (8005650 <vPortSetupTimerInterrupt+0x34>)
 8005640:	2207      	movs	r2, #7
 8005642:	601a      	str	r2, [r3, #0]
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	e000e010 	.word	0xe000e010
 8005654:	e000e018 	.word	0xe000e018
 8005658:	20000000 	.word	0x20000000
 800565c:	10624dd3 	.word	0x10624dd3
 8005660:	e000e014 	.word	0xe000e014

08005664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005674 <vPortEnableVFP+0x10>
 8005668:	6801      	ldr	r1, [r0, #0]
 800566a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800566e:	6001      	str	r1, [r0, #0]
 8005670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005672:	bf00      	nop
 8005674:	e000ed88 	.word	0xe000ed88

08005678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800567e:	f3ef 8305 	mrs	r3, IPSR
 8005682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b0f      	cmp	r3, #15
 8005688:	d914      	bls.n	80056b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800568a:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <vPortValidateInterruptPriority+0x70>)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005694:	4b15      	ldr	r3, [pc, #84]	; (80056ec <vPortValidateInterruptPriority+0x74>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	7afa      	ldrb	r2, [r7, #11]
 800569a:	429a      	cmp	r2, r3
 800569c:	d20a      	bcs.n	80056b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	607b      	str	r3, [r7, #4]
}
 80056b0:	bf00      	nop
 80056b2:	e7fe      	b.n	80056b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056b4:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <vPortValidateInterruptPriority+0x78>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056bc:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <vPortValidateInterruptPriority+0x7c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d90a      	bls.n	80056da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	603b      	str	r3, [r7, #0]
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <vPortValidateInterruptPriority+0x60>
	}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	e000e3f0 	.word	0xe000e3f0
 80056ec:	20000f14 	.word	0x20000f14
 80056f0:	e000ed0c 	.word	0xe000ed0c
 80056f4:	20000f18 	.word	0x20000f18

080056f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	; 0x28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005704:	f7fe fca0 	bl	8004048 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005708:	4b5b      	ldr	r3, [pc, #364]	; (8005878 <pvPortMalloc+0x180>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005710:	f000 f920 	bl	8005954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005714:	4b59      	ldr	r3, [pc, #356]	; (800587c <pvPortMalloc+0x184>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4013      	ands	r3, r2
 800571c:	2b00      	cmp	r3, #0
 800571e:	f040 8093 	bne.w	8005848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d01d      	beq.n	8005764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005728:	2208      	movs	r2, #8
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4413      	add	r3, r2
 800572e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	2b00      	cmp	r3, #0
 8005738:	d014      	beq.n	8005764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f023 0307 	bic.w	r3, r3, #7
 8005740:	3308      	adds	r3, #8
 8005742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <pvPortMalloc+0x6c>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	617b      	str	r3, [r7, #20]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d06e      	beq.n	8005848 <pvPortMalloc+0x150>
 800576a:	4b45      	ldr	r3, [pc, #276]	; (8005880 <pvPortMalloc+0x188>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	d869      	bhi.n	8005848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005774:	4b43      	ldr	r3, [pc, #268]	; (8005884 <pvPortMalloc+0x18c>)
 8005776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005778:	4b42      	ldr	r3, [pc, #264]	; (8005884 <pvPortMalloc+0x18c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800577e:	e004      	b.n	800578a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d903      	bls.n	800579c <pvPortMalloc+0xa4>
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1f1      	bne.n	8005780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800579c:	4b36      	ldr	r3, [pc, #216]	; (8005878 <pvPortMalloc+0x180>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d050      	beq.n	8005848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2208      	movs	r2, #8
 80057ac:	4413      	add	r3, r2
 80057ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	1ad2      	subs	r2, r2, r3
 80057c0:	2308      	movs	r3, #8
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d91f      	bls.n	8005808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4413      	add	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <pvPortMalloc+0xf8>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	613b      	str	r3, [r7, #16]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	1ad2      	subs	r2, r2, r3
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005802:	69b8      	ldr	r0, [r7, #24]
 8005804:	f000 f908 	bl	8005a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005808:	4b1d      	ldr	r3, [pc, #116]	; (8005880 <pvPortMalloc+0x188>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	4a1b      	ldr	r2, [pc, #108]	; (8005880 <pvPortMalloc+0x188>)
 8005814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005816:	4b1a      	ldr	r3, [pc, #104]	; (8005880 <pvPortMalloc+0x188>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <pvPortMalloc+0x190>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d203      	bcs.n	800582a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005822:	4b17      	ldr	r3, [pc, #92]	; (8005880 <pvPortMalloc+0x188>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a18      	ldr	r2, [pc, #96]	; (8005888 <pvPortMalloc+0x190>)
 8005828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	4b13      	ldr	r3, [pc, #76]	; (800587c <pvPortMalloc+0x184>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	431a      	orrs	r2, r3
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800583e:	4b13      	ldr	r3, [pc, #76]	; (800588c <pvPortMalloc+0x194>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3301      	adds	r3, #1
 8005844:	4a11      	ldr	r2, [pc, #68]	; (800588c <pvPortMalloc+0x194>)
 8005846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005848:	f7fe fc0c 	bl	8004064 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <pvPortMalloc+0x174>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	60fb      	str	r3, [r7, #12]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <pvPortMalloc+0x172>
	return pvReturn;
 800586c:	69fb      	ldr	r3, [r7, #28]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3728      	adds	r7, #40	; 0x28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20004b24 	.word	0x20004b24
 800587c:	20004b38 	.word	0x20004b38
 8005880:	20004b28 	.word	0x20004b28
 8005884:	20004b1c 	.word	0x20004b1c
 8005888:	20004b2c 	.word	0x20004b2c
 800588c:	20004b30 	.word	0x20004b30

08005890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d04d      	beq.n	800593e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058a2:	2308      	movs	r3, #8
 80058a4:	425b      	negs	r3, r3
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4413      	add	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	4b24      	ldr	r3, [pc, #144]	; (8005948 <vPortFree+0xb8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4013      	ands	r3, r2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10a      	bne.n	80058d4 <vPortFree+0x44>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	60fb      	str	r3, [r7, #12]
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <vPortFree+0x62>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60bb      	str	r3, [r7, #8]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	4b14      	ldr	r3, [pc, #80]	; (8005948 <vPortFree+0xb8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01e      	beq.n	800593e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d11a      	bne.n	800593e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <vPortFree+0xb8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	43db      	mvns	r3, r3
 8005912:	401a      	ands	r2, r3
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005918:	f7fe fb96 	bl	8004048 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <vPortFree+0xbc>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4413      	add	r3, r2
 8005926:	4a09      	ldr	r2, [pc, #36]	; (800594c <vPortFree+0xbc>)
 8005928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800592a:	6938      	ldr	r0, [r7, #16]
 800592c:	f000 f874 	bl	8005a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <vPortFree+0xc0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	4a06      	ldr	r2, [pc, #24]	; (8005950 <vPortFree+0xc0>)
 8005938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800593a:	f7fe fb93 	bl	8004064 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800593e:	bf00      	nop
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20004b38 	.word	0x20004b38
 800594c:	20004b28 	.word	0x20004b28
 8005950:	20004b34 	.word	0x20004b34

08005954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800595a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800595e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005960:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <prvHeapInit+0xac>)
 8005962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00c      	beq.n	8005988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3307      	adds	r3, #7
 8005972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0307 	bic.w	r3, r3, #7
 800597a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <prvHeapInit+0xac>)
 8005984:	4413      	add	r3, r2
 8005986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800598c:	4a1d      	ldr	r2, [pc, #116]	; (8005a04 <prvHeapInit+0xb0>)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005992:	4b1c      	ldr	r3, [pc, #112]	; (8005a04 <prvHeapInit+0xb0>)
 8005994:	2200      	movs	r2, #0
 8005996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	4413      	add	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059a0:	2208      	movs	r2, #8
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0307 	bic.w	r3, r3, #7
 80059ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4a15      	ldr	r2, [pc, #84]	; (8005a08 <prvHeapInit+0xb4>)
 80059b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059b6:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <prvHeapInit+0xb4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059be:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <prvHeapInit+0xb4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	1ad2      	subs	r2, r2, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <prvHeapInit+0xb4>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <prvHeapInit+0xb8>)
 80059e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4a09      	ldr	r2, [pc, #36]	; (8005a10 <prvHeapInit+0xbc>)
 80059ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059ec:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <prvHeapInit+0xc0>)
 80059ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059f2:	601a      	str	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	20000f1c 	.word	0x20000f1c
 8005a04:	20004b1c 	.word	0x20004b1c
 8005a08:	20004b24 	.word	0x20004b24
 8005a0c:	20004b2c 	.word	0x20004b2c
 8005a10:	20004b28 	.word	0x20004b28
 8005a14:	20004b38 	.word	0x20004b38

08005a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a20:	4b28      	ldr	r3, [pc, #160]	; (8005ac4 <prvInsertBlockIntoFreeList+0xac>)
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	e002      	b.n	8005a2c <prvInsertBlockIntoFreeList+0x14>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d8f7      	bhi.n	8005a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	4413      	add	r3, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d108      	bne.n	8005a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	441a      	add	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	441a      	add	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d118      	bne.n	8005aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d00d      	beq.n	8005a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	441a      	add	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	e008      	b.n	8005aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a96:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	e003      	b.n	8005aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d002      	beq.n	8005ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ab6:	bf00      	nop
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20004b1c 	.word	0x20004b1c
 8005ac8:	20004b24 	.word	0x20004b24

08005acc <__libc_init_array>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	4d0d      	ldr	r5, [pc, #52]	; (8005b04 <__libc_init_array+0x38>)
 8005ad0:	4c0d      	ldr	r4, [pc, #52]	; (8005b08 <__libc_init_array+0x3c>)
 8005ad2:	1b64      	subs	r4, r4, r5
 8005ad4:	10a4      	asrs	r4, r4, #2
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	42a6      	cmp	r6, r4
 8005ada:	d109      	bne.n	8005af0 <__libc_init_array+0x24>
 8005adc:	4d0b      	ldr	r5, [pc, #44]	; (8005b0c <__libc_init_array+0x40>)
 8005ade:	4c0c      	ldr	r4, [pc, #48]	; (8005b10 <__libc_init_array+0x44>)
 8005ae0:	f000 f8f2 	bl	8005cc8 <_init>
 8005ae4:	1b64      	subs	r4, r4, r5
 8005ae6:	10a4      	asrs	r4, r4, #2
 8005ae8:	2600      	movs	r6, #0
 8005aea:	42a6      	cmp	r6, r4
 8005aec:	d105      	bne.n	8005afa <__libc_init_array+0x2e>
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
 8005af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af4:	4798      	blx	r3
 8005af6:	3601      	adds	r6, #1
 8005af8:	e7ee      	b.n	8005ad8 <__libc_init_array+0xc>
 8005afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afe:	4798      	blx	r3
 8005b00:	3601      	adds	r6, #1
 8005b02:	e7f2      	b.n	8005aea <__libc_init_array+0x1e>
 8005b04:	08005d90 	.word	0x08005d90
 8005b08:	08005d90 	.word	0x08005d90
 8005b0c:	08005d90 	.word	0x08005d90
 8005b10:	08005d94 	.word	0x08005d94

08005b14 <__retarget_lock_acquire_recursive>:
 8005b14:	4770      	bx	lr

08005b16 <__retarget_lock_release_recursive>:
 8005b16:	4770      	bx	lr

08005b18 <memcpy>:
 8005b18:	440a      	add	r2, r1
 8005b1a:	4291      	cmp	r1, r2
 8005b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b20:	d100      	bne.n	8005b24 <memcpy+0xc>
 8005b22:	4770      	bx	lr
 8005b24:	b510      	push	{r4, lr}
 8005b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b2e:	4291      	cmp	r1, r2
 8005b30:	d1f9      	bne.n	8005b26 <memcpy+0xe>
 8005b32:	bd10      	pop	{r4, pc}

08005b34 <memset>:
 8005b34:	4402      	add	r2, r0
 8005b36:	4603      	mov	r3, r0
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d100      	bne.n	8005b3e <memset+0xa>
 8005b3c:	4770      	bx	lr
 8005b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b42:	e7f9      	b.n	8005b38 <memset+0x4>

08005b44 <cleanup_glue>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	460c      	mov	r4, r1
 8005b48:	6809      	ldr	r1, [r1, #0]
 8005b4a:	4605      	mov	r5, r0
 8005b4c:	b109      	cbz	r1, 8005b52 <cleanup_glue+0xe>
 8005b4e:	f7ff fff9 	bl	8005b44 <cleanup_glue>
 8005b52:	4621      	mov	r1, r4
 8005b54:	4628      	mov	r0, r5
 8005b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b5a:	f000 b869 	b.w	8005c30 <_free_r>
	...

08005b60 <_reclaim_reent>:
 8005b60:	4b2c      	ldr	r3, [pc, #176]	; (8005c14 <_reclaim_reent+0xb4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4283      	cmp	r3, r0
 8005b66:	b570      	push	{r4, r5, r6, lr}
 8005b68:	4604      	mov	r4, r0
 8005b6a:	d051      	beq.n	8005c10 <_reclaim_reent+0xb0>
 8005b6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b6e:	b143      	cbz	r3, 8005b82 <_reclaim_reent+0x22>
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d14a      	bne.n	8005c0c <_reclaim_reent+0xac>
 8005b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b78:	6819      	ldr	r1, [r3, #0]
 8005b7a:	b111      	cbz	r1, 8005b82 <_reclaim_reent+0x22>
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f000 f857 	bl	8005c30 <_free_r>
 8005b82:	6961      	ldr	r1, [r4, #20]
 8005b84:	b111      	cbz	r1, 8005b8c <_reclaim_reent+0x2c>
 8005b86:	4620      	mov	r0, r4
 8005b88:	f000 f852 	bl	8005c30 <_free_r>
 8005b8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005b8e:	b111      	cbz	r1, 8005b96 <_reclaim_reent+0x36>
 8005b90:	4620      	mov	r0, r4
 8005b92:	f000 f84d 	bl	8005c30 <_free_r>
 8005b96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b98:	b111      	cbz	r1, 8005ba0 <_reclaim_reent+0x40>
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f000 f848 	bl	8005c30 <_free_r>
 8005ba0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005ba2:	b111      	cbz	r1, 8005baa <_reclaim_reent+0x4a>
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f000 f843 	bl	8005c30 <_free_r>
 8005baa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005bac:	b111      	cbz	r1, 8005bb4 <_reclaim_reent+0x54>
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f000 f83e 	bl	8005c30 <_free_r>
 8005bb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005bb6:	b111      	cbz	r1, 8005bbe <_reclaim_reent+0x5e>
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 f839 	bl	8005c30 <_free_r>
 8005bbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005bc0:	b111      	cbz	r1, 8005bc8 <_reclaim_reent+0x68>
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f000 f834 	bl	8005c30 <_free_r>
 8005bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bca:	b111      	cbz	r1, 8005bd2 <_reclaim_reent+0x72>
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f000 f82f 	bl	8005c30 <_free_r>
 8005bd2:	69a3      	ldr	r3, [r4, #24]
 8005bd4:	b1e3      	cbz	r3, 8005c10 <_reclaim_reent+0xb0>
 8005bd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005bd8:	4620      	mov	r0, r4
 8005bda:	4798      	blx	r3
 8005bdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005bde:	b1b9      	cbz	r1, 8005c10 <_reclaim_reent+0xb0>
 8005be0:	4620      	mov	r0, r4
 8005be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005be6:	f7ff bfad 	b.w	8005b44 <cleanup_glue>
 8005bea:	5949      	ldr	r1, [r1, r5]
 8005bec:	b941      	cbnz	r1, 8005c00 <_reclaim_reent+0xa0>
 8005bee:	3504      	adds	r5, #4
 8005bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bf2:	2d80      	cmp	r5, #128	; 0x80
 8005bf4:	68d9      	ldr	r1, [r3, #12]
 8005bf6:	d1f8      	bne.n	8005bea <_reclaim_reent+0x8a>
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 f819 	bl	8005c30 <_free_r>
 8005bfe:	e7ba      	b.n	8005b76 <_reclaim_reent+0x16>
 8005c00:	680e      	ldr	r6, [r1, #0]
 8005c02:	4620      	mov	r0, r4
 8005c04:	f000 f814 	bl	8005c30 <_free_r>
 8005c08:	4631      	mov	r1, r6
 8005c0a:	e7ef      	b.n	8005bec <_reclaim_reent+0x8c>
 8005c0c:	2500      	movs	r5, #0
 8005c0e:	e7ef      	b.n	8005bf0 <_reclaim_reent+0x90>
 8005c10:	bd70      	pop	{r4, r5, r6, pc}
 8005c12:	bf00      	nop
 8005c14:	20000010 	.word	0x20000010

08005c18 <__malloc_lock>:
 8005c18:	4801      	ldr	r0, [pc, #4]	; (8005c20 <__malloc_lock+0x8>)
 8005c1a:	f7ff bf7b 	b.w	8005b14 <__retarget_lock_acquire_recursive>
 8005c1e:	bf00      	nop
 8005c20:	20004b3c 	.word	0x20004b3c

08005c24 <__malloc_unlock>:
 8005c24:	4801      	ldr	r0, [pc, #4]	; (8005c2c <__malloc_unlock+0x8>)
 8005c26:	f7ff bf76 	b.w	8005b16 <__retarget_lock_release_recursive>
 8005c2a:	bf00      	nop
 8005c2c:	20004b3c 	.word	0x20004b3c

08005c30 <_free_r>:
 8005c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c32:	2900      	cmp	r1, #0
 8005c34:	d044      	beq.n	8005cc0 <_free_r+0x90>
 8005c36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c3a:	9001      	str	r0, [sp, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c42:	bfb8      	it	lt
 8005c44:	18e4      	addlt	r4, r4, r3
 8005c46:	f7ff ffe7 	bl	8005c18 <__malloc_lock>
 8005c4a:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <_free_r+0x94>)
 8005c4c:	9801      	ldr	r0, [sp, #4]
 8005c4e:	6813      	ldr	r3, [r2, #0]
 8005c50:	b933      	cbnz	r3, 8005c60 <_free_r+0x30>
 8005c52:	6063      	str	r3, [r4, #4]
 8005c54:	6014      	str	r4, [r2, #0]
 8005c56:	b003      	add	sp, #12
 8005c58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c5c:	f7ff bfe2 	b.w	8005c24 <__malloc_unlock>
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	d908      	bls.n	8005c76 <_free_r+0x46>
 8005c64:	6825      	ldr	r5, [r4, #0]
 8005c66:	1961      	adds	r1, r4, r5
 8005c68:	428b      	cmp	r3, r1
 8005c6a:	bf01      	itttt	eq
 8005c6c:	6819      	ldreq	r1, [r3, #0]
 8005c6e:	685b      	ldreq	r3, [r3, #4]
 8005c70:	1949      	addeq	r1, r1, r5
 8005c72:	6021      	streq	r1, [r4, #0]
 8005c74:	e7ed      	b.n	8005c52 <_free_r+0x22>
 8005c76:	461a      	mov	r2, r3
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	b10b      	cbz	r3, 8005c80 <_free_r+0x50>
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	d9fa      	bls.n	8005c76 <_free_r+0x46>
 8005c80:	6811      	ldr	r1, [r2, #0]
 8005c82:	1855      	adds	r5, r2, r1
 8005c84:	42a5      	cmp	r5, r4
 8005c86:	d10b      	bne.n	8005ca0 <_free_r+0x70>
 8005c88:	6824      	ldr	r4, [r4, #0]
 8005c8a:	4421      	add	r1, r4
 8005c8c:	1854      	adds	r4, r2, r1
 8005c8e:	42a3      	cmp	r3, r4
 8005c90:	6011      	str	r1, [r2, #0]
 8005c92:	d1e0      	bne.n	8005c56 <_free_r+0x26>
 8005c94:	681c      	ldr	r4, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	6053      	str	r3, [r2, #4]
 8005c9a:	4421      	add	r1, r4
 8005c9c:	6011      	str	r1, [r2, #0]
 8005c9e:	e7da      	b.n	8005c56 <_free_r+0x26>
 8005ca0:	d902      	bls.n	8005ca8 <_free_r+0x78>
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	6003      	str	r3, [r0, #0]
 8005ca6:	e7d6      	b.n	8005c56 <_free_r+0x26>
 8005ca8:	6825      	ldr	r5, [r4, #0]
 8005caa:	1961      	adds	r1, r4, r5
 8005cac:	428b      	cmp	r3, r1
 8005cae:	bf04      	itt	eq
 8005cb0:	6819      	ldreq	r1, [r3, #0]
 8005cb2:	685b      	ldreq	r3, [r3, #4]
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	bf04      	itt	eq
 8005cb8:	1949      	addeq	r1, r1, r5
 8005cba:	6021      	streq	r1, [r4, #0]
 8005cbc:	6054      	str	r4, [r2, #4]
 8005cbe:	e7ca      	b.n	8005c56 <_free_r+0x26>
 8005cc0:	b003      	add	sp, #12
 8005cc2:	bd30      	pop	{r4, r5, pc}
 8005cc4:	20004b40 	.word	0x20004b40

08005cc8 <_init>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	bf00      	nop
 8005ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cce:	bc08      	pop	{r3}
 8005cd0:	469e      	mov	lr, r3
 8005cd2:	4770      	bx	lr

08005cd4 <_fini>:
 8005cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd6:	bf00      	nop
 8005cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cda:	bc08      	pop	{r3}
 8005cdc:	469e      	mov	lr, r3
 8005cde:	4770      	bx	lr
