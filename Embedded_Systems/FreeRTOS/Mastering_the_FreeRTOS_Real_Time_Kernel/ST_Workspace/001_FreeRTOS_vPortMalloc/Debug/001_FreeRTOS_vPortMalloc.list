
001_FreeRTOS_vPortMalloc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006234  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006460  08006460  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006460  08006460  00016460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006468  08006468  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004a0c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a80  20004a80  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017dce  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000324f  00000000  00000000  00037e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0003b0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001318  00000000  00000000  0003c508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003d7f  00000000  00000000  0003d820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000162e9  00000000  00000000  0004159f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d50e2  00000000  00000000  00057888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c96a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005940  00000000  00000000  0012c9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063ac 	.word	0x080063ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080063ac 	.word	0x080063ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Task1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Task1(void *pvParameters)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b09a      	sub	sp, #104	; 0x68
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
	typedef struct person
	{
		uint8_t age;
		char *name;
	}Unit;
	int count = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	65fb      	str	r3, [r7, #92]	; 0x5c
	while(1)
	{
		Unit *ptr = pvPortMalloc(sizeof(Unit));
 8000590:	2008      	movs	r0, #8
 8000592:	f005 f881 	bl	8005698 <pvPortMalloc>
 8000596:	65b8      	str	r0, [r7, #88]	; 0x58
		if(ptr == NULL)
 8000598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800059a:	2b00      	cmp	r3, #0
 800059c:	d104      	bne.n	80005a8 <Task1+0x24>
			HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	4817      	ldr	r0, [pc, #92]	; (8000600 <Task1+0x7c>)
 80005a4:	f000 fe55 	bl	8001252 <HAL_GPIO_TogglePin>
		ptr->age = 28;
 80005a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005aa:	221c      	movs	r2, #28
 80005ac:	701a      	strb	r2, [r3, #0]
		ptr->name = "Mehmet";
 80005ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005b0:	4a14      	ldr	r2, [pc, #80]	; (8000604 <Task1+0x80>)
 80005b2:	605a      	str	r2, [r3, #4]
		char buffer[80];
		sprintf(buffer, "#%d times %s name and %d age written\r\n", count,ptr->name, ptr->age);
 80005b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005b6:	685a      	ldr	r2, [r3, #4]
 80005b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	f107 0008 	add.w	r0, r7, #8
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	4613      	mov	r3, r2
 80005c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80005c6:	4910      	ldr	r1, [pc, #64]	; (8000608 <Task1+0x84>)
 80005c8:	f005 fa90 	bl	8005aec <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY );
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fdfd 	bl	80001d0 <strlen>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b29a      	uxth	r2, r3
 80005da:	f107 0108 	add.w	r1, r7, #8
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <Task1+0x88>)
 80005e4:	f001 fe15 	bl	8002212 <HAL_UART_Transmit>

		//vPortFree(ptr);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <Task1+0x7c>)
 80005ee:	f000 fe30 	bl	8001252 <HAL_GPIO_TogglePin>
		vTaskDelay(50);
 80005f2:	2032      	movs	r0, #50	; 0x32
 80005f4:	f003 fd5a 	bl	80040ac <vTaskDelay>
		count++;
 80005f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005fa:	3301      	adds	r3, #1
 80005fc:	65fb      	str	r3, [r7, #92]	; 0x5c
	{
 80005fe:	e7c7      	b.n	8000590 <Task1+0xc>
 8000600:	40020c00 	.word	0x40020c00
 8000604:	080063c4 	.word	0x080063c4
 8000608:	080063cc 	.word	0x080063cc
 800060c:	20000090 	.word	0x20000090

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fab1 	bl	8000b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f815 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8a7 	bl	8000770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000622:	f000 f87b 	bl	800071c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(Task1,"Task1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000626:	2300      	movs	r3, #0
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	4903      	ldr	r1, [pc, #12]	; (8000640 <main+0x30>)
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <main+0x34>)
 8000636:	f003 fbf4 	bl	8003e22 <xTaskCreate>
  vTaskStartScheduler();
 800063a:	f003 fd6b 	bl	8004114 <vTaskStartScheduler>

  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	e7fe      	b.n	800063e <main+0x2e>
 8000640:	080063f4 	.word	0x080063f4
 8000644:	08000585 	.word	0x08000585

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 fa40 	bl	8005adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	; (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <SystemClock_Config+0xd0>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c6:	2307      	movs	r3, #7
 80006c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fdda 	bl	8001288 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006da:	f000 f8ad 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2302      	movs	r3, #2
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2105      	movs	r1, #5
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 f83b 	bl	8001778 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000708:	f000 f896 	bl	8000838 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	; 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART2_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000754:	f001 fd10 	bl	8002178 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f86b 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000090 	.word	0x20000090
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_GPIO_Init+0x9c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a1f      	ldr	r2, [pc, #124]	; (800080c <MX_GPIO_Init+0x9c>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_GPIO_Init+0x9c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_GPIO_Init+0x9c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a18      	ldr	r2, [pc, #96]	; (800080c <MX_GPIO_Init+0x9c>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_GPIO_Init+0x9c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_GPIO_Init+0x9c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a11      	ldr	r2, [pc, #68]	; (800080c <MX_GPIO_Init+0x9c>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_GPIO_Init+0x9c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007e0:	480b      	ldr	r0, [pc, #44]	; (8000810 <MX_GPIO_Init+0xa0>)
 80007e2:	f000 fd1d 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4619      	mov	r1, r3
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_GPIO_Init+0xa0>)
 8000800:	f000 fb72 	bl	8000ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40020c00 	.word	0x40020c00

08000814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d101      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000826:	f000 f9cb 	bl	8000bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40002000 	.word	0x40002000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000846:	4802      	ldr	r0, [pc, #8]	; (8000850 <Error_Handler+0x18>)
 8000848:	f000 fcea 	bl	8001220 <HAL_GPIO_WritePin>
 800084c:	e7f8      	b.n	8000840 <Error_Handler+0x8>
 800084e:	bf00      	nop
 8000850:	40020c00 	.word	0x40020c00

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_MspInit+0x54>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <HAL_MspInit+0x54>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x54>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_MspInit+0x54>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_MspInit+0x54>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_MspInit+0x54>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	210f      	movs	r1, #15
 8000896:	f06f 0001 	mvn.w	r0, #1
 800089a:	f000 fa69 	bl	8000d70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <HAL_UART_MspInit+0x94>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d133      	bne.n	8000936 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a14      	ldr	r2, [pc, #80]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000906:	230c      	movs	r3, #12
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000916:	2307      	movs	r3, #7
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <HAL_UART_MspInit+0x9c>)
 8000922:	f000 fae1 	bl	8000ee8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2105      	movs	r1, #5
 800092a:	2026      	movs	r0, #38	; 0x26
 800092c:	f000 fa20 	bl	8000d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000930:	2026      	movs	r0, #38	; 0x26
 8000932:	f000 fa39 	bl	8000da8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40004400 	.word	0x40004400
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000

0800094c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4b33      	ldr	r3, [pc, #204]	; (8000a30 <HAL_InitTick+0xe4>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a32      	ldr	r2, [pc, #200]	; (8000a30 <HAL_InitTick+0xe4>)
 8000966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <HAL_InitTick+0xe4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000978:	f107 0210 	add.w	r2, r7, #16
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f918 	bl	8001bb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000988:	6a3b      	ldr	r3, [r7, #32]
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800098c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098e:	2b00      	cmp	r3, #0
 8000990:	d103      	bne.n	800099a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000992:	f001 f8e9 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8000996:	6378      	str	r0, [r7, #52]	; 0x34
 8000998:	e004      	b.n	80009a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800099a:	f001 f8e5 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 800099e:	4603      	mov	r3, r0
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a6:	4a23      	ldr	r2, [pc, #140]	; (8000a34 <HAL_InitTick+0xe8>)
 80009a8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ac:	0c9b      	lsrs	r3, r3, #18
 80009ae:	3b01      	subs	r3, #1
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <HAL_InitTick+0xec>)
 80009b4:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <HAL_InitTick+0xf0>)
 80009b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <HAL_InitTick+0xec>)
 80009ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009be:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80009c0:	4a1d      	ldr	r2, [pc, #116]	; (8000a38 <HAL_InitTick+0xec>)
 80009c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_InitTick+0xec>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <HAL_InitTick+0xec>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_InitTick+0xec>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80009d8:	4817      	ldr	r0, [pc, #92]	; (8000a38 <HAL_InitTick+0xec>)
 80009da:	f001 f91f 	bl	8001c1c <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d11b      	bne.n	8000a24 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80009ec:	4812      	ldr	r0, [pc, #72]	; (8000a38 <HAL_InitTick+0xec>)
 80009ee:	f001 f96f 	bl	8001cd0 <HAL_TIM_Base_Start_IT>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d111      	bne.n	8000a24 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a00:	202d      	movs	r0, #45	; 0x2d
 8000a02:	f000 f9d1 	bl	8000da8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d808      	bhi.n	8000a1e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	202d      	movs	r0, #45	; 0x2d
 8000a12:	f000 f9ad 	bl	8000d70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_InitTick+0xf4>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	e002      	b.n	8000a24 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3738      	adds	r7, #56	; 0x38
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	431bde83 	.word	0x431bde83
 8000a38:	200000d4 	.word	0x200000d4
 8000a3c:	40002000 	.word	0x40002000
 8000a40:	20000004 	.word	0x20000004

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <USART2_IRQHandler+0x10>)
 8000a76:	f001 fc5f 	bl	8002338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000090 	.word	0x20000090

08000a84 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000a8a:	f001 f991 	bl	8001db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000d4 	.word	0x200000d4

08000a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <_sbrk+0x5c>)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <_sbrk+0x60>)
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <_sbrk+0x64>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <_sbrk+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d207      	bcs.n	8000ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac8:	f004 ffd0 	bl	8005a6c <__errno>
 8000acc:	4603      	mov	r3, r0
 8000ace:	220c      	movs	r2, #12
 8000ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	e009      	b.n	8000aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <_sbrk+0x64>)
 8000ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20020000 	.word	0x20020000
 8000af8:	00000400 	.word	0x00000400
 8000afc:	2000011c 	.word	0x2000011c
 8000b00:	20004a80 	.word	0x20004a80

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b2e:	490e      	ldr	r1, [pc, #56]	; (8000b68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b30:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b44:	4c0b      	ldr	r4, [pc, #44]	; (8000b74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b52:	f7ff ffd7 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f004 ff8f 	bl	8005a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fd59 	bl	8000610 <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b6c:	08006470 	.word	0x08006470
  ldr r2, =_sbss
 8000b70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b74:	20004a80 	.word	0x20004a80

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <HAL_Init+0x40>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_Init+0x40>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x40>)
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f8d8 	bl	8000d5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	200f      	movs	r0, #15
 8000bac:	f7ff fece 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fe50 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023c00 	.word	0x40023c00

08000bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_IncTick+0x20>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_IncTick+0x24>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_IncTick+0x24>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000120 	.word	0x20000120

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000120 	.word	0x20000120

08000c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4907      	ldr	r1, [pc, #28]	; (8000c9c <__NVIC_EnableIRQ+0x38>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ff4c 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d82:	f7ff ff61 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000d86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	6978      	ldr	r0, [r7, #20]
 8000d8e:	f7ff ffb1 	bl	8000cf4 <NVIC_EncodePriority>
 8000d92:	4602      	mov	r2, r0
 8000d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff80 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff54 	bl	8000c64 <__NVIC_EnableIRQ>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dd2:	f7ff ff09 	bl	8000be8 <HAL_GetTick>
 8000dd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d008      	beq.n	8000df6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2280      	movs	r2, #128	; 0x80
 8000de8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e052      	b.n	8000e9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0216 	bic.w	r2, r2, #22
 8000e04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	695a      	ldr	r2, [r3, #20]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d103      	bne.n	8000e26 <HAL_DMA_Abort+0x62>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d007      	beq.n	8000e36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0208 	bic.w	r2, r2, #8
 8000e34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0201 	bic.w	r2, r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e46:	e013      	b.n	8000e70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e48:	f7ff fece 	bl	8000be8 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b05      	cmp	r3, #5
 8000e54:	d90c      	bls.n	8000e70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2220      	movs	r2, #32
 8000e5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2203      	movs	r2, #3
 8000e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e015      	b.n	8000e9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1e4      	bne.n	8000e48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e82:	223f      	movs	r2, #63	; 0x3f
 8000e84:	409a      	lsls	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d004      	beq.n	8000ec2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00c      	b.n	8000edc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0201 	bic.w	r2, r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e16b      	b.n	80011dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 815a 	bne.w	80011d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d005      	beq.n	8000f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d130      	bne.n	8000f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f003 0201 	and.w	r2, r3, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d017      	beq.n	8000fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80b4 	beq.w	80011d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b60      	ldr	r3, [pc, #384]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a5f      	ldr	r2, [pc, #380]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b5d      	ldr	r3, [pc, #372]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108a:	4a5b      	ldr	r2, [pc, #364]	; (80011f8 <HAL_GPIO_Init+0x310>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a52      	ldr	r2, [pc, #328]	; (80011fc <HAL_GPIO_Init+0x314>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d02b      	beq.n	800110e <HAL_GPIO_Init+0x226>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a51      	ldr	r2, [pc, #324]	; (8001200 <HAL_GPIO_Init+0x318>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d025      	beq.n	800110a <HAL_GPIO_Init+0x222>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a50      	ldr	r2, [pc, #320]	; (8001204 <HAL_GPIO_Init+0x31c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x21e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4f      	ldr	r2, [pc, #316]	; (8001208 <HAL_GPIO_Init+0x320>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x21a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4e      	ldr	r2, [pc, #312]	; (800120c <HAL_GPIO_Init+0x324>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x216>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4d      	ldr	r2, [pc, #308]	; (8001210 <HAL_GPIO_Init+0x328>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x212>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4c      	ldr	r2, [pc, #304]	; (8001214 <HAL_GPIO_Init+0x32c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x20e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <HAL_GPIO_Init+0x330>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x20a>
 80010ee:	2307      	movs	r3, #7
 80010f0:	e00e      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f2:	2308      	movs	r3, #8
 80010f4:	e00c      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e00a      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fa:	2305      	movs	r3, #5
 80010fc:	e008      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fe:	2304      	movs	r3, #4
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001102:	2303      	movs	r3, #3
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110e:	2300      	movs	r3, #0
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	f002 0203 	and.w	r2, r2, #3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001120:	4935      	ldr	r1, [pc, #212]	; (80011f8 <HAL_GPIO_Init+0x310>)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <HAL_GPIO_Init+0x334>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001152:	4a32      	ldr	r2, [pc, #200]	; (800121c <HAL_GPIO_Init+0x334>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <HAL_GPIO_Init+0x334>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800117c:	4a27      	ldr	r2, [pc, #156]	; (800121c <HAL_GPIO_Init+0x334>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <HAL_GPIO_Init+0x334>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a6:	4a1d      	ldr	r2, [pc, #116]	; (800121c <HAL_GPIO_Init+0x334>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_GPIO_Init+0x334>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_GPIO_Init+0x334>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3301      	adds	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	f67f ae90 	bls.w	8000f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40020800 	.word	0x40020800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40021000 	.word	0x40021000
 8001210:	40021400 	.word	0x40021400
 8001214:	40021800 	.word	0x40021800
 8001218:	40021c00 	.word	0x40021c00
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001252:	b480      	push	{r7}
 8001254:	b085      	sub	sp, #20
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	460b      	mov	r3, r1
 800125c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001264:	887a      	ldrh	r2, [r7, #2]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4013      	ands	r3, r2
 800126a:	041a      	lsls	r2, r3, #16
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43d9      	mvns	r1, r3
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	400b      	ands	r3, r1
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e267      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d075      	beq.n	8001392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a6:	4b88      	ldr	r3, [pc, #544]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d00c      	beq.n	80012cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d112      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012be:	4b82      	ldr	r3, [pc, #520]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ca:	d10b      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	4b7e      	ldr	r3, [pc, #504]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d05b      	beq.n	8001390 <HAL_RCC_OscConfig+0x108>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d157      	bne.n	8001390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e242      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ec:	d106      	bne.n	80012fc <HAL_RCC_OscConfig+0x74>
 80012ee:	4b76      	ldr	r3, [pc, #472]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a75      	ldr	r2, [pc, #468]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e01d      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x98>
 8001306:	4b70      	ldr	r3, [pc, #448]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6f      	ldr	r2, [pc, #444]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6c      	ldr	r2, [pc, #432]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 8001320:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a68      	ldr	r2, [pc, #416]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a65      	ldr	r2, [pc, #404]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fc52 	bl	8000be8 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fc4e 	bl	8000be8 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e207      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b5b      	ldr	r3, [pc, #364]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0xc0>
 8001366:	e014      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fc3e 	bl	8000be8 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fc3a 	bl	8000be8 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1f3      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0xe8>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d063      	beq.n	8001466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139e:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b6:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1c7      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4937      	ldr	r1, [pc, #220]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	e03a      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	4b34      	ldr	r3, [pc, #208]	; (80014cc <HAL_RCC_OscConfig+0x244>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fbf3 	bl	8000be8 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fbef 	bl	8000be8 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e1a8      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4925      	ldr	r1, [pc, #148]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_RCC_OscConfig+0x244>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fbd2 	bl	8000be8 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fbce 	bl	8000be8 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e187      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d036      	beq.n	80014e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d016      	beq.n	80014a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_RCC_OscConfig+0x248>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff fbb2 	bl	8000be8 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fbae 	bl	8000be8 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e167      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_OscConfig+0x240>)
 800149c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x200>
 80014a6:	e01b      	b.n	80014e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_RCC_OscConfig+0x248>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fb9b 	bl	8000be8 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	e00e      	b.n	80014d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fb97 	bl	8000be8 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d907      	bls.n	80014d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e150      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
 80014c8:	40023800 	.word	0x40023800
 80014cc:	42470000 	.word	0x42470000
 80014d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1ea      	bne.n	80014b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8097 	beq.w	800161c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f2:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10f      	bne.n	800151e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b7d      	ldr	r3, [pc, #500]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a7c      	ldr	r2, [pc, #496]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b7a      	ldr	r3, [pc, #488]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b77      	ldr	r3, [pc, #476]	; (80016fc <HAL_RCC_OscConfig+0x474>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b74      	ldr	r3, [pc, #464]	; (80016fc <HAL_RCC_OscConfig+0x474>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a73      	ldr	r2, [pc, #460]	; (80016fc <HAL_RCC_OscConfig+0x474>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff fb57 	bl	8000be8 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153e:	f7ff fb53 	bl	8000be8 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e10c      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	4b6a      	ldr	r3, [pc, #424]	; (80016fc <HAL_RCC_OscConfig+0x474>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x2ea>
 8001564:	4b64      	ldr	r3, [pc, #400]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a63      	ldr	r2, [pc, #396]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
 8001570:	e01c      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x30c>
 800157a:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	4a5e      	ldr	r2, [pc, #376]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6713      	str	r3, [r2, #112]	; 0x70
 8001586:	4b5c      	ldr	r3, [pc, #368]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	4a5b      	ldr	r2, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6713      	str	r3, [r2, #112]	; 0x70
 8001592:	e00b      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001594:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	4a57      	ldr	r2, [pc, #348]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	; 0x70
 80015a0:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	4a54      	ldr	r2, [pc, #336]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f023 0304 	bic.w	r3, r3, #4
 80015aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d015      	beq.n	80015e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fb18 	bl	8000be8 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff fb14 	bl	8000be8 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0cb      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d2:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0ee      	beq.n	80015bc <HAL_RCC_OscConfig+0x334>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fb02 	bl	8000be8 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fafe 	bl	8000be8 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0b5      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fe:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1ee      	bne.n	80015e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d105      	bne.n	800161c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001610:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a38      	ldr	r2, [pc, #224]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80a1 	beq.w	8001768 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001626:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b08      	cmp	r3, #8
 8001630:	d05c      	beq.n	80016ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d141      	bne.n	80016be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b31      	ldr	r3, [pc, #196]	; (8001700 <HAL_RCC_OscConfig+0x478>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fad2 	bl	8000be8 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff face 	bl	8000be8 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e087      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	019b      	lsls	r3, r3, #6
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	3b01      	subs	r3, #1
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	061b      	lsls	r3, r3, #24
 800168a:	491b      	ldr	r1, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_RCC_OscConfig+0x478>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff faa7 	bl	8000be8 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff faa3 	bl	8000be8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e05c      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x416>
 80016bc:	e054      	b.n	8001768 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_RCC_OscConfig+0x478>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fa90 	bl	8000be8 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff fa8c 	bl	8000be8 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e045      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x444>
 80016ea:	e03d      	b.n	8001768 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e038      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40007000 	.word	0x40007000
 8001700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_RCC_OscConfig+0x4ec>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d028      	beq.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d121      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	429a      	cmp	r2, r3
 800172c:	d11a      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001734:	4013      	ands	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800173a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173c:	4293      	cmp	r3, r2
 800173e:	d111      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	3b01      	subs	r3, #1
 800174e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d107      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0cc      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d90c      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b65      	ldr	r3, [pc, #404]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0b8      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017cc:	4b59      	ldr	r3, [pc, #356]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a58      	ldr	r2, [pc, #352]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a52      	ldr	r2, [pc, #328]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4b50      	ldr	r3, [pc, #320]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	494d      	ldr	r1, [pc, #308]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d044      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d119      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e07f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d003      	beq.n	8001836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001832:	2b03      	cmp	r3, #3
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e067      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4934      	ldr	r1, [pc, #208]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff f9be 	bl	8000be8 <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7ff f9ba 	bl	8000be8 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e04f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d20c      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e032      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4916      	ldr	r1, [pc, #88]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	490e      	ldr	r1, [pc, #56]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fe:	f000 f821 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8001902:	4602      	mov	r2, r0
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	490a      	ldr	r1, [pc, #40]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	5ccb      	ldrb	r3, [r1, r3]
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f814 	bl	800094c <HAL_InitTick>

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00
 8001934:	40023800 	.word	0x40023800
 8001938:	08006414 	.word	0x08006414
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001948:	b094      	sub	sp, #80	; 0x50
 800194a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	647b      	str	r3, [r7, #68]	; 0x44
 8001950:	2300      	movs	r3, #0
 8001952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001954:	2300      	movs	r3, #0
 8001956:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800195c:	4b79      	ldr	r3, [pc, #484]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d00d      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x40>
 8001968:	2b08      	cmp	r3, #8
 800196a:	f200 80e1 	bhi.w	8001b30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x34>
 8001972:	2b04      	cmp	r3, #4
 8001974:	d003      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x3a>
 8001976:	e0db      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001978:	4b73      	ldr	r3, [pc, #460]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x204>)
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800197c:	e0db      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800197e:	4b73      	ldr	r3, [pc, #460]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x208>)
 8001980:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001982:	e0d8      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001984:	4b6f      	ldr	r3, [pc, #444]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800198c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198e:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d063      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199a:	4b6a      	ldr	r3, [pc, #424]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	099b      	lsrs	r3, r3, #6
 80019a0:	2200      	movs	r2, #0
 80019a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30
 80019ae:	2300      	movs	r3, #0
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
 80019b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019b6:	4622      	mov	r2, r4
 80019b8:	462b      	mov	r3, r5
 80019ba:	f04f 0000 	mov.w	r0, #0
 80019be:	f04f 0100 	mov.w	r1, #0
 80019c2:	0159      	lsls	r1, r3, #5
 80019c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c8:	0150      	lsls	r0, r2, #5
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4621      	mov	r1, r4
 80019d0:	1a51      	subs	r1, r2, r1
 80019d2:	6139      	str	r1, [r7, #16]
 80019d4:	4629      	mov	r1, r5
 80019d6:	eb63 0301 	sbc.w	r3, r3, r1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019e8:	4659      	mov	r1, fp
 80019ea:	018b      	lsls	r3, r1, #6
 80019ec:	4651      	mov	r1, sl
 80019ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f2:	4651      	mov	r1, sl
 80019f4:	018a      	lsls	r2, r1, #6
 80019f6:	4651      	mov	r1, sl
 80019f8:	ebb2 0801 	subs.w	r8, r2, r1
 80019fc:	4659      	mov	r1, fp
 80019fe:	eb63 0901 	sbc.w	r9, r3, r1
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a16:	4690      	mov	r8, r2
 8001a18:	4699      	mov	r9, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	eb18 0303 	adds.w	r3, r8, r3
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	462b      	mov	r3, r5
 8001a24:	eb49 0303 	adc.w	r3, r9, r3
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a36:	4629      	mov	r1, r5
 8001a38:	024b      	lsls	r3, r1, #9
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a40:	4621      	mov	r1, r4
 8001a42:	024a      	lsls	r2, r1, #9
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a54:	f7fe fc14 	bl	8000280 <__aeabi_uldivmod>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a60:	e058      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a62:	4b38      	ldr	r3, [pc, #224]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	099b      	lsrs	r3, r3, #6
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a72:	623b      	str	r3, [r7, #32]
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
 8001a78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	464b      	mov	r3, r9
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	0159      	lsls	r1, r3, #5
 8001a8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8e:	0150      	lsls	r0, r2, #5
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4641      	mov	r1, r8
 8001a96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a9a:	4649      	mov	r1, r9
 8001a9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ab4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ab8:	eb63 050b 	sbc.w	r5, r3, fp
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	00eb      	lsls	r3, r5, #3
 8001ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aca:	00e2      	lsls	r2, r4, #3
 8001acc:	4614      	mov	r4, r2
 8001ace:	461d      	mov	r5, r3
 8001ad0:	4643      	mov	r3, r8
 8001ad2:	18e3      	adds	r3, r4, r3
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	464b      	mov	r3, r9
 8001ad8:	eb45 0303 	adc.w	r3, r5, r3
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aea:	4629      	mov	r1, r5
 8001aec:	028b      	lsls	r3, r1, #10
 8001aee:	4621      	mov	r1, r4
 8001af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af4:	4621      	mov	r1, r4
 8001af6:	028a      	lsls	r2, r1, #10
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afe:	2200      	movs	r2, #0
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	61fa      	str	r2, [r7, #28]
 8001b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b08:	f7fe fbba 	bl	8000280 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4613      	mov	r3, r2
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0c1b      	lsrs	r3, r3, #16
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b2e:	e002      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3750      	adds	r7, #80	; 0x50
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	00f42400 	.word	0x00f42400
 8001b4c:	007a1200 	.word	0x007a1200

08001b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b6c:	f7ff fff0 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4903      	ldr	r1, [pc, #12]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	08006424 	.word	0x08006424

08001b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b94:	f7ff ffdc 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	0b5b      	lsrs	r3, r3, #13
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	4903      	ldr	r1, [pc, #12]	; (8001bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	08006424 	.word	0x08006424

08001bb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0203 	and.w	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_GetClockConfig+0x5c>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	08db      	lsrs	r3, r3, #3
 8001bf2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_RCC_GetClockConfig+0x60>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0207 	and.w	r2, r3, #7
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	601a      	str	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e041      	b.n	8001cb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f839 	bl	8001cba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3304      	adds	r3, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	f000 f9d8 	bl	8002010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d001      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e04e      	b.n	8001d86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d022      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x80>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d12:	d01d      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x80>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d018      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x80>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <HAL_TIM_Base_Start_IT+0xcc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d013      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x80>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1c      	ldr	r2, [pc, #112]	; (8001da0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00e      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x80>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d009      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x80>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d004      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x80>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a18      	ldr	r2, [pc, #96]	; (8001dac <HAL_TIM_Base_Start_IT+0xdc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d111      	bne.n	8001d74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d010      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d72:	e007      	b.n	8001d84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40000800 	.word	0x40000800
 8001da0:	40000c00 	.word	0x40000c00
 8001da4:	40010400 	.word	0x40010400
 8001da8:	40014000 	.word	0x40014000
 8001dac:	40001800 	.word	0x40001800

08001db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d122      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d11b      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0202 	mvn.w	r2, #2
 8001ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f8ee 	bl	8001fd4 <HAL_TIM_IC_CaptureCallback>
 8001df8:	e005      	b.n	8001e06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8e0 	bl	8001fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f8f1 	bl	8001fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d122      	bne.n	8001e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d11b      	bne.n	8001e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0204 	mvn.w	r2, #4
 8001e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2202      	movs	r2, #2
 8001e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8c4 	bl	8001fd4 <HAL_TIM_IC_CaptureCallback>
 8001e4c:	e005      	b.n	8001e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8b6 	bl	8001fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f8c7 	bl	8001fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d122      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d11b      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0208 	mvn.w	r2, #8
 8001e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2204      	movs	r2, #4
 8001e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f89a 	bl	8001fd4 <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f88c 	bl	8001fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f89d 	bl	8001fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b10      	cmp	r3, #16
 8001ec0:	d122      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	2b10      	cmp	r3, #16
 8001ece:	d11b      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0210 	mvn.w	r2, #16
 8001ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2208      	movs	r2, #8
 8001ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f870 	bl	8001fd4 <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f862 	bl	8001fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f873 	bl	8001fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d107      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0201 	mvn.w	r2, #1
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fc70 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3e:	2b80      	cmp	r3, #128	; 0x80
 8001f40:	d10e      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4c:	2b80      	cmp	r3, #128	; 0x80
 8001f4e:	d107      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f902 	bl	8002164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6a:	2b40      	cmp	r3, #64	; 0x40
 8001f6c:	d10e      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f78:	2b40      	cmp	r3, #64	; 0x40
 8001f7a:	d107      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f838 	bl	8001ffc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d10e      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d107      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0220 	mvn.w	r2, #32
 8001fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f8cc 	bl	8002150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a40      	ldr	r2, [pc, #256]	; (8002124 <TIM_Base_SetConfig+0x114>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202e:	d00f      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3d      	ldr	r2, [pc, #244]	; (8002128 <TIM_Base_SetConfig+0x118>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00b      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3c      	ldr	r2, [pc, #240]	; (800212c <TIM_Base_SetConfig+0x11c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3b      	ldr	r2, [pc, #236]	; (8002130 <TIM_Base_SetConfig+0x120>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d003      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3a      	ldr	r2, [pc, #232]	; (8002134 <TIM_Base_SetConfig+0x124>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d108      	bne.n	8002062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a2f      	ldr	r2, [pc, #188]	; (8002124 <TIM_Base_SetConfig+0x114>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d02b      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002070:	d027      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a2c      	ldr	r2, [pc, #176]	; (8002128 <TIM_Base_SetConfig+0x118>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d023      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2b      	ldr	r2, [pc, #172]	; (800212c <TIM_Base_SetConfig+0x11c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d01f      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2a      	ldr	r2, [pc, #168]	; (8002130 <TIM_Base_SetConfig+0x120>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01b      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a29      	ldr	r2, [pc, #164]	; (8002134 <TIM_Base_SetConfig+0x124>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d017      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a28      	ldr	r2, [pc, #160]	; (8002138 <TIM_Base_SetConfig+0x128>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a27      	ldr	r2, [pc, #156]	; (800213c <TIM_Base_SetConfig+0x12c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00f      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a26      	ldr	r2, [pc, #152]	; (8002140 <TIM_Base_SetConfig+0x130>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00b      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a25      	ldr	r2, [pc, #148]	; (8002144 <TIM_Base_SetConfig+0x134>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a24      	ldr	r2, [pc, #144]	; (8002148 <TIM_Base_SetConfig+0x138>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d003      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a23      	ldr	r2, [pc, #140]	; (800214c <TIM_Base_SetConfig+0x13c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d108      	bne.n	80020d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <TIM_Base_SetConfig+0x114>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d003      	beq.n	8002108 <TIM_Base_SetConfig+0xf8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <TIM_Base_SetConfig+0x124>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d103      	bne.n	8002110 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	615a      	str	r2, [r3, #20]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40010000 	.word	0x40010000
 8002128:	40000400 	.word	0x40000400
 800212c:	40000800 	.word	0x40000800
 8002130:	40000c00 	.word	0x40000c00
 8002134:	40010400 	.word	0x40010400
 8002138:	40014000 	.word	0x40014000
 800213c:	40014400 	.word	0x40014400
 8002140:	40014800 	.word	0x40014800
 8002144:	40001800 	.word	0x40001800
 8002148:	40001c00 	.word	0x40001c00
 800214c:	40002000 	.word	0x40002000

08002150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e03f      	b.n	800220a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fb84 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2224      	movs	r2, #36	; 0x24
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 fd7b 	bl	8002cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b08a      	sub	sp, #40	; 0x28
 8002216:	af02      	add	r7, sp, #8
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b20      	cmp	r3, #32
 8002230:	d17c      	bne.n	800232c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_UART_Transmit+0x2c>
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e075      	b.n	800232e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_UART_Transmit+0x3e>
 800224c:	2302      	movs	r3, #2
 800224e:	e06e      	b.n	800232e <HAL_UART_Transmit+0x11c>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2221      	movs	r2, #33	; 0x21
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002266:	f7fe fcbf 	bl	8000be8 <HAL_GetTick>
 800226a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002280:	d108      	bne.n	8002294 <HAL_UART_Transmit+0x82>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d104      	bne.n	8002294 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	e003      	b.n	800229c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022a4:	e02a      	b.n	80022fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2200      	movs	r2, #0
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 faf9 	bl	80028a8 <UART_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e036      	b.n	800232e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10b      	bne.n	80022de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3302      	adds	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	e007      	b.n	80022ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	3301      	adds	r3, #1
 80022ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1cf      	bne.n	80022a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	2140      	movs	r1, #64	; 0x40
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fac9 	bl	80028a8 <UART_WaitOnFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e006      	b.n	800232e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	e000      	b.n	800232e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800232c:	2302      	movs	r3, #2
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b0ba      	sub	sp, #232	; 0xe8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800236a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10f      	bne.n	800239e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800237e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_UART_IRQHandler+0x66>
 800238a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fbd3 	bl	8002b42 <UART_Receive_IT>
      return;
 800239c:	e256      	b.n	800284c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800239e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80de 	beq.w	8002564 <HAL_UART_IRQHandler+0x22c>
 80023a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d106      	bne.n	80023c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80d1 	beq.w	8002564 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_UART_IRQHandler+0xae>
 80023ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <HAL_UART_IRQHandler+0xd2>
 80023f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f043 0202 	orr.w	r2, r3, #2
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800240a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_UART_IRQHandler+0xf6>
 8002416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f043 0204 	orr.w	r2, r3, #4
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800242e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d011      	beq.n	800245e <HAL_UART_IRQHandler+0x126>
 800243a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	d105      	bne.n	8002452 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f043 0208 	orr.w	r2, r3, #8
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 81ed 	beq.w	8002842 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_UART_IRQHandler+0x14e>
 8002474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fb5e 	bl	8002b42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <HAL_UART_IRQHandler+0x17a>
 80024aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d04f      	beq.n	8002552 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fa66 	bl	8002984 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b40      	cmp	r3, #64	; 0x40
 80024c4:	d141      	bne.n	800254a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3314      	adds	r3, #20
 80024cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024d4:	e853 3f00 	ldrex	r3, [r3]
 80024d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80024dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3314      	adds	r3, #20
 80024ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002502:	e841 2300 	strex	r3, r2, [r1]
 8002506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800250a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1d9      	bne.n	80024c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	2b00      	cmp	r3, #0
 8002518:	d013      	beq.n	8002542 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	4a7d      	ldr	r2, [pc, #500]	; (8002714 <HAL_UART_IRQHandler+0x3dc>)
 8002520:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fcbc 	bl	8000ea4 <HAL_DMA_Abort_IT>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d016      	beq.n	8002560 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800253c:	4610      	mov	r0, r2
 800253e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002540:	e00e      	b.n	8002560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f99a 	bl	800287c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002548:	e00a      	b.n	8002560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f996 	bl	800287c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002550:	e006      	b.n	8002560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f992 	bl	800287c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800255e:	e170      	b.n	8002842 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002560:	bf00      	nop
    return;
 8002562:	e16e      	b.n	8002842 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	2b01      	cmp	r3, #1
 800256a:	f040 814a 	bne.w	8002802 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800256e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8143 	beq.w	8002802 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800257c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 813c 	beq.w	8002802 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	2b40      	cmp	r3, #64	; 0x40
 80025ac:	f040 80b4 	bne.w	8002718 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8140 	beq.w	8002846 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025ce:	429a      	cmp	r2, r3
 80025d0:	f080 8139 	bcs.w	8002846 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e6:	f000 8088 	beq.w	80026fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	330c      	adds	r3, #12
 80025f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025f8:	e853 3f00 	ldrex	r3, [r3]
 80025fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	330c      	adds	r3, #12
 8002612:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002616:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800261a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002622:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002626:	e841 2300 	strex	r3, r2, [r1]
 800262a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800262e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1d9      	bne.n	80025ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3314      	adds	r3, #20
 800263c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002640:	e853 3f00 	ldrex	r3, [r3]
 8002644:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3314      	adds	r3, #20
 8002656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800265a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800265e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002660:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002662:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002666:	e841 2300 	strex	r3, r2, [r1]
 800266a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800266c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1e1      	bne.n	8002636 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3314      	adds	r3, #20
 8002678:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800267c:	e853 3f00 	ldrex	r3, [r3]
 8002680:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3314      	adds	r3, #20
 8002692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002696:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002698:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800269c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800269e:	e841 2300 	strex	r3, r2, [r1]
 80026a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80026a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1e3      	bne.n	8002672 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	330c      	adds	r3, #12
 80026be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c2:	e853 3f00 	ldrex	r3, [r3]
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ca:	f023 0310 	bic.w	r3, r3, #16
 80026ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	330c      	adds	r3, #12
 80026d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80026de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026e4:	e841 2300 	strex	r3, r2, [r1]
 80026e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1e3      	bne.n	80026b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fb65 	bl	8000dc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002702:	b29b      	uxth	r3, r3
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	b29b      	uxth	r3, r3
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8c0 	bl	8002890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002710:	e099      	b.n	8002846 <HAL_UART_IRQHandler+0x50e>
 8002712:	bf00      	nop
 8002714:	08002a4b 	.word	0x08002a4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002720:	b29b      	uxth	r3, r3
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 808b 	beq.w	800284a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8086 	beq.w	800284a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	330c      	adds	r3, #12
 8002744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	e853 3f00 	ldrex	r3, [r3]
 800274c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800274e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002754:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	330c      	adds	r3, #12
 800275e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002762:	647a      	str	r2, [r7, #68]	; 0x44
 8002764:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002766:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002768:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800276a:	e841 2300 	strex	r3, r2, [r1]
 800276e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e3      	bne.n	800273e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3314      	adds	r3, #20
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	e853 3f00 	ldrex	r3, [r3]
 8002784:	623b      	str	r3, [r7, #32]
   return(result);
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3314      	adds	r3, #20
 8002796:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800279a:	633a      	str	r2, [r7, #48]	; 0x30
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027a2:	e841 2300 	strex	r3, r2, [r1]
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1e3      	bne.n	8002776 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	330c      	adds	r3, #12
 80027c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	e853 3f00 	ldrex	r3, [r3]
 80027ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0310 	bic.w	r3, r3, #16
 80027d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
 80027dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027e0:	61fa      	str	r2, [r7, #28]
 80027e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e4:	69b9      	ldr	r1, [r7, #24]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	e841 2300 	strex	r3, r2, [r1]
 80027ec:	617b      	str	r3, [r7, #20]
   return(result);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1e3      	bne.n	80027bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027f8:	4619      	mov	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f848 	bl	8002890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002800:	e023      	b.n	800284a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <HAL_UART_IRQHandler+0x4ea>
 800280e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f929 	bl	8002a72 <UART_Transmit_IT>
    return;
 8002820:	e014      	b.n	800284c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00e      	beq.n	800284c <HAL_UART_IRQHandler+0x514>
 800282e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f969 	bl	8002b12 <UART_EndTransmit_IT>
    return;
 8002840:	e004      	b.n	800284c <HAL_UART_IRQHandler+0x514>
    return;
 8002842:	bf00      	nop
 8002844:	e002      	b.n	800284c <HAL_UART_IRQHandler+0x514>
      return;
 8002846:	bf00      	nop
 8002848:	e000      	b.n	800284c <HAL_UART_IRQHandler+0x514>
      return;
 800284a:	bf00      	nop
  }
}
 800284c:	37e8      	adds	r7, #232	; 0xe8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop

08002854 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b090      	sub	sp, #64	; 0x40
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028b8:	e050      	b.n	800295c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c0:	d04c      	beq.n	800295c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80028c8:	f7fe f98e 	bl	8000be8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d241      	bcs.n	800295c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	e853 3f00 	ldrex	r3, [r3]
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028f8:	637a      	str	r2, [r7, #52]	; 0x34
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002900:	e841 2300 	strex	r3, r2, [r1]
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e5      	bne.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3314      	adds	r3, #20
 8002912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	e853 3f00 	ldrex	r3, [r3]
 800291a:	613b      	str	r3, [r7, #16]
   return(result);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	63bb      	str	r3, [r7, #56]	; 0x38
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800292c:	623a      	str	r2, [r7, #32]
 800292e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002930:	69f9      	ldr	r1, [r7, #28]
 8002932:	6a3a      	ldr	r2, [r7, #32]
 8002934:	e841 2300 	strex	r3, r2, [r1]
 8002938:	61bb      	str	r3, [r7, #24]
   return(result);
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e5      	bne.n	800290c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e00f      	b.n	800297c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	4013      	ands	r3, r2
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	429a      	cmp	r2, r3
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	429a      	cmp	r2, r3
 8002978:	d09f      	beq.n	80028ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3740      	adds	r7, #64	; 0x40
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002984:	b480      	push	{r7}
 8002986:	b095      	sub	sp, #84	; 0x54
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002996:	e853 3f00 	ldrex	r3, [r3]
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	330c      	adds	r3, #12
 80029aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029ac:	643a      	str	r2, [r7, #64]	; 0x40
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029b4:	e841 2300 	strex	r3, r2, [r1]
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e5      	bne.n	800298c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3314      	adds	r3, #20
 80029c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	e853 3f00 	ldrex	r3, [r3]
 80029ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3314      	adds	r3, #20
 80029de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e8:	e841 2300 	strex	r3, r2, [r1]
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e5      	bne.n	80029c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d119      	bne.n	8002a30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	330c      	adds	r3, #12
 8002a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	e853 3f00 	ldrex	r3, [r3]
 8002a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f023 0310 	bic.w	r3, r3, #16
 8002a12:	647b      	str	r3, [r7, #68]	; 0x44
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	330c      	adds	r3, #12
 8002a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a1c:	61ba      	str	r2, [r7, #24]
 8002a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a20:	6979      	ldr	r1, [r7, #20]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	e841 2300 	strex	r3, r2, [r1]
 8002a28:	613b      	str	r3, [r7, #16]
   return(result);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e5      	bne.n	80029fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a3e:	bf00      	nop
 8002a40:	3754      	adds	r7, #84	; 0x54
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7ff ff09 	bl	800287c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b21      	cmp	r3, #33	; 0x21
 8002a84:	d13e      	bne.n	8002b04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8e:	d114      	bne.n	8002aba <UART_Transmit_IT+0x48>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d110      	bne.n	8002aba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	1c9a      	adds	r2, r3, #2
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	621a      	str	r2, [r3, #32]
 8002ab8:	e008      	b.n	8002acc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	1c59      	adds	r1, r3, #1
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6211      	str	r1, [r2, #32]
 8002ac4:	781a      	ldrb	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10f      	bne.n	8002b00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002afe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e000      	b.n	8002b06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b04:	2302      	movs	r3, #2
  }
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fe8e 	bl	8002854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b08c      	sub	sp, #48	; 0x30
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b22      	cmp	r3, #34	; 0x22
 8002b54:	f040 80ab 	bne.w	8002cae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b60:	d117      	bne.n	8002b92 <UART_Receive_IT+0x50>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d113      	bne.n	8002b92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	1c9a      	adds	r2, r3, #2
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b90:	e026      	b.n	8002be0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba4:	d007      	beq.n	8002bb6 <UART_Receive_IT+0x74>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <UART_Receive_IT+0x82>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	e008      	b.n	8002bd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4619      	mov	r1, r3
 8002bee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d15a      	bne.n	8002caa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0220 	bic.w	r2, r2, #32
 8002c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d135      	bne.n	8002ca0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	330c      	adds	r3, #12
 8002c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	613b      	str	r3, [r7, #16]
   return(result);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f023 0310 	bic.w	r3, r3, #16
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	330c      	adds	r3, #12
 8002c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5a:	623a      	str	r2, [r7, #32]
 8002c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5e:	69f9      	ldr	r1, [r7, #28]
 8002c60:	6a3a      	ldr	r2, [r7, #32]
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1e5      	bne.n	8002c3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b10      	cmp	r3, #16
 8002c7a:	d10a      	bne.n	8002c92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c96:	4619      	mov	r1, r3
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff fdf9 	bl	8002890 <HAL_UARTEx_RxEventCallback>
 8002c9e:	e002      	b.n	8002ca6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff fde1 	bl	8002868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e002      	b.n	8002cb0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3730      	adds	r7, #48	; 0x30
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cbc:	b0c0      	sub	sp, #256	; 0x100
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd4:	68d9      	ldr	r1, [r3, #12]
 8002cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	ea40 0301 	orr.w	r3, r0, r1
 8002ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d10:	f021 010c 	bic.w	r1, r1, #12
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d32:	6999      	ldr	r1, [r3, #24]
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	ea40 0301 	orr.w	r3, r0, r1
 8002d3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	4b8f      	ldr	r3, [pc, #572]	; (8002f84 <UART_SetConfig+0x2cc>)
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d005      	beq.n	8002d58 <UART_SetConfig+0xa0>
 8002d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b8d      	ldr	r3, [pc, #564]	; (8002f88 <UART_SetConfig+0x2d0>)
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d104      	bne.n	8002d62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d58:	f7fe ff1a 	bl	8001b90 <HAL_RCC_GetPCLK2Freq>
 8002d5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d60:	e003      	b.n	8002d6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d62:	f7fe ff01 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8002d66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d74:	f040 810c 	bne.w	8002f90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	1891      	adds	r1, r2, r2
 8002d90:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d92:	415b      	adcs	r3, r3
 8002d94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	eb12 0801 	adds.w	r8, r2, r1
 8002da0:	4629      	mov	r1, r5
 8002da2:	eb43 0901 	adc.w	r9, r3, r1
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dba:	4690      	mov	r8, r2
 8002dbc:	4699      	mov	r9, r3
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	eb18 0303 	adds.w	r3, r8, r3
 8002dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002dc8:	462b      	mov	r3, r5
 8002dca:	eb49 0303 	adc.w	r3, r9, r3
 8002dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002dde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002de6:	460b      	mov	r3, r1
 8002de8:	18db      	adds	r3, r3, r3
 8002dea:	653b      	str	r3, [r7, #80]	; 0x50
 8002dec:	4613      	mov	r3, r2
 8002dee:	eb42 0303 	adc.w	r3, r2, r3
 8002df2:	657b      	str	r3, [r7, #84]	; 0x54
 8002df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002df8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002dfc:	f7fd fa40 	bl	8000280 <__aeabi_uldivmod>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4b61      	ldr	r3, [pc, #388]	; (8002f8c <UART_SetConfig+0x2d4>)
 8002e06:	fba3 2302 	umull	r2, r3, r3, r2
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	011c      	lsls	r4, r3, #4
 8002e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e20:	4642      	mov	r2, r8
 8002e22:	464b      	mov	r3, r9
 8002e24:	1891      	adds	r1, r2, r2
 8002e26:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e28:	415b      	adcs	r3, r3
 8002e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e30:	4641      	mov	r1, r8
 8002e32:	eb12 0a01 	adds.w	sl, r2, r1
 8002e36:	4649      	mov	r1, r9
 8002e38:	eb43 0b01 	adc.w	fp, r3, r1
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e50:	4692      	mov	sl, r2
 8002e52:	469b      	mov	fp, r3
 8002e54:	4643      	mov	r3, r8
 8002e56:	eb1a 0303 	adds.w	r3, sl, r3
 8002e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e5e:	464b      	mov	r3, r9
 8002e60:	eb4b 0303 	adc.w	r3, fp, r3
 8002e64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	18db      	adds	r3, r3, r3
 8002e80:	643b      	str	r3, [r7, #64]	; 0x40
 8002e82:	4613      	mov	r3, r2
 8002e84:	eb42 0303 	adc.w	r3, r2, r3
 8002e88:	647b      	str	r3, [r7, #68]	; 0x44
 8002e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e92:	f7fd f9f5 	bl	8000280 <__aeabi_uldivmod>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4b3b      	ldr	r3, [pc, #236]	; (8002f8c <UART_SetConfig+0x2d4>)
 8002e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	2264      	movs	r2, #100	; 0x64
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	1acb      	subs	r3, r1, r3
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002eb2:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <UART_SetConfig+0x2d4>)
 8002eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ec0:	441c      	add	r4, r3
 8002ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ed4:	4642      	mov	r2, r8
 8002ed6:	464b      	mov	r3, r9
 8002ed8:	1891      	adds	r1, r2, r2
 8002eda:	63b9      	str	r1, [r7, #56]	; 0x38
 8002edc:	415b      	adcs	r3, r3
 8002ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ee4:	4641      	mov	r1, r8
 8002ee6:	1851      	adds	r1, r2, r1
 8002ee8:	6339      	str	r1, [r7, #48]	; 0x30
 8002eea:	4649      	mov	r1, r9
 8002eec:	414b      	adcs	r3, r1
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002efc:	4659      	mov	r1, fp
 8002efe:	00cb      	lsls	r3, r1, #3
 8002f00:	4651      	mov	r1, sl
 8002f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f06:	4651      	mov	r1, sl
 8002f08:	00ca      	lsls	r2, r1, #3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4642      	mov	r2, r8
 8002f12:	189b      	adds	r3, r3, r2
 8002f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f18:	464b      	mov	r3, r9
 8002f1a:	460a      	mov	r2, r1
 8002f1c:	eb42 0303 	adc.w	r3, r2, r3
 8002f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f38:	460b      	mov	r3, r1
 8002f3a:	18db      	adds	r3, r3, r3
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f3e:	4613      	mov	r3, r2
 8002f40:	eb42 0303 	adc.w	r3, r2, r3
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f4e:	f7fd f997 	bl	8000280 <__aeabi_uldivmod>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <UART_SetConfig+0x2d4>)
 8002f58:	fba3 1302 	umull	r1, r3, r3, r2
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	2164      	movs	r1, #100	; 0x64
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	3332      	adds	r3, #50	; 0x32
 8002f6a:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <UART_SetConfig+0x2d4>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	f003 0207 	and.w	r2, r3, #7
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4422      	add	r2, r4
 8002f7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f80:	e105      	b.n	800318e <UART_SetConfig+0x4d6>
 8002f82:	bf00      	nop
 8002f84:	40011000 	.word	0x40011000
 8002f88:	40011400 	.word	0x40011400
 8002f8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f94:	2200      	movs	r2, #0
 8002f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fa2:	4642      	mov	r2, r8
 8002fa4:	464b      	mov	r3, r9
 8002fa6:	1891      	adds	r1, r2, r2
 8002fa8:	6239      	str	r1, [r7, #32]
 8002faa:	415b      	adcs	r3, r3
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
 8002fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	1854      	adds	r4, r2, r1
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	eb43 0501 	adc.w	r5, r3, r1
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	00eb      	lsls	r3, r5, #3
 8002fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fca:	00e2      	lsls	r2, r4, #3
 8002fcc:	4614      	mov	r4, r2
 8002fce:	461d      	mov	r5, r3
 8002fd0:	4643      	mov	r3, r8
 8002fd2:	18e3      	adds	r3, r4, r3
 8002fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fd8:	464b      	mov	r3, r9
 8002fda:	eb45 0303 	adc.w	r3, r5, r3
 8002fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ffe:	4629      	mov	r1, r5
 8003000:	008b      	lsls	r3, r1, #2
 8003002:	4621      	mov	r1, r4
 8003004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003008:	4621      	mov	r1, r4
 800300a:	008a      	lsls	r2, r1, #2
 800300c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003010:	f7fd f936 	bl	8000280 <__aeabi_uldivmod>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4b60      	ldr	r3, [pc, #384]	; (800319c <UART_SetConfig+0x4e4>)
 800301a:	fba3 2302 	umull	r2, r3, r3, r2
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	011c      	lsls	r4, r3, #4
 8003022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003026:	2200      	movs	r2, #0
 8003028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800302c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003034:	4642      	mov	r2, r8
 8003036:	464b      	mov	r3, r9
 8003038:	1891      	adds	r1, r2, r2
 800303a:	61b9      	str	r1, [r7, #24]
 800303c:	415b      	adcs	r3, r3
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003044:	4641      	mov	r1, r8
 8003046:	1851      	adds	r1, r2, r1
 8003048:	6139      	str	r1, [r7, #16]
 800304a:	4649      	mov	r1, r9
 800304c:	414b      	adcs	r3, r1
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800305c:	4659      	mov	r1, fp
 800305e:	00cb      	lsls	r3, r1, #3
 8003060:	4651      	mov	r1, sl
 8003062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003066:	4651      	mov	r1, sl
 8003068:	00ca      	lsls	r2, r1, #3
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	4603      	mov	r3, r0
 8003070:	4642      	mov	r2, r8
 8003072:	189b      	adds	r3, r3, r2
 8003074:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003078:	464b      	mov	r3, r9
 800307a:	460a      	mov	r2, r1
 800307c:	eb42 0303 	adc.w	r3, r2, r3
 8003080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	67bb      	str	r3, [r7, #120]	; 0x78
 800308e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800309c:	4649      	mov	r1, r9
 800309e:	008b      	lsls	r3, r1, #2
 80030a0:	4641      	mov	r1, r8
 80030a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030a6:	4641      	mov	r1, r8
 80030a8:	008a      	lsls	r2, r1, #2
 80030aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030ae:	f7fd f8e7 	bl	8000280 <__aeabi_uldivmod>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4b39      	ldr	r3, [pc, #228]	; (800319c <UART_SetConfig+0x4e4>)
 80030b8:	fba3 1302 	umull	r1, r3, r3, r2
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	2164      	movs	r1, #100	; 0x64
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	3332      	adds	r3, #50	; 0x32
 80030ca:	4a34      	ldr	r2, [pc, #208]	; (800319c <UART_SetConfig+0x4e4>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d6:	441c      	add	r4, r3
 80030d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030dc:	2200      	movs	r2, #0
 80030de:	673b      	str	r3, [r7, #112]	; 0x70
 80030e0:	677a      	str	r2, [r7, #116]	; 0x74
 80030e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80030e6:	4642      	mov	r2, r8
 80030e8:	464b      	mov	r3, r9
 80030ea:	1891      	adds	r1, r2, r2
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	415b      	adcs	r3, r3
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030f6:	4641      	mov	r1, r8
 80030f8:	1851      	adds	r1, r2, r1
 80030fa:	6039      	str	r1, [r7, #0]
 80030fc:	4649      	mov	r1, r9
 80030fe:	414b      	adcs	r3, r1
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800310e:	4659      	mov	r1, fp
 8003110:	00cb      	lsls	r3, r1, #3
 8003112:	4651      	mov	r1, sl
 8003114:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003118:	4651      	mov	r1, sl
 800311a:	00ca      	lsls	r2, r1, #3
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	4603      	mov	r3, r0
 8003122:	4642      	mov	r2, r8
 8003124:	189b      	adds	r3, r3, r2
 8003126:	66bb      	str	r3, [r7, #104]	; 0x68
 8003128:	464b      	mov	r3, r9
 800312a:	460a      	mov	r2, r1
 800312c:	eb42 0303 	adc.w	r3, r2, r3
 8003130:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	663b      	str	r3, [r7, #96]	; 0x60
 800313c:	667a      	str	r2, [r7, #100]	; 0x64
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800314a:	4649      	mov	r1, r9
 800314c:	008b      	lsls	r3, r1, #2
 800314e:	4641      	mov	r1, r8
 8003150:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003154:	4641      	mov	r1, r8
 8003156:	008a      	lsls	r2, r1, #2
 8003158:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800315c:	f7fd f890 	bl	8000280 <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4b0d      	ldr	r3, [pc, #52]	; (800319c <UART_SetConfig+0x4e4>)
 8003166:	fba3 1302 	umull	r1, r3, r3, r2
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	2164      	movs	r1, #100	; 0x64
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	3332      	adds	r3, #50	; 0x32
 8003178:	4a08      	ldr	r2, [pc, #32]	; (800319c <UART_SetConfig+0x4e4>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	f003 020f 	and.w	r2, r3, #15
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4422      	add	r2, r4
 800318c:	609a      	str	r2, [r3, #8]
}
 800318e:	bf00      	nop
 8003190:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003194:	46bd      	mov	sp, r7
 8003196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319a:	bf00      	nop
 800319c:	51eb851f 	.word	0x51eb851f

080031a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <SysTick_Handler+0x1c>)
 80031a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80031a8:	f001 fbfc 	bl	80049a4 <xTaskGetSchedulerState>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d001      	beq.n	80031b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80031b2:	f002 f9e1 	bl	8005578 <xPortSysTickHandler>
  }
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	e000e010 	.word	0xe000e010

080031c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4a07      	ldr	r2, [pc, #28]	; (80031ec <vApplicationGetIdleTaskMemory+0x2c>)
 80031d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4a06      	ldr	r2, [pc, #24]	; (80031f0 <vApplicationGetIdleTaskMemory+0x30>)
 80031d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	601a      	str	r2, [r3, #0]
}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	20000124 	.word	0x20000124
 80031f0:	20000180 	.word	0x20000180

080031f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4a07      	ldr	r2, [pc, #28]	; (8003220 <vApplicationGetTimerTaskMemory+0x2c>)
 8003204:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4a06      	ldr	r2, [pc, #24]	; (8003224 <vApplicationGetTimerTaskMemory+0x30>)
 800320a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003212:	601a      	str	r2, [r3, #0]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	20000380 	.word	0x20000380
 8003224:	200003dc 	.word	0x200003dc

08003228 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f103 0208 	add.w	r2, r3, #8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f103 0208 	add.w	r2, r3, #8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f103 0208 	add.w	r2, r3, #8
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003282:	b480      	push	{r7}
 8003284:	b085      	sub	sp, #20
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	601a      	str	r2, [r3, #0]
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d103      	bne.n	80032ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e00c      	b.n	8003304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3308      	adds	r3, #8
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e002      	b.n	80032f8 <vListInsert+0x2e>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	429a      	cmp	r2, r3
 8003302:	d2f6      	bcs.n	80032f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	601a      	str	r2, [r3, #0]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6892      	ldr	r2, [r2, #8]
 8003352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6852      	ldr	r2, [r2, #4]
 800335c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	429a      	cmp	r2, r3
 8003366:	d103      	bne.n	8003370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	1e5a      	subs	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033b6:	bf00      	nop
 80033b8:	e7fe      	b.n	80033b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033ba:	f002 f84b 	bl	8005454 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	441a      	add	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	3b01      	subs	r3, #1
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	441a      	add	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	22ff      	movs	r2, #255	; 0xff
 80033fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	22ff      	movs	r2, #255	; 0xff
 8003406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d114      	bne.n	800343a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01a      	beq.n	800344e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3310      	adds	r3, #16
 800341c:	4618      	mov	r0, r3
 800341e:	f001 f903 	bl	8004628 <xTaskRemoveFromEventList>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d012      	beq.n	800344e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <xQueueGenericReset+0xcc>)
 800342a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	e009      	b.n	800344e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3310      	adds	r3, #16
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fef2 	bl	8003228 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3324      	adds	r3, #36	; 0x24
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff feed 	bl	8003228 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800344e:	f002 f831 	bl	80054b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003452:	2301      	movs	r3, #1
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	e000ed04 	.word	0xe000ed04

08003460 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08e      	sub	sp, #56	; 0x38
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003486:	bf00      	nop
 8003488:	e7fe      	b.n	8003488 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034a2:	bf00      	nop
 80034a4:	e7fe      	b.n	80034a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <xQueueGenericCreateStatic+0x52>
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <xQueueGenericCreateStatic+0x56>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <xQueueGenericCreateStatic+0x58>
 80034b6:	2300      	movs	r3, #0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	623b      	str	r3, [r7, #32]
}
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <xQueueGenericCreateStatic+0x7e>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <xQueueGenericCreateStatic+0x82>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <xQueueGenericCreateStatic+0x84>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	61fb      	str	r3, [r7, #28]
}
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034fe:	2350      	movs	r3, #80	; 0x50
 8003500:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b50      	cmp	r3, #80	; 0x50
 8003506:	d00a      	beq.n	800351e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	61bb      	str	r3, [r7, #24]
}
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800351e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003532:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	68b9      	ldr	r1, [r7, #8]
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f805 	bl	8003550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003548:	4618      	mov	r0, r3
 800354a:	3730      	adds	r7, #48	; 0x30
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d103      	bne.n	800356c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e002      	b.n	8003572 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800357e:	2101      	movs	r1, #1
 8003580:	69b8      	ldr	r0, [r7, #24]
 8003582:	f7ff ff05 	bl	8003390 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08e      	sub	sp, #56	; 0x38
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035a6:	2300      	movs	r3, #0
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <xQueueGenericSend+0x32>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d103      	bne.n	80035d8 <xQueueGenericSend+0x40>
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <xQueueGenericSend+0x44>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <xQueueGenericSend+0x46>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10a      	bne.n	80035f8 <xQueueGenericSend+0x60>
	__asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035f4:	bf00      	nop
 80035f6:	e7fe      	b.n	80035f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d103      	bne.n	8003606 <xQueueGenericSend+0x6e>
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <xQueueGenericSend+0x72>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <xQueueGenericSend+0x74>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10a      	bne.n	8003626 <xQueueGenericSend+0x8e>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	623b      	str	r3, [r7, #32]
}
 8003622:	bf00      	nop
 8003624:	e7fe      	b.n	8003624 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003626:	f001 f9bd 	bl	80049a4 <xTaskGetSchedulerState>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <xQueueGenericSend+0x9e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <xQueueGenericSend+0xa2>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <xQueueGenericSend+0xa4>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <xQueueGenericSend+0xbe>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	61fb      	str	r3, [r7, #28]
}
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003656:	f001 fefd 	bl	8005454 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <xQueueGenericSend+0xd4>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d129      	bne.n	80036c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003672:	f000 fa0b 	bl	8003a8c <prvCopyDataToQueue>
 8003676:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	3324      	adds	r3, #36	; 0x24
 8003684:	4618      	mov	r0, r3
 8003686:	f000 ffcf 	bl	8004628 <xTaskRemoveFromEventList>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003690:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <xQueueGenericSend+0x1f8>)
 8003692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	e00a      	b.n	80036b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036a8:	4b39      	ldr	r3, [pc, #228]	; (8003790 <xQueueGenericSend+0x1f8>)
 80036aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036b8:	f001 fefc 	bl	80054b4 <vPortExitCritical>
				return pdPASS;
 80036bc:	2301      	movs	r3, #1
 80036be:	e063      	b.n	8003788 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d103      	bne.n	80036ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036c6:	f001 fef5 	bl	80054b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e05c      	b.n	8003788 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036d4:	f107 0314 	add.w	r3, r7, #20
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 f809 	bl	80046f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036de:	2301      	movs	r3, #1
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036e2:	f001 fee7 	bl	80054b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036e6:	f000 fd7b 	bl	80041e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036ea:	f001 feb3 	bl	8005454 <vPortEnterCritical>
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036f4:	b25b      	sxtb	r3, r3
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fa:	d103      	bne.n	8003704 <xQueueGenericSend+0x16c>
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800370a:	b25b      	sxtb	r3, r3
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d103      	bne.n	800371a <xQueueGenericSend+0x182>
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800371a:	f001 fecb 	bl	80054b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800371e:	1d3a      	adds	r2, r7, #4
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fff8 	bl	800471c <xTaskCheckForTimeOut>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d124      	bne.n	800377c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003734:	f000 faa2 	bl	8003c7c <prvIsQueueFull>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d018      	beq.n	8003770 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	3310      	adds	r3, #16
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f000 ff1e 	bl	8004588 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800374c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800374e:	f000 fa2d 	bl	8003bac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003752:	f000 fd53 	bl	80041fc <xTaskResumeAll>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	f47f af7c 	bne.w	8003656 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <xQueueGenericSend+0x1f8>)
 8003760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	e772      	b.n	8003656 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003772:	f000 fa1b 	bl	8003bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003776:	f000 fd41 	bl	80041fc <xTaskResumeAll>
 800377a:	e76c      	b.n	8003656 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800377c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800377e:	f000 fa15 	bl	8003bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003782:	f000 fd3b 	bl	80041fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003786:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003788:	4618      	mov	r0, r3
 800378a:	3738      	adds	r7, #56	; 0x38
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	; 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037be:	bf00      	nop
 80037c0:	e7fe      	b.n	80037c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <xQueueGenericSendFromISR+0x3c>
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <xQueueGenericSendFromISR+0x40>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <xQueueGenericSendFromISR+0x42>
 80037d4:	2300      	movs	r3, #0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037ec:	bf00      	nop
 80037ee:	e7fe      	b.n	80037ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d103      	bne.n	80037fe <xQueueGenericSendFromISR+0x6a>
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <xQueueGenericSendFromISR+0x6e>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <xQueueGenericSendFromISR+0x70>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	623b      	str	r3, [r7, #32]
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800381e:	f001 fefb 	bl	8005618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003822:	f3ef 8211 	mrs	r2, BASEPRI
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	61fa      	str	r2, [r7, #28]
 8003838:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800383a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800383c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <xQueueGenericSendFromISR+0xbc>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d12f      	bne.n	80038b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003866:	f000 f911 	bl	8003a8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800386a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003872:	d112      	bne.n	800389a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	d016      	beq.n	80038aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	3324      	adds	r3, #36	; 0x24
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fed1 	bl	8004628 <xTaskRemoveFromEventList>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00e      	beq.n	80038aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00b      	beq.n	80038aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	e007      	b.n	80038aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800389a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800389e:	3301      	adds	r3, #1
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	b25a      	sxtb	r2, r3
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038aa:	2301      	movs	r3, #1
 80038ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80038ae:	e001      	b.n	80038b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3740      	adds	r7, #64	; 0x40
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08c      	sub	sp, #48	; 0x30
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038d8:	2300      	movs	r3, #0
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <xQueueReceive+0x30>
	__asm volatile
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	623b      	str	r3, [r7, #32]
}
 80038f8:	bf00      	nop
 80038fa:	e7fe      	b.n	80038fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d103      	bne.n	800390a <xQueueReceive+0x3e>
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <xQueueReceive+0x42>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <xQueueReceive+0x44>
 800390e:	2300      	movs	r3, #0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <xQueueReceive+0x5e>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	61fb      	str	r3, [r7, #28]
}
 8003926:	bf00      	nop
 8003928:	e7fe      	b.n	8003928 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800392a:	f001 f83b 	bl	80049a4 <xTaskGetSchedulerState>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <xQueueReceive+0x6e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <xQueueReceive+0x72>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <xQueueReceive+0x74>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <xQueueReceive+0x8e>
	__asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	61bb      	str	r3, [r7, #24]
}
 8003956:	bf00      	nop
 8003958:	e7fe      	b.n	8003958 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800395a:	f001 fd7b 	bl	8005454 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01f      	beq.n	80039aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800396e:	f000 f8f7 	bl	8003b60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	1e5a      	subs	r2, r3, #1
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00f      	beq.n	80039a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	3310      	adds	r3, #16
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fe4e 	bl	8004628 <xTaskRemoveFromEventList>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003992:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <xQueueReceive+0x1bc>)
 8003994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039a2:	f001 fd87 	bl	80054b4 <vPortExitCritical>
				return pdPASS;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e069      	b.n	8003a7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039b0:	f001 fd80 	bl	80054b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039b4:	2300      	movs	r3, #0
 80039b6:	e062      	b.n	8003a7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039be:	f107 0310 	add.w	r3, r7, #16
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fe94 	bl	80046f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039cc:	f001 fd72 	bl	80054b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039d0:	f000 fc06 	bl	80041e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039d4:	f001 fd3e 	bl	8005454 <vPortEnterCritical>
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d103      	bne.n	80039ee <xQueueReceive+0x122>
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039f4:	b25b      	sxtb	r3, r3
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fa:	d103      	bne.n	8003a04 <xQueueReceive+0x138>
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a04:	f001 fd56 	bl	80054b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a08:	1d3a      	adds	r2, r7, #4
 8003a0a:	f107 0310 	add.w	r3, r7, #16
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fe83 	bl	800471c <xTaskCheckForTimeOut>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d123      	bne.n	8003a64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a1e:	f000 f917 	bl	8003c50 <prvIsQueueEmpty>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d017      	beq.n	8003a58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	3324      	adds	r3, #36	; 0x24
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fda9 	bl	8004588 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a38:	f000 f8b8 	bl	8003bac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a3c:	f000 fbde 	bl	80041fc <xTaskResumeAll>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d189      	bne.n	800395a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <xQueueReceive+0x1bc>)
 8003a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	e780      	b.n	800395a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a5a:	f000 f8a7 	bl	8003bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a5e:	f000 fbcd 	bl	80041fc <xTaskResumeAll>
 8003a62:	e77a      	b.n	800395a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a66:	f000 f8a1 	bl	8003bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a6a:	f000 fbc7 	bl	80041fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a70:	f000 f8ee 	bl	8003c50 <prvIsQueueEmpty>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f43f af6f 	beq.w	800395a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3730      	adds	r7, #48	; 0x30
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	e000ed04 	.word	0xe000ed04

08003a8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10d      	bne.n	8003ac6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d14d      	bne.n	8003b4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 ff92 	bl	80049e0 <xTaskPriorityDisinherit>
 8003abc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	e043      	b.n	8003b4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d119      	bne.n	8003b00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6858      	ldr	r0, [r3, #4]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	f001 fff2 	bl	8005ac0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	441a      	add	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d32b      	bcc.n	8003b4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	e026      	b.n	8003b4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68d8      	ldr	r0, [r3, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	461a      	mov	r2, r3
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	f001 ffd8 	bl	8005ac0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	425b      	negs	r3, r3
 8003b1a:	441a      	add	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d207      	bcs.n	8003b3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	425b      	negs	r3, r3
 8003b36:	441a      	add	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d105      	bne.n	8003b4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b56:	697b      	ldr	r3, [r7, #20]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d018      	beq.n	8003ba4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	441a      	add	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d303      	bcc.n	8003b94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68d9      	ldr	r1, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6838      	ldr	r0, [r7, #0]
 8003ba0:	f001 ff8e 	bl	8005ac0 <memcpy>
	}
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003bb4:	f001 fc4e 	bl	8005454 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bc0:	e011      	b.n	8003be6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d012      	beq.n	8003bf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3324      	adds	r3, #36	; 0x24
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fd2a 	bl	8004628 <xTaskRemoveFromEventList>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003bda:	f000 fe01 	bl	80047e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	dce9      	bgt.n	8003bc2 <prvUnlockQueue+0x16>
 8003bee:	e000      	b.n	8003bf2 <prvUnlockQueue+0x46>
					break;
 8003bf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	22ff      	movs	r2, #255	; 0xff
 8003bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003bfa:	f001 fc5b 	bl	80054b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003bfe:	f001 fc29 	bl	8005454 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c0a:	e011      	b.n	8003c30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d012      	beq.n	8003c3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3310      	adds	r3, #16
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fd05 	bl	8004628 <xTaskRemoveFromEventList>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c24:	f000 fddc 	bl	80047e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c28:	7bbb      	ldrb	r3, [r7, #14]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	dce9      	bgt.n	8003c0c <prvUnlockQueue+0x60>
 8003c38:	e000      	b.n	8003c3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	22ff      	movs	r2, #255	; 0xff
 8003c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c44:	f001 fc36 	bl	80054b4 <vPortExitCritical>
}
 8003c48:	bf00      	nop
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c58:	f001 fbfc 	bl	8005454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c64:	2301      	movs	r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	e001      	b.n	8003c6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c6e:	f001 fc21 	bl	80054b4 <vPortExitCritical>

	return xReturn;
 8003c72:	68fb      	ldr	r3, [r7, #12]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c84:	f001 fbe6 	bl	8005454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d102      	bne.n	8003c9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e001      	b.n	8003c9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c9e:	f001 fc09 	bl	80054b4 <vPortExitCritical>

	return xReturn;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	e014      	b.n	8003ce6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cbc:	4a0f      	ldr	r2, [pc, #60]	; (8003cfc <vQueueAddToRegistry+0x50>)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10b      	bne.n	8003ce0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003cc8:	490c      	ldr	r1, [pc, #48]	; (8003cfc <vQueueAddToRegistry+0x50>)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <vQueueAddToRegistry+0x50>)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003cde:	e006      	b.n	8003cee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b07      	cmp	r3, #7
 8003cea:	d9e7      	bls.n	8003cbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	200007dc 	.word	0x200007dc

08003d00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d10:	f001 fba0 	bl	8005454 <vPortEnterCritical>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d103      	bne.n	8003d2a <vQueueWaitForMessageRestricted+0x2a>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d30:	b25b      	sxtb	r3, r3
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d103      	bne.n	8003d40 <vQueueWaitForMessageRestricted+0x40>
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d40:	f001 fbb8 	bl	80054b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	3324      	adds	r3, #36	; 0x24
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fc3b 	bl	80045d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d5a:	6978      	ldr	r0, [r7, #20]
 8003d5c:	f7ff ff26 	bl	8003bac <prvUnlockQueue>
	}
 8003d60:	bf00      	nop
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08e      	sub	sp, #56	; 0x38
 8003d6c:	af04      	add	r7, sp, #16
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	623b      	str	r3, [r7, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	e7fe      	b.n	8003d90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10a      	bne.n	8003dae <xTaskCreateStatic+0x46>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	61fb      	str	r3, [r7, #28]
}
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003dae:	235c      	movs	r3, #92	; 0x5c
 8003db0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b5c      	cmp	r3, #92	; 0x5c
 8003db6:	d00a      	beq.n	8003dce <xTaskCreateStatic+0x66>
	__asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	61bb      	str	r3, [r7, #24]
}
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003dce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01e      	beq.n	8003e14 <xTaskCreateStatic+0xac>
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01b      	beq.n	8003e14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003dee:	2300      	movs	r3, #0
 8003df0:	9303      	str	r3, [sp, #12]
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	9302      	str	r3, [sp, #8]
 8003df6:	f107 0314 	add.w	r3, r7, #20
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f850 	bl	8003eac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e0e:	f000 f8dd 	bl	8003fcc <prvAddNewTaskToReadyList>
 8003e12:	e001      	b.n	8003e18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e18:	697b      	ldr	r3, [r7, #20]
	}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3728      	adds	r7, #40	; 0x28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b08c      	sub	sp, #48	; 0x30
 8003e26:	af04      	add	r7, sp, #16
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 fc2e 	bl	8005698 <pvPortMalloc>
 8003e3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00e      	beq.n	8003e62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e44:	205c      	movs	r0, #92	; 0x5c
 8003e46:	f001 fc27 	bl	8005698 <pvPortMalloc>
 8003e4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
 8003e58:	e005      	b.n	8003e66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e5a:	6978      	ldr	r0, [r7, #20]
 8003e5c:	f001 fce8 	bl	8005830 <vPortFree>
 8003e60:	e001      	b.n	8003e66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d017      	beq.n	8003e9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	2300      	movs	r3, #0
 8003e78:	9303      	str	r3, [sp, #12]
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	9302      	str	r3, [sp, #8]
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f80e 	bl	8003eac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e90:	69f8      	ldr	r0, [r7, #28]
 8003e92:	f000 f89b 	bl	8003fcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e96:	2301      	movs	r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	e002      	b.n	8003ea2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ea2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3720      	adds	r7, #32
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	21a5      	movs	r1, #165	; 0xa5
 8003ec6:	f001 fe09 	bl	8005adc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	f023 0307 	bic.w	r3, r3, #7
 8003ee2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	617b      	str	r3, [r7, #20]
}
 8003f00:	bf00      	nop
 8003f02:	e7fe      	b.n	8003f02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01f      	beq.n	8003f4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	e012      	b.n	8003f36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	7819      	ldrb	r1, [r3, #0]
 8003f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3334      	adds	r3, #52	; 0x34
 8003f20:	460a      	mov	r2, r1
 8003f22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	4413      	add	r3, r2
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d006      	beq.n	8003f3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2b0f      	cmp	r3, #15
 8003f3a:	d9e9      	bls.n	8003f10 <prvInitialiseNewTask+0x64>
 8003f3c:	e000      	b.n	8003f40 <prvInitialiseNewTask+0x94>
			{
				break;
 8003f3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f48:	e003      	b.n	8003f52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	2b37      	cmp	r3, #55	; 0x37
 8003f56:	d901      	bls.n	8003f5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f58:	2337      	movs	r3, #55	; 0x37
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	3304      	adds	r3, #4
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff f978 	bl	8003268 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	3318      	adds	r3, #24
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff f973 	bl	8003268 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	68f9      	ldr	r1, [r7, #12]
 8003faa:	69b8      	ldr	r0, [r7, #24]
 8003fac:	f001 f928 	bl	8005200 <pxPortInitialiseStack>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fc2:	bf00      	nop
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fd4:	f001 fa3e 	bl	8005454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fd8:	4b2d      	ldr	r3, [pc, #180]	; (8004090 <prvAddNewTaskToReadyList+0xc4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	4a2c      	ldr	r2, [pc, #176]	; (8004090 <prvAddNewTaskToReadyList+0xc4>)
 8003fe0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fe2:	4b2c      	ldr	r3, [pc, #176]	; (8004094 <prvAddNewTaskToReadyList+0xc8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fea:	4a2a      	ldr	r2, [pc, #168]	; (8004094 <prvAddNewTaskToReadyList+0xc8>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ff0:	4b27      	ldr	r3, [pc, #156]	; (8004090 <prvAddNewTaskToReadyList+0xc4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d110      	bne.n	800401a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ff8:	f000 fc16 	bl	8004828 <prvInitialiseTaskLists>
 8003ffc:	e00d      	b.n	800401a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ffe:	4b26      	ldr	r3, [pc, #152]	; (8004098 <prvAddNewTaskToReadyList+0xcc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004006:	4b23      	ldr	r3, [pc, #140]	; (8004094 <prvAddNewTaskToReadyList+0xc8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	429a      	cmp	r2, r3
 8004012:	d802      	bhi.n	800401a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004014:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <prvAddNewTaskToReadyList+0xc8>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800401a:	4b20      	ldr	r3, [pc, #128]	; (800409c <prvAddNewTaskToReadyList+0xd0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3301      	adds	r3, #1
 8004020:	4a1e      	ldr	r2, [pc, #120]	; (800409c <prvAddNewTaskToReadyList+0xd0>)
 8004022:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004024:	4b1d      	ldr	r3, [pc, #116]	; (800409c <prvAddNewTaskToReadyList+0xd0>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <prvAddNewTaskToReadyList+0xd4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d903      	bls.n	8004040 <prvAddNewTaskToReadyList+0x74>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <prvAddNewTaskToReadyList+0xd4>)
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <prvAddNewTaskToReadyList+0xd8>)
 800404e:	441a      	add	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3304      	adds	r3, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4610      	mov	r0, r2
 8004058:	f7ff f913 	bl	8003282 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800405c:	f001 fa2a 	bl	80054b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004060:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <prvAddNewTaskToReadyList+0xcc>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00e      	beq.n	8004086 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <prvAddNewTaskToReadyList+0xc8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	429a      	cmp	r2, r3
 8004074:	d207      	bcs.n	8004086 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <prvAddNewTaskToReadyList+0xdc>)
 8004078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000cf0 	.word	0x20000cf0
 8004094:	2000081c 	.word	0x2000081c
 8004098:	20000cfc 	.word	0x20000cfc
 800409c:	20000d0c 	.word	0x20000d0c
 80040a0:	20000cf8 	.word	0x20000cf8
 80040a4:	20000820 	.word	0x20000820
 80040a8:	e000ed04 	.word	0xe000ed04

080040ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d017      	beq.n	80040ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <vTaskDelay+0x60>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <vTaskDelay+0x30>
	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	60bb      	str	r3, [r7, #8]
}
 80040d8:	bf00      	nop
 80040da:	e7fe      	b.n	80040da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040dc:	f000 f880 	bl	80041e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040e0:	2100      	movs	r1, #0
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fcea 	bl	8004abc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040e8:	f000 f888 	bl	80041fc <xTaskResumeAll>
 80040ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d107      	bne.n	8004104 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <vTaskDelay+0x64>)
 80040f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	20000d18 	.word	0x20000d18
 8004110:	e000ed04 	.word	0xe000ed04

08004114 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	; 0x28
 8004118:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004122:	463a      	mov	r2, r7
 8004124:	1d39      	adds	r1, r7, #4
 8004126:	f107 0308 	add.w	r3, r7, #8
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff f848 	bl	80031c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004130:	6839      	ldr	r1, [r7, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	9202      	str	r2, [sp, #8]
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	2300      	movs	r3, #0
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	2300      	movs	r3, #0
 8004140:	460a      	mov	r2, r1
 8004142:	4921      	ldr	r1, [pc, #132]	; (80041c8 <vTaskStartScheduler+0xb4>)
 8004144:	4821      	ldr	r0, [pc, #132]	; (80041cc <vTaskStartScheduler+0xb8>)
 8004146:	f7ff fe0f 	bl	8003d68 <xTaskCreateStatic>
 800414a:	4603      	mov	r3, r0
 800414c:	4a20      	ldr	r2, [pc, #128]	; (80041d0 <vTaskStartScheduler+0xbc>)
 800414e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004150:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <vTaskStartScheduler+0xbc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004158:	2301      	movs	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	e001      	b.n	8004162 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d102      	bne.n	800416e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004168:	f000 fcfc 	bl	8004b64 <xTimerCreateTimerTask>
 800416c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d116      	bne.n	80041a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	613b      	str	r3, [r7, #16]
}
 8004186:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004188:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <vTaskStartScheduler+0xc0>)
 800418a:	f04f 32ff 	mov.w	r2, #4294967295
 800418e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004190:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <vTaskStartScheduler+0xc4>)
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <vTaskStartScheduler+0xc8>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800419c:	f001 f8b8 	bl	8005310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041a0:	e00e      	b.n	80041c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d10a      	bne.n	80041c0 <vTaskStartScheduler+0xac>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	60fb      	str	r3, [r7, #12]
}
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <vTaskStartScheduler+0xaa>
}
 80041c0:	bf00      	nop
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	080063fc 	.word	0x080063fc
 80041cc:	080047f9 	.word	0x080047f9
 80041d0:	20000d14 	.word	0x20000d14
 80041d4:	20000d10 	.word	0x20000d10
 80041d8:	20000cfc 	.word	0x20000cfc
 80041dc:	20000cf4 	.word	0x20000cf4

080041e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <vTaskSuspendAll+0x18>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3301      	adds	r3, #1
 80041ea:	4a03      	ldr	r2, [pc, #12]	; (80041f8 <vTaskSuspendAll+0x18>)
 80041ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80041ee:	bf00      	nop
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	20000d18 	.word	0x20000d18

080041fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800420a:	4b42      	ldr	r3, [pc, #264]	; (8004314 <xTaskResumeAll+0x118>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <xTaskResumeAll+0x2c>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	603b      	str	r3, [r7, #0]
}
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004228:	f001 f914 	bl	8005454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800422c:	4b39      	ldr	r3, [pc, #228]	; (8004314 <xTaskResumeAll+0x118>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3b01      	subs	r3, #1
 8004232:	4a38      	ldr	r2, [pc, #224]	; (8004314 <xTaskResumeAll+0x118>)
 8004234:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004236:	4b37      	ldr	r3, [pc, #220]	; (8004314 <xTaskResumeAll+0x118>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d162      	bne.n	8004304 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800423e:	4b36      	ldr	r3, [pc, #216]	; (8004318 <xTaskResumeAll+0x11c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d05e      	beq.n	8004304 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004246:	e02f      	b.n	80042a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004248:	4b34      	ldr	r3, [pc, #208]	; (800431c <xTaskResumeAll+0x120>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3318      	adds	r3, #24
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff f871 	bl	800333c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3304      	adds	r3, #4
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff f86c 	bl	800333c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004268:	4b2d      	ldr	r3, [pc, #180]	; (8004320 <xTaskResumeAll+0x124>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d903      	bls.n	8004278 <xTaskResumeAll+0x7c>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	4a2a      	ldr	r2, [pc, #168]	; (8004320 <xTaskResumeAll+0x124>)
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4a27      	ldr	r2, [pc, #156]	; (8004324 <xTaskResumeAll+0x128>)
 8004286:	441a      	add	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3304      	adds	r3, #4
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f7fe fff7 	bl	8003282 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004298:	4b23      	ldr	r3, [pc, #140]	; (8004328 <xTaskResumeAll+0x12c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	429a      	cmp	r2, r3
 80042a0:	d302      	bcc.n	80042a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80042a2:	4b22      	ldr	r3, [pc, #136]	; (800432c <xTaskResumeAll+0x130>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042a8:	4b1c      	ldr	r3, [pc, #112]	; (800431c <xTaskResumeAll+0x120>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1cb      	bne.n	8004248 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042b6:	f000 fb55 	bl	8004964 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80042ba:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <xTaskResumeAll+0x134>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d010      	beq.n	80042e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042c6:	f000 f847 	bl	8004358 <xTaskIncrementTick>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042d0:	4b16      	ldr	r3, [pc, #88]	; (800432c <xTaskResumeAll+0x130>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3b01      	subs	r3, #1
 80042da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f1      	bne.n	80042c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80042e2:	4b13      	ldr	r3, [pc, #76]	; (8004330 <xTaskResumeAll+0x134>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042e8:	4b10      	ldr	r3, [pc, #64]	; (800432c <xTaskResumeAll+0x130>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d009      	beq.n	8004304 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042f0:	2301      	movs	r3, #1
 80042f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042f4:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <xTaskResumeAll+0x138>)
 80042f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004304:	f001 f8d6 	bl	80054b4 <vPortExitCritical>

	return xAlreadyYielded;
 8004308:	68bb      	ldr	r3, [r7, #8]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000d18 	.word	0x20000d18
 8004318:	20000cf0 	.word	0x20000cf0
 800431c:	20000cb0 	.word	0x20000cb0
 8004320:	20000cf8 	.word	0x20000cf8
 8004324:	20000820 	.word	0x20000820
 8004328:	2000081c 	.word	0x2000081c
 800432c:	20000d04 	.word	0x20000d04
 8004330:	20000d00 	.word	0x20000d00
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <xTaskGetTickCount+0x1c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004344:	687b      	ldr	r3, [r7, #4]
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000cf4 	.word	0x20000cf4

08004358 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004362:	4b4f      	ldr	r3, [pc, #316]	; (80044a0 <xTaskIncrementTick+0x148>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f040 808f 	bne.w	800448a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800436c:	4b4d      	ldr	r3, [pc, #308]	; (80044a4 <xTaskIncrementTick+0x14c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3301      	adds	r3, #1
 8004372:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004374:	4a4b      	ldr	r2, [pc, #300]	; (80044a4 <xTaskIncrementTick+0x14c>)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d120      	bne.n	80043c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004380:	4b49      	ldr	r3, [pc, #292]	; (80044a8 <xTaskIncrementTick+0x150>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	603b      	str	r3, [r7, #0]
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <xTaskIncrementTick+0x46>
 80043a0:	4b41      	ldr	r3, [pc, #260]	; (80044a8 <xTaskIncrementTick+0x150>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	4b41      	ldr	r3, [pc, #260]	; (80044ac <xTaskIncrementTick+0x154>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a3f      	ldr	r2, [pc, #252]	; (80044a8 <xTaskIncrementTick+0x150>)
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4a3f      	ldr	r2, [pc, #252]	; (80044ac <xTaskIncrementTick+0x154>)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	4b3e      	ldr	r3, [pc, #248]	; (80044b0 <xTaskIncrementTick+0x158>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	4a3d      	ldr	r2, [pc, #244]	; (80044b0 <xTaskIncrementTick+0x158>)
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	f000 fad1 	bl	8004964 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043c2:	4b3c      	ldr	r3, [pc, #240]	; (80044b4 <xTaskIncrementTick+0x15c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d349      	bcc.n	8004460 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043cc:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <xTaskIncrementTick+0x150>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d104      	bne.n	80043e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d6:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <xTaskIncrementTick+0x15c>)
 80043d8:	f04f 32ff 	mov.w	r2, #4294967295
 80043dc:	601a      	str	r2, [r3, #0]
					break;
 80043de:	e03f      	b.n	8004460 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043e0:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <xTaskIncrementTick+0x150>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d203      	bcs.n	8004400 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043f8:	4a2e      	ldr	r2, [pc, #184]	; (80044b4 <xTaskIncrementTick+0x15c>)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043fe:	e02f      	b.n	8004460 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	3304      	adds	r3, #4
 8004404:	4618      	mov	r0, r3
 8004406:	f7fe ff99 	bl	800333c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	2b00      	cmp	r3, #0
 8004410:	d004      	beq.n	800441c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	3318      	adds	r3, #24
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe ff90 	bl	800333c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <xTaskIncrementTick+0x160>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d903      	bls.n	8004430 <xTaskIncrementTick+0xd8>
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	4a22      	ldr	r2, [pc, #136]	; (80044b8 <xTaskIncrementTick+0x160>)
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <xTaskIncrementTick+0x164>)
 800443e:	441a      	add	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f7fe ff1b 	bl	8003282 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <xTaskIncrementTick+0x168>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	429a      	cmp	r2, r3
 8004458:	d3b8      	bcc.n	80043cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800445a:	2301      	movs	r3, #1
 800445c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800445e:	e7b5      	b.n	80043cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004460:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <xTaskIncrementTick+0x168>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004466:	4915      	ldr	r1, [pc, #84]	; (80044bc <xTaskIncrementTick+0x164>)
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d901      	bls.n	800447c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004478:	2301      	movs	r3, #1
 800447a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800447c:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <xTaskIncrementTick+0x16c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d007      	beq.n	8004494 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e004      	b.n	8004494 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800448a:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <xTaskIncrementTick+0x170>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3301      	adds	r3, #1
 8004490:	4a0d      	ldr	r2, [pc, #52]	; (80044c8 <xTaskIncrementTick+0x170>)
 8004492:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004494:	697b      	ldr	r3, [r7, #20]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000d18 	.word	0x20000d18
 80044a4:	20000cf4 	.word	0x20000cf4
 80044a8:	20000ca8 	.word	0x20000ca8
 80044ac:	20000cac 	.word	0x20000cac
 80044b0:	20000d08 	.word	0x20000d08
 80044b4:	20000d10 	.word	0x20000d10
 80044b8:	20000cf8 	.word	0x20000cf8
 80044bc:	20000820 	.word	0x20000820
 80044c0:	2000081c 	.word	0x2000081c
 80044c4:	20000d04 	.word	0x20000d04
 80044c8:	20000d00 	.word	0x20000d00

080044cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044d2:	4b28      	ldr	r3, [pc, #160]	; (8004574 <vTaskSwitchContext+0xa8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044da:	4b27      	ldr	r3, [pc, #156]	; (8004578 <vTaskSwitchContext+0xac>)
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044e0:	e041      	b.n	8004566 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80044e2:	4b25      	ldr	r3, [pc, #148]	; (8004578 <vTaskSwitchContext+0xac>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044e8:	4b24      	ldr	r3, [pc, #144]	; (800457c <vTaskSwitchContext+0xb0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	e010      	b.n	8004512 <vTaskSwitchContext+0x46>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <vTaskSwitchContext+0x40>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	607b      	str	r3, [r7, #4]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <vTaskSwitchContext+0x3e>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3b01      	subs	r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	491b      	ldr	r1, [pc, #108]	; (8004580 <vTaskSwitchContext+0xb4>)
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0e4      	beq.n	80044f0 <vTaskSwitchContext+0x24>
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4a13      	ldr	r2, [pc, #76]	; (8004580 <vTaskSwitchContext+0xb4>)
 8004532:	4413      	add	r3, r2
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	605a      	str	r2, [r3, #4]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	3308      	adds	r3, #8
 8004548:	429a      	cmp	r2, r3
 800454a:	d104      	bne.n	8004556 <vTaskSwitchContext+0x8a>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4a09      	ldr	r2, [pc, #36]	; (8004584 <vTaskSwitchContext+0xb8>)
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	4a06      	ldr	r2, [pc, #24]	; (800457c <vTaskSwitchContext+0xb0>)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6013      	str	r3, [r2, #0]
}
 8004566:	bf00      	nop
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000d18 	.word	0x20000d18
 8004578:	20000d04 	.word	0x20000d04
 800457c:	20000cf8 	.word	0x20000cf8
 8004580:	20000820 	.word	0x20000820
 8004584:	2000081c 	.word	0x2000081c

08004588 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	60fb      	str	r3, [r7, #12]
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045ae:	4b07      	ldr	r3, [pc, #28]	; (80045cc <vTaskPlaceOnEventList+0x44>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3318      	adds	r3, #24
 80045b4:	4619      	mov	r1, r3
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fe fe87 	bl	80032ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045bc:	2101      	movs	r1, #1
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	f000 fa7c 	bl	8004abc <prvAddCurrentTaskToDelayedList>
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	2000081c 	.word	0x2000081c

080045d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	617b      	str	r3, [r7, #20]
}
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <vTaskPlaceOnEventListRestricted+0x54>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3318      	adds	r3, #24
 80045fe:	4619      	mov	r1, r3
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7fe fe3e 	bl	8003282 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800460c:	f04f 33ff 	mov.w	r3, #4294967295
 8004610:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	68b8      	ldr	r0, [r7, #8]
 8004616:	f000 fa51 	bl	8004abc <prvAddCurrentTaskToDelayedList>
	}
 800461a:	bf00      	nop
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	2000081c 	.word	0x2000081c

08004628 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	60fb      	str	r3, [r7, #12]
}
 8004650:	bf00      	nop
 8004652:	e7fe      	b.n	8004652 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	3318      	adds	r3, #24
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe fe6f 	bl	800333c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800465e:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <xTaskRemoveFromEventList+0xb0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d11d      	bne.n	80046a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	3304      	adds	r3, #4
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe fe66 	bl	800333c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	4b19      	ldr	r3, [pc, #100]	; (80046dc <xTaskRemoveFromEventList+0xb4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d903      	bls.n	8004684 <xTaskRemoveFromEventList+0x5c>
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	4a16      	ldr	r2, [pc, #88]	; (80046dc <xTaskRemoveFromEventList+0xb4>)
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <xTaskRemoveFromEventList+0xb8>)
 8004692:	441a      	add	r2, r3
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	3304      	adds	r3, #4
 8004698:	4619      	mov	r1, r3
 800469a:	4610      	mov	r0, r2
 800469c:	f7fe fdf1 	bl	8003282 <vListInsertEnd>
 80046a0:	e005      	b.n	80046ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3318      	adds	r3, #24
 80046a6:	4619      	mov	r1, r3
 80046a8:	480e      	ldr	r0, [pc, #56]	; (80046e4 <xTaskRemoveFromEventList+0xbc>)
 80046aa:	f7fe fdea 	bl	8003282 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b2:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <xTaskRemoveFromEventList+0xc0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d905      	bls.n	80046c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046c0:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <xTaskRemoveFromEventList+0xc4>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e001      	b.n	80046cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80046cc:	697b      	ldr	r3, [r7, #20]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000d18 	.word	0x20000d18
 80046dc:	20000cf8 	.word	0x20000cf8
 80046e0:	20000820 	.word	0x20000820
 80046e4:	20000cb0 	.word	0x20000cb0
 80046e8:	2000081c 	.word	0x2000081c
 80046ec:	20000d04 	.word	0x20000d04

080046f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <vTaskInternalSetTimeOutState+0x24>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <vTaskInternalSetTimeOutState+0x28>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	605a      	str	r2, [r3, #4]
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	20000d08 	.word	0x20000d08
 8004718:	20000cf4 	.word	0x20000cf4

0800471c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	613b      	str	r3, [r7, #16]
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	60fb      	str	r3, [r7, #12]
}
 800475a:	bf00      	nop
 800475c:	e7fe      	b.n	800475c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800475e:	f000 fe79 	bl	8005454 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <xTaskCheckForTimeOut+0xbc>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477a:	d102      	bne.n	8004782 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	e023      	b.n	80047ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b15      	ldr	r3, [pc, #84]	; (80047dc <xTaskCheckForTimeOut+0xc0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d007      	beq.n	800479e <xTaskCheckForTimeOut+0x82>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	429a      	cmp	r2, r3
 8004796:	d302      	bcc.n	800479e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004798:	2301      	movs	r3, #1
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	e015      	b.n	80047ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d20b      	bcs.n	80047c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	1ad2      	subs	r2, r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff ff9b 	bl	80046f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	e004      	b.n	80047ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047c6:	2301      	movs	r3, #1
 80047c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047ca:	f000 fe73 	bl	80054b4 <vPortExitCritical>

	return xReturn;
 80047ce:	69fb      	ldr	r3, [r7, #28]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000cf4 	.word	0x20000cf4
 80047dc:	20000d08 	.word	0x20000d08

080047e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <vTaskMissedYield+0x14>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
}
 80047ea:	bf00      	nop
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	20000d04 	.word	0x20000d04

080047f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004800:	f000 f852 	bl	80048a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <prvIdleTask+0x28>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d9f9      	bls.n	8004800 <prvIdleTask+0x8>
			{
				taskYIELD();
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <prvIdleTask+0x2c>)
 800480e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800481c:	e7f0      	b.n	8004800 <prvIdleTask+0x8>
 800481e:	bf00      	nop
 8004820:	20000820 	.word	0x20000820
 8004824:	e000ed04 	.word	0xe000ed04

08004828 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800482e:	2300      	movs	r3, #0
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	e00c      	b.n	800484e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4a12      	ldr	r2, [pc, #72]	; (8004888 <prvInitialiseTaskLists+0x60>)
 8004840:	4413      	add	r3, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe fcf0 	bl	8003228 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3301      	adds	r3, #1
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b37      	cmp	r3, #55	; 0x37
 8004852:	d9ef      	bls.n	8004834 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004854:	480d      	ldr	r0, [pc, #52]	; (800488c <prvInitialiseTaskLists+0x64>)
 8004856:	f7fe fce7 	bl	8003228 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800485a:	480d      	ldr	r0, [pc, #52]	; (8004890 <prvInitialiseTaskLists+0x68>)
 800485c:	f7fe fce4 	bl	8003228 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004860:	480c      	ldr	r0, [pc, #48]	; (8004894 <prvInitialiseTaskLists+0x6c>)
 8004862:	f7fe fce1 	bl	8003228 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004866:	480c      	ldr	r0, [pc, #48]	; (8004898 <prvInitialiseTaskLists+0x70>)
 8004868:	f7fe fcde 	bl	8003228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800486c:	480b      	ldr	r0, [pc, #44]	; (800489c <prvInitialiseTaskLists+0x74>)
 800486e:	f7fe fcdb 	bl	8003228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004872:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <prvInitialiseTaskLists+0x78>)
 8004874:	4a05      	ldr	r2, [pc, #20]	; (800488c <prvInitialiseTaskLists+0x64>)
 8004876:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <prvInitialiseTaskLists+0x7c>)
 800487a:	4a05      	ldr	r2, [pc, #20]	; (8004890 <prvInitialiseTaskLists+0x68>)
 800487c:	601a      	str	r2, [r3, #0]
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000820 	.word	0x20000820
 800488c:	20000c80 	.word	0x20000c80
 8004890:	20000c94 	.word	0x20000c94
 8004894:	20000cb0 	.word	0x20000cb0
 8004898:	20000cc4 	.word	0x20000cc4
 800489c:	20000cdc 	.word	0x20000cdc
 80048a0:	20000ca8 	.word	0x20000ca8
 80048a4:	20000cac 	.word	0x20000cac

080048a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048ae:	e019      	b.n	80048e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048b0:	f000 fdd0 	bl	8005454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <prvCheckTasksWaitingTermination+0x50>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe fd3b 	bl	800333c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048c6:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <prvCheckTasksWaitingTermination+0x54>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	4a0b      	ldr	r2, [pc, #44]	; (80048fc <prvCheckTasksWaitingTermination+0x54>)
 80048ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <prvCheckTasksWaitingTermination+0x58>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <prvCheckTasksWaitingTermination+0x58>)
 80048d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048da:	f000 fdeb 	bl	80054b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f810 	bl	8004904 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <prvCheckTasksWaitingTermination+0x58>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e1      	bne.n	80048b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048ec:	bf00      	nop
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000cc4 	.word	0x20000cc4
 80048fc:	20000cf0 	.word	0x20000cf0
 8004900:	20000cd8 	.word	0x20000cd8

08004904 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004912:	2b00      	cmp	r3, #0
 8004914:	d108      	bne.n	8004928 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	4618      	mov	r0, r3
 800491c:	f000 ff88 	bl	8005830 <vPortFree>
				vPortFree( pxTCB );
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 ff85 	bl	8005830 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004926:	e018      	b.n	800495a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800492e:	2b01      	cmp	r3, #1
 8004930:	d103      	bne.n	800493a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 ff7c 	bl	8005830 <vPortFree>
	}
 8004938:	e00f      	b.n	800495a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004940:	2b02      	cmp	r3, #2
 8004942:	d00a      	beq.n	800495a <prvDeleteTCB+0x56>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	60fb      	str	r3, [r7, #12]
}
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <prvDeleteTCB+0x54>
	}
 800495a:	bf00      	nop
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496a:	4b0c      	ldr	r3, [pc, #48]	; (800499c <prvResetNextTaskUnblockTime+0x38>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <prvResetNextTaskUnblockTime+0x3c>)
 8004976:	f04f 32ff 	mov.w	r2, #4294967295
 800497a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800497c:	e008      	b.n	8004990 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497e:	4b07      	ldr	r3, [pc, #28]	; (800499c <prvResetNextTaskUnblockTime+0x38>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a04      	ldr	r2, [pc, #16]	; (80049a0 <prvResetNextTaskUnblockTime+0x3c>)
 800498e:	6013      	str	r3, [r2, #0]
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	20000ca8 	.word	0x20000ca8
 80049a0:	20000d10 	.word	0x20000d10

080049a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <xTaskGetSchedulerState+0x34>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049b2:	2301      	movs	r3, #1
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	e008      	b.n	80049ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b8:	4b08      	ldr	r3, [pc, #32]	; (80049dc <xTaskGetSchedulerState+0x38>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049c0:	2302      	movs	r3, #2
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	e001      	b.n	80049ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049c6:	2300      	movs	r3, #0
 80049c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049ca:	687b      	ldr	r3, [r7, #4]
	}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	20000cfc 	.word	0x20000cfc
 80049dc:	20000d18 	.word	0x20000d18

080049e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d056      	beq.n	8004aa4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049f6:	4b2e      	ldr	r3, [pc, #184]	; (8004ab0 <xTaskPriorityDisinherit+0xd0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d00a      	beq.n	8004a16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60fb      	str	r3, [r7, #12]
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	60bb      	str	r3, [r7, #8]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a38:	1e5a      	subs	r2, r3, #1
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d02c      	beq.n	8004aa4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d128      	bne.n	8004aa4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3304      	adds	r3, #4
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fc70 	bl	800333c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <xTaskPriorityDisinherit+0xd4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d903      	bls.n	8004a84 <xTaskPriorityDisinherit+0xa4>
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4a0c      	ldr	r2, [pc, #48]	; (8004ab4 <xTaskPriorityDisinherit+0xd4>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <xTaskPriorityDisinherit+0xd8>)
 8004a92:	441a      	add	r2, r3
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f7fe fbf1 	bl	8003282 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004aa4:	697b      	ldr	r3, [r7, #20]
	}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	2000081c 	.word	0x2000081c
 8004ab4:	20000cf8 	.word	0x20000cf8
 8004ab8:	20000820 	.word	0x20000820

08004abc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ac6:	4b21      	ldr	r3, [pc, #132]	; (8004b4c <prvAddCurrentTaskToDelayedList+0x90>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004acc:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fe fc32 	bl	800333c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d10a      	bne.n	8004af6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4619      	mov	r1, r3
 8004aee:	4819      	ldr	r0, [pc, #100]	; (8004b54 <prvAddCurrentTaskToDelayedList+0x98>)
 8004af0:	f7fe fbc7 	bl	8003282 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004af4:	e026      	b.n	8004b44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4413      	add	r3, r2
 8004afc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004afe:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d209      	bcs.n	8004b22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b0e:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	f7fe fbd5 	bl	80032ca <vListInsert>
}
 8004b20:	e010      	b.n	8004b44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b22:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f7fe fbcb 	bl	80032ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b34:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d202      	bcs.n	8004b44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b3e:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6013      	str	r3, [r2, #0]
}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20000cf4 	.word	0x20000cf4
 8004b50:	2000081c 	.word	0x2000081c
 8004b54:	20000cdc 	.word	0x20000cdc
 8004b58:	20000cac 	.word	0x20000cac
 8004b5c:	20000ca8 	.word	0x20000ca8
 8004b60:	20000d10 	.word	0x20000d10

08004b64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b6e:	f000 fb07 	bl	8005180 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b72:	4b1c      	ldr	r3, [pc, #112]	; (8004be4 <xTimerCreateTimerTask+0x80>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d021      	beq.n	8004bbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b82:	1d3a      	adds	r2, r7, #4
 8004b84:	f107 0108 	add.w	r1, r7, #8
 8004b88:	f107 030c 	add.w	r3, r7, #12
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe fb31 	bl	80031f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	9202      	str	r2, [sp, #8]
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	460a      	mov	r2, r1
 8004ba4:	4910      	ldr	r1, [pc, #64]	; (8004be8 <xTimerCreateTimerTask+0x84>)
 8004ba6:	4811      	ldr	r0, [pc, #68]	; (8004bec <xTimerCreateTimerTask+0x88>)
 8004ba8:	f7ff f8de 	bl	8003d68 <xTaskCreateStatic>
 8004bac:	4603      	mov	r3, r0
 8004bae:	4a10      	ldr	r2, [pc, #64]	; (8004bf0 <xTimerCreateTimerTask+0x8c>)
 8004bb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <xTimerCreateTimerTask+0x8c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	613b      	str	r3, [r7, #16]
}
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004bda:	697b      	ldr	r3, [r7, #20]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20000d4c 	.word	0x20000d4c
 8004be8:	08006404 	.word	0x08006404
 8004bec:	08004d29 	.word	0x08004d29
 8004bf0:	20000d50 	.word	0x20000d50

08004bf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10a      	bne.n	8004c22 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	623b      	str	r3, [r7, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <xTimerGenericCommand+0x98>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d02a      	beq.n	8004c80 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b05      	cmp	r3, #5
 8004c3a:	dc18      	bgt.n	8004c6e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c3c:	f7ff feb2 	bl	80049a4 <xTaskGetSchedulerState>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d109      	bne.n	8004c5a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <xTimerGenericCommand+0x98>)
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	f107 0110 	add.w	r1, r7, #16
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c52:	f7fe fca1 	bl	8003598 <xQueueGenericSend>
 8004c56:	6278      	str	r0, [r7, #36]	; 0x24
 8004c58:	e012      	b.n	8004c80 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <xTimerGenericCommand+0x98>)
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	f107 0110 	add.w	r1, r7, #16
 8004c62:	2300      	movs	r3, #0
 8004c64:	2200      	movs	r2, #0
 8004c66:	f7fe fc97 	bl	8003598 <xQueueGenericSend>
 8004c6a:	6278      	str	r0, [r7, #36]	; 0x24
 8004c6c:	e008      	b.n	8004c80 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c6e:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <xTimerGenericCommand+0x98>)
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	f107 0110 	add.w	r1, r7, #16
 8004c76:	2300      	movs	r3, #0
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	f7fe fd8b 	bl	8003794 <xQueueGenericSendFromISR>
 8004c7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3728      	adds	r7, #40	; 0x28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000d4c 	.word	0x20000d4c

08004c90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9a:	4b22      	ldr	r3, [pc, #136]	; (8004d24 <prvProcessExpiredTimer+0x94>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe fb47 	bl	800333c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d022      	beq.n	8004d02 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	699a      	ldr	r2, [r3, #24]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	18d1      	adds	r1, r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	6978      	ldr	r0, [r7, #20]
 8004cca:	f000 f8d1 	bl	8004e70 <prvInsertTimerInActiveList>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01f      	beq.n	8004d14 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	2100      	movs	r1, #0
 8004cde:	6978      	ldr	r0, [r7, #20]
 8004ce0:	f7ff ff88 	bl	8004bf4 <xTimerGenericCommand>
 8004ce4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d113      	bne.n	8004d14 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	60fb      	str	r3, [r7, #12]
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	6978      	ldr	r0, [r7, #20]
 8004d1a:	4798      	blx	r3
}
 8004d1c:	bf00      	nop
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000d44 	.word	0x20000d44

08004d28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d30:	f107 0308 	add.w	r3, r7, #8
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 f857 	bl	8004de8 <prvGetNextExpireTime>
 8004d3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f803 	bl	8004d4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d46:	f000 f8d5 	bl	8004ef4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d4a:	e7f1      	b.n	8004d30 <prvTimerTask+0x8>

08004d4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d56:	f7ff fa43 	bl	80041e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d5a:	f107 0308 	add.w	r3, r7, #8
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 f866 	bl	8004e30 <prvSampleTimeNow>
 8004d64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d130      	bne.n	8004dce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <prvProcessTimerOrBlockTask+0x3c>
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d806      	bhi.n	8004d88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d7a:	f7ff fa3f 	bl	80041fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d7e:	68f9      	ldr	r1, [r7, #12]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff ff85 	bl	8004c90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d86:	e024      	b.n	8004dd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d008      	beq.n	8004da0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d8e:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <prvProcessTimerOrBlockTask+0x90>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <prvProcessTimerOrBlockTask+0x50>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <prvProcessTimerOrBlockTask+0x52>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004da0:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <prvProcessTimerOrBlockTask+0x94>)
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	4619      	mov	r1, r3
 8004dae:	f7fe ffa7 	bl	8003d00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004db2:	f7ff fa23 	bl	80041fc <xTaskResumeAll>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <prvProcessTimerOrBlockTask+0x98>)
 8004dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	f3bf 8f6f 	isb	sy
}
 8004dcc:	e001      	b.n	8004dd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004dce:	f7ff fa15 	bl	80041fc <xTaskResumeAll>
}
 8004dd2:	bf00      	nop
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000d48 	.word	0x20000d48
 8004de0:	20000d4c 	.word	0x20000d4c
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004df0:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <prvGetNextExpireTime+0x44>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <prvGetNextExpireTime+0x16>
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	e000      	b.n	8004e00 <prvGetNextExpireTime+0x18>
 8004dfe:	2200      	movs	r2, #0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d105      	bne.n	8004e18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e0c:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <prvGetNextExpireTime+0x44>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	e001      	b.n	8004e1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20000d44 	.word	0x20000d44

08004e30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e38:	f7ff fa7e 	bl	8004338 <xTaskGetTickCount>
 8004e3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <prvSampleTimeNow+0x3c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d205      	bcs.n	8004e54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e48:	f000 f936 	bl	80050b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e002      	b.n	8004e5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e5a:	4a04      	ldr	r2, [pc, #16]	; (8004e6c <prvSampleTimeNow+0x3c>)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e60:	68fb      	ldr	r3, [r7, #12]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000d54 	.word	0x20000d54

08004e70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d812      	bhi.n	8004ebc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	1ad2      	subs	r2, r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d302      	bcc.n	8004eaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	e01b      	b.n	8004ee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004eaa:	4b10      	ldr	r3, [pc, #64]	; (8004eec <prvInsertTimerInActiveList+0x7c>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f7fe fa08 	bl	80032ca <vListInsert>
 8004eba:	e012      	b.n	8004ee2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d206      	bcs.n	8004ed2 <prvInsertTimerInActiveList+0x62>
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d302      	bcc.n	8004ed2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e007      	b.n	8004ee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <prvInsertTimerInActiveList+0x80>)
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f7fe f9f4 	bl	80032ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ee2:	697b      	ldr	r3, [r7, #20]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	20000d48 	.word	0x20000d48
 8004ef0:	20000d44 	.word	0x20000d44

08004ef4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08e      	sub	sp, #56	; 0x38
 8004ef8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004efa:	e0ca      	b.n	8005092 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	da18      	bge.n	8004f34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f02:	1d3b      	adds	r3, r7, #4
 8004f04:	3304      	adds	r3, #4
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	61fb      	str	r3, [r7, #28]
}
 8004f20:	bf00      	nop
 8004f22:	e7fe      	b.n	8004f22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f2a:	6850      	ldr	r0, [r2, #4]
 8004f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f2e:	6892      	ldr	r2, [r2, #8]
 8004f30:	4611      	mov	r1, r2
 8004f32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f2c0 80aa 	blt.w	8005090 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fe f9f5 	bl	800333c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f52:	463b      	mov	r3, r7
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff ff6b 	bl	8004e30 <prvSampleTimeNow>
 8004f5a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b09      	cmp	r3, #9
 8004f60:	f200 8097 	bhi.w	8005092 <prvProcessReceivedCommands+0x19e>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <prvProcessReceivedCommands+0x78>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004f95 	.word	0x08004f95
 8004f78:	08005009 	.word	0x08005009
 8004f7c:	0800501d 	.word	0x0800501d
 8004f80:	08005067 	.word	0x08005067
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004f95 	.word	0x08004f95
 8004f8c:	08005009 	.word	0x08005009
 8004f90:	0800501d 	.word	0x0800501d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	18d1      	adds	r1, r2, r3
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fb4:	f7ff ff5c 	bl	8004e70 <prvInsertTimerInActiveList>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d069      	beq.n	8005092 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d05e      	beq.n	8005092 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	441a      	add	r2, r3
 8004fdc:	2300      	movs	r3, #0
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe6:	f7ff fe05 	bl	8004bf4 <xTimerGenericCommand>
 8004fea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d14f      	bne.n	8005092 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	61bb      	str	r3, [r7, #24]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	b2da      	uxtb	r2, r3
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800501a:	e03a      	b.n	8005092 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	b2da      	uxtb	r2, r3
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	617b      	str	r3, [r7, #20]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	18d1      	adds	r1, r2, r3
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005060:	f7ff ff06 	bl	8004e70 <prvInsertTimerInActiveList>
					break;
 8005064:	e015      	b.n	8005092 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d103      	bne.n	800507c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005076:	f000 fbdb 	bl	8005830 <vPortFree>
 800507a:	e00a      	b.n	8005092 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	b2da      	uxtb	r2, r3
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800508e:	e000      	b.n	8005092 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005090:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005092:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <prvProcessReceivedCommands+0x1c0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	1d39      	adds	r1, r7, #4
 8005098:	2200      	movs	r2, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe fc16 	bl	80038cc <xQueueReceive>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f47f af2a 	bne.w	8004efc <prvProcessReceivedCommands+0x8>
	}
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	3730      	adds	r7, #48	; 0x30
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000d4c 	.word	0x20000d4c

080050b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050be:	e048      	b.n	8005152 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050c0:	4b2d      	ldr	r3, [pc, #180]	; (8005178 <prvSwitchTimerLists+0xc0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ca:	4b2b      	ldr	r3, [pc, #172]	; (8005178 <prvSwitchTimerLists+0xc0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fe f92f 	bl	800333c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d02e      	beq.n	8005152 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d90e      	bls.n	8005124 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005112:	4b19      	ldr	r3, [pc, #100]	; (8005178 <prvSwitchTimerLists+0xc0>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3304      	adds	r3, #4
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f7fe f8d4 	bl	80032ca <vListInsert>
 8005122:	e016      	b.n	8005152 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005124:	2300      	movs	r3, #0
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	2300      	movs	r3, #0
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	2100      	movs	r1, #0
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff fd60 	bl	8004bf4 <xTimerGenericCommand>
 8005134:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	603b      	str	r3, [r7, #0]
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005152:	4b09      	ldr	r3, [pc, #36]	; (8005178 <prvSwitchTimerLists+0xc0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1b1      	bne.n	80050c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800515c:	4b06      	ldr	r3, [pc, #24]	; (8005178 <prvSwitchTimerLists+0xc0>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005162:	4b06      	ldr	r3, [pc, #24]	; (800517c <prvSwitchTimerLists+0xc4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a04      	ldr	r2, [pc, #16]	; (8005178 <prvSwitchTimerLists+0xc0>)
 8005168:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800516a:	4a04      	ldr	r2, [pc, #16]	; (800517c <prvSwitchTimerLists+0xc4>)
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	6013      	str	r3, [r2, #0]
}
 8005170:	bf00      	nop
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000d44 	.word	0x20000d44
 800517c:	20000d48 	.word	0x20000d48

08005180 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005186:	f000 f965 	bl	8005454 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800518a:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <prvCheckForValidListAndQueue+0x60>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d120      	bne.n	80051d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005192:	4814      	ldr	r0, [pc, #80]	; (80051e4 <prvCheckForValidListAndQueue+0x64>)
 8005194:	f7fe f848 	bl	8003228 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005198:	4813      	ldr	r0, [pc, #76]	; (80051e8 <prvCheckForValidListAndQueue+0x68>)
 800519a:	f7fe f845 	bl	8003228 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800519e:	4b13      	ldr	r3, [pc, #76]	; (80051ec <prvCheckForValidListAndQueue+0x6c>)
 80051a0:	4a10      	ldr	r2, [pc, #64]	; (80051e4 <prvCheckForValidListAndQueue+0x64>)
 80051a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80051a4:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <prvCheckForValidListAndQueue+0x70>)
 80051a6:	4a10      	ldr	r2, [pc, #64]	; (80051e8 <prvCheckForValidListAndQueue+0x68>)
 80051a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80051aa:	2300      	movs	r3, #0
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <prvCheckForValidListAndQueue+0x74>)
 80051b0:	4a11      	ldr	r2, [pc, #68]	; (80051f8 <prvCheckForValidListAndQueue+0x78>)
 80051b2:	2110      	movs	r1, #16
 80051b4:	200a      	movs	r0, #10
 80051b6:	f7fe f953 	bl	8003460 <xQueueGenericCreateStatic>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4a08      	ldr	r2, [pc, #32]	; (80051e0 <prvCheckForValidListAndQueue+0x60>)
 80051be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051c0:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <prvCheckForValidListAndQueue+0x60>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <prvCheckForValidListAndQueue+0x60>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	490b      	ldr	r1, [pc, #44]	; (80051fc <prvCheckForValidListAndQueue+0x7c>)
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe fd6c 	bl	8003cac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051d4:	f000 f96e 	bl	80054b4 <vPortExitCritical>
}
 80051d8:	bf00      	nop
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000d4c 	.word	0x20000d4c
 80051e4:	20000d1c 	.word	0x20000d1c
 80051e8:	20000d30 	.word	0x20000d30
 80051ec:	20000d44 	.word	0x20000d44
 80051f0:	20000d48 	.word	0x20000d48
 80051f4:	20000df8 	.word	0x20000df8
 80051f8:	20000d58 	.word	0x20000d58
 80051fc:	0800640c 	.word	0x0800640c

08005200 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3b04      	subs	r3, #4
 8005210:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3b04      	subs	r3, #4
 800521e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f023 0201 	bic.w	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3b04      	subs	r3, #4
 800522e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005230:	4a0c      	ldr	r2, [pc, #48]	; (8005264 <pxPortInitialiseStack+0x64>)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3b14      	subs	r3, #20
 800523a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3b04      	subs	r3, #4
 8005246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f06f 0202 	mvn.w	r2, #2
 800524e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3b20      	subs	r3, #32
 8005254:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005256:	68fb      	ldr	r3, [r7, #12]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	08005269 	.word	0x08005269

08005268 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005272:	4b12      	ldr	r3, [pc, #72]	; (80052bc <prvTaskExitError+0x54>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527a:	d00a      	beq.n	8005292 <prvTaskExitError+0x2a>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	60fb      	str	r3, [r7, #12]
}
 800528e:	bf00      	nop
 8005290:	e7fe      	b.n	8005290 <prvTaskExitError+0x28>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	60bb      	str	r3, [r7, #8]
}
 80052a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052a6:	bf00      	nop
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0fc      	beq.n	80052a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052ae:	bf00      	nop
 80052b0:	bf00      	nop
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	2000000c 	.word	0x2000000c

080052c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052c0:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <pxCurrentTCBConst2>)
 80052c2:	6819      	ldr	r1, [r3, #0]
 80052c4:	6808      	ldr	r0, [r1, #0]
 80052c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ca:	f380 8809 	msr	PSP, r0
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f380 8811 	msr	BASEPRI, r0
 80052da:	4770      	bx	lr
 80052dc:	f3af 8000 	nop.w

080052e0 <pxCurrentTCBConst2>:
 80052e0:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop

080052e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052e8:	4808      	ldr	r0, [pc, #32]	; (800530c <prvPortStartFirstTask+0x24>)
 80052ea:	6800      	ldr	r0, [r0, #0]
 80052ec:	6800      	ldr	r0, [r0, #0]
 80052ee:	f380 8808 	msr	MSP, r0
 80052f2:	f04f 0000 	mov.w	r0, #0
 80052f6:	f380 8814 	msr	CONTROL, r0
 80052fa:	b662      	cpsie	i
 80052fc:	b661      	cpsie	f
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	df00      	svc	0
 8005308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800530a:	bf00      	nop
 800530c:	e000ed08 	.word	0xe000ed08

08005310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005316:	4b46      	ldr	r3, [pc, #280]	; (8005430 <xPortStartScheduler+0x120>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a46      	ldr	r2, [pc, #280]	; (8005434 <xPortStartScheduler+0x124>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d10a      	bne.n	8005336 <xPortStartScheduler+0x26>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	613b      	str	r3, [r7, #16]
}
 8005332:	bf00      	nop
 8005334:	e7fe      	b.n	8005334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005336:	4b3e      	ldr	r3, [pc, #248]	; (8005430 <xPortStartScheduler+0x120>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a3f      	ldr	r2, [pc, #252]	; (8005438 <xPortStartScheduler+0x128>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d10a      	bne.n	8005356 <xPortStartScheduler+0x46>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	60fb      	str	r3, [r7, #12]
}
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005356:	4b39      	ldr	r3, [pc, #228]	; (800543c <xPortStartScheduler+0x12c>)
 8005358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	22ff      	movs	r2, #255	; 0xff
 8005366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005378:	b2da      	uxtb	r2, r3
 800537a:	4b31      	ldr	r3, [pc, #196]	; (8005440 <xPortStartScheduler+0x130>)
 800537c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800537e:	4b31      	ldr	r3, [pc, #196]	; (8005444 <xPortStartScheduler+0x134>)
 8005380:	2207      	movs	r2, #7
 8005382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005384:	e009      	b.n	800539a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005386:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <xPortStartScheduler+0x134>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3b01      	subs	r3, #1
 800538c:	4a2d      	ldr	r2, [pc, #180]	; (8005444 <xPortStartScheduler+0x134>)
 800538e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	b2db      	uxtb	r3, r3
 8005398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a2:	2b80      	cmp	r3, #128	; 0x80
 80053a4:	d0ef      	beq.n	8005386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053a6:	4b27      	ldr	r3, [pc, #156]	; (8005444 <xPortStartScheduler+0x134>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f1c3 0307 	rsb	r3, r3, #7
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d00a      	beq.n	80053c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80053b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	60bb      	str	r3, [r7, #8]
}
 80053c4:	bf00      	nop
 80053c6:	e7fe      	b.n	80053c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053c8:	4b1e      	ldr	r3, [pc, #120]	; (8005444 <xPortStartScheduler+0x134>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <xPortStartScheduler+0x134>)
 80053d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053d2:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <xPortStartScheduler+0x134>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053da:	4a1a      	ldr	r2, [pc, #104]	; (8005444 <xPortStartScheduler+0x134>)
 80053dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053e6:	4b18      	ldr	r3, [pc, #96]	; (8005448 <xPortStartScheduler+0x138>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a17      	ldr	r2, [pc, #92]	; (8005448 <xPortStartScheduler+0x138>)
 80053ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053f2:	4b15      	ldr	r3, [pc, #84]	; (8005448 <xPortStartScheduler+0x138>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a14      	ldr	r2, [pc, #80]	; (8005448 <xPortStartScheduler+0x138>)
 80053f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053fe:	f000 f8dd 	bl	80055bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <xPortStartScheduler+0x13c>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005408:	f000 f8fc 	bl	8005604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800540c:	4b10      	ldr	r3, [pc, #64]	; (8005450 <xPortStartScheduler+0x140>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a0f      	ldr	r2, [pc, #60]	; (8005450 <xPortStartScheduler+0x140>)
 8005412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005418:	f7ff ff66 	bl	80052e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800541c:	f7ff f856 	bl	80044cc <vTaskSwitchContext>
	prvTaskExitError();
 8005420:	f7ff ff22 	bl	8005268 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	e000ed00 	.word	0xe000ed00
 8005434:	410fc271 	.word	0x410fc271
 8005438:	410fc270 	.word	0x410fc270
 800543c:	e000e400 	.word	0xe000e400
 8005440:	20000e48 	.word	0x20000e48
 8005444:	20000e4c 	.word	0x20000e4c
 8005448:	e000ed20 	.word	0xe000ed20
 800544c:	2000000c 	.word	0x2000000c
 8005450:	e000ef34 	.word	0xe000ef34

08005454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	607b      	str	r3, [r7, #4]
}
 800546c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800546e:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <vPortEnterCritical+0x58>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3301      	adds	r3, #1
 8005474:	4a0d      	ldr	r2, [pc, #52]	; (80054ac <vPortEnterCritical+0x58>)
 8005476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005478:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <vPortEnterCritical+0x58>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d10f      	bne.n	80054a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005480:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <vPortEnterCritical+0x5c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	603b      	str	r3, [r7, #0]
}
 800549c:	bf00      	nop
 800549e:	e7fe      	b.n	800549e <vPortEnterCritical+0x4a>
	}
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	2000000c 	.word	0x2000000c
 80054b0:	e000ed04 	.word	0xe000ed04

080054b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054ba:	4b12      	ldr	r3, [pc, #72]	; (8005504 <vPortExitCritical+0x50>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <vPortExitCritical+0x24>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	607b      	str	r3, [r7, #4]
}
 80054d4:	bf00      	nop
 80054d6:	e7fe      	b.n	80054d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054d8:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <vPortExitCritical+0x50>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3b01      	subs	r3, #1
 80054de:	4a09      	ldr	r2, [pc, #36]	; (8005504 <vPortExitCritical+0x50>)
 80054e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054e2:	4b08      	ldr	r3, [pc, #32]	; (8005504 <vPortExitCritical+0x50>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d105      	bne.n	80054f6 <vPortExitCritical+0x42>
 80054ea:	2300      	movs	r3, #0
 80054ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	f383 8811 	msr	BASEPRI, r3
}
 80054f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	2000000c 	.word	0x2000000c
	...

08005510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005510:	f3ef 8009 	mrs	r0, PSP
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	4b15      	ldr	r3, [pc, #84]	; (8005570 <pxCurrentTCBConst>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	f01e 0f10 	tst.w	lr, #16
 8005520:	bf08      	it	eq
 8005522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552a:	6010      	str	r0, [r2, #0]
 800552c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005534:	f380 8811 	msr	BASEPRI, r0
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f7fe ffc4 	bl	80044cc <vTaskSwitchContext>
 8005544:	f04f 0000 	mov.w	r0, #0
 8005548:	f380 8811 	msr	BASEPRI, r0
 800554c:	bc09      	pop	{r0, r3}
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	6808      	ldr	r0, [r1, #0]
 8005552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005556:	f01e 0f10 	tst.w	lr, #16
 800555a:	bf08      	it	eq
 800555c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005560:	f380 8809 	msr	PSP, r0
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	f3af 8000 	nop.w

08005570 <pxCurrentTCBConst>:
 8005570:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop

08005578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	607b      	str	r3, [r7, #4]
}
 8005590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005592:	f7fe fee1 	bl	8004358 <xTaskIncrementTick>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800559c:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <xPortSysTickHandler+0x40>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f383 8811 	msr	BASEPRI, r3
}
 80055ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <vPortSetupTimerInterrupt+0x34>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <vPortSetupTimerInterrupt+0x38>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055cc:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <vPortSetupTimerInterrupt+0x3c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <vPortSetupTimerInterrupt+0x40>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	099b      	lsrs	r3, r3, #6
 80055d8:	4a09      	ldr	r2, [pc, #36]	; (8005600 <vPortSetupTimerInterrupt+0x44>)
 80055da:	3b01      	subs	r3, #1
 80055dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055de:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <vPortSetupTimerInterrupt+0x34>)
 80055e0:	2207      	movs	r2, #7
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	e000e010 	.word	0xe000e010
 80055f4:	e000e018 	.word	0xe000e018
 80055f8:	20000000 	.word	0x20000000
 80055fc:	10624dd3 	.word	0x10624dd3
 8005600:	e000e014 	.word	0xe000e014

08005604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005614 <vPortEnableVFP+0x10>
 8005608:	6801      	ldr	r1, [r0, #0]
 800560a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800560e:	6001      	str	r1, [r0, #0]
 8005610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005612:	bf00      	nop
 8005614:	e000ed88 	.word	0xe000ed88

08005618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800561e:	f3ef 8305 	mrs	r3, IPSR
 8005622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b0f      	cmp	r3, #15
 8005628:	d914      	bls.n	8005654 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800562a:	4a17      	ldr	r2, [pc, #92]	; (8005688 <vPortValidateInterruptPriority+0x70>)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005634:	4b15      	ldr	r3, [pc, #84]	; (800568c <vPortValidateInterruptPriority+0x74>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	7afa      	ldrb	r2, [r7, #11]
 800563a:	429a      	cmp	r2, r3
 800563c:	d20a      	bcs.n	8005654 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	607b      	str	r3, [r7, #4]
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <vPortValidateInterruptPriority+0x78>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800565c:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <vPortValidateInterruptPriority+0x7c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d90a      	bls.n	800567a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	603b      	str	r3, [r7, #0]
}
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <vPortValidateInterruptPriority+0x60>
	}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	e000e3f0 	.word	0xe000e3f0
 800568c:	20000e48 	.word	0x20000e48
 8005690:	e000ed0c 	.word	0xe000ed0c
 8005694:	20000e4c 	.word	0x20000e4c

08005698 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056a4:	f7fe fd9c 	bl	80041e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056a8:	4b5b      	ldr	r3, [pc, #364]	; (8005818 <pvPortMalloc+0x180>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056b0:	f000 f920 	bl	80058f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056b4:	4b59      	ldr	r3, [pc, #356]	; (800581c <pvPortMalloc+0x184>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f040 8093 	bne.w	80057e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01d      	beq.n	8005704 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80056c8:	2208      	movs	r2, #8
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d014      	beq.n	8005704 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f023 0307 	bic.w	r3, r3, #7
 80056e0:	3308      	adds	r3, #8
 80056e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <pvPortMalloc+0x6c>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	617b      	str	r3, [r7, #20]
}
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d06e      	beq.n	80057e8 <pvPortMalloc+0x150>
 800570a:	4b45      	ldr	r3, [pc, #276]	; (8005820 <pvPortMalloc+0x188>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	429a      	cmp	r2, r3
 8005712:	d869      	bhi.n	80057e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005714:	4b43      	ldr	r3, [pc, #268]	; (8005824 <pvPortMalloc+0x18c>)
 8005716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005718:	4b42      	ldr	r3, [pc, #264]	; (8005824 <pvPortMalloc+0x18c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800571e:	e004      	b.n	800572a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	d903      	bls.n	800573c <pvPortMalloc+0xa4>
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1f1      	bne.n	8005720 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800573c:	4b36      	ldr	r3, [pc, #216]	; (8005818 <pvPortMalloc+0x180>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005742:	429a      	cmp	r2, r3
 8005744:	d050      	beq.n	80057e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2208      	movs	r2, #8
 800574c:	4413      	add	r3, r2
 800574e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	1ad2      	subs	r2, r2, r3
 8005760:	2308      	movs	r3, #8
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	429a      	cmp	r2, r3
 8005766:	d91f      	bls.n	80057a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4413      	add	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <pvPortMalloc+0xf8>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	613b      	str	r3, [r7, #16]
}
 800578c:	bf00      	nop
 800578e:	e7fe      	b.n	800578e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	1ad2      	subs	r2, r2, r3
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057a2:	69b8      	ldr	r0, [r7, #24]
 80057a4:	f000 f908 	bl	80059b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057a8:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <pvPortMalloc+0x188>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <pvPortMalloc+0x188>)
 80057b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057b6:	4b1a      	ldr	r3, [pc, #104]	; (8005820 <pvPortMalloc+0x188>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b1b      	ldr	r3, [pc, #108]	; (8005828 <pvPortMalloc+0x190>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d203      	bcs.n	80057ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057c2:	4b17      	ldr	r3, [pc, #92]	; (8005820 <pvPortMalloc+0x188>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a18      	ldr	r2, [pc, #96]	; (8005828 <pvPortMalloc+0x190>)
 80057c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	4b13      	ldr	r3, [pc, #76]	; (800581c <pvPortMalloc+0x184>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <pvPortMalloc+0x194>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3301      	adds	r3, #1
 80057e4:	4a11      	ldr	r2, [pc, #68]	; (800582c <pvPortMalloc+0x194>)
 80057e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057e8:	f7fe fd08 	bl	80041fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <pvPortMalloc+0x174>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	60fb      	str	r3, [r7, #12]
}
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <pvPortMalloc+0x172>
	return pvReturn;
 800580c:	69fb      	ldr	r3, [r7, #28]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3728      	adds	r7, #40	; 0x28
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20004a58 	.word	0x20004a58
 800581c:	20004a6c 	.word	0x20004a6c
 8005820:	20004a5c 	.word	0x20004a5c
 8005824:	20004a50 	.word	0x20004a50
 8005828:	20004a60 	.word	0x20004a60
 800582c:	20004a64 	.word	0x20004a64

08005830 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d04d      	beq.n	80058de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005842:	2308      	movs	r3, #8
 8005844:	425b      	negs	r3, r3
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4413      	add	r3, r2
 800584a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	4b24      	ldr	r3, [pc, #144]	; (80058e8 <vPortFree+0xb8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4013      	ands	r3, r2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10a      	bne.n	8005874 <vPortFree+0x44>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	60fb      	str	r3, [r7, #12]
}
 8005870:	bf00      	nop
 8005872:	e7fe      	b.n	8005872 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <vPortFree+0x62>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	60bb      	str	r3, [r7, #8]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <vPortFree+0xb8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4013      	ands	r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01e      	beq.n	80058de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d11a      	bne.n	80058de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	4b0e      	ldr	r3, [pc, #56]	; (80058e8 <vPortFree+0xb8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	43db      	mvns	r3, r3
 80058b2:	401a      	ands	r2, r3
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058b8:	f7fe fc92 	bl	80041e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <vPortFree+0xbc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4413      	add	r3, r2
 80058c6:	4a09      	ldr	r2, [pc, #36]	; (80058ec <vPortFree+0xbc>)
 80058c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058ca:	6938      	ldr	r0, [r7, #16]
 80058cc:	f000 f874 	bl	80059b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <vPortFree+0xc0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	4a06      	ldr	r2, [pc, #24]	; (80058f0 <vPortFree+0xc0>)
 80058d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058da:	f7fe fc8f 	bl	80041fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058de:	bf00      	nop
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20004a6c 	.word	0x20004a6c
 80058ec:	20004a5c 	.word	0x20004a5c
 80058f0:	20004a68 	.word	0x20004a68

080058f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80058fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005900:	4b27      	ldr	r3, [pc, #156]	; (80059a0 <prvHeapInit+0xac>)
 8005902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00c      	beq.n	8005928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3307      	adds	r3, #7
 8005912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0307 	bic.w	r3, r3, #7
 800591a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	4a1f      	ldr	r2, [pc, #124]	; (80059a0 <prvHeapInit+0xac>)
 8005924:	4413      	add	r3, r2
 8005926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800592c:	4a1d      	ldr	r2, [pc, #116]	; (80059a4 <prvHeapInit+0xb0>)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005932:	4b1c      	ldr	r3, [pc, #112]	; (80059a4 <prvHeapInit+0xb0>)
 8005934:	2200      	movs	r2, #0
 8005936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	4413      	add	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005940:	2208      	movs	r2, #8
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1a9b      	subs	r3, r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0307 	bic.w	r3, r3, #7
 800594e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4a15      	ldr	r2, [pc, #84]	; (80059a8 <prvHeapInit+0xb4>)
 8005954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005956:	4b14      	ldr	r3, [pc, #80]	; (80059a8 <prvHeapInit+0xb4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2200      	movs	r2, #0
 800595c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800595e:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <prvHeapInit+0xb4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	1ad2      	subs	r2, r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005974:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <prvHeapInit+0xb4>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	4a0a      	ldr	r2, [pc, #40]	; (80059ac <prvHeapInit+0xb8>)
 8005982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4a09      	ldr	r2, [pc, #36]	; (80059b0 <prvHeapInit+0xbc>)
 800598a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800598c:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <prvHeapInit+0xc0>)
 800598e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005992:	601a      	str	r2, [r3, #0]
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	20000e50 	.word	0x20000e50
 80059a4:	20004a50 	.word	0x20004a50
 80059a8:	20004a58 	.word	0x20004a58
 80059ac:	20004a60 	.word	0x20004a60
 80059b0:	20004a5c 	.word	0x20004a5c
 80059b4:	20004a6c 	.word	0x20004a6c

080059b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059c0:	4b28      	ldr	r3, [pc, #160]	; (8005a64 <prvInsertBlockIntoFreeList+0xac>)
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	e002      	b.n	80059cc <prvInsertBlockIntoFreeList+0x14>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d8f7      	bhi.n	80059c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	4413      	add	r3, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d108      	bne.n	80059fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	441a      	add	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	441a      	add	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d118      	bne.n	8005a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <prvInsertBlockIntoFreeList+0xb0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d00d      	beq.n	8005a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	441a      	add	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	e008      	b.n	8005a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a36:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <prvInsertBlockIntoFreeList+0xb0>)
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e003      	b.n	8005a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d002      	beq.n	8005a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20004a50 	.word	0x20004a50
 8005a68:	20004a58 	.word	0x20004a58

08005a6c <__errno>:
 8005a6c:	4b01      	ldr	r3, [pc, #4]	; (8005a74 <__errno+0x8>)
 8005a6e:	6818      	ldr	r0, [r3, #0]
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20000010 	.word	0x20000010

08005a78 <__libc_init_array>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	4d0d      	ldr	r5, [pc, #52]	; (8005ab0 <__libc_init_array+0x38>)
 8005a7c:	4c0d      	ldr	r4, [pc, #52]	; (8005ab4 <__libc_init_array+0x3c>)
 8005a7e:	1b64      	subs	r4, r4, r5
 8005a80:	10a4      	asrs	r4, r4, #2
 8005a82:	2600      	movs	r6, #0
 8005a84:	42a6      	cmp	r6, r4
 8005a86:	d109      	bne.n	8005a9c <__libc_init_array+0x24>
 8005a88:	4d0b      	ldr	r5, [pc, #44]	; (8005ab8 <__libc_init_array+0x40>)
 8005a8a:	4c0c      	ldr	r4, [pc, #48]	; (8005abc <__libc_init_array+0x44>)
 8005a8c:	f000 fc8e 	bl	80063ac <_init>
 8005a90:	1b64      	subs	r4, r4, r5
 8005a92:	10a4      	asrs	r4, r4, #2
 8005a94:	2600      	movs	r6, #0
 8005a96:	42a6      	cmp	r6, r4
 8005a98:	d105      	bne.n	8005aa6 <__libc_init_array+0x2e>
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}
 8005a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa0:	4798      	blx	r3
 8005aa2:	3601      	adds	r6, #1
 8005aa4:	e7ee      	b.n	8005a84 <__libc_init_array+0xc>
 8005aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aaa:	4798      	blx	r3
 8005aac:	3601      	adds	r6, #1
 8005aae:	e7f2      	b.n	8005a96 <__libc_init_array+0x1e>
 8005ab0:	08006468 	.word	0x08006468
 8005ab4:	08006468 	.word	0x08006468
 8005ab8:	08006468 	.word	0x08006468
 8005abc:	0800646c 	.word	0x0800646c

08005ac0 <memcpy>:
 8005ac0:	440a      	add	r2, r1
 8005ac2:	4291      	cmp	r1, r2
 8005ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ac8:	d100      	bne.n	8005acc <memcpy+0xc>
 8005aca:	4770      	bx	lr
 8005acc:	b510      	push	{r4, lr}
 8005ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ad6:	4291      	cmp	r1, r2
 8005ad8:	d1f9      	bne.n	8005ace <memcpy+0xe>
 8005ada:	bd10      	pop	{r4, pc}

08005adc <memset>:
 8005adc:	4402      	add	r2, r0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d100      	bne.n	8005ae6 <memset+0xa>
 8005ae4:	4770      	bx	lr
 8005ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aea:	e7f9      	b.n	8005ae0 <memset+0x4>

08005aec <siprintf>:
 8005aec:	b40e      	push	{r1, r2, r3}
 8005aee:	b500      	push	{lr}
 8005af0:	b09c      	sub	sp, #112	; 0x70
 8005af2:	ab1d      	add	r3, sp, #116	; 0x74
 8005af4:	9002      	str	r0, [sp, #8]
 8005af6:	9006      	str	r0, [sp, #24]
 8005af8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005afc:	4809      	ldr	r0, [pc, #36]	; (8005b24 <siprintf+0x38>)
 8005afe:	9107      	str	r1, [sp, #28]
 8005b00:	9104      	str	r1, [sp, #16]
 8005b02:	4909      	ldr	r1, [pc, #36]	; (8005b28 <siprintf+0x3c>)
 8005b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b08:	9105      	str	r1, [sp, #20]
 8005b0a:	6800      	ldr	r0, [r0, #0]
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	a902      	add	r1, sp, #8
 8005b10:	f000 f868 	bl	8005be4 <_svfiprintf_r>
 8005b14:	9b02      	ldr	r3, [sp, #8]
 8005b16:	2200      	movs	r2, #0
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	b01c      	add	sp, #112	; 0x70
 8005b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b20:	b003      	add	sp, #12
 8005b22:	4770      	bx	lr
 8005b24:	20000010 	.word	0x20000010
 8005b28:	ffff0208 	.word	0xffff0208

08005b2c <__ssputs_r>:
 8005b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b30:	688e      	ldr	r6, [r1, #8]
 8005b32:	429e      	cmp	r6, r3
 8005b34:	4682      	mov	sl, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	4690      	mov	r8, r2
 8005b3a:	461f      	mov	r7, r3
 8005b3c:	d838      	bhi.n	8005bb0 <__ssputs_r+0x84>
 8005b3e:	898a      	ldrh	r2, [r1, #12]
 8005b40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b44:	d032      	beq.n	8005bac <__ssputs_r+0x80>
 8005b46:	6825      	ldr	r5, [r4, #0]
 8005b48:	6909      	ldr	r1, [r1, #16]
 8005b4a:	eba5 0901 	sub.w	r9, r5, r1
 8005b4e:	6965      	ldr	r5, [r4, #20]
 8005b50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b58:	3301      	adds	r3, #1
 8005b5a:	444b      	add	r3, r9
 8005b5c:	106d      	asrs	r5, r5, #1
 8005b5e:	429d      	cmp	r5, r3
 8005b60:	bf38      	it	cc
 8005b62:	461d      	movcc	r5, r3
 8005b64:	0553      	lsls	r3, r2, #21
 8005b66:	d531      	bpl.n	8005bcc <__ssputs_r+0xa0>
 8005b68:	4629      	mov	r1, r5
 8005b6a:	f000 fb55 	bl	8006218 <_malloc_r>
 8005b6e:	4606      	mov	r6, r0
 8005b70:	b950      	cbnz	r0, 8005b88 <__ssputs_r+0x5c>
 8005b72:	230c      	movs	r3, #12
 8005b74:	f8ca 3000 	str.w	r3, [sl]
 8005b78:	89a3      	ldrh	r3, [r4, #12]
 8005b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b7e:	81a3      	strh	r3, [r4, #12]
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295
 8005b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b88:	6921      	ldr	r1, [r4, #16]
 8005b8a:	464a      	mov	r2, r9
 8005b8c:	f7ff ff98 	bl	8005ac0 <memcpy>
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9a:	81a3      	strh	r3, [r4, #12]
 8005b9c:	6126      	str	r6, [r4, #16]
 8005b9e:	6165      	str	r5, [r4, #20]
 8005ba0:	444e      	add	r6, r9
 8005ba2:	eba5 0509 	sub.w	r5, r5, r9
 8005ba6:	6026      	str	r6, [r4, #0]
 8005ba8:	60a5      	str	r5, [r4, #8]
 8005baa:	463e      	mov	r6, r7
 8005bac:	42be      	cmp	r6, r7
 8005bae:	d900      	bls.n	8005bb2 <__ssputs_r+0x86>
 8005bb0:	463e      	mov	r6, r7
 8005bb2:	6820      	ldr	r0, [r4, #0]
 8005bb4:	4632      	mov	r2, r6
 8005bb6:	4641      	mov	r1, r8
 8005bb8:	f000 faa8 	bl	800610c <memmove>
 8005bbc:	68a3      	ldr	r3, [r4, #8]
 8005bbe:	1b9b      	subs	r3, r3, r6
 8005bc0:	60a3      	str	r3, [r4, #8]
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	4433      	add	r3, r6
 8005bc6:	6023      	str	r3, [r4, #0]
 8005bc8:	2000      	movs	r0, #0
 8005bca:	e7db      	b.n	8005b84 <__ssputs_r+0x58>
 8005bcc:	462a      	mov	r2, r5
 8005bce:	f000 fb97 	bl	8006300 <_realloc_r>
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d1e1      	bne.n	8005b9c <__ssputs_r+0x70>
 8005bd8:	6921      	ldr	r1, [r4, #16]
 8005bda:	4650      	mov	r0, sl
 8005bdc:	f000 fab0 	bl	8006140 <_free_r>
 8005be0:	e7c7      	b.n	8005b72 <__ssputs_r+0x46>
	...

08005be4 <_svfiprintf_r>:
 8005be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be8:	4698      	mov	r8, r3
 8005bea:	898b      	ldrh	r3, [r1, #12]
 8005bec:	061b      	lsls	r3, r3, #24
 8005bee:	b09d      	sub	sp, #116	; 0x74
 8005bf0:	4607      	mov	r7, r0
 8005bf2:	460d      	mov	r5, r1
 8005bf4:	4614      	mov	r4, r2
 8005bf6:	d50e      	bpl.n	8005c16 <_svfiprintf_r+0x32>
 8005bf8:	690b      	ldr	r3, [r1, #16]
 8005bfa:	b963      	cbnz	r3, 8005c16 <_svfiprintf_r+0x32>
 8005bfc:	2140      	movs	r1, #64	; 0x40
 8005bfe:	f000 fb0b 	bl	8006218 <_malloc_r>
 8005c02:	6028      	str	r0, [r5, #0]
 8005c04:	6128      	str	r0, [r5, #16]
 8005c06:	b920      	cbnz	r0, 8005c12 <_svfiprintf_r+0x2e>
 8005c08:	230c      	movs	r3, #12
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	e0d1      	b.n	8005db6 <_svfiprintf_r+0x1d2>
 8005c12:	2340      	movs	r3, #64	; 0x40
 8005c14:	616b      	str	r3, [r5, #20]
 8005c16:	2300      	movs	r3, #0
 8005c18:	9309      	str	r3, [sp, #36]	; 0x24
 8005c1a:	2320      	movs	r3, #32
 8005c1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c20:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c24:	2330      	movs	r3, #48	; 0x30
 8005c26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005dd0 <_svfiprintf_r+0x1ec>
 8005c2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c2e:	f04f 0901 	mov.w	r9, #1
 8005c32:	4623      	mov	r3, r4
 8005c34:	469a      	mov	sl, r3
 8005c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c3a:	b10a      	cbz	r2, 8005c40 <_svfiprintf_r+0x5c>
 8005c3c:	2a25      	cmp	r2, #37	; 0x25
 8005c3e:	d1f9      	bne.n	8005c34 <_svfiprintf_r+0x50>
 8005c40:	ebba 0b04 	subs.w	fp, sl, r4
 8005c44:	d00b      	beq.n	8005c5e <_svfiprintf_r+0x7a>
 8005c46:	465b      	mov	r3, fp
 8005c48:	4622      	mov	r2, r4
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	f7ff ff6d 	bl	8005b2c <__ssputs_r>
 8005c52:	3001      	adds	r0, #1
 8005c54:	f000 80aa 	beq.w	8005dac <_svfiprintf_r+0x1c8>
 8005c58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c5a:	445a      	add	r2, fp
 8005c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 80a2 	beq.w	8005dac <_svfiprintf_r+0x1c8>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c72:	f10a 0a01 	add.w	sl, sl, #1
 8005c76:	9304      	str	r3, [sp, #16]
 8005c78:	9307      	str	r3, [sp, #28]
 8005c7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c7e:	931a      	str	r3, [sp, #104]	; 0x68
 8005c80:	4654      	mov	r4, sl
 8005c82:	2205      	movs	r2, #5
 8005c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c88:	4851      	ldr	r0, [pc, #324]	; (8005dd0 <_svfiprintf_r+0x1ec>)
 8005c8a:	f7fa faa9 	bl	80001e0 <memchr>
 8005c8e:	9a04      	ldr	r2, [sp, #16]
 8005c90:	b9d8      	cbnz	r0, 8005cca <_svfiprintf_r+0xe6>
 8005c92:	06d0      	lsls	r0, r2, #27
 8005c94:	bf44      	itt	mi
 8005c96:	2320      	movmi	r3, #32
 8005c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c9c:	0711      	lsls	r1, r2, #28
 8005c9e:	bf44      	itt	mi
 8005ca0:	232b      	movmi	r3, #43	; 0x2b
 8005ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8005caa:	2b2a      	cmp	r3, #42	; 0x2a
 8005cac:	d015      	beq.n	8005cda <_svfiprintf_r+0xf6>
 8005cae:	9a07      	ldr	r2, [sp, #28]
 8005cb0:	4654      	mov	r4, sl
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	f04f 0c0a 	mov.w	ip, #10
 8005cb8:	4621      	mov	r1, r4
 8005cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cbe:	3b30      	subs	r3, #48	; 0x30
 8005cc0:	2b09      	cmp	r3, #9
 8005cc2:	d94e      	bls.n	8005d62 <_svfiprintf_r+0x17e>
 8005cc4:	b1b0      	cbz	r0, 8005cf4 <_svfiprintf_r+0x110>
 8005cc6:	9207      	str	r2, [sp, #28]
 8005cc8:	e014      	b.n	8005cf4 <_svfiprintf_r+0x110>
 8005cca:	eba0 0308 	sub.w	r3, r0, r8
 8005cce:	fa09 f303 	lsl.w	r3, r9, r3
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	9304      	str	r3, [sp, #16]
 8005cd6:	46a2      	mov	sl, r4
 8005cd8:	e7d2      	b.n	8005c80 <_svfiprintf_r+0x9c>
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	1d19      	adds	r1, r3, #4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	9103      	str	r1, [sp, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	bfbb      	ittet	lt
 8005ce6:	425b      	neglt	r3, r3
 8005ce8:	f042 0202 	orrlt.w	r2, r2, #2
 8005cec:	9307      	strge	r3, [sp, #28]
 8005cee:	9307      	strlt	r3, [sp, #28]
 8005cf0:	bfb8      	it	lt
 8005cf2:	9204      	strlt	r2, [sp, #16]
 8005cf4:	7823      	ldrb	r3, [r4, #0]
 8005cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8005cf8:	d10c      	bne.n	8005d14 <_svfiprintf_r+0x130>
 8005cfa:	7863      	ldrb	r3, [r4, #1]
 8005cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8005cfe:	d135      	bne.n	8005d6c <_svfiprintf_r+0x188>
 8005d00:	9b03      	ldr	r3, [sp, #12]
 8005d02:	1d1a      	adds	r2, r3, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	9203      	str	r2, [sp, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bfb8      	it	lt
 8005d0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d10:	3402      	adds	r4, #2
 8005d12:	9305      	str	r3, [sp, #20]
 8005d14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005de0 <_svfiprintf_r+0x1fc>
 8005d18:	7821      	ldrb	r1, [r4, #0]
 8005d1a:	2203      	movs	r2, #3
 8005d1c:	4650      	mov	r0, sl
 8005d1e:	f7fa fa5f 	bl	80001e0 <memchr>
 8005d22:	b140      	cbz	r0, 8005d36 <_svfiprintf_r+0x152>
 8005d24:	2340      	movs	r3, #64	; 0x40
 8005d26:	eba0 000a 	sub.w	r0, r0, sl
 8005d2a:	fa03 f000 	lsl.w	r0, r3, r0
 8005d2e:	9b04      	ldr	r3, [sp, #16]
 8005d30:	4303      	orrs	r3, r0
 8005d32:	3401      	adds	r4, #1
 8005d34:	9304      	str	r3, [sp, #16]
 8005d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d3a:	4826      	ldr	r0, [pc, #152]	; (8005dd4 <_svfiprintf_r+0x1f0>)
 8005d3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d40:	2206      	movs	r2, #6
 8005d42:	f7fa fa4d 	bl	80001e0 <memchr>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d038      	beq.n	8005dbc <_svfiprintf_r+0x1d8>
 8005d4a:	4b23      	ldr	r3, [pc, #140]	; (8005dd8 <_svfiprintf_r+0x1f4>)
 8005d4c:	bb1b      	cbnz	r3, 8005d96 <_svfiprintf_r+0x1b2>
 8005d4e:	9b03      	ldr	r3, [sp, #12]
 8005d50:	3307      	adds	r3, #7
 8005d52:	f023 0307 	bic.w	r3, r3, #7
 8005d56:	3308      	adds	r3, #8
 8005d58:	9303      	str	r3, [sp, #12]
 8005d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5c:	4433      	add	r3, r6
 8005d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d60:	e767      	b.n	8005c32 <_svfiprintf_r+0x4e>
 8005d62:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d66:	460c      	mov	r4, r1
 8005d68:	2001      	movs	r0, #1
 8005d6a:	e7a5      	b.n	8005cb8 <_svfiprintf_r+0xd4>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	3401      	adds	r4, #1
 8005d70:	9305      	str	r3, [sp, #20]
 8005d72:	4619      	mov	r1, r3
 8005d74:	f04f 0c0a 	mov.w	ip, #10
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d7e:	3a30      	subs	r2, #48	; 0x30
 8005d80:	2a09      	cmp	r2, #9
 8005d82:	d903      	bls.n	8005d8c <_svfiprintf_r+0x1a8>
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0c5      	beq.n	8005d14 <_svfiprintf_r+0x130>
 8005d88:	9105      	str	r1, [sp, #20]
 8005d8a:	e7c3      	b.n	8005d14 <_svfiprintf_r+0x130>
 8005d8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d90:	4604      	mov	r4, r0
 8005d92:	2301      	movs	r3, #1
 8005d94:	e7f0      	b.n	8005d78 <_svfiprintf_r+0x194>
 8005d96:	ab03      	add	r3, sp, #12
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	462a      	mov	r2, r5
 8005d9c:	4b0f      	ldr	r3, [pc, #60]	; (8005ddc <_svfiprintf_r+0x1f8>)
 8005d9e:	a904      	add	r1, sp, #16
 8005da0:	4638      	mov	r0, r7
 8005da2:	f3af 8000 	nop.w
 8005da6:	1c42      	adds	r2, r0, #1
 8005da8:	4606      	mov	r6, r0
 8005daa:	d1d6      	bne.n	8005d5a <_svfiprintf_r+0x176>
 8005dac:	89ab      	ldrh	r3, [r5, #12]
 8005dae:	065b      	lsls	r3, r3, #25
 8005db0:	f53f af2c 	bmi.w	8005c0c <_svfiprintf_r+0x28>
 8005db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005db6:	b01d      	add	sp, #116	; 0x74
 8005db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dbc:	ab03      	add	r3, sp, #12
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	462a      	mov	r2, r5
 8005dc2:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <_svfiprintf_r+0x1f8>)
 8005dc4:	a904      	add	r1, sp, #16
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	f000 f87a 	bl	8005ec0 <_printf_i>
 8005dcc:	e7eb      	b.n	8005da6 <_svfiprintf_r+0x1c2>
 8005dce:	bf00      	nop
 8005dd0:	0800642c 	.word	0x0800642c
 8005dd4:	08006436 	.word	0x08006436
 8005dd8:	00000000 	.word	0x00000000
 8005ddc:	08005b2d 	.word	0x08005b2d
 8005de0:	08006432 	.word	0x08006432

08005de4 <_printf_common>:
 8005de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de8:	4616      	mov	r6, r2
 8005dea:	4699      	mov	r9, r3
 8005dec:	688a      	ldr	r2, [r1, #8]
 8005dee:	690b      	ldr	r3, [r1, #16]
 8005df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005df4:	4293      	cmp	r3, r2
 8005df6:	bfb8      	it	lt
 8005df8:	4613      	movlt	r3, r2
 8005dfa:	6033      	str	r3, [r6, #0]
 8005dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e00:	4607      	mov	r7, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	b10a      	cbz	r2, 8005e0a <_printf_common+0x26>
 8005e06:	3301      	adds	r3, #1
 8005e08:	6033      	str	r3, [r6, #0]
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	0699      	lsls	r1, r3, #26
 8005e0e:	bf42      	ittt	mi
 8005e10:	6833      	ldrmi	r3, [r6, #0]
 8005e12:	3302      	addmi	r3, #2
 8005e14:	6033      	strmi	r3, [r6, #0]
 8005e16:	6825      	ldr	r5, [r4, #0]
 8005e18:	f015 0506 	ands.w	r5, r5, #6
 8005e1c:	d106      	bne.n	8005e2c <_printf_common+0x48>
 8005e1e:	f104 0a19 	add.w	sl, r4, #25
 8005e22:	68e3      	ldr	r3, [r4, #12]
 8005e24:	6832      	ldr	r2, [r6, #0]
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	42ab      	cmp	r3, r5
 8005e2a:	dc26      	bgt.n	8005e7a <_printf_common+0x96>
 8005e2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e30:	1e13      	subs	r3, r2, #0
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	bf18      	it	ne
 8005e36:	2301      	movne	r3, #1
 8005e38:	0692      	lsls	r2, r2, #26
 8005e3a:	d42b      	bmi.n	8005e94 <_printf_common+0xb0>
 8005e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e40:	4649      	mov	r1, r9
 8005e42:	4638      	mov	r0, r7
 8005e44:	47c0      	blx	r8
 8005e46:	3001      	adds	r0, #1
 8005e48:	d01e      	beq.n	8005e88 <_printf_common+0xa4>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	68e5      	ldr	r5, [r4, #12]
 8005e4e:	6832      	ldr	r2, [r6, #0]
 8005e50:	f003 0306 	and.w	r3, r3, #6
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	bf08      	it	eq
 8005e58:	1aad      	subeq	r5, r5, r2
 8005e5a:	68a3      	ldr	r3, [r4, #8]
 8005e5c:	6922      	ldr	r2, [r4, #16]
 8005e5e:	bf0c      	ite	eq
 8005e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e64:	2500      	movne	r5, #0
 8005e66:	4293      	cmp	r3, r2
 8005e68:	bfc4      	itt	gt
 8005e6a:	1a9b      	subgt	r3, r3, r2
 8005e6c:	18ed      	addgt	r5, r5, r3
 8005e6e:	2600      	movs	r6, #0
 8005e70:	341a      	adds	r4, #26
 8005e72:	42b5      	cmp	r5, r6
 8005e74:	d11a      	bne.n	8005eac <_printf_common+0xc8>
 8005e76:	2000      	movs	r0, #0
 8005e78:	e008      	b.n	8005e8c <_printf_common+0xa8>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4652      	mov	r2, sl
 8005e7e:	4649      	mov	r1, r9
 8005e80:	4638      	mov	r0, r7
 8005e82:	47c0      	blx	r8
 8005e84:	3001      	adds	r0, #1
 8005e86:	d103      	bne.n	8005e90 <_printf_common+0xac>
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e90:	3501      	adds	r5, #1
 8005e92:	e7c6      	b.n	8005e22 <_printf_common+0x3e>
 8005e94:	18e1      	adds	r1, r4, r3
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	2030      	movs	r0, #48	; 0x30
 8005e9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e9e:	4422      	add	r2, r4
 8005ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ea8:	3302      	adds	r3, #2
 8005eaa:	e7c7      	b.n	8005e3c <_printf_common+0x58>
 8005eac:	2301      	movs	r3, #1
 8005eae:	4622      	mov	r2, r4
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	47c0      	blx	r8
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d0e6      	beq.n	8005e88 <_printf_common+0xa4>
 8005eba:	3601      	adds	r6, #1
 8005ebc:	e7d9      	b.n	8005e72 <_printf_common+0x8e>
	...

08005ec0 <_printf_i>:
 8005ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec4:	7e0f      	ldrb	r7, [r1, #24]
 8005ec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ec8:	2f78      	cmp	r7, #120	; 0x78
 8005eca:	4691      	mov	r9, r2
 8005ecc:	4680      	mov	r8, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	469a      	mov	sl, r3
 8005ed2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ed6:	d807      	bhi.n	8005ee8 <_printf_i+0x28>
 8005ed8:	2f62      	cmp	r7, #98	; 0x62
 8005eda:	d80a      	bhi.n	8005ef2 <_printf_i+0x32>
 8005edc:	2f00      	cmp	r7, #0
 8005ede:	f000 80d8 	beq.w	8006092 <_printf_i+0x1d2>
 8005ee2:	2f58      	cmp	r7, #88	; 0x58
 8005ee4:	f000 80a3 	beq.w	800602e <_printf_i+0x16e>
 8005ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ef0:	e03a      	b.n	8005f68 <_printf_i+0xa8>
 8005ef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ef6:	2b15      	cmp	r3, #21
 8005ef8:	d8f6      	bhi.n	8005ee8 <_printf_i+0x28>
 8005efa:	a101      	add	r1, pc, #4	; (adr r1, 8005f00 <_printf_i+0x40>)
 8005efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f00:	08005f59 	.word	0x08005f59
 8005f04:	08005f6d 	.word	0x08005f6d
 8005f08:	08005ee9 	.word	0x08005ee9
 8005f0c:	08005ee9 	.word	0x08005ee9
 8005f10:	08005ee9 	.word	0x08005ee9
 8005f14:	08005ee9 	.word	0x08005ee9
 8005f18:	08005f6d 	.word	0x08005f6d
 8005f1c:	08005ee9 	.word	0x08005ee9
 8005f20:	08005ee9 	.word	0x08005ee9
 8005f24:	08005ee9 	.word	0x08005ee9
 8005f28:	08005ee9 	.word	0x08005ee9
 8005f2c:	08006079 	.word	0x08006079
 8005f30:	08005f9d 	.word	0x08005f9d
 8005f34:	0800605b 	.word	0x0800605b
 8005f38:	08005ee9 	.word	0x08005ee9
 8005f3c:	08005ee9 	.word	0x08005ee9
 8005f40:	0800609b 	.word	0x0800609b
 8005f44:	08005ee9 	.word	0x08005ee9
 8005f48:	08005f9d 	.word	0x08005f9d
 8005f4c:	08005ee9 	.word	0x08005ee9
 8005f50:	08005ee9 	.word	0x08005ee9
 8005f54:	08006063 	.word	0x08006063
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	1d1a      	adds	r2, r3, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	602a      	str	r2, [r5, #0]
 8005f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e0a3      	b.n	80060b4 <_printf_i+0x1f4>
 8005f6c:	6820      	ldr	r0, [r4, #0]
 8005f6e:	6829      	ldr	r1, [r5, #0]
 8005f70:	0606      	lsls	r6, r0, #24
 8005f72:	f101 0304 	add.w	r3, r1, #4
 8005f76:	d50a      	bpl.n	8005f8e <_printf_i+0xce>
 8005f78:	680e      	ldr	r6, [r1, #0]
 8005f7a:	602b      	str	r3, [r5, #0]
 8005f7c:	2e00      	cmp	r6, #0
 8005f7e:	da03      	bge.n	8005f88 <_printf_i+0xc8>
 8005f80:	232d      	movs	r3, #45	; 0x2d
 8005f82:	4276      	negs	r6, r6
 8005f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f88:	485e      	ldr	r0, [pc, #376]	; (8006104 <_printf_i+0x244>)
 8005f8a:	230a      	movs	r3, #10
 8005f8c:	e019      	b.n	8005fc2 <_printf_i+0x102>
 8005f8e:	680e      	ldr	r6, [r1, #0]
 8005f90:	602b      	str	r3, [r5, #0]
 8005f92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f96:	bf18      	it	ne
 8005f98:	b236      	sxthne	r6, r6
 8005f9a:	e7ef      	b.n	8005f7c <_printf_i+0xbc>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	6820      	ldr	r0, [r4, #0]
 8005fa0:	1d19      	adds	r1, r3, #4
 8005fa2:	6029      	str	r1, [r5, #0]
 8005fa4:	0601      	lsls	r1, r0, #24
 8005fa6:	d501      	bpl.n	8005fac <_printf_i+0xec>
 8005fa8:	681e      	ldr	r6, [r3, #0]
 8005faa:	e002      	b.n	8005fb2 <_printf_i+0xf2>
 8005fac:	0646      	lsls	r6, r0, #25
 8005fae:	d5fb      	bpl.n	8005fa8 <_printf_i+0xe8>
 8005fb0:	881e      	ldrh	r6, [r3, #0]
 8005fb2:	4854      	ldr	r0, [pc, #336]	; (8006104 <_printf_i+0x244>)
 8005fb4:	2f6f      	cmp	r7, #111	; 0x6f
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2308      	moveq	r3, #8
 8005fba:	230a      	movne	r3, #10
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fc2:	6865      	ldr	r5, [r4, #4]
 8005fc4:	60a5      	str	r5, [r4, #8]
 8005fc6:	2d00      	cmp	r5, #0
 8005fc8:	bfa2      	ittt	ge
 8005fca:	6821      	ldrge	r1, [r4, #0]
 8005fcc:	f021 0104 	bicge.w	r1, r1, #4
 8005fd0:	6021      	strge	r1, [r4, #0]
 8005fd2:	b90e      	cbnz	r6, 8005fd8 <_printf_i+0x118>
 8005fd4:	2d00      	cmp	r5, #0
 8005fd6:	d04d      	beq.n	8006074 <_printf_i+0x1b4>
 8005fd8:	4615      	mov	r5, r2
 8005fda:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fde:	fb03 6711 	mls	r7, r3, r1, r6
 8005fe2:	5dc7      	ldrb	r7, [r0, r7]
 8005fe4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fe8:	4637      	mov	r7, r6
 8005fea:	42bb      	cmp	r3, r7
 8005fec:	460e      	mov	r6, r1
 8005fee:	d9f4      	bls.n	8005fda <_printf_i+0x11a>
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d10b      	bne.n	800600c <_printf_i+0x14c>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	07de      	lsls	r6, r3, #31
 8005ff8:	d508      	bpl.n	800600c <_printf_i+0x14c>
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	6861      	ldr	r1, [r4, #4]
 8005ffe:	4299      	cmp	r1, r3
 8006000:	bfde      	ittt	le
 8006002:	2330      	movle	r3, #48	; 0x30
 8006004:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006008:	f105 35ff 	addle.w	r5, r5, #4294967295
 800600c:	1b52      	subs	r2, r2, r5
 800600e:	6122      	str	r2, [r4, #16]
 8006010:	f8cd a000 	str.w	sl, [sp]
 8006014:	464b      	mov	r3, r9
 8006016:	aa03      	add	r2, sp, #12
 8006018:	4621      	mov	r1, r4
 800601a:	4640      	mov	r0, r8
 800601c:	f7ff fee2 	bl	8005de4 <_printf_common>
 8006020:	3001      	adds	r0, #1
 8006022:	d14c      	bne.n	80060be <_printf_i+0x1fe>
 8006024:	f04f 30ff 	mov.w	r0, #4294967295
 8006028:	b004      	add	sp, #16
 800602a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602e:	4835      	ldr	r0, [pc, #212]	; (8006104 <_printf_i+0x244>)
 8006030:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006034:	6829      	ldr	r1, [r5, #0]
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	f851 6b04 	ldr.w	r6, [r1], #4
 800603c:	6029      	str	r1, [r5, #0]
 800603e:	061d      	lsls	r5, r3, #24
 8006040:	d514      	bpl.n	800606c <_printf_i+0x1ac>
 8006042:	07df      	lsls	r7, r3, #31
 8006044:	bf44      	itt	mi
 8006046:	f043 0320 	orrmi.w	r3, r3, #32
 800604a:	6023      	strmi	r3, [r4, #0]
 800604c:	b91e      	cbnz	r6, 8006056 <_printf_i+0x196>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	f023 0320 	bic.w	r3, r3, #32
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	2310      	movs	r3, #16
 8006058:	e7b0      	b.n	8005fbc <_printf_i+0xfc>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	f043 0320 	orr.w	r3, r3, #32
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	2378      	movs	r3, #120	; 0x78
 8006064:	4828      	ldr	r0, [pc, #160]	; (8006108 <_printf_i+0x248>)
 8006066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800606a:	e7e3      	b.n	8006034 <_printf_i+0x174>
 800606c:	0659      	lsls	r1, r3, #25
 800606e:	bf48      	it	mi
 8006070:	b2b6      	uxthmi	r6, r6
 8006072:	e7e6      	b.n	8006042 <_printf_i+0x182>
 8006074:	4615      	mov	r5, r2
 8006076:	e7bb      	b.n	8005ff0 <_printf_i+0x130>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	6826      	ldr	r6, [r4, #0]
 800607c:	6961      	ldr	r1, [r4, #20]
 800607e:	1d18      	adds	r0, r3, #4
 8006080:	6028      	str	r0, [r5, #0]
 8006082:	0635      	lsls	r5, r6, #24
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	d501      	bpl.n	800608c <_printf_i+0x1cc>
 8006088:	6019      	str	r1, [r3, #0]
 800608a:	e002      	b.n	8006092 <_printf_i+0x1d2>
 800608c:	0670      	lsls	r0, r6, #25
 800608e:	d5fb      	bpl.n	8006088 <_printf_i+0x1c8>
 8006090:	8019      	strh	r1, [r3, #0]
 8006092:	2300      	movs	r3, #0
 8006094:	6123      	str	r3, [r4, #16]
 8006096:	4615      	mov	r5, r2
 8006098:	e7ba      	b.n	8006010 <_printf_i+0x150>
 800609a:	682b      	ldr	r3, [r5, #0]
 800609c:	1d1a      	adds	r2, r3, #4
 800609e:	602a      	str	r2, [r5, #0]
 80060a0:	681d      	ldr	r5, [r3, #0]
 80060a2:	6862      	ldr	r2, [r4, #4]
 80060a4:	2100      	movs	r1, #0
 80060a6:	4628      	mov	r0, r5
 80060a8:	f7fa f89a 	bl	80001e0 <memchr>
 80060ac:	b108      	cbz	r0, 80060b2 <_printf_i+0x1f2>
 80060ae:	1b40      	subs	r0, r0, r5
 80060b0:	6060      	str	r0, [r4, #4]
 80060b2:	6863      	ldr	r3, [r4, #4]
 80060b4:	6123      	str	r3, [r4, #16]
 80060b6:	2300      	movs	r3, #0
 80060b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060bc:	e7a8      	b.n	8006010 <_printf_i+0x150>
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	462a      	mov	r2, r5
 80060c2:	4649      	mov	r1, r9
 80060c4:	4640      	mov	r0, r8
 80060c6:	47d0      	blx	sl
 80060c8:	3001      	adds	r0, #1
 80060ca:	d0ab      	beq.n	8006024 <_printf_i+0x164>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	079b      	lsls	r3, r3, #30
 80060d0:	d413      	bmi.n	80060fa <_printf_i+0x23a>
 80060d2:	68e0      	ldr	r0, [r4, #12]
 80060d4:	9b03      	ldr	r3, [sp, #12]
 80060d6:	4298      	cmp	r0, r3
 80060d8:	bfb8      	it	lt
 80060da:	4618      	movlt	r0, r3
 80060dc:	e7a4      	b.n	8006028 <_printf_i+0x168>
 80060de:	2301      	movs	r3, #1
 80060e0:	4632      	mov	r2, r6
 80060e2:	4649      	mov	r1, r9
 80060e4:	4640      	mov	r0, r8
 80060e6:	47d0      	blx	sl
 80060e8:	3001      	adds	r0, #1
 80060ea:	d09b      	beq.n	8006024 <_printf_i+0x164>
 80060ec:	3501      	adds	r5, #1
 80060ee:	68e3      	ldr	r3, [r4, #12]
 80060f0:	9903      	ldr	r1, [sp, #12]
 80060f2:	1a5b      	subs	r3, r3, r1
 80060f4:	42ab      	cmp	r3, r5
 80060f6:	dcf2      	bgt.n	80060de <_printf_i+0x21e>
 80060f8:	e7eb      	b.n	80060d2 <_printf_i+0x212>
 80060fa:	2500      	movs	r5, #0
 80060fc:	f104 0619 	add.w	r6, r4, #25
 8006100:	e7f5      	b.n	80060ee <_printf_i+0x22e>
 8006102:	bf00      	nop
 8006104:	0800643d 	.word	0x0800643d
 8006108:	0800644e 	.word	0x0800644e

0800610c <memmove>:
 800610c:	4288      	cmp	r0, r1
 800610e:	b510      	push	{r4, lr}
 8006110:	eb01 0402 	add.w	r4, r1, r2
 8006114:	d902      	bls.n	800611c <memmove+0x10>
 8006116:	4284      	cmp	r4, r0
 8006118:	4623      	mov	r3, r4
 800611a:	d807      	bhi.n	800612c <memmove+0x20>
 800611c:	1e43      	subs	r3, r0, #1
 800611e:	42a1      	cmp	r1, r4
 8006120:	d008      	beq.n	8006134 <memmove+0x28>
 8006122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006126:	f803 2f01 	strb.w	r2, [r3, #1]!
 800612a:	e7f8      	b.n	800611e <memmove+0x12>
 800612c:	4402      	add	r2, r0
 800612e:	4601      	mov	r1, r0
 8006130:	428a      	cmp	r2, r1
 8006132:	d100      	bne.n	8006136 <memmove+0x2a>
 8006134:	bd10      	pop	{r4, pc}
 8006136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800613a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800613e:	e7f7      	b.n	8006130 <memmove+0x24>

08006140 <_free_r>:
 8006140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006142:	2900      	cmp	r1, #0
 8006144:	d044      	beq.n	80061d0 <_free_r+0x90>
 8006146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800614a:	9001      	str	r0, [sp, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	f1a1 0404 	sub.w	r4, r1, #4
 8006152:	bfb8      	it	lt
 8006154:	18e4      	addlt	r4, r4, r3
 8006156:	f000 f913 	bl	8006380 <__malloc_lock>
 800615a:	4a1e      	ldr	r2, [pc, #120]	; (80061d4 <_free_r+0x94>)
 800615c:	9801      	ldr	r0, [sp, #4]
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	b933      	cbnz	r3, 8006170 <_free_r+0x30>
 8006162:	6063      	str	r3, [r4, #4]
 8006164:	6014      	str	r4, [r2, #0]
 8006166:	b003      	add	sp, #12
 8006168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800616c:	f000 b90e 	b.w	800638c <__malloc_unlock>
 8006170:	42a3      	cmp	r3, r4
 8006172:	d908      	bls.n	8006186 <_free_r+0x46>
 8006174:	6825      	ldr	r5, [r4, #0]
 8006176:	1961      	adds	r1, r4, r5
 8006178:	428b      	cmp	r3, r1
 800617a:	bf01      	itttt	eq
 800617c:	6819      	ldreq	r1, [r3, #0]
 800617e:	685b      	ldreq	r3, [r3, #4]
 8006180:	1949      	addeq	r1, r1, r5
 8006182:	6021      	streq	r1, [r4, #0]
 8006184:	e7ed      	b.n	8006162 <_free_r+0x22>
 8006186:	461a      	mov	r2, r3
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	b10b      	cbz	r3, 8006190 <_free_r+0x50>
 800618c:	42a3      	cmp	r3, r4
 800618e:	d9fa      	bls.n	8006186 <_free_r+0x46>
 8006190:	6811      	ldr	r1, [r2, #0]
 8006192:	1855      	adds	r5, r2, r1
 8006194:	42a5      	cmp	r5, r4
 8006196:	d10b      	bne.n	80061b0 <_free_r+0x70>
 8006198:	6824      	ldr	r4, [r4, #0]
 800619a:	4421      	add	r1, r4
 800619c:	1854      	adds	r4, r2, r1
 800619e:	42a3      	cmp	r3, r4
 80061a0:	6011      	str	r1, [r2, #0]
 80061a2:	d1e0      	bne.n	8006166 <_free_r+0x26>
 80061a4:	681c      	ldr	r4, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	6053      	str	r3, [r2, #4]
 80061aa:	4421      	add	r1, r4
 80061ac:	6011      	str	r1, [r2, #0]
 80061ae:	e7da      	b.n	8006166 <_free_r+0x26>
 80061b0:	d902      	bls.n	80061b8 <_free_r+0x78>
 80061b2:	230c      	movs	r3, #12
 80061b4:	6003      	str	r3, [r0, #0]
 80061b6:	e7d6      	b.n	8006166 <_free_r+0x26>
 80061b8:	6825      	ldr	r5, [r4, #0]
 80061ba:	1961      	adds	r1, r4, r5
 80061bc:	428b      	cmp	r3, r1
 80061be:	bf04      	itt	eq
 80061c0:	6819      	ldreq	r1, [r3, #0]
 80061c2:	685b      	ldreq	r3, [r3, #4]
 80061c4:	6063      	str	r3, [r4, #4]
 80061c6:	bf04      	itt	eq
 80061c8:	1949      	addeq	r1, r1, r5
 80061ca:	6021      	streq	r1, [r4, #0]
 80061cc:	6054      	str	r4, [r2, #4]
 80061ce:	e7ca      	b.n	8006166 <_free_r+0x26>
 80061d0:	b003      	add	sp, #12
 80061d2:	bd30      	pop	{r4, r5, pc}
 80061d4:	20004a70 	.word	0x20004a70

080061d8 <sbrk_aligned>:
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	4e0e      	ldr	r6, [pc, #56]	; (8006214 <sbrk_aligned+0x3c>)
 80061dc:	460c      	mov	r4, r1
 80061de:	6831      	ldr	r1, [r6, #0]
 80061e0:	4605      	mov	r5, r0
 80061e2:	b911      	cbnz	r1, 80061ea <sbrk_aligned+0x12>
 80061e4:	f000 f8bc 	bl	8006360 <_sbrk_r>
 80061e8:	6030      	str	r0, [r6, #0]
 80061ea:	4621      	mov	r1, r4
 80061ec:	4628      	mov	r0, r5
 80061ee:	f000 f8b7 	bl	8006360 <_sbrk_r>
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	d00a      	beq.n	800620c <sbrk_aligned+0x34>
 80061f6:	1cc4      	adds	r4, r0, #3
 80061f8:	f024 0403 	bic.w	r4, r4, #3
 80061fc:	42a0      	cmp	r0, r4
 80061fe:	d007      	beq.n	8006210 <sbrk_aligned+0x38>
 8006200:	1a21      	subs	r1, r4, r0
 8006202:	4628      	mov	r0, r5
 8006204:	f000 f8ac 	bl	8006360 <_sbrk_r>
 8006208:	3001      	adds	r0, #1
 800620a:	d101      	bne.n	8006210 <sbrk_aligned+0x38>
 800620c:	f04f 34ff 	mov.w	r4, #4294967295
 8006210:	4620      	mov	r0, r4
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	20004a74 	.word	0x20004a74

08006218 <_malloc_r>:
 8006218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800621c:	1ccd      	adds	r5, r1, #3
 800621e:	f025 0503 	bic.w	r5, r5, #3
 8006222:	3508      	adds	r5, #8
 8006224:	2d0c      	cmp	r5, #12
 8006226:	bf38      	it	cc
 8006228:	250c      	movcc	r5, #12
 800622a:	2d00      	cmp	r5, #0
 800622c:	4607      	mov	r7, r0
 800622e:	db01      	blt.n	8006234 <_malloc_r+0x1c>
 8006230:	42a9      	cmp	r1, r5
 8006232:	d905      	bls.n	8006240 <_malloc_r+0x28>
 8006234:	230c      	movs	r3, #12
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	2600      	movs	r6, #0
 800623a:	4630      	mov	r0, r6
 800623c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006240:	4e2e      	ldr	r6, [pc, #184]	; (80062fc <_malloc_r+0xe4>)
 8006242:	f000 f89d 	bl	8006380 <__malloc_lock>
 8006246:	6833      	ldr	r3, [r6, #0]
 8006248:	461c      	mov	r4, r3
 800624a:	bb34      	cbnz	r4, 800629a <_malloc_r+0x82>
 800624c:	4629      	mov	r1, r5
 800624e:	4638      	mov	r0, r7
 8006250:	f7ff ffc2 	bl	80061d8 <sbrk_aligned>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	4604      	mov	r4, r0
 8006258:	d14d      	bne.n	80062f6 <_malloc_r+0xde>
 800625a:	6834      	ldr	r4, [r6, #0]
 800625c:	4626      	mov	r6, r4
 800625e:	2e00      	cmp	r6, #0
 8006260:	d140      	bne.n	80062e4 <_malloc_r+0xcc>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	4631      	mov	r1, r6
 8006266:	4638      	mov	r0, r7
 8006268:	eb04 0803 	add.w	r8, r4, r3
 800626c:	f000 f878 	bl	8006360 <_sbrk_r>
 8006270:	4580      	cmp	r8, r0
 8006272:	d13a      	bne.n	80062ea <_malloc_r+0xd2>
 8006274:	6821      	ldr	r1, [r4, #0]
 8006276:	3503      	adds	r5, #3
 8006278:	1a6d      	subs	r5, r5, r1
 800627a:	f025 0503 	bic.w	r5, r5, #3
 800627e:	3508      	adds	r5, #8
 8006280:	2d0c      	cmp	r5, #12
 8006282:	bf38      	it	cc
 8006284:	250c      	movcc	r5, #12
 8006286:	4629      	mov	r1, r5
 8006288:	4638      	mov	r0, r7
 800628a:	f7ff ffa5 	bl	80061d8 <sbrk_aligned>
 800628e:	3001      	adds	r0, #1
 8006290:	d02b      	beq.n	80062ea <_malloc_r+0xd2>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	442b      	add	r3, r5
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	e00e      	b.n	80062b8 <_malloc_r+0xa0>
 800629a:	6822      	ldr	r2, [r4, #0]
 800629c:	1b52      	subs	r2, r2, r5
 800629e:	d41e      	bmi.n	80062de <_malloc_r+0xc6>
 80062a0:	2a0b      	cmp	r2, #11
 80062a2:	d916      	bls.n	80062d2 <_malloc_r+0xba>
 80062a4:	1961      	adds	r1, r4, r5
 80062a6:	42a3      	cmp	r3, r4
 80062a8:	6025      	str	r5, [r4, #0]
 80062aa:	bf18      	it	ne
 80062ac:	6059      	strne	r1, [r3, #4]
 80062ae:	6863      	ldr	r3, [r4, #4]
 80062b0:	bf08      	it	eq
 80062b2:	6031      	streq	r1, [r6, #0]
 80062b4:	5162      	str	r2, [r4, r5]
 80062b6:	604b      	str	r3, [r1, #4]
 80062b8:	4638      	mov	r0, r7
 80062ba:	f104 060b 	add.w	r6, r4, #11
 80062be:	f000 f865 	bl	800638c <__malloc_unlock>
 80062c2:	f026 0607 	bic.w	r6, r6, #7
 80062c6:	1d23      	adds	r3, r4, #4
 80062c8:	1af2      	subs	r2, r6, r3
 80062ca:	d0b6      	beq.n	800623a <_malloc_r+0x22>
 80062cc:	1b9b      	subs	r3, r3, r6
 80062ce:	50a3      	str	r3, [r4, r2]
 80062d0:	e7b3      	b.n	800623a <_malloc_r+0x22>
 80062d2:	6862      	ldr	r2, [r4, #4]
 80062d4:	42a3      	cmp	r3, r4
 80062d6:	bf0c      	ite	eq
 80062d8:	6032      	streq	r2, [r6, #0]
 80062da:	605a      	strne	r2, [r3, #4]
 80062dc:	e7ec      	b.n	80062b8 <_malloc_r+0xa0>
 80062de:	4623      	mov	r3, r4
 80062e0:	6864      	ldr	r4, [r4, #4]
 80062e2:	e7b2      	b.n	800624a <_malloc_r+0x32>
 80062e4:	4634      	mov	r4, r6
 80062e6:	6876      	ldr	r6, [r6, #4]
 80062e8:	e7b9      	b.n	800625e <_malloc_r+0x46>
 80062ea:	230c      	movs	r3, #12
 80062ec:	603b      	str	r3, [r7, #0]
 80062ee:	4638      	mov	r0, r7
 80062f0:	f000 f84c 	bl	800638c <__malloc_unlock>
 80062f4:	e7a1      	b.n	800623a <_malloc_r+0x22>
 80062f6:	6025      	str	r5, [r4, #0]
 80062f8:	e7de      	b.n	80062b8 <_malloc_r+0xa0>
 80062fa:	bf00      	nop
 80062fc:	20004a70 	.word	0x20004a70

08006300 <_realloc_r>:
 8006300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006304:	4680      	mov	r8, r0
 8006306:	4614      	mov	r4, r2
 8006308:	460e      	mov	r6, r1
 800630a:	b921      	cbnz	r1, 8006316 <_realloc_r+0x16>
 800630c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006310:	4611      	mov	r1, r2
 8006312:	f7ff bf81 	b.w	8006218 <_malloc_r>
 8006316:	b92a      	cbnz	r2, 8006324 <_realloc_r+0x24>
 8006318:	f7ff ff12 	bl	8006140 <_free_r>
 800631c:	4625      	mov	r5, r4
 800631e:	4628      	mov	r0, r5
 8006320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006324:	f000 f838 	bl	8006398 <_malloc_usable_size_r>
 8006328:	4284      	cmp	r4, r0
 800632a:	4607      	mov	r7, r0
 800632c:	d802      	bhi.n	8006334 <_realloc_r+0x34>
 800632e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006332:	d812      	bhi.n	800635a <_realloc_r+0x5a>
 8006334:	4621      	mov	r1, r4
 8006336:	4640      	mov	r0, r8
 8006338:	f7ff ff6e 	bl	8006218 <_malloc_r>
 800633c:	4605      	mov	r5, r0
 800633e:	2800      	cmp	r0, #0
 8006340:	d0ed      	beq.n	800631e <_realloc_r+0x1e>
 8006342:	42bc      	cmp	r4, r7
 8006344:	4622      	mov	r2, r4
 8006346:	4631      	mov	r1, r6
 8006348:	bf28      	it	cs
 800634a:	463a      	movcs	r2, r7
 800634c:	f7ff fbb8 	bl	8005ac0 <memcpy>
 8006350:	4631      	mov	r1, r6
 8006352:	4640      	mov	r0, r8
 8006354:	f7ff fef4 	bl	8006140 <_free_r>
 8006358:	e7e1      	b.n	800631e <_realloc_r+0x1e>
 800635a:	4635      	mov	r5, r6
 800635c:	e7df      	b.n	800631e <_realloc_r+0x1e>
	...

08006360 <_sbrk_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4d06      	ldr	r5, [pc, #24]	; (800637c <_sbrk_r+0x1c>)
 8006364:	2300      	movs	r3, #0
 8006366:	4604      	mov	r4, r0
 8006368:	4608      	mov	r0, r1
 800636a:	602b      	str	r3, [r5, #0]
 800636c:	f7fa fb94 	bl	8000a98 <_sbrk>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d102      	bne.n	800637a <_sbrk_r+0x1a>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	b103      	cbz	r3, 800637a <_sbrk_r+0x1a>
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	20004a78 	.word	0x20004a78

08006380 <__malloc_lock>:
 8006380:	4801      	ldr	r0, [pc, #4]	; (8006388 <__malloc_lock+0x8>)
 8006382:	f000 b811 	b.w	80063a8 <__retarget_lock_acquire_recursive>
 8006386:	bf00      	nop
 8006388:	20004a7c 	.word	0x20004a7c

0800638c <__malloc_unlock>:
 800638c:	4801      	ldr	r0, [pc, #4]	; (8006394 <__malloc_unlock+0x8>)
 800638e:	f000 b80c 	b.w	80063aa <__retarget_lock_release_recursive>
 8006392:	bf00      	nop
 8006394:	20004a7c 	.word	0x20004a7c

08006398 <_malloc_usable_size_r>:
 8006398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800639c:	1f18      	subs	r0, r3, #4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	bfbc      	itt	lt
 80063a2:	580b      	ldrlt	r3, [r1, r0]
 80063a4:	18c0      	addlt	r0, r0, r3
 80063a6:	4770      	bx	lr

080063a8 <__retarget_lock_acquire_recursive>:
 80063a8:	4770      	bx	lr

080063aa <__retarget_lock_release_recursive>:
 80063aa:	4770      	bx	lr

080063ac <_init>:
 80063ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ae:	bf00      	nop
 80063b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b2:	bc08      	pop	{r3}
 80063b4:	469e      	mov	lr, r3
 80063b6:	4770      	bx	lr

080063b8 <_fini>:
 80063b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ba:	bf00      	nop
 80063bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063be:	bc08      	pop	{r3}
 80063c0:	469e      	mov	lr, r3
 80063c2:	4770      	bx	lr
