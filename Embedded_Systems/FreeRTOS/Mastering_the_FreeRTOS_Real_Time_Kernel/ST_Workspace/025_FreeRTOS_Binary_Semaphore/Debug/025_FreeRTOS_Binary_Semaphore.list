
025_FreeRTOS_Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006220  08006220  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006220  08006220  00016220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006228  08006228  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800622c  0800622c  0001622c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ac4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b38  20004b38  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000194e9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003282  00000000  00000000  0003958d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0003c810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001318  00000000  00000000  0003dc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000037e3  00000000  00000000  0003ef58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ff3  00000000  00000000  0004273b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d511d  00000000  00000000  0005872e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d84b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005868  00000000  00000000  0012d89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006158 	.word	0x08006158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006158 	.word	0x08006158

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0)
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d114      	bne.n	800051e <HAL_GPIO_EXTI_Callback+0x3a>
  {
	  BaseType_t xHigherPriorityTaskWoken = pdTRUE;
 80004f4:	2301      	movs	r3, #1
 80004f6:	60fb      	str	r3, [r7, #12]

	  xSemaphoreGiveFromISR(xBinarySemaphore, &xHigherPriorityTaskWoken);
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_GPIO_EXTI_Callback+0x44>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f107 020c 	add.w	r2, r7, #12
 8000500:	4611      	mov	r1, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f003 f9b5 	bl	8003872 <xQueueGiveFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d007      	beq.n	800051e <HAL_GPIO_EXTI_Callback+0x3a>
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <HAL_GPIO_EXTI_Callback+0x48>)
 8000510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	f3bf 8f4f 	dsb	sy
 800051a:	f3bf 8f6f 	isb	sy
  }
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200000d4 	.word	0x200000d4
 800052c:	e000ed04 	.word	0xe000ed04

08000530 <vButtonHandlerTask>:
void vButtonHandlerTask(void *pvParameters)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	const char *msg = "Button was pressed!\r\n";
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <vButtonHandlerTask+0x34>)
 800053a:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <vButtonHandlerTask+0x38>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f04f 31ff 	mov.w	r1, #4294967295
 8000544:	4618      	mov	r0, r3
 8000546:	f003 fb01 	bl	8003b4c <xQueueSemaphoreTake>

		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800054a:	68f8      	ldr	r0, [r7, #12]
 800054c:	f7ff fe40 	bl	80001d0 <strlen>
 8000550:	4603      	mov	r3, r0
 8000552:	b29a      	uxth	r2, r3
 8000554:	f04f 33ff 	mov.w	r3, #4294967295
 8000558:	68f9      	ldr	r1, [r7, #12]
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <vButtonHandlerTask+0x3c>)
 800055c:	f001 fdf3 	bl	8002146 <HAL_UART_Transmit>
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8000560:	e7ec      	b.n	800053c <vButtonHandlerTask+0xc>
 8000562:	bf00      	nop
 8000564:	08006170 	.word	0x08006170
 8000568:	200000d4 	.word	0x200000d4
 800056c:	20000090 	.word	0x20000090

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fa9d 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f81f 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8b1 	bl	80006e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f885 	bl	8000690 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xBinarySemaphore = xSemaphoreCreateBinary();
 8000586:	2203      	movs	r2, #3
 8000588:	2100      	movs	r1, #0
 800058a:	2001      	movs	r0, #1
 800058c:	f002 ff7a 	bl	8003484 <xQueueGenericCreate>
 8000590:	4603      	mov	r3, r0
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <main+0x40>)
 8000594:	6013      	str	r3, [r2, #0]
  xTaskCreate(vButtonHandlerTask,"Handler", configMINIMAL_STACK_SIZE, NULL, 1,NULL);
 8000596:	2300      	movs	r3, #0
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2301      	movs	r3, #1
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	2280      	movs	r2, #128	; 0x80
 80005a2:	4904      	ldr	r1, [pc, #16]	; (80005b4 <main+0x44>)
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <main+0x48>)
 80005a6:	f003 fdc0 	bl	800412a <xTaskCreate>
  vTaskStartScheduler();
 80005aa:	f003 ff19 	bl	80043e0 <vTaskStartScheduler>

  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <main+0x3e>
 80005b0:	200000d4 	.word	0x200000d4
 80005b4:	08006188 	.word	0x08006188
 80005b8:	08000531 	.word	0x08000531

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fcfa 	bl	8005fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800062c:	2308      	movs	r3, #8
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000630:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000634:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063a:	2307      	movs	r3, #7
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fdba 	bl	80011bc <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800064e:	f000 f8c5 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2105      	movs	r1, #5
 8000670:	4618      	mov	r0, r3
 8000672:	f001 f81b 	bl	80016ac <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800067c:	f000 f8ae 	bl	80007dc <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	; 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_USART2_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c8:	f001 fcf0 	bl	80020ac <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 f883 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000090 	.word	0x20000090
 80006e0:	40004400 	.word	0x40004400

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <MX_GPIO_Init+0xc8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a2a      	ldr	r2, [pc, #168]	; (80007ac <MX_GPIO_Init+0xc8>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <MX_GPIO_Init+0xc8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <MX_GPIO_Init+0xc8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a23      	ldr	r2, [pc, #140]	; (80007ac <MX_GPIO_Init+0xc8>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_GPIO_Init+0xc8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_GPIO_Init+0xc8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <MX_GPIO_Init+0xc8>)
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_GPIO_Init+0xc8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0308 	and.w	r3, r3, #8
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000754:	4816      	ldr	r0, [pc, #88]	; (80007b0 <MX_GPIO_Init+0xcc>)
 8000756:	f000 fcff 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800075a:	2301      	movs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4619      	mov	r1, r3
 800076e:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_GPIO_Init+0xd0>)
 8000770:	f000 fb56 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000774:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	4808      	ldr	r0, [pc, #32]	; (80007b0 <MX_GPIO_Init+0xcc>)
 800078e:	f000 fb47 	bl	8000e20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2105      	movs	r1, #5
 8000796:	2006      	movs	r0, #6
 8000798:	f000 fa86 	bl	8000ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800079c:	2006      	movs	r0, #6
 800079e:	f000 fa9f 	bl	8000ce0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a2:	bf00      	nop
 80007a4:	3720      	adds	r7, #32
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020c00 	.word	0x40020c00
 80007b4:	40020000 	.word	0x40020000

080007b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d101      	bne.n	80007ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ca:	f000 f995 	bl	8000af8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40002000 	.word	0x40002000

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_MspInit+0x54>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a11      	ldr	r2, [pc, #68]	; (800083c <HAL_MspInit+0x54>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_MspInit+0x54>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <HAL_MspInit+0x54>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <HAL_MspInit+0x54>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_MspInit+0x54>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	210f      	movs	r1, #15
 800082a:	f06f 0001 	mvn.w	r0, #1
 800082e:	f000 fa3b 	bl	8000ca8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <HAL_UART_MspInit+0x94>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d133      	bne.n	80008ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <HAL_UART_MspInit+0x98>)
 800086c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089a:	230c      	movs	r3, #12
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <HAL_UART_MspInit+0x9c>)
 80008b6:	f000 fab3 	bl	8000e20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2105      	movs	r1, #5
 80008be:	2026      	movs	r0, #38	; 0x26
 80008c0:	f000 f9f2 	bl	8000ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c4:	2026      	movs	r0, #38	; 0x26
 80008c6:	f000 fa0b 	bl	8000ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000

080008e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08e      	sub	sp, #56	; 0x38
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <HAL_InitTick+0xe4>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	4a32      	ldr	r2, [pc, #200]	; (80009c4 <HAL_InitTick+0xe4>)
 80008fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <HAL_InitTick+0xe4>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090c:	f107 0210 	add.w	r2, r7, #16
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4611      	mov	r1, r2
 8000916:	4618      	mov	r0, r3
 8000918:	f001 f8e8 	bl	8001aec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800091c:	6a3b      	ldr	r3, [r7, #32]
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000922:	2b00      	cmp	r3, #0
 8000924:	d103      	bne.n	800092e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000926:	f001 f8b9 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 800092a:	6378      	str	r0, [r7, #52]	; 0x34
 800092c:	e004      	b.n	8000938 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800092e:	f001 f8b5 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 8000932:	4603      	mov	r3, r0
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800093a:	4a23      	ldr	r2, [pc, #140]	; (80009c8 <HAL_InitTick+0xe8>)
 800093c:	fba2 2303 	umull	r2, r3, r2, r3
 8000940:	0c9b      	lsrs	r3, r3, #18
 8000942:	3b01      	subs	r3, #1
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <HAL_InitTick+0xec>)
 8000948:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <HAL_InitTick+0xf0>)
 800094a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <HAL_InitTick+0xec>)
 800094e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000952:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000954:	4a1d      	ldr	r2, [pc, #116]	; (80009cc <HAL_InitTick+0xec>)
 8000956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000958:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <HAL_InitTick+0xec>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <HAL_InitTick+0xec>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_InitTick+0xec>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 800096c:	4817      	ldr	r0, [pc, #92]	; (80009cc <HAL_InitTick+0xec>)
 800096e:	f001 f8ef 	bl	8001b50 <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000978:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800097c:	2b00      	cmp	r3, #0
 800097e:	d11b      	bne.n	80009b8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000980:	4812      	ldr	r0, [pc, #72]	; (80009cc <HAL_InitTick+0xec>)
 8000982:	f001 f93f 	bl	8001c04 <HAL_TIM_Base_Start_IT>
 8000986:	4603      	mov	r3, r0
 8000988:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800098c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000990:	2b00      	cmp	r3, #0
 8000992:	d111      	bne.n	80009b8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000994:	202d      	movs	r0, #45	; 0x2d
 8000996:	f000 f9a3 	bl	8000ce0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d808      	bhi.n	80009b2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	202d      	movs	r0, #45	; 0x2d
 80009a6:	f000 f97f 	bl	8000ca8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <HAL_InitTick+0xf4>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	e002      	b.n	80009b8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3738      	adds	r7, #56	; 0x38
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	431bde83 	.word	0x431bde83
 80009cc:	200000d8 	.word	0x200000d8
 80009d0:	40002000 	.word	0x40002000
 80009d4:	20000004 	.word	0x20000004

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f000 fbbf 	bl	800118c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <USART2_IRQHandler+0x10>)
 8000a1a:	f001 fc27 	bl	800226c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000090 	.word	0x20000090

08000a28 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000a2e:	f001 f959 	bl	8001ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000d8 	.word	0x200000d8

08000a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a66:	490e      	ldr	r1, [pc, #56]	; (8000aa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a7c:	4c0b      	ldr	r4, [pc, #44]	; (8000aac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a8a:	f7ff ffd7 	bl	8000a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f005 fa65 	bl	8005f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a92:	f7ff fd6d 	bl	8000570 <main>
  bx  lr    
 8000a96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000aa4:	08006230 	.word	0x08006230
  ldr r2, =_sbss
 8000aa8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000aac:	20004b38 	.word	0x20004b38

08000ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <HAL_Init+0x40>)
 8000abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_Init+0x40>)
 8000aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_Init+0x40>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f8d8 	bl	8000c92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	f7ff fefc 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff fe7e 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023c00 	.word	0x40023c00

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000120 	.word	0x20000120

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000120 	.word	0x20000120

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <__NVIC_EnableIRQ+0x38>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ff4c 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cba:	f7ff ff61 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	68b9      	ldr	r1, [r7, #8]
 8000cc4:	6978      	ldr	r0, [r7, #20]
 8000cc6:	f7ff ffb1 	bl	8000c2c <NVIC_EncodePriority>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff80 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000cd8:	bf00      	nop
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff54 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d0a:	f7ff ff09 	bl	8000b20 <HAL_GetTick>
 8000d0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d008      	beq.n	8000d2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e052      	b.n	8000dd4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0216 	bic.w	r2, r2, #22
 8000d3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	695a      	ldr	r2, [r3, #20]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d103      	bne.n	8000d5e <HAL_DMA_Abort+0x62>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d007      	beq.n	8000d6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0208 	bic.w	r2, r2, #8
 8000d6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0201 	bic.w	r2, r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d7e:	e013      	b.n	8000da8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d80:	f7ff fece 	bl	8000b20 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	d90c      	bls.n	8000da8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2220      	movs	r2, #32
 8000d92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2203      	movs	r2, #3
 8000d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e015      	b.n	8000dd4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1e4      	bne.n	8000d80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dba:	223f      	movs	r2, #63	; 0x3f
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d004      	beq.n	8000dfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00c      	b.n	8000e14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2205      	movs	r2, #5
 8000dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0201 	bic.w	r2, r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e16b      	b.n	8001114 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 815a 	bne.w	800110e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d005      	beq.n	8000e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d130      	bne.n	8000ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	f003 0201 	and.w	r2, r3, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d017      	beq.n	8000f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d123      	bne.n	8000f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	220f      	movs	r2, #15
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	691a      	ldr	r2, [r3, #16]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	69b9      	ldr	r1, [r7, #24]
 8000f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0203 	and.w	r2, r3, #3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80b4 	beq.w	800110e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b60      	ldr	r3, [pc, #384]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a5f      	ldr	r2, [pc, #380]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc2:	4a5b      	ldr	r2, [pc, #364]	; (8001130 <HAL_GPIO_Init+0x310>)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a52      	ldr	r2, [pc, #328]	; (8001134 <HAL_GPIO_Init+0x314>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d02b      	beq.n	8001046 <HAL_GPIO_Init+0x226>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a51      	ldr	r2, [pc, #324]	; (8001138 <HAL_GPIO_Init+0x318>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d025      	beq.n	8001042 <HAL_GPIO_Init+0x222>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a50      	ldr	r2, [pc, #320]	; (800113c <HAL_GPIO_Init+0x31c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01f      	beq.n	800103e <HAL_GPIO_Init+0x21e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4f      	ldr	r2, [pc, #316]	; (8001140 <HAL_GPIO_Init+0x320>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x21a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <HAL_GPIO_Init+0x324>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x216>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4d      	ldr	r2, [pc, #308]	; (8001148 <HAL_GPIO_Init+0x328>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x212>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4c      	ldr	r2, [pc, #304]	; (800114c <HAL_GPIO_Init+0x32c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x20e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4b      	ldr	r2, [pc, #300]	; (8001150 <HAL_GPIO_Init+0x330>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x20a>
 8001026:	2307      	movs	r3, #7
 8001028:	e00e      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102a:	2308      	movs	r3, #8
 800102c:	e00c      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102e:	2306      	movs	r3, #6
 8001030:	e00a      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001032:	2305      	movs	r3, #5
 8001034:	e008      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001036:	2304      	movs	r3, #4
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103a:	2303      	movs	r3, #3
 800103c:	e004      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103e:	2302      	movs	r3, #2
 8001040:	e002      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001046:	2300      	movs	r3, #0
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	f002 0203 	and.w	r2, r2, #3
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4093      	lsls	r3, r2
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001058:	4935      	ldr	r1, [pc, #212]	; (8001130 <HAL_GPIO_Init+0x310>)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <HAL_GPIO_Init+0x334>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108a:	4a32      	ldr	r2, [pc, #200]	; (8001154 <HAL_GPIO_Init+0x334>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <HAL_GPIO_Init+0x334>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b4:	4a27      	ldr	r2, [pc, #156]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010de:	4a1d      	ldr	r2, [pc, #116]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <HAL_GPIO_Init+0x334>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3301      	adds	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	2b0f      	cmp	r3, #15
 8001118:	f67f ae90 	bls.w	8000e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40013800 	.word	0x40013800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40021c00 	.word	0x40021c00
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f99a 	bl	80004e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e267      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d075      	beq.n	80012c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011da:	4b88      	ldr	r3, [pc, #544]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d00c      	beq.n	8001200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e6:	4b85      	ldr	r3, [pc, #532]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d112      	bne.n	8001218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011f2:	4b82      	ldr	r3, [pc, #520]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011fe:	d10b      	bne.n	8001218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	4b7e      	ldr	r3, [pc, #504]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d05b      	beq.n	80012c4 <HAL_RCC_OscConfig+0x108>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d157      	bne.n	80012c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e242      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d106      	bne.n	8001230 <HAL_RCC_OscConfig+0x74>
 8001222:	4b76      	ldr	r3, [pc, #472]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a75      	ldr	r2, [pc, #468]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e01d      	b.n	800126c <HAL_RCC_OscConfig+0xb0>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001238:	d10c      	bne.n	8001254 <HAL_RCC_OscConfig+0x98>
 800123a:	4b70      	ldr	r3, [pc, #448]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a6f      	ldr	r2, [pc, #444]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 8001240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b6d      	ldr	r3, [pc, #436]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a6c      	ldr	r2, [pc, #432]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 800124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e00b      	b.n	800126c <HAL_RCC_OscConfig+0xb0>
 8001254:	4b69      	ldr	r3, [pc, #420]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a68      	ldr	r2, [pc, #416]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 800125a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b66      	ldr	r3, [pc, #408]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a65      	ldr	r2, [pc, #404]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 8001266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d013      	beq.n	800129c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fc54 	bl	8000b20 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fc50 	bl	8000b20 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e207      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	4b5b      	ldr	r3, [pc, #364]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0xc0>
 800129a:	e014      	b.n	80012c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fc40 	bl	8000b20 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fc3c 	bl	8000b20 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	; 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e1f3      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	4b51      	ldr	r3, [pc, #324]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0xe8>
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d063      	beq.n	800139a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012d2:	4b4a      	ldr	r3, [pc, #296]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00b      	beq.n	80012f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012de:	4b47      	ldr	r3, [pc, #284]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d11c      	bne.n	8001324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d116      	bne.n	8001324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d005      	beq.n	800130e <HAL_RCC_OscConfig+0x152>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d001      	beq.n	800130e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e1c7      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4937      	ldr	r1, [pc, #220]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001322:	e03a      	b.n	800139a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d020      	beq.n	800136e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800132c:	4b34      	ldr	r3, [pc, #208]	; (8001400 <HAL_RCC_OscConfig+0x244>)
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001332:	f7ff fbf5 	bl	8000b20 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133a:	f7ff fbf1 	bl	8000b20 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e1a8      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	4925      	ldr	r1, [pc, #148]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 8001368:	4313      	orrs	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
 800136c:	e015      	b.n	800139a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_RCC_OscConfig+0x244>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff fbd4 	bl	8000b20 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137c:	f7ff fbd0 	bl	8000b20 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e187      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d036      	beq.n	8001414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d016      	beq.n	80013dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_RCC_OscConfig+0x248>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b4:	f7ff fbb4 	bl	8000b20 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013bc:	f7ff fbb0 	bl	8000b20 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e167      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_RCC_OscConfig+0x240>)
 80013d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0x200>
 80013da:	e01b      	b.n	8001414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_RCC_OscConfig+0x248>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fb9d 	bl	8000b20 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e8:	e00e      	b.n	8001408 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ea:	f7ff fb99 	bl	8000b20 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d907      	bls.n	8001408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e150      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
 80013fc:	40023800 	.word	0x40023800
 8001400:	42470000 	.word	0x42470000
 8001404:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001408:	4b88      	ldr	r3, [pc, #544]	; (800162c <HAL_RCC_OscConfig+0x470>)
 800140a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1ea      	bne.n	80013ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 8097 	beq.w	8001550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001426:	4b81      	ldr	r3, [pc, #516]	; (800162c <HAL_RCC_OscConfig+0x470>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10f      	bne.n	8001452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b7d      	ldr	r3, [pc, #500]	; (800162c <HAL_RCC_OscConfig+0x470>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a7c      	ldr	r2, [pc, #496]	; (800162c <HAL_RCC_OscConfig+0x470>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b7a      	ldr	r3, [pc, #488]	; (800162c <HAL_RCC_OscConfig+0x470>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144e:	2301      	movs	r3, #1
 8001450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001452:	4b77      	ldr	r3, [pc, #476]	; (8001630 <HAL_RCC_OscConfig+0x474>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d118      	bne.n	8001490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145e:	4b74      	ldr	r3, [pc, #464]	; (8001630 <HAL_RCC_OscConfig+0x474>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a73      	ldr	r2, [pc, #460]	; (8001630 <HAL_RCC_OscConfig+0x474>)
 8001464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800146a:	f7ff fb59 	bl	8000b20 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001472:	f7ff fb55 	bl	8000b20 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e10c      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	4b6a      	ldr	r3, [pc, #424]	; (8001630 <HAL_RCC_OscConfig+0x474>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d106      	bne.n	80014a6 <HAL_RCC_OscConfig+0x2ea>
 8001498:	4b64      	ldr	r3, [pc, #400]	; (800162c <HAL_RCC_OscConfig+0x470>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149c:	4a63      	ldr	r2, [pc, #396]	; (800162c <HAL_RCC_OscConfig+0x470>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6713      	str	r3, [r2, #112]	; 0x70
 80014a4:	e01c      	b.n	80014e0 <HAL_RCC_OscConfig+0x324>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b05      	cmp	r3, #5
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x30c>
 80014ae:	4b5f      	ldr	r3, [pc, #380]	; (800162c <HAL_RCC_OscConfig+0x470>)
 80014b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b2:	4a5e      	ldr	r2, [pc, #376]	; (800162c <HAL_RCC_OscConfig+0x470>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ba:	4b5c      	ldr	r3, [pc, #368]	; (800162c <HAL_RCC_OscConfig+0x470>)
 80014bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014be:	4a5b      	ldr	r2, [pc, #364]	; (800162c <HAL_RCC_OscConfig+0x470>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6713      	str	r3, [r2, #112]	; 0x70
 80014c6:	e00b      	b.n	80014e0 <HAL_RCC_OscConfig+0x324>
 80014c8:	4b58      	ldr	r3, [pc, #352]	; (800162c <HAL_RCC_OscConfig+0x470>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	4a57      	ldr	r2, [pc, #348]	; (800162c <HAL_RCC_OscConfig+0x470>)
 80014ce:	f023 0301 	bic.w	r3, r3, #1
 80014d2:	6713      	str	r3, [r2, #112]	; 0x70
 80014d4:	4b55      	ldr	r3, [pc, #340]	; (800162c <HAL_RCC_OscConfig+0x470>)
 80014d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d8:	4a54      	ldr	r2, [pc, #336]	; (800162c <HAL_RCC_OscConfig+0x470>)
 80014da:	f023 0304 	bic.w	r3, r3, #4
 80014de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d015      	beq.n	8001514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e8:	f7ff fb1a 	bl	8000b20 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f0:	f7ff fb16 	bl	8000b20 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e0cb      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001506:	4b49      	ldr	r3, [pc, #292]	; (800162c <HAL_RCC_OscConfig+0x470>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0ee      	beq.n	80014f0 <HAL_RCC_OscConfig+0x334>
 8001512:	e014      	b.n	800153e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001514:	f7ff fb04 	bl	8000b20 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151a:	e00a      	b.n	8001532 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151c:	f7ff fb00 	bl	8000b20 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f241 3288 	movw	r2, #5000	; 0x1388
 800152a:	4293      	cmp	r3, r2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e0b5      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001532:	4b3e      	ldr	r3, [pc, #248]	; (800162c <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1ee      	bne.n	800151c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d105      	bne.n	8001550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001544:	4b39      	ldr	r3, [pc, #228]	; (800162c <HAL_RCC_OscConfig+0x470>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	4a38      	ldr	r2, [pc, #224]	; (800162c <HAL_RCC_OscConfig+0x470>)
 800154a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800154e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80a1 	beq.w	800169c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800155a:	4b34      	ldr	r3, [pc, #208]	; (800162c <HAL_RCC_OscConfig+0x470>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b08      	cmp	r3, #8
 8001564:	d05c      	beq.n	8001620 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d141      	bne.n	80015f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156e:	4b31      	ldr	r3, [pc, #196]	; (8001634 <HAL_RCC_OscConfig+0x478>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fad4 	bl	8000b20 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157c:	f7ff fad0 	bl	8000b20 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e087      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	4b27      	ldr	r3, [pc, #156]	; (800162c <HAL_RCC_OscConfig+0x470>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69da      	ldr	r2, [r3, #28]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	019b      	lsls	r3, r3, #6
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	085b      	lsrs	r3, r3, #1
 80015b2:	3b01      	subs	r3, #1
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	061b      	lsls	r3, r3, #24
 80015be:	491b      	ldr	r1, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x470>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_RCC_OscConfig+0x478>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff faa9 	bl	8000b20 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff faa5 	bl	8000b20 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e05c      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_RCC_OscConfig+0x470>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x416>
 80015f0:	e054      	b.n	800169c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_RCC_OscConfig+0x478>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fa92 	bl	8000b20 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff fa8e 	bl	8000b20 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e045      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_RCC_OscConfig+0x470>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x444>
 800161e:	e03d      	b.n	800169c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d107      	bne.n	8001638 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e038      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
 800162c:	40023800 	.word	0x40023800
 8001630:	40007000 	.word	0x40007000
 8001634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x4ec>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d028      	beq.n	8001698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001650:	429a      	cmp	r2, r3
 8001652:	d121      	bne.n	8001698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	429a      	cmp	r2, r3
 8001660:	d11a      	bne.n	8001698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001668:	4013      	ands	r3, r2
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800166e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001670:	4293      	cmp	r3, r2
 8001672:	d111      	bne.n	8001698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	085b      	lsrs	r3, r3, #1
 8001680:	3b01      	subs	r3, #1
 8001682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d107      	bne.n	8001698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800

080016ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0cc      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d90c      	bls.n	80016e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b65      	ldr	r3, [pc, #404]	; (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b63      	ldr	r3, [pc, #396]	; (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0b8      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001700:	4b59      	ldr	r3, [pc, #356]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4a58      	ldr	r2, [pc, #352]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800170a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001718:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a52      	ldr	r2, [pc, #328]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001724:	4b50      	ldr	r3, [pc, #320]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	494d      	ldr	r1, [pc, #308]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d044      	beq.n	80017cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d119      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e07f      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d003      	beq.n	800176a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001766:	2b03      	cmp	r3, #3
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	4b3f      	ldr	r3, [pc, #252]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d109      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e06f      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e067      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800178a:	4b37      	ldr	r3, [pc, #220]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f023 0203 	bic.w	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4934      	ldr	r1, [pc, #208]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	4313      	orrs	r3, r2
 800179a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800179c:	f7ff f9c0 	bl	8000b20 <HAL_GetTick>
 80017a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a4:	f7ff f9bc 	bl	8000b20 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e04f      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 020c 	and.w	r2, r3, #12
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d1eb      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d20c      	bcs.n	80017f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e032      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4916      	ldr	r1, [pc, #88]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	490e      	ldr	r1, [pc, #56]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001832:	f000 f821 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 8001836:	4602      	mov	r2, r0
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	490a      	ldr	r1, [pc, #40]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 8001844:	5ccb      	ldrb	r3, [r1, r3]
 8001846:	fa22 f303 	lsr.w	r3, r2, r3
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x1c8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff f844 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00
 8001868:	40023800 	.word	0x40023800
 800186c:	080061a8 	.word	0x080061a8
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800187c:	b094      	sub	sp, #80	; 0x50
 800187e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
 8001884:	2300      	movs	r3, #0
 8001886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001888:	2300      	movs	r3, #0
 800188a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001890:	4b79      	ldr	r3, [pc, #484]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d00d      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x40>
 800189c:	2b08      	cmp	r3, #8
 800189e:	f200 80e1 	bhi.w	8001a64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x34>
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d003      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018aa:	e0db      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ac:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x204>)
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018b0:	e0db      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018b2:	4b73      	ldr	r3, [pc, #460]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x208>)
 80018b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018b6:	e0d8      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b8:	4b6f      	ldr	r3, [pc, #444]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018c2:	4b6d      	ldr	r3, [pc, #436]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d063      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ce:	4b6a      	ldr	r3, [pc, #424]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	099b      	lsrs	r3, r3, #6
 80018d4:	2200      	movs	r2, #0
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80018d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
 80018e2:	2300      	movs	r3, #0
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
 80018e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018ea:	4622      	mov	r2, r4
 80018ec:	462b      	mov	r3, r5
 80018ee:	f04f 0000 	mov.w	r0, #0
 80018f2:	f04f 0100 	mov.w	r1, #0
 80018f6:	0159      	lsls	r1, r3, #5
 80018f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018fc:	0150      	lsls	r0, r2, #5
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4621      	mov	r1, r4
 8001904:	1a51      	subs	r1, r2, r1
 8001906:	6139      	str	r1, [r7, #16]
 8001908:	4629      	mov	r1, r5
 800190a:	eb63 0301 	sbc.w	r3, r3, r1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800191c:	4659      	mov	r1, fp
 800191e:	018b      	lsls	r3, r1, #6
 8001920:	4651      	mov	r1, sl
 8001922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001926:	4651      	mov	r1, sl
 8001928:	018a      	lsls	r2, r1, #6
 800192a:	4651      	mov	r1, sl
 800192c:	ebb2 0801 	subs.w	r8, r2, r1
 8001930:	4659      	mov	r1, fp
 8001932:	eb63 0901 	sbc.w	r9, r3, r1
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800194a:	4690      	mov	r8, r2
 800194c:	4699      	mov	r9, r3
 800194e:	4623      	mov	r3, r4
 8001950:	eb18 0303 	adds.w	r3, r8, r3
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	462b      	mov	r3, r5
 8001958:	eb49 0303 	adc.w	r3, r9, r3
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800196a:	4629      	mov	r1, r5
 800196c:	024b      	lsls	r3, r1, #9
 800196e:	4621      	mov	r1, r4
 8001970:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001974:	4621      	mov	r1, r4
 8001976:	024a      	lsls	r2, r1, #9
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800197e:	2200      	movs	r2, #0
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
 8001982:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001988:	f7fe fc2a 	bl	80001e0 <__aeabi_uldivmod>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4613      	mov	r3, r2
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001994:	e058      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	2200      	movs	r2, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	4611      	mov	r1, r2
 80019a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019a6:	623b      	str	r3, [r7, #32]
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
 80019ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019b0:	4642      	mov	r2, r8
 80019b2:	464b      	mov	r3, r9
 80019b4:	f04f 0000 	mov.w	r0, #0
 80019b8:	f04f 0100 	mov.w	r1, #0
 80019bc:	0159      	lsls	r1, r3, #5
 80019be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c2:	0150      	lsls	r0, r2, #5
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4641      	mov	r1, r8
 80019ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ce:	4649      	mov	r1, r9
 80019d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019e8:	ebb2 040a 	subs.w	r4, r2, sl
 80019ec:	eb63 050b 	sbc.w	r5, r3, fp
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	00eb      	lsls	r3, r5, #3
 80019fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019fe:	00e2      	lsls	r2, r4, #3
 8001a00:	4614      	mov	r4, r2
 8001a02:	461d      	mov	r5, r3
 8001a04:	4643      	mov	r3, r8
 8001a06:	18e3      	adds	r3, r4, r3
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	eb45 0303 	adc.w	r3, r5, r3
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a1e:	4629      	mov	r1, r5
 8001a20:	028b      	lsls	r3, r1, #10
 8001a22:	4621      	mov	r1, r4
 8001a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a28:	4621      	mov	r1, r4
 8001a2a:	028a      	lsls	r2, r1, #10
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a32:	2200      	movs	r2, #0
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	61fa      	str	r2, [r7, #28]
 8001a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a3c:	f7fe fbd0 	bl	80001e0 <__aeabi_uldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4613      	mov	r3, r2
 8001a46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	3301      	adds	r3, #1
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a62:	e002      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3750      	adds	r7, #80	; 0x50
 8001a70:	46bd      	mov	sp, r7
 8001a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	00f42400 	.word	0x00f42400
 8001a80:	007a1200 	.word	0x007a1200

08001a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000000 	.word	0x20000000

08001a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa0:	f7ff fff0 	bl	8001a84 <HAL_RCC_GetHCLKFreq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	0a9b      	lsrs	r3, r3, #10
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	4903      	ldr	r1, [pc, #12]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	080061b8 	.word	0x080061b8

08001ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ac8:	f7ff ffdc 	bl	8001a84 <HAL_RCC_GetHCLKFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	0b5b      	lsrs	r3, r3, #13
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4903      	ldr	r1, [pc, #12]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	080061b8 	.word	0x080061b8

08001aec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	220f      	movs	r2, #15
 8001afa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_RCC_GetClockConfig+0x5c>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0203 	and.w	r2, r3, #3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <HAL_RCC_GetClockConfig+0x5c>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_GetClockConfig+0x5c>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	08db      	lsrs	r3, r3, #3
 8001b26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <HAL_RCC_GetClockConfig+0x60>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0207 	and.w	r2, r3, #7
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	601a      	str	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40023c00 	.word	0x40023c00

08001b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e041      	b.n	8001be6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d106      	bne.n	8001b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f839 	bl	8001bee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f000 f9d8 	bl	8001f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d001      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e04e      	b.n	8001cba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d022      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c46:	d01d      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_TIM_Base_Start_IT+0xc8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d018      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d013      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00e      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d009      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_TIM_Base_Start_IT+0xd8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d004      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d111      	bne.n	8001ca8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d010      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0201 	orr.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca6:	e007      	b.n	8001cb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	40000400 	.word	0x40000400
 8001cd0:	40000800 	.word	0x40000800
 8001cd4:	40000c00 	.word	0x40000c00
 8001cd8:	40010400 	.word	0x40010400
 8001cdc:	40014000 	.word	0x40014000
 8001ce0:	40001800 	.word	0x40001800

08001ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d122      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d11b      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0202 	mvn.w	r2, #2
 8001d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8ee 	bl	8001f08 <HAL_TIM_IC_CaptureCallback>
 8001d2c:	e005      	b.n	8001d3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8e0 	bl	8001ef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8f1 	bl	8001f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d122      	bne.n	8001d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d11b      	bne.n	8001d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0204 	mvn.w	r2, #4
 8001d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f8c4 	bl	8001f08 <HAL_TIM_IC_CaptureCallback>
 8001d80:	e005      	b.n	8001d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8b6 	bl	8001ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f8c7 	bl	8001f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d122      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d11b      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0208 	mvn.w	r2, #8
 8001db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f89a 	bl	8001f08 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f88c 	bl	8001ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f89d 	bl	8001f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	2b10      	cmp	r3, #16
 8001df4:	d122      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b10      	cmp	r3, #16
 8001e02:	d11b      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0210 	mvn.w	r2, #16
 8001e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2208      	movs	r2, #8
 8001e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f870 	bl	8001f08 <HAL_TIM_IC_CaptureCallback>
 8001e28:	e005      	b.n	8001e36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f862 	bl	8001ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f873 	bl	8001f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d10e      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d107      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0201 	mvn.w	r2, #1
 8001e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7fe fca8 	bl	80007b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	2b80      	cmp	r3, #128	; 0x80
 8001e74:	d10e      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e80:	2b80      	cmp	r3, #128	; 0x80
 8001e82:	d107      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f902 	bl	8002098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9e:	2b40      	cmp	r3, #64	; 0x40
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eac:	2b40      	cmp	r3, #64	; 0x40
 8001eae:	d107      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f838 	bl	8001f30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	d10e      	bne.n	8001eec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d107      	bne.n	8001eec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0220 	mvn.w	r2, #32
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8cc 	bl	8002084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a40      	ldr	r2, [pc, #256]	; (8002058 <TIM_Base_SetConfig+0x114>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d013      	beq.n	8001f84 <TIM_Base_SetConfig+0x40>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f62:	d00f      	beq.n	8001f84 <TIM_Base_SetConfig+0x40>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3d      	ldr	r2, [pc, #244]	; (800205c <TIM_Base_SetConfig+0x118>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00b      	beq.n	8001f84 <TIM_Base_SetConfig+0x40>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a3c      	ldr	r2, [pc, #240]	; (8002060 <TIM_Base_SetConfig+0x11c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d007      	beq.n	8001f84 <TIM_Base_SetConfig+0x40>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3b      	ldr	r2, [pc, #236]	; (8002064 <TIM_Base_SetConfig+0x120>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d003      	beq.n	8001f84 <TIM_Base_SetConfig+0x40>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a3a      	ldr	r2, [pc, #232]	; (8002068 <TIM_Base_SetConfig+0x124>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d108      	bne.n	8001f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2f      	ldr	r2, [pc, #188]	; (8002058 <TIM_Base_SetConfig+0x114>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d02b      	beq.n	8001ff6 <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa4:	d027      	beq.n	8001ff6 <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2c      	ldr	r2, [pc, #176]	; (800205c <TIM_Base_SetConfig+0x118>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d023      	beq.n	8001ff6 <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2b      	ldr	r2, [pc, #172]	; (8002060 <TIM_Base_SetConfig+0x11c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01f      	beq.n	8001ff6 <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a2a      	ldr	r2, [pc, #168]	; (8002064 <TIM_Base_SetConfig+0x120>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01b      	beq.n	8001ff6 <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a29      	ldr	r2, [pc, #164]	; (8002068 <TIM_Base_SetConfig+0x124>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d017      	beq.n	8001ff6 <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a28      	ldr	r2, [pc, #160]	; (800206c <TIM_Base_SetConfig+0x128>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <TIM_Base_SetConfig+0x12c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00f      	beq.n	8001ff6 <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a26      	ldr	r2, [pc, #152]	; (8002074 <TIM_Base_SetConfig+0x130>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00b      	beq.n	8001ff6 <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a25      	ldr	r2, [pc, #148]	; (8002078 <TIM_Base_SetConfig+0x134>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a24      	ldr	r2, [pc, #144]	; (800207c <TIM_Base_SetConfig+0x138>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d003      	beq.n	8001ff6 <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a23      	ldr	r2, [pc, #140]	; (8002080 <TIM_Base_SetConfig+0x13c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d108      	bne.n	8002008 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <TIM_Base_SetConfig+0x114>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d003      	beq.n	800203c <TIM_Base_SetConfig+0xf8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a0c      	ldr	r2, [pc, #48]	; (8002068 <TIM_Base_SetConfig+0x124>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d103      	bne.n	8002044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	615a      	str	r2, [r3, #20]
}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40010000 	.word	0x40010000
 800205c:	40000400 	.word	0x40000400
 8002060:	40000800 	.word	0x40000800
 8002064:	40000c00 	.word	0x40000c00
 8002068:	40010400 	.word	0x40010400
 800206c:	40014000 	.word	0x40014000
 8002070:	40014400 	.word	0x40014400
 8002074:	40014800 	.word	0x40014800
 8002078:	40001800 	.word	0x40001800
 800207c:	40001c00 	.word	0x40001c00
 8002080:	40002000 	.word	0x40002000

08002084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e03f      	b.n	800213e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7fe fbb4 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2224      	movs	r2, #36	; 0x24
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fd7b 	bl	8002bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b08a      	sub	sp, #40	; 0x28
 800214a:	af02      	add	r7, sp, #8
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b20      	cmp	r3, #32
 8002164:	d17c      	bne.n	8002260 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_UART_Transmit+0x2c>
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e075      	b.n	8002262 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_UART_Transmit+0x3e>
 8002180:	2302      	movs	r3, #2
 8002182:	e06e      	b.n	8002262 <HAL_UART_Transmit+0x11c>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2221      	movs	r2, #33	; 0x21
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800219a:	f7fe fcc1 	bl	8000b20 <HAL_GetTick>
 800219e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	88fa      	ldrh	r2, [r7, #6]
 80021a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	88fa      	ldrh	r2, [r7, #6]
 80021aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b4:	d108      	bne.n	80021c8 <HAL_UART_Transmit+0x82>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d104      	bne.n	80021c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	e003      	b.n	80021d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021d8:	e02a      	b.n	8002230 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2200      	movs	r2, #0
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 faf9 	bl	80027dc <UART_WaitOnFlagUntilTimeout>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e036      	b.n	8002262 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10b      	bne.n	8002212 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002208:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	3302      	adds	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	e007      	b.n	8002222 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	3301      	adds	r3, #1
 8002220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002226:	b29b      	uxth	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1cf      	bne.n	80021da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2200      	movs	r2, #0
 8002242:	2140      	movs	r1, #64	; 0x40
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fac9 	bl	80027dc <UART_WaitOnFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e006      	b.n	8002262 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	e000      	b.n	8002262 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002260:	2302      	movs	r3, #2
  }
}
 8002262:	4618      	mov	r0, r3
 8002264:	3720      	adds	r7, #32
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0ba      	sub	sp, #232	; 0xe8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800229e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_UART_IRQHandler+0x66>
 80022be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fbd3 	bl	8002a76 <UART_Receive_IT>
      return;
 80022d0:	e256      	b.n	8002780 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80de 	beq.w	8002498 <HAL_UART_IRQHandler+0x22c>
 80022dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d106      	bne.n	80022f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80d1 	beq.w	8002498 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_UART_IRQHandler+0xae>
 8002302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800231a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_UART_IRQHandler+0xd2>
 8002326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f043 0202 	orr.w	r2, r3, #2
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800233e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_UART_IRQHandler+0xf6>
 800234a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f043 0204 	orr.w	r2, r3, #4
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d011      	beq.n	8002392 <HAL_UART_IRQHandler+0x126>
 800236e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800237a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f043 0208 	orr.w	r2, r3, #8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 81ed 	beq.w	8002776 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800239c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_UART_IRQHandler+0x14e>
 80023a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 fb5e 	bl	8002a76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <HAL_UART_IRQHandler+0x17a>
 80023de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d04f      	beq.n	8002486 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fa66 	bl	80028b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f6:	2b40      	cmp	r3, #64	; 0x40
 80023f8:	d141      	bne.n	800247e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3314      	adds	r3, #20
 8002400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002404:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002408:	e853 3f00 	ldrex	r3, [r3]
 800240c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3314      	adds	r3, #20
 8002422:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002426:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800242a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002432:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002436:	e841 2300 	strex	r3, r2, [r1]
 800243a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800243e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1d9      	bne.n	80023fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	2b00      	cmp	r3, #0
 800244c:	d013      	beq.n	8002476 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	4a7d      	ldr	r2, [pc, #500]	; (8002648 <HAL_UART_IRQHandler+0x3dc>)
 8002454:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fcbe 	bl	8000ddc <HAL_DMA_Abort_IT>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d016      	beq.n	8002494 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002470:	4610      	mov	r0, r2
 8002472:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002474:	e00e      	b.n	8002494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f99a 	bl	80027b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800247c:	e00a      	b.n	8002494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f996 	bl	80027b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002484:	e006      	b.n	8002494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f992 	bl	80027b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002492:	e170      	b.n	8002776 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002494:	bf00      	nop
    return;
 8002496:	e16e      	b.n	8002776 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	2b01      	cmp	r3, #1
 800249e:	f040 814a 	bne.w	8002736 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8143 	beq.w	8002736 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 813c 	beq.w	8002736 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024de:	2b40      	cmp	r3, #64	; 0x40
 80024e0:	f040 80b4 	bne.w	800264c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8140 	beq.w	800277a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002502:	429a      	cmp	r2, r3
 8002504:	f080 8139 	bcs.w	800277a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800250e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251a:	f000 8088 	beq.w	800262e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	330c      	adds	r3, #12
 8002524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002528:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800252c:	e853 3f00 	ldrex	r3, [r3]
 8002530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800253c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	330c      	adds	r3, #12
 8002546:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800254a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800254e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002552:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002556:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800255a:	e841 2300 	strex	r3, r2, [r1]
 800255e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1d9      	bne.n	800251e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3314      	adds	r3, #20
 8002570:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002574:	e853 3f00 	ldrex	r3, [r3]
 8002578:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800257a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3314      	adds	r3, #20
 800258a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800258e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002592:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002594:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002596:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800259a:	e841 2300 	strex	r3, r2, [r1]
 800259e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1e1      	bne.n	800256a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3314      	adds	r3, #20
 80025ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025b0:	e853 3f00 	ldrex	r3, [r3]
 80025b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3314      	adds	r3, #20
 80025c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025d2:	e841 2300 	strex	r3, r2, [r1]
 80025d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80025d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1e3      	bne.n	80025a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	330c      	adds	r3, #12
 80025f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f6:	e853 3f00 	ldrex	r3, [r3]
 80025fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80025fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025fe:	f023 0310 	bic.w	r3, r3, #16
 8002602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	330c      	adds	r3, #12
 800260c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002610:	65ba      	str	r2, [r7, #88]	; 0x58
 8002612:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002614:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002616:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002618:	e841 2300 	strex	r3, r2, [r1]
 800261c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800261e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e3      	bne.n	80025ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fb67 	bl	8000cfc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002636:	b29b      	uxth	r3, r3
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	b29b      	uxth	r3, r3
 800263c:	4619      	mov	r1, r3
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f8c0 	bl	80027c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002644:	e099      	b.n	800277a <HAL_UART_IRQHandler+0x50e>
 8002646:	bf00      	nop
 8002648:	0800297f 	.word	0x0800297f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002654:	b29b      	uxth	r3, r3
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 808b 	beq.w	800277e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8086 	beq.w	800277e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	330c      	adds	r3, #12
 8002678:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	e853 3f00 	ldrex	r3, [r3]
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	330c      	adds	r3, #12
 8002692:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002696:	647a      	str	r2, [r7, #68]	; 0x44
 8002698:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800269c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800269e:	e841 2300 	strex	r3, r2, [r1]
 80026a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1e3      	bne.n	8002672 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3314      	adds	r3, #20
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	e853 3f00 	ldrex	r3, [r3]
 80026b8:	623b      	str	r3, [r7, #32]
   return(result);
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	3314      	adds	r3, #20
 80026ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026ce:	633a      	str	r2, [r7, #48]	; 0x30
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d6:	e841 2300 	strex	r3, r2, [r1]
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e3      	bne.n	80026aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	e853 3f00 	ldrex	r3, [r3]
 80026fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0310 	bic.w	r3, r3, #16
 8002706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	330c      	adds	r3, #12
 8002710:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002714:	61fa      	str	r2, [r7, #28]
 8002716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002718:	69b9      	ldr	r1, [r7, #24]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	e841 2300 	strex	r3, r2, [r1]
 8002720:	617b      	str	r3, [r7, #20]
   return(result);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e3      	bne.n	80026f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800272c:	4619      	mov	r1, r3
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f848 	bl	80027c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002734:	e023      	b.n	800277e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800273a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_UART_IRQHandler+0x4ea>
 8002742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f929 	bl	80029a6 <UART_Transmit_IT>
    return;
 8002754:	e014      	b.n	8002780 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00e      	beq.n	8002780 <HAL_UART_IRQHandler+0x514>
 8002762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d008      	beq.n	8002780 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f969 	bl	8002a46 <UART_EndTransmit_IT>
    return;
 8002774:	e004      	b.n	8002780 <HAL_UART_IRQHandler+0x514>
    return;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <HAL_UART_IRQHandler+0x514>
      return;
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <HAL_UART_IRQHandler+0x514>
      return;
 800277e:	bf00      	nop
  }
}
 8002780:	37e8      	adds	r7, #232	; 0xe8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop

08002788 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b090      	sub	sp, #64	; 0x40
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ec:	e050      	b.n	8002890 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d04c      	beq.n	8002890 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <UART_WaitOnFlagUntilTimeout+0x30>
 80027fc:	f7fe f990 	bl	8000b20 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002808:	429a      	cmp	r2, r3
 800280a:	d241      	bcs.n	8002890 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	330c      	adds	r3, #12
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	e853 3f00 	ldrex	r3, [r3]
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	330c      	adds	r3, #12
 800282a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800282c:	637a      	str	r2, [r7, #52]	; 0x34
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002834:	e841 2300 	strex	r3, r2, [r1]
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1e5      	bne.n	800280c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3314      	adds	r3, #20
 8002846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	e853 3f00 	ldrex	r3, [r3]
 800284e:	613b      	str	r3, [r7, #16]
   return(result);
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	63bb      	str	r3, [r7, #56]	; 0x38
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3314      	adds	r3, #20
 800285e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002860:	623a      	str	r2, [r7, #32]
 8002862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002864:	69f9      	ldr	r1, [r7, #28]
 8002866:	6a3a      	ldr	r2, [r7, #32]
 8002868:	e841 2300 	strex	r3, r2, [r1]
 800286c:	61bb      	str	r3, [r7, #24]
   return(result);
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1e5      	bne.n	8002840 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e00f      	b.n	80028b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	4013      	ands	r3, r2
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d09f      	beq.n	80027ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3740      	adds	r7, #64	; 0x40
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b095      	sub	sp, #84	; 0x54
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ca:	e853 3f00 	ldrex	r3, [r3]
 80028ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028e0:	643a      	str	r2, [r7, #64]	; 0x40
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028e8:	e841 2300 	strex	r3, r2, [r1]
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e5      	bne.n	80028c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3314      	adds	r3, #20
 80028fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	e853 3f00 	ldrex	r3, [r3]
 8002902:	61fb      	str	r3, [r7, #28]
   return(result);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	64bb      	str	r3, [r7, #72]	; 0x48
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3314      	adds	r3, #20
 8002912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002914:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800291a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800291c:	e841 2300 	strex	r3, r2, [r1]
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e5      	bne.n	80028f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	2b01      	cmp	r3, #1
 800292e:	d119      	bne.n	8002964 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	e853 3f00 	ldrex	r3, [r3]
 800293e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f023 0310 	bic.w	r3, r3, #16
 8002946:	647b      	str	r3, [r7, #68]	; 0x44
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002950:	61ba      	str	r2, [r7, #24]
 8002952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002954:	6979      	ldr	r1, [r7, #20]
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	e841 2300 	strex	r3, r2, [r1]
 800295c:	613b      	str	r3, [r7, #16]
   return(result);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e5      	bne.n	8002930 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002972:	bf00      	nop
 8002974:	3754      	adds	r7, #84	; 0x54
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff ff09 	bl	80027b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b21      	cmp	r3, #33	; 0x21
 80029b8:	d13e      	bne.n	8002a38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	d114      	bne.n	80029ee <UART_Transmit_IT+0x48>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d110      	bne.n	80029ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	1c9a      	adds	r2, r3, #2
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	621a      	str	r2, [r3, #32]
 80029ec:	e008      	b.n	8002a00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	1c59      	adds	r1, r3, #1
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6211      	str	r1, [r2, #32]
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10f      	bne.n	8002a34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a38:	2302      	movs	r3, #2
  }
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff fe8e 	bl	8002788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b08c      	sub	sp, #48	; 0x30
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b22      	cmp	r3, #34	; 0x22
 8002a88:	f040 80ab 	bne.w	8002be2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a94:	d117      	bne.n	8002ac6 <UART_Receive_IT+0x50>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d113      	bne.n	8002ac6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	1c9a      	adds	r2, r3, #2
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ac4:	e026      	b.n	8002b14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad8:	d007      	beq.n	8002aea <UART_Receive_IT+0x74>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <UART_Receive_IT+0x82>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	e008      	b.n	8002b0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4619      	mov	r1, r3
 8002b22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d15a      	bne.n	8002bde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0220 	bic.w	r2, r2, #32
 8002b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d135      	bne.n	8002bd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	330c      	adds	r3, #12
 8002b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	e853 3f00 	ldrex	r3, [r3]
 8002b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f023 0310 	bic.w	r3, r3, #16
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	623a      	str	r2, [r7, #32]
 8002b90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b92:	69f9      	ldr	r1, [r7, #28]
 8002b94:	6a3a      	ldr	r2, [r7, #32]
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1e5      	bne.n	8002b6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d10a      	bne.n	8002bc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff fdf9 	bl	80027c4 <HAL_UARTEx_RxEventCallback>
 8002bd2:	e002      	b.n	8002bda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff fde1 	bl	800279c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e002      	b.n	8002be4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
  }
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3730      	adds	r7, #48	; 0x30
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf0:	b0c0      	sub	sp, #256	; 0x100
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	68d9      	ldr	r1, [r3, #12]
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	ea40 0301 	orr.w	r3, r0, r1
 8002c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c44:	f021 010c 	bic.w	r1, r1, #12
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c52:	430b      	orrs	r3, r1
 8002c54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c66:	6999      	ldr	r1, [r3, #24]
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	ea40 0301 	orr.w	r3, r0, r1
 8002c72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b8f      	ldr	r3, [pc, #572]	; (8002eb8 <UART_SetConfig+0x2cc>)
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d005      	beq.n	8002c8c <UART_SetConfig+0xa0>
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4b8d      	ldr	r3, [pc, #564]	; (8002ebc <UART_SetConfig+0x2d0>)
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d104      	bne.n	8002c96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c8c:	f7fe ff1a 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 8002c90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c94:	e003      	b.n	8002c9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c96:	f7fe ff01 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 8002c9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca8:	f040 810c 	bne.w	8002ec4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	1891      	adds	r1, r2, r2
 8002cc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cc6:	415b      	adcs	r3, r3
 8002cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cce:	4621      	mov	r1, r4
 8002cd0:	eb12 0801 	adds.w	r8, r2, r1
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	eb43 0901 	adc.w	r9, r3, r1
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cee:	4690      	mov	r8, r2
 8002cf0:	4699      	mov	r9, r3
 8002cf2:	4623      	mov	r3, r4
 8002cf4:	eb18 0303 	adds.w	r3, r8, r3
 8002cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cfc:	462b      	mov	r3, r5
 8002cfe:	eb49 0303 	adc.w	r3, r9, r3
 8002d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	18db      	adds	r3, r3, r3
 8002d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d20:	4613      	mov	r3, r2
 8002d22:	eb42 0303 	adc.w	r3, r2, r3
 8002d26:	657b      	str	r3, [r7, #84]	; 0x54
 8002d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d30:	f7fd fa56 	bl	80001e0 <__aeabi_uldivmod>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4b61      	ldr	r3, [pc, #388]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	011c      	lsls	r4, r3, #4
 8002d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d54:	4642      	mov	r2, r8
 8002d56:	464b      	mov	r3, r9
 8002d58:	1891      	adds	r1, r2, r2
 8002d5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d5c:	415b      	adcs	r3, r3
 8002d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d64:	4641      	mov	r1, r8
 8002d66:	eb12 0a01 	adds.w	sl, r2, r1
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	eb43 0b01 	adc.w	fp, r3, r1
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d84:	4692      	mov	sl, r2
 8002d86:	469b      	mov	fp, r3
 8002d88:	4643      	mov	r3, r8
 8002d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8002d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d92:	464b      	mov	r3, r9
 8002d94:	eb4b 0303 	adc.w	r3, fp, r3
 8002d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002da8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002dac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002db0:	460b      	mov	r3, r1
 8002db2:	18db      	adds	r3, r3, r3
 8002db4:	643b      	str	r3, [r7, #64]	; 0x40
 8002db6:	4613      	mov	r3, r2
 8002db8:	eb42 0303 	adc.w	r3, r2, r3
 8002dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002dc6:	f7fd fa0b 	bl	80001e0 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	2264      	movs	r2, #100	; 0x64
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	1acb      	subs	r3, r1, r3
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002de6:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002de8:	fba3 2302 	umull	r2, r3, r3, r2
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002df4:	441c      	add	r4, r3
 8002df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e08:	4642      	mov	r2, r8
 8002e0a:	464b      	mov	r3, r9
 8002e0c:	1891      	adds	r1, r2, r2
 8002e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e10:	415b      	adcs	r3, r3
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e18:	4641      	mov	r1, r8
 8002e1a:	1851      	adds	r1, r2, r1
 8002e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e1e:	4649      	mov	r1, r9
 8002e20:	414b      	adcs	r3, r1
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e30:	4659      	mov	r1, fp
 8002e32:	00cb      	lsls	r3, r1, #3
 8002e34:	4651      	mov	r1, sl
 8002e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	00ca      	lsls	r2, r1, #3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	4642      	mov	r2, r8
 8002e46:	189b      	adds	r3, r3, r2
 8002e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e4c:	464b      	mov	r3, r9
 8002e4e:	460a      	mov	r2, r1
 8002e50:	eb42 0303 	adc.w	r3, r2, r3
 8002e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	18db      	adds	r3, r3, r3
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e72:	4613      	mov	r3, r2
 8002e74:	eb42 0303 	adc.w	r3, r2, r3
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e82:	f7fd f9ad 	bl	80001e0 <__aeabi_uldivmod>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	2164      	movs	r1, #100	; 0x64
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	3332      	adds	r3, #50	; 0x32
 8002e9e:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	f003 0207 	and.w	r2, r3, #7
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4422      	add	r2, r4
 8002eb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002eb4:	e105      	b.n	80030c2 <UART_SetConfig+0x4d6>
 8002eb6:	bf00      	nop
 8002eb8:	40011000 	.word	0x40011000
 8002ebc:	40011400 	.word	0x40011400
 8002ec0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ece:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ed2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ed6:	4642      	mov	r2, r8
 8002ed8:	464b      	mov	r3, r9
 8002eda:	1891      	adds	r1, r2, r2
 8002edc:	6239      	str	r1, [r7, #32]
 8002ede:	415b      	adcs	r3, r3
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	1854      	adds	r4, r2, r1
 8002eea:	4649      	mov	r1, r9
 8002eec:	eb43 0501 	adc.w	r5, r3, r1
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	00eb      	lsls	r3, r5, #3
 8002efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002efe:	00e2      	lsls	r2, r4, #3
 8002f00:	4614      	mov	r4, r2
 8002f02:	461d      	mov	r5, r3
 8002f04:	4643      	mov	r3, r8
 8002f06:	18e3      	adds	r3, r4, r3
 8002f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f0c:	464b      	mov	r3, r9
 8002f0e:	eb45 0303 	adc.w	r3, r5, r3
 8002f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f32:	4629      	mov	r1, r5
 8002f34:	008b      	lsls	r3, r1, #2
 8002f36:	4621      	mov	r1, r4
 8002f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	008a      	lsls	r2, r1, #2
 8002f40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f44:	f7fd f94c 	bl	80001e0 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4b60      	ldr	r3, [pc, #384]	; (80030d0 <UART_SetConfig+0x4e4>)
 8002f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	011c      	lsls	r4, r3, #4
 8002f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	1891      	adds	r1, r2, r2
 8002f6e:	61b9      	str	r1, [r7, #24]
 8002f70:	415b      	adcs	r3, r3
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f78:	4641      	mov	r1, r8
 8002f7a:	1851      	adds	r1, r2, r1
 8002f7c:	6139      	str	r1, [r7, #16]
 8002f7e:	4649      	mov	r1, r9
 8002f80:	414b      	adcs	r3, r1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f90:	4659      	mov	r1, fp
 8002f92:	00cb      	lsls	r3, r1, #3
 8002f94:	4651      	mov	r1, sl
 8002f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	00ca      	lsls	r2, r1, #3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	189b      	adds	r3, r3, r2
 8002fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fac:	464b      	mov	r3, r9
 8002fae:	460a      	mov	r2, r1
 8002fb0:	eb42 0303 	adc.w	r3, r2, r3
 8002fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	008b      	lsls	r3, r1, #2
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fda:	4641      	mov	r1, r8
 8002fdc:	008a      	lsls	r2, r1, #2
 8002fde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fe2:	f7fd f8fd 	bl	80001e0 <__aeabi_uldivmod>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <UART_SetConfig+0x4e4>)
 8002fec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	2164      	movs	r1, #100	; 0x64
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	3332      	adds	r3, #50	; 0x32
 8002ffe:	4a34      	ldr	r2, [pc, #208]	; (80030d0 <UART_SetConfig+0x4e4>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800300a:	441c      	add	r4, r3
 800300c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003010:	2200      	movs	r2, #0
 8003012:	673b      	str	r3, [r7, #112]	; 0x70
 8003014:	677a      	str	r2, [r7, #116]	; 0x74
 8003016:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800301a:	4642      	mov	r2, r8
 800301c:	464b      	mov	r3, r9
 800301e:	1891      	adds	r1, r2, r2
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	415b      	adcs	r3, r3
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800302a:	4641      	mov	r1, r8
 800302c:	1851      	adds	r1, r2, r1
 800302e:	6039      	str	r1, [r7, #0]
 8003030:	4649      	mov	r1, r9
 8003032:	414b      	adcs	r3, r1
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003042:	4659      	mov	r1, fp
 8003044:	00cb      	lsls	r3, r1, #3
 8003046:	4651      	mov	r1, sl
 8003048:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800304c:	4651      	mov	r1, sl
 800304e:	00ca      	lsls	r2, r1, #3
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	4603      	mov	r3, r0
 8003056:	4642      	mov	r2, r8
 8003058:	189b      	adds	r3, r3, r2
 800305a:	66bb      	str	r3, [r7, #104]	; 0x68
 800305c:	464b      	mov	r3, r9
 800305e:	460a      	mov	r2, r1
 8003060:	eb42 0303 	adc.w	r3, r2, r3
 8003064:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	663b      	str	r3, [r7, #96]	; 0x60
 8003070:	667a      	str	r2, [r7, #100]	; 0x64
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800307e:	4649      	mov	r1, r9
 8003080:	008b      	lsls	r3, r1, #2
 8003082:	4641      	mov	r1, r8
 8003084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003088:	4641      	mov	r1, r8
 800308a:	008a      	lsls	r2, r1, #2
 800308c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003090:	f7fd f8a6 	bl	80001e0 <__aeabi_uldivmod>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <UART_SetConfig+0x4e4>)
 800309a:	fba3 1302 	umull	r1, r3, r3, r2
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2164      	movs	r1, #100	; 0x64
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	3332      	adds	r3, #50	; 0x32
 80030ac:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <UART_SetConfig+0x4e4>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	f003 020f 	and.w	r2, r3, #15
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4422      	add	r2, r4
 80030c0:	609a      	str	r2, [r3, #8]
}
 80030c2:	bf00      	nop
 80030c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030c8:	46bd      	mov	sp, r7
 80030ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ce:	bf00      	nop
 80030d0:	51eb851f 	.word	0x51eb851f

080030d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <SysTick_Handler+0x1c>)
 80030da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80030dc:	f001 fddc 	bl	8004c98 <xTaskGetSchedulerState>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d001      	beq.n	80030ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80030e6:	f002 fcbf 	bl	8005a68 <xPortSysTickHandler>
  }
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000e010 	.word	0xe000e010

080030f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a07      	ldr	r2, [pc, #28]	; (8003120 <vApplicationGetIdleTaskMemory+0x2c>)
 8003104:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4a06      	ldr	r2, [pc, #24]	; (8003124 <vApplicationGetIdleTaskMemory+0x30>)
 800310a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2280      	movs	r2, #128	; 0x80
 8003110:	601a      	str	r2, [r3, #0]
}
 8003112:	bf00      	nop
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000124 	.word	0x20000124
 8003124:	200001e0 	.word	0x200001e0

08003128 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a07      	ldr	r2, [pc, #28]	; (8003154 <vApplicationGetTimerTaskMemory+0x2c>)
 8003138:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4a06      	ldr	r2, [pc, #24]	; (8003158 <vApplicationGetTimerTaskMemory+0x30>)
 800313e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003146:	601a      	str	r2, [r3, #0]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	200003e0 	.word	0x200003e0
 8003158:	2000049c 	.word	0x2000049c

0800315c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f103 0208 	add.w	r2, r3, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f103 0208 	add.w	r2, r3, #8
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f103 0208 	add.w	r2, r3, #8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	601a      	str	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d103      	bne.n	800321e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e00c      	b.n	8003238 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3308      	adds	r3, #8
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e002      	b.n	800322c <vListInsert+0x2e>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	429a      	cmp	r2, r3
 8003236:	d2f6      	bcs.n	8003226 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	601a      	str	r2, [r3, #0]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6892      	ldr	r2, [r2, #8]
 8003286:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6852      	ldr	r2, [r2, #4]
 8003290:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	d103      	bne.n	80032a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	1e5a      	subs	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032ea:	bf00      	nop
 80032ec:	e7fe      	b.n	80032ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80032ee:	f002 fb29 	bl	8005944 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	68f9      	ldr	r1, [r7, #12]
 80032fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	441a      	add	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	3b01      	subs	r3, #1
 8003320:	68f9      	ldr	r1, [r7, #12]
 8003322:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	441a      	add	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	22ff      	movs	r2, #255	; 0xff
 8003332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	22ff      	movs	r2, #255	; 0xff
 800333a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d114      	bne.n	800336e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01a      	beq.n	8003382 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3310      	adds	r3, #16
 8003350:	4618      	mov	r0, r3
 8003352:	f001 fadf 	bl	8004914 <xTaskRemoveFromEventList>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d012      	beq.n	8003382 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <xQueueGenericReset+0xcc>)
 800335e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	e009      	b.n	8003382 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3310      	adds	r3, #16
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fef2 	bl	800315c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3324      	adds	r3, #36	; 0x24
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff feed 	bl	800315c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003382:	f002 fb0f 	bl	80059a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003386:	2301      	movs	r3, #1
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	e000ed04 	.word	0xe000ed04

08003394 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08e      	sub	sp, #56	; 0x38
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033ba:	bf00      	nop
 80033bc:	e7fe      	b.n	80033bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10a      	bne.n	80033da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <xQueueGenericCreateStatic+0x52>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <xQueueGenericCreateStatic+0x56>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <xQueueGenericCreateStatic+0x58>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	623b      	str	r3, [r7, #32]
}
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d102      	bne.n	8003412 <xQueueGenericCreateStatic+0x7e>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <xQueueGenericCreateStatic+0x82>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <xQueueGenericCreateStatic+0x84>
 8003416:	2300      	movs	r3, #0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	61fb      	str	r3, [r7, #28]
}
 800342e:	bf00      	nop
 8003430:	e7fe      	b.n	8003430 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003432:	2350      	movs	r3, #80	; 0x50
 8003434:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b50      	cmp	r3, #80	; 0x50
 800343a:	d00a      	beq.n	8003452 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	61bb      	str	r3, [r7, #24]
}
 800344e:	bf00      	nop
 8003450:	e7fe      	b.n	8003450 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003452:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003466:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	4613      	mov	r3, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f83f 	bl	80034f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800347c:	4618      	mov	r0, r3
 800347e:	3730      	adds	r7, #48	; 0x30
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	4613      	mov	r3, r2
 8003490:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <xQueueGenericCreate+0x2a>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	613b      	str	r3, [r7, #16]
}
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	3350      	adds	r3, #80	; 0x50
 80034bc:	4618      	mov	r0, r3
 80034be:	f002 fb63 	bl	8005b88 <pvPortMalloc>
 80034c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d011      	beq.n	80034ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	3350      	adds	r3, #80	; 0x50
 80034d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034dc:	79fa      	ldrb	r2, [r7, #7]
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f805 	bl	80034f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80034ee:	69bb      	ldr	r3, [r7, #24]
	}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d103      	bne.n	8003514 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e002      	b.n	800351a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003526:	2101      	movs	r1, #1
 8003528:	69b8      	ldr	r0, [r7, #24]
 800352a:	f7ff fecb 	bl	80032c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08e      	sub	sp, #56	; 0x38
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800354e:	2300      	movs	r3, #0
 8003550:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <xQueueGenericSend+0x32>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800356e:	bf00      	nop
 8003570:	e7fe      	b.n	8003570 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <xQueueGenericSend+0x40>
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <xQueueGenericSend+0x44>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <xQueueGenericSend+0x46>
 8003584:	2300      	movs	r3, #0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <xQueueGenericSend+0x60>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800359c:	bf00      	nop
 800359e:	e7fe      	b.n	800359e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d103      	bne.n	80035ae <xQueueGenericSend+0x6e>
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <xQueueGenericSend+0x72>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <xQueueGenericSend+0x74>
 80035b2:	2300      	movs	r3, #0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <xQueueGenericSend+0x8e>
	__asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	623b      	str	r3, [r7, #32]
}
 80035ca:	bf00      	nop
 80035cc:	e7fe      	b.n	80035cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035ce:	f001 fb63 	bl	8004c98 <xTaskGetSchedulerState>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <xQueueGenericSend+0x9e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <xQueueGenericSend+0xa2>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <xQueueGenericSend+0xa4>
 80035e2:	2300      	movs	r3, #0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <xQueueGenericSend+0xbe>
	__asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	61fb      	str	r3, [r7, #28]
}
 80035fa:	bf00      	nop
 80035fc:	e7fe      	b.n	80035fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035fe:	f002 f9a1 	bl	8005944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <xQueueGenericSend+0xd4>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d129      	bne.n	8003668 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800361a:	f000 fbbb 	bl	8003d94 <prvCopyDataToQueue>
 800361e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	2b00      	cmp	r3, #0
 8003626:	d010      	beq.n	800364a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	3324      	adds	r3, #36	; 0x24
 800362c:	4618      	mov	r0, r3
 800362e:	f001 f971 	bl	8004914 <xTaskRemoveFromEventList>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003638:	4b3f      	ldr	r3, [pc, #252]	; (8003738 <xQueueGenericSend+0x1f8>)
 800363a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	e00a      	b.n	8003660 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003650:	4b39      	ldr	r3, [pc, #228]	; (8003738 <xQueueGenericSend+0x1f8>)
 8003652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003660:	f002 f9a0 	bl	80059a4 <vPortExitCritical>
				return pdPASS;
 8003664:	2301      	movs	r3, #1
 8003666:	e063      	b.n	8003730 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d103      	bne.n	8003676 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800366e:	f002 f999 	bl	80059a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003672:	2300      	movs	r3, #0
 8003674:	e05c      	b.n	8003730 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800367c:	f107 0314 	add.w	r3, r7, #20
 8003680:	4618      	mov	r0, r3
 8003682:	f001 f9ab 	bl	80049dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003686:	2301      	movs	r3, #1
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800368a:	f002 f98b 	bl	80059a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800368e:	f000 ff17 	bl	80044c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003692:	f002 f957 	bl	8005944 <vPortEnterCritical>
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800369c:	b25b      	sxtb	r3, r3
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d103      	bne.n	80036ac <xQueueGenericSend+0x16c>
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036b2:	b25b      	sxtb	r3, r3
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d103      	bne.n	80036c2 <xQueueGenericSend+0x182>
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036c2:	f002 f96f 	bl	80059a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036c6:	1d3a      	adds	r2, r7, #4
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 f99a 	bl	8004a08 <xTaskCheckForTimeOut>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d124      	bne.n	8003724 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036dc:	f000 fc52 	bl	8003f84 <prvIsQueueFull>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d018      	beq.n	8003718 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80036e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e8:	3310      	adds	r3, #16
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 f8c0 	bl	8004874 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80036f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036f6:	f000 fbdd 	bl	8003eb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80036fa:	f000 feef 	bl	80044dc <xTaskResumeAll>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	f47f af7c 	bne.w	80035fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003706:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <xQueueGenericSend+0x1f8>)
 8003708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	e772      	b.n	80035fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800371a:	f000 fbcb 	bl	8003eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800371e:	f000 fedd 	bl	80044dc <xTaskResumeAll>
 8003722:	e76c      	b.n	80035fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003726:	f000 fbc5 	bl	8003eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800372a:	f000 fed7 	bl	80044dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800372e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003730:	4618      	mov	r0, r3
 8003732:	3738      	adds	r7, #56	; 0x38
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	e000ed04 	.word	0xe000ed04

0800373c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b090      	sub	sp, #64	; 0x40
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003766:	bf00      	nop
 8003768:	e7fe      	b.n	8003768 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d103      	bne.n	8003778 <xQueueGenericSendFromISR+0x3c>
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <xQueueGenericSendFromISR+0x40>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <xQueueGenericSendFromISR+0x42>
 800377c:	2300      	movs	r3, #0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d103      	bne.n	80037a6 <xQueueGenericSendFromISR+0x6a>
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <xQueueGenericSendFromISR+0x6e>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <xQueueGenericSendFromISR+0x70>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	623b      	str	r3, [r7, #32]
}
 80037c2:	bf00      	nop
 80037c4:	e7fe      	b.n	80037c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037c6:	f002 f99f 	bl	8005b08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80037ca:	f3ef 8211 	mrs	r2, BASEPRI
 80037ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	61fa      	str	r2, [r7, #28]
 80037e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80037e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <xQueueGenericSendFromISR+0xbc>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d12f      	bne.n	8003858 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80037f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800380e:	f000 fac1 	bl	8003d94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003812:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d112      	bne.n	8003842 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	2b00      	cmp	r3, #0
 8003822:	d016      	beq.n	8003852 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003826:	3324      	adds	r3, #36	; 0x24
 8003828:	4618      	mov	r0, r3
 800382a:	f001 f873 	bl	8004914 <xTaskRemoveFromEventList>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00e      	beq.n	8003852 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00b      	beq.n	8003852 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e007      	b.n	8003852 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003842:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003846:	3301      	adds	r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	b25a      	sxtb	r2, r3
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003852:	2301      	movs	r3, #1
 8003854:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003856:	e001      	b.n	800385c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003858:	2300      	movs	r3, #0
 800385a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800385c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003866:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800386a:	4618      	mov	r0, r3
 800386c:	3740      	adds	r7, #64	; 0x40
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b08e      	sub	sp, #56	; 0x38
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	623b      	str	r3, [r7, #32]
}
 8003898:	bf00      	nop
 800389a:	e7fe      	b.n	800389a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <xQueueGiveFromISR+0x48>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	61fb      	str	r3, [r7, #28]
}
 80038b6:	bf00      	nop
 80038b8:	e7fe      	b.n	80038b8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <xQueueGiveFromISR+0x58>
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <xQueueGiveFromISR+0x5c>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <xQueueGiveFromISR+0x5e>
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <xQueueGiveFromISR+0x78>
	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	61bb      	str	r3, [r7, #24]
}
 80038e6:	bf00      	nop
 80038e8:	e7fe      	b.n	80038e8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038ea:	f002 f90d 	bl	8005b08 <vPortValidateInterruptPriority>
	__asm volatile
 80038ee:	f3ef 8211 	mrs	r2, BASEPRI
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	617a      	str	r2, [r7, #20]
 8003904:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003906:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003916:	429a      	cmp	r2, r3
 8003918:	d22b      	bcs.n	8003972 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800391a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800392c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d112      	bne.n	800395c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	2b00      	cmp	r3, #0
 800393c:	d016      	beq.n	800396c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	3324      	adds	r3, #36	; 0x24
 8003942:	4618      	mov	r0, r3
 8003944:	f000 ffe6 	bl	8004914 <xTaskRemoveFromEventList>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00e      	beq.n	800396c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2201      	movs	r2, #1
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	e007      	b.n	800396c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800395c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003960:	3301      	adds	r3, #1
 8003962:	b2db      	uxtb	r3, r3
 8003964:	b25a      	sxtb	r2, r3
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800396c:	2301      	movs	r3, #1
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
 8003970:	e001      	b.n	8003976 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003972:	2300      	movs	r3, #0
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f383 8811 	msr	BASEPRI, r3
}
 8003980:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003984:	4618      	mov	r0, r3
 8003986:	3738      	adds	r7, #56	; 0x38
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08c      	sub	sp, #48	; 0x30
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003998:	2300      	movs	r3, #0
 800399a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <xQueueReceive+0x30>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	623b      	str	r3, [r7, #32]
}
 80039b8:	bf00      	nop
 80039ba:	e7fe      	b.n	80039ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <xQueueReceive+0x3e>
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <xQueueReceive+0x42>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <xQueueReceive+0x44>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <xQueueReceive+0x5e>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	61fb      	str	r3, [r7, #28]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039ea:	f001 f955 	bl	8004c98 <xTaskGetSchedulerState>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d102      	bne.n	80039fa <xQueueReceive+0x6e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <xQueueReceive+0x72>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <xQueueReceive+0x74>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <xQueueReceive+0x8e>
	__asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	61bb      	str	r3, [r7, #24]
}
 8003a16:	bf00      	nop
 8003a18:	e7fe      	b.n	8003a18 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a1a:	f001 ff93 	bl	8005944 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d01f      	beq.n	8003a6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a2e:	f000 fa1b 	bl	8003e68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	1e5a      	subs	r2, r3, #1
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00f      	beq.n	8003a62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	3310      	adds	r3, #16
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 ff64 	bl	8004914 <xTaskRemoveFromEventList>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a52:	4b3d      	ldr	r3, [pc, #244]	; (8003b48 <xQueueReceive+0x1bc>)
 8003a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a62:	f001 ff9f 	bl	80059a4 <vPortExitCritical>
				return pdPASS;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e069      	b.n	8003b3e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d103      	bne.n	8003a78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a70:	f001 ff98 	bl	80059a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a74:	2300      	movs	r3, #0
 8003a76:	e062      	b.n	8003b3e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a7e:	f107 0310 	add.w	r3, r7, #16
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 ffaa 	bl	80049dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a8c:	f001 ff8a 	bl	80059a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a90:	f000 fd16 	bl	80044c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a94:	f001 ff56 	bl	8005944 <vPortEnterCritical>
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a9e:	b25b      	sxtb	r3, r3
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d103      	bne.n	8003aae <xQueueReceive+0x122>
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ab4:	b25b      	sxtb	r3, r3
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d103      	bne.n	8003ac4 <xQueueReceive+0x138>
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ac4:	f001 ff6e 	bl	80059a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ac8:	1d3a      	adds	r2, r7, #4
 8003aca:	f107 0310 	add.w	r3, r7, #16
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 ff99 	bl	8004a08 <xTaskCheckForTimeOut>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d123      	bne.n	8003b24 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ade:	f000 fa3b 	bl	8003f58 <prvIsQueueEmpty>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d017      	beq.n	8003b18 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	3324      	adds	r3, #36	; 0x24
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 febf 	bl	8004874 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003af8:	f000 f9dc 	bl	8003eb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003afc:	f000 fcee 	bl	80044dc <xTaskResumeAll>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d189      	bne.n	8003a1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b06:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <xQueueReceive+0x1bc>)
 8003b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	e780      	b.n	8003a1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b1a:	f000 f9cb 	bl	8003eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b1e:	f000 fcdd 	bl	80044dc <xTaskResumeAll>
 8003b22:	e77a      	b.n	8003a1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b26:	f000 f9c5 	bl	8003eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b2a:	f000 fcd7 	bl	80044dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b30:	f000 fa12 	bl	8003f58 <prvIsQueueEmpty>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f43f af6f 	beq.w	8003a1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3730      	adds	r7, #48	; 0x30
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08e      	sub	sp, #56	; 0x38
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	623b      	str	r3, [r7, #32]
}
 8003b7a:	bf00      	nop
 8003b7c:	e7fe      	b.n	8003b7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	61fb      	str	r3, [r7, #28]
}
 8003b98:	bf00      	nop
 8003b9a:	e7fe      	b.n	8003b9a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b9c:	f001 f87c 	bl	8004c98 <xTaskGetSchedulerState>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <xQueueSemaphoreTake+0x60>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <xQueueSemaphoreTake+0x64>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <xQueueSemaphoreTake+0x66>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	61bb      	str	r3, [r7, #24]
}
 8003bc8:	bf00      	nop
 8003bca:	e7fe      	b.n	8003bca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bcc:	f001 feba 	bl	8005944 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d024      	beq.n	8003c26 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	1e5a      	subs	r2, r3, #1
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003bec:	f001 f9ca 	bl	8004f84 <pvTaskIncrementMutexHeldCount>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00f      	beq.n	8003c1e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c00:	3310      	adds	r3, #16
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fe86 	bl	8004914 <xTaskRemoveFromEventList>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c0e:	4b54      	ldr	r3, [pc, #336]	; (8003d60 <xQueueSemaphoreTake+0x214>)
 8003c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c1e:	f001 fec1 	bl	80059a4 <vPortExitCritical>
				return pdPASS;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e097      	b.n	8003d56 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d111      	bne.n	8003c50 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	617b      	str	r3, [r7, #20]
}
 8003c44:	bf00      	nop
 8003c46:	e7fe      	b.n	8003c46 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003c48:	f001 feac 	bl	80059a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e082      	b.n	8003d56 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c56:	f107 030c 	add.w	r3, r7, #12
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 febe 	bl	80049dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c64:	f001 fe9e 	bl	80059a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c68:	f000 fc2a 	bl	80044c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c6c:	f001 fe6a 	bl	8005944 <vPortEnterCritical>
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c76:	b25b      	sxtb	r3, r3
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d103      	bne.n	8003c86 <xQueueSemaphoreTake+0x13a>
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c8c:	b25b      	sxtb	r3, r3
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c92:	d103      	bne.n	8003c9c <xQueueSemaphoreTake+0x150>
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c9c:	f001 fe82 	bl	80059a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ca0:	463a      	mov	r2, r7
 8003ca2:	f107 030c 	add.w	r3, r7, #12
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fead 	bl	8004a08 <xTaskCheckForTimeOut>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d132      	bne.n	8003d1a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cb6:	f000 f94f 	bl	8003f58 <prvIsQueueEmpty>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d026      	beq.n	8003d0e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003cc8:	f001 fe3c 	bl	8005944 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 ffff 	bl	8004cd4 <xTaskPriorityInherit>
 8003cd6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003cd8:	f001 fe64 	bl	80059a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	3324      	adds	r3, #36	; 0x24
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fdc5 	bl	8004874 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cec:	f000 f8e2 	bl	8003eb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cf0:	f000 fbf4 	bl	80044dc <xTaskResumeAll>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f47f af68 	bne.w	8003bcc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003cfc:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <xQueueSemaphoreTake+0x214>)
 8003cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	e75e      	b.n	8003bcc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003d0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d10:	f000 f8d0 	bl	8003eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d14:	f000 fbe2 	bl	80044dc <xTaskResumeAll>
 8003d18:	e758      	b.n	8003bcc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003d1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d1c:	f000 f8ca 	bl	8003eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d20:	f000 fbdc 	bl	80044dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d26:	f000 f917 	bl	8003f58 <prvIsQueueEmpty>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f43f af4d 	beq.w	8003bcc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00d      	beq.n	8003d54 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003d38:	f001 fe04 	bl	8005944 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d3e:	f000 f811 	bl	8003d64 <prvGetDisinheritPriorityAfterTimeout>
 8003d42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 f898 	bl	8004e80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003d50:	f001 fe28 	bl	80059a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3738      	adds	r7, #56	; 0x38
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d006      	beq.n	8003d82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e001      	b.n	8003d86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003d86:	68fb      	ldr	r3, [r7, #12]
	}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10d      	bne.n	8003dce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d14d      	bne.n	8003e56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fff0 	bl	8004da4 <xTaskPriorityDisinherit>
 8003dc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	e043      	b.n	8003e56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d119      	bne.n	8003e08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6858      	ldr	r0, [r3, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	461a      	mov	r2, r3
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	f002 f8e2 	bl	8005fa8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	441a      	add	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d32b      	bcc.n	8003e56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	e026      	b.n	8003e56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	68d8      	ldr	r0, [r3, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	461a      	mov	r2, r3
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	f002 f8c8 	bl	8005fa8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	425b      	negs	r3, r3
 8003e22:	441a      	add	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d207      	bcs.n	8003e44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	425b      	negs	r3, r3
 8003e3e:	441a      	add	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d105      	bne.n	8003e56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e5e:	697b      	ldr	r3, [r7, #20]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d018      	beq.n	8003eac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	441a      	add	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d303      	bcc.n	8003e9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68d9      	ldr	r1, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6838      	ldr	r0, [r7, #0]
 8003ea8:	f002 f87e 	bl	8005fa8 <memcpy>
	}
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ebc:	f001 fd42 	bl	8005944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ec6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ec8:	e011      	b.n	8003eee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d012      	beq.n	8003ef8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3324      	adds	r3, #36	; 0x24
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fd1c 	bl	8004914 <xTaskRemoveFromEventList>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ee2:	f000 fdf3 	bl	8004acc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	dce9      	bgt.n	8003eca <prvUnlockQueue+0x16>
 8003ef6:	e000      	b.n	8003efa <prvUnlockQueue+0x46>
					break;
 8003ef8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	22ff      	movs	r2, #255	; 0xff
 8003efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f02:	f001 fd4f 	bl	80059a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f06:	f001 fd1d 	bl	8005944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f12:	e011      	b.n	8003f38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d012      	beq.n	8003f42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3310      	adds	r3, #16
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fcf7 	bl	8004914 <xTaskRemoveFromEventList>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f2c:	f000 fdce 	bl	8004acc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f30:	7bbb      	ldrb	r3, [r7, #14]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	dce9      	bgt.n	8003f14 <prvUnlockQueue+0x60>
 8003f40:	e000      	b.n	8003f44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	22ff      	movs	r2, #255	; 0xff
 8003f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f4c:	f001 fd2a 	bl	80059a4 <vPortExitCritical>
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f60:	f001 fcf0 	bl	8005944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	e001      	b.n	8003f76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f76:	f001 fd15 	bl	80059a4 <vPortExitCritical>

	return xReturn;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f8c:	f001 fcda 	bl	8005944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d102      	bne.n	8003fa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e001      	b.n	8003fa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fa6:	f001 fcfd 	bl	80059a4 <vPortExitCritical>

	return xReturn;
 8003faa:	68fb      	ldr	r3, [r7, #12]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e014      	b.n	8003fee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fc4:	4a0f      	ldr	r2, [pc, #60]	; (8004004 <vQueueAddToRegistry+0x50>)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10b      	bne.n	8003fe8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003fd0:	490c      	ldr	r1, [pc, #48]	; (8004004 <vQueueAddToRegistry+0x50>)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <vQueueAddToRegistry+0x50>)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003fe6:	e006      	b.n	8003ff6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b07      	cmp	r3, #7
 8003ff2:	d9e7      	bls.n	8003fc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	2000089c 	.word	0x2000089c

08004008 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004018:	f001 fc94 	bl	8005944 <vPortEnterCritical>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004022:	b25b      	sxtb	r3, r3
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004028:	d103      	bne.n	8004032 <vQueueWaitForMessageRestricted+0x2a>
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004038:	b25b      	sxtb	r3, r3
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403e:	d103      	bne.n	8004048 <vQueueWaitForMessageRestricted+0x40>
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004048:	f001 fcac 	bl	80059a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	2b00      	cmp	r3, #0
 8004052:	d106      	bne.n	8004062 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	3324      	adds	r3, #36	; 0x24
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fc2d 	bl	80048bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004062:	6978      	ldr	r0, [r7, #20]
 8004064:	f7ff ff26 	bl	8003eb4 <prvUnlockQueue>
	}
 8004068:	bf00      	nop
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08e      	sub	sp, #56	; 0x38
 8004074:	af04      	add	r7, sp, #16
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800407e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	623b      	str	r3, [r7, #32]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	61fb      	str	r3, [r7, #28]
}
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040b6:	23bc      	movs	r3, #188	; 0xbc
 80040b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2bbc      	cmp	r3, #188	; 0xbc
 80040be:	d00a      	beq.n	80040d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	61bb      	str	r3, [r7, #24]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01e      	beq.n	800411c <xTaskCreateStatic+0xac>
 80040de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01b      	beq.n	800411c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040f6:	2300      	movs	r3, #0
 80040f8:	9303      	str	r3, [sp, #12]
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	9302      	str	r3, [sp, #8]
 80040fe:	f107 0314 	add.w	r3, r7, #20
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f850 	bl	80041b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004116:	f000 f8f3 	bl	8004300 <prvAddNewTaskToReadyList>
 800411a:	e001      	b.n	8004120 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004120:	697b      	ldr	r3, [r7, #20]
	}
 8004122:	4618      	mov	r0, r3
 8004124:	3728      	adds	r7, #40	; 0x28
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800412a:	b580      	push	{r7, lr}
 800412c:	b08c      	sub	sp, #48	; 0x30
 800412e:	af04      	add	r7, sp, #16
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	4613      	mov	r3, r2
 8004138:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4618      	mov	r0, r3
 8004140:	f001 fd22 	bl	8005b88 <pvPortMalloc>
 8004144:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00e      	beq.n	800416a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800414c:	20bc      	movs	r0, #188	; 0xbc
 800414e:	f001 fd1b 	bl	8005b88 <pvPortMalloc>
 8004152:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
 8004160:	e005      	b.n	800416e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004162:	6978      	ldr	r0, [r7, #20]
 8004164:	f001 fddc 	bl	8005d20 <vPortFree>
 8004168:	e001      	b.n	800416e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d017      	beq.n	80041a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800417c:	88fa      	ldrh	r2, [r7, #6]
 800417e:	2300      	movs	r3, #0
 8004180:	9303      	str	r3, [sp, #12]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	9302      	str	r3, [sp, #8]
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f80e 	bl	80041b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004198:	69f8      	ldr	r0, [r7, #28]
 800419a:	f000 f8b1 	bl	8004300 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800419e:	2301      	movs	r3, #1
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	e002      	b.n	80041aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041a4:	f04f 33ff 	mov.w	r3, #4294967295
 80041a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041aa:	69bb      	ldr	r3, [r7, #24]
	}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3720      	adds	r7, #32
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	461a      	mov	r2, r3
 80041cc:	21a5      	movs	r1, #165	; 0xa5
 80041ce:	f001 fef9 	bl	8005fc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041dc:	3b01      	subs	r3, #1
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f023 0307 	bic.w	r3, r3, #7
 80041ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <prvInitialiseNewTask+0x58>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	617b      	str	r3, [r7, #20]
}
 8004208:	bf00      	nop
 800420a:	e7fe      	b.n	800420a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01f      	beq.n	8004252 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	e012      	b.n	800423e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4413      	add	r3, r2
 800421e:	7819      	ldrb	r1, [r3, #0]
 8004220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4413      	add	r3, r2
 8004226:	3334      	adds	r3, #52	; 0x34
 8004228:	460a      	mov	r2, r1
 800422a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	4413      	add	r3, r2
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d006      	beq.n	8004246 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	3301      	adds	r3, #1
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	2b0f      	cmp	r3, #15
 8004242:	d9e9      	bls.n	8004218 <prvInitialiseNewTask+0x64>
 8004244:	e000      	b.n	8004248 <prvInitialiseNewTask+0x94>
			{
				break;
 8004246:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004250:	e003      	b.n	800425a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	2b37      	cmp	r3, #55	; 0x37
 800425e:	d901      	bls.n	8004264 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004260:	2337      	movs	r3, #55	; 0x37
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004268:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800426e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	2200      	movs	r2, #0
 8004274:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	3304      	adds	r3, #4
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe ff8e 	bl	800319c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	3318      	adds	r3, #24
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe ff89 	bl	800319c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800428e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	2200      	movs	r2, #0
 80042a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	3354      	adds	r3, #84	; 0x54
 80042b4:	2260      	movs	r2, #96	; 0x60
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 fe83 	bl	8005fc4 <memset>
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	4a0c      	ldr	r2, [pc, #48]	; (80042f4 <prvInitialiseNewTask+0x140>)
 80042c2:	659a      	str	r2, [r3, #88]	; 0x58
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	4a0c      	ldr	r2, [pc, #48]	; (80042f8 <prvInitialiseNewTask+0x144>)
 80042c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	4a0b      	ldr	r2, [pc, #44]	; (80042fc <prvInitialiseNewTask+0x148>)
 80042ce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	69b8      	ldr	r0, [r7, #24]
 80042d6:	f001 fa0b 	bl	80056f0 <pxPortInitialiseStack>
 80042da:	4602      	mov	r2, r0
 80042dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ec:	bf00      	nop
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	080061e0 	.word	0x080061e0
 80042f8:	08006200 	.word	0x08006200
 80042fc:	080061c0 	.word	0x080061c0

08004300 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004308:	f001 fb1c 	bl	8005944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800430c:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <prvAddNewTaskToReadyList+0xc4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3301      	adds	r3, #1
 8004312:	4a2c      	ldr	r2, [pc, #176]	; (80043c4 <prvAddNewTaskToReadyList+0xc4>)
 8004314:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004316:	4b2c      	ldr	r3, [pc, #176]	; (80043c8 <prvAddNewTaskToReadyList+0xc8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800431e:	4a2a      	ldr	r2, [pc, #168]	; (80043c8 <prvAddNewTaskToReadyList+0xc8>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004324:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <prvAddNewTaskToReadyList+0xc4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d110      	bne.n	800434e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800432c:	f000 fbf2 	bl	8004b14 <prvInitialiseTaskLists>
 8004330:	e00d      	b.n	800434e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004332:	4b26      	ldr	r3, [pc, #152]	; (80043cc <prvAddNewTaskToReadyList+0xcc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800433a:	4b23      	ldr	r3, [pc, #140]	; (80043c8 <prvAddNewTaskToReadyList+0xc8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	429a      	cmp	r2, r3
 8004346:	d802      	bhi.n	800434e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004348:	4a1f      	ldr	r2, [pc, #124]	; (80043c8 <prvAddNewTaskToReadyList+0xc8>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <prvAddNewTaskToReadyList+0xd0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3301      	adds	r3, #1
 8004354:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <prvAddNewTaskToReadyList+0xd0>)
 8004356:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004358:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <prvAddNewTaskToReadyList+0xd0>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004364:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <prvAddNewTaskToReadyList+0xd4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d903      	bls.n	8004374 <prvAddNewTaskToReadyList+0x74>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <prvAddNewTaskToReadyList+0xd4>)
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <prvAddNewTaskToReadyList+0xd8>)
 8004382:	441a      	add	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f7fe ff13 	bl	80031b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004390:	f001 fb08 	bl	80059a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004394:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <prvAddNewTaskToReadyList+0xcc>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00e      	beq.n	80043ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <prvAddNewTaskToReadyList+0xc8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d207      	bcs.n	80043ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043aa:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <prvAddNewTaskToReadyList+0xdc>)
 80043ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000db0 	.word	0x20000db0
 80043c8:	200008dc 	.word	0x200008dc
 80043cc:	20000dbc 	.word	0x20000dbc
 80043d0:	20000dcc 	.word	0x20000dcc
 80043d4:	20000db8 	.word	0x20000db8
 80043d8:	200008e0 	.word	0x200008e0
 80043dc:	e000ed04 	.word	0xe000ed04

080043e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	; 0x28
 80043e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043ee:	463a      	mov	r2, r7
 80043f0:	1d39      	adds	r1, r7, #4
 80043f2:	f107 0308 	add.w	r3, r7, #8
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fe7c 	bl	80030f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	9202      	str	r2, [sp, #8]
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	2300      	movs	r3, #0
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	2300      	movs	r3, #0
 800440c:	460a      	mov	r2, r1
 800440e:	4924      	ldr	r1, [pc, #144]	; (80044a0 <vTaskStartScheduler+0xc0>)
 8004410:	4824      	ldr	r0, [pc, #144]	; (80044a4 <vTaskStartScheduler+0xc4>)
 8004412:	f7ff fe2d 	bl	8004070 <xTaskCreateStatic>
 8004416:	4603      	mov	r3, r0
 8004418:	4a23      	ldr	r2, [pc, #140]	; (80044a8 <vTaskStartScheduler+0xc8>)
 800441a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800441c:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <vTaskStartScheduler+0xc8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004424:	2301      	movs	r3, #1
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e001      	b.n	800442e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d102      	bne.n	800443a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004434:	f000 fe0e 	bl	8005054 <xTimerCreateTimerTask>
 8004438:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d11b      	bne.n	8004478 <vTaskStartScheduler+0x98>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	613b      	str	r3, [r7, #16]
}
 8004452:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004454:	4b15      	ldr	r3, [pc, #84]	; (80044ac <vTaskStartScheduler+0xcc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3354      	adds	r3, #84	; 0x54
 800445a:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <vTaskStartScheduler+0xd0>)
 800445c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800445e:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <vTaskStartScheduler+0xd4>)
 8004460:	f04f 32ff 	mov.w	r2, #4294967295
 8004464:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004466:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <vTaskStartScheduler+0xd8>)
 8004468:	2201      	movs	r2, #1
 800446a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800446c:	4b13      	ldr	r3, [pc, #76]	; (80044bc <vTaskStartScheduler+0xdc>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004472:	f001 f9c5 	bl	8005800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004476:	e00e      	b.n	8004496 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d10a      	bne.n	8004496 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	60fb      	str	r3, [r7, #12]
}
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <vTaskStartScheduler+0xb4>
}
 8004496:	bf00      	nop
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	08006190 	.word	0x08006190
 80044a4:	08004ae5 	.word	0x08004ae5
 80044a8:	20000dd4 	.word	0x20000dd4
 80044ac:	200008dc 	.word	0x200008dc
 80044b0:	20000010 	.word	0x20000010
 80044b4:	20000dd0 	.word	0x20000dd0
 80044b8:	20000dbc 	.word	0x20000dbc
 80044bc:	20000db4 	.word	0x20000db4

080044c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044c4:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <vTaskSuspendAll+0x18>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3301      	adds	r3, #1
 80044ca:	4a03      	ldr	r2, [pc, #12]	; (80044d8 <vTaskSuspendAll+0x18>)
 80044cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044ce:	bf00      	nop
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	20000dd8 	.word	0x20000dd8

080044dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044ea:	4b42      	ldr	r3, [pc, #264]	; (80045f4 <xTaskResumeAll+0x118>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <xTaskResumeAll+0x2c>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	603b      	str	r3, [r7, #0]
}
 8004504:	bf00      	nop
 8004506:	e7fe      	b.n	8004506 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004508:	f001 fa1c 	bl	8005944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800450c:	4b39      	ldr	r3, [pc, #228]	; (80045f4 <xTaskResumeAll+0x118>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3b01      	subs	r3, #1
 8004512:	4a38      	ldr	r2, [pc, #224]	; (80045f4 <xTaskResumeAll+0x118>)
 8004514:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004516:	4b37      	ldr	r3, [pc, #220]	; (80045f4 <xTaskResumeAll+0x118>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d162      	bne.n	80045e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800451e:	4b36      	ldr	r3, [pc, #216]	; (80045f8 <xTaskResumeAll+0x11c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d05e      	beq.n	80045e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004526:	e02f      	b.n	8004588 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004528:	4b34      	ldr	r3, [pc, #208]	; (80045fc <xTaskResumeAll+0x120>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3318      	adds	r3, #24
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe fe9b 	bl	8003270 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3304      	adds	r3, #4
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fe96 	bl	8003270 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <xTaskResumeAll+0x124>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d903      	bls.n	8004558 <xTaskResumeAll+0x7c>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <xTaskResumeAll+0x124>)
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4a27      	ldr	r2, [pc, #156]	; (8004604 <xTaskResumeAll+0x128>)
 8004566:	441a      	add	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f7fe fe21 	bl	80031b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	4b23      	ldr	r3, [pc, #140]	; (8004608 <xTaskResumeAll+0x12c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004582:	4b22      	ldr	r3, [pc, #136]	; (800460c <xTaskResumeAll+0x130>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004588:	4b1c      	ldr	r3, [pc, #112]	; (80045fc <xTaskResumeAll+0x120>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1cb      	bne.n	8004528 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004596:	f000 fb5f 	bl	8004c58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800459a:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <xTaskResumeAll+0x134>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d010      	beq.n	80045c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045a6:	f000 f847 	bl	8004638 <xTaskIncrementTick>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80045b0:	4b16      	ldr	r3, [pc, #88]	; (800460c <xTaskResumeAll+0x130>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f1      	bne.n	80045a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <xTaskResumeAll+0x134>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045c8:	4b10      	ldr	r3, [pc, #64]	; (800460c <xTaskResumeAll+0x130>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045d0:	2301      	movs	r3, #1
 80045d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <xTaskResumeAll+0x138>)
 80045d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045e4:	f001 f9de 	bl	80059a4 <vPortExitCritical>

	return xAlreadyYielded;
 80045e8:	68bb      	ldr	r3, [r7, #8]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000dd8 	.word	0x20000dd8
 80045f8:	20000db0 	.word	0x20000db0
 80045fc:	20000d70 	.word	0x20000d70
 8004600:	20000db8 	.word	0x20000db8
 8004604:	200008e0 	.word	0x200008e0
 8004608:	200008dc 	.word	0x200008dc
 800460c:	20000dc4 	.word	0x20000dc4
 8004610:	20000dc0 	.word	0x20000dc0
 8004614:	e000ed04 	.word	0xe000ed04

08004618 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <xTaskGetTickCount+0x1c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004624:	687b      	ldr	r3, [r7, #4]
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000db4 	.word	0x20000db4

08004638 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004642:	4b4f      	ldr	r3, [pc, #316]	; (8004780 <xTaskIncrementTick+0x148>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f040 808f 	bne.w	800476a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800464c:	4b4d      	ldr	r3, [pc, #308]	; (8004784 <xTaskIncrementTick+0x14c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3301      	adds	r3, #1
 8004652:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004654:	4a4b      	ldr	r2, [pc, #300]	; (8004784 <xTaskIncrementTick+0x14c>)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d120      	bne.n	80046a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004660:	4b49      	ldr	r3, [pc, #292]	; (8004788 <xTaskIncrementTick+0x150>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <xTaskIncrementTick+0x48>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	603b      	str	r3, [r7, #0]
}
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <xTaskIncrementTick+0x46>
 8004680:	4b41      	ldr	r3, [pc, #260]	; (8004788 <xTaskIncrementTick+0x150>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	4b41      	ldr	r3, [pc, #260]	; (800478c <xTaskIncrementTick+0x154>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a3f      	ldr	r2, [pc, #252]	; (8004788 <xTaskIncrementTick+0x150>)
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4a3f      	ldr	r2, [pc, #252]	; (800478c <xTaskIncrementTick+0x154>)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b3e      	ldr	r3, [pc, #248]	; (8004790 <xTaskIncrementTick+0x158>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3301      	adds	r3, #1
 800469a:	4a3d      	ldr	r2, [pc, #244]	; (8004790 <xTaskIncrementTick+0x158>)
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	f000 fadb 	bl	8004c58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046a2:	4b3c      	ldr	r3, [pc, #240]	; (8004794 <xTaskIncrementTick+0x15c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d349      	bcc.n	8004740 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ac:	4b36      	ldr	r3, [pc, #216]	; (8004788 <xTaskIncrementTick+0x150>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d104      	bne.n	80046c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b6:	4b37      	ldr	r3, [pc, #220]	; (8004794 <xTaskIncrementTick+0x15c>)
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295
 80046bc:	601a      	str	r2, [r3, #0]
					break;
 80046be:	e03f      	b.n	8004740 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c0:	4b31      	ldr	r3, [pc, #196]	; (8004788 <xTaskIncrementTick+0x150>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d203      	bcs.n	80046e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046d8:	4a2e      	ldr	r2, [pc, #184]	; (8004794 <xTaskIncrementTick+0x15c>)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046de:	e02f      	b.n	8004740 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe fdc3 	bl	8003270 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d004      	beq.n	80046fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3318      	adds	r3, #24
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe fdba 	bl	8003270 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004700:	4b25      	ldr	r3, [pc, #148]	; (8004798 <xTaskIncrementTick+0x160>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d903      	bls.n	8004710 <xTaskIncrementTick+0xd8>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	4a22      	ldr	r2, [pc, #136]	; (8004798 <xTaskIncrementTick+0x160>)
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4a1f      	ldr	r2, [pc, #124]	; (800479c <xTaskIncrementTick+0x164>)
 800471e:	441a      	add	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	3304      	adds	r3, #4
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f7fe fd45 	bl	80031b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004730:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <xTaskIncrementTick+0x168>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	429a      	cmp	r2, r3
 8004738:	d3b8      	bcc.n	80046ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800473a:	2301      	movs	r3, #1
 800473c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800473e:	e7b5      	b.n	80046ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004740:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <xTaskIncrementTick+0x168>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004746:	4915      	ldr	r1, [pc, #84]	; (800479c <xTaskIncrementTick+0x164>)
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d901      	bls.n	800475c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004758:	2301      	movs	r3, #1
 800475a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800475c:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <xTaskIncrementTick+0x16c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004764:	2301      	movs	r3, #1
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	e004      	b.n	8004774 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800476a:	4b0f      	ldr	r3, [pc, #60]	; (80047a8 <xTaskIncrementTick+0x170>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3301      	adds	r3, #1
 8004770:	4a0d      	ldr	r2, [pc, #52]	; (80047a8 <xTaskIncrementTick+0x170>)
 8004772:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004774:	697b      	ldr	r3, [r7, #20]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000dd8 	.word	0x20000dd8
 8004784:	20000db4 	.word	0x20000db4
 8004788:	20000d68 	.word	0x20000d68
 800478c:	20000d6c 	.word	0x20000d6c
 8004790:	20000dc8 	.word	0x20000dc8
 8004794:	20000dd0 	.word	0x20000dd0
 8004798:	20000db8 	.word	0x20000db8
 800479c:	200008e0 	.word	0x200008e0
 80047a0:	200008dc 	.word	0x200008dc
 80047a4:	20000dc4 	.word	0x20000dc4
 80047a8:	20000dc0 	.word	0x20000dc0

080047ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047b2:	4b2a      	ldr	r3, [pc, #168]	; (800485c <vTaskSwitchContext+0xb0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047ba:	4b29      	ldr	r3, [pc, #164]	; (8004860 <vTaskSwitchContext+0xb4>)
 80047bc:	2201      	movs	r2, #1
 80047be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047c0:	e046      	b.n	8004850 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80047c2:	4b27      	ldr	r3, [pc, #156]	; (8004860 <vTaskSwitchContext+0xb4>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c8:	4b26      	ldr	r3, [pc, #152]	; (8004864 <vTaskSwitchContext+0xb8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e010      	b.n	80047f2 <vTaskSwitchContext+0x46>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10a      	bne.n	80047ec <vTaskSwitchContext+0x40>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	607b      	str	r3, [r7, #4]
}
 80047e8:	bf00      	nop
 80047ea:	e7fe      	b.n	80047ea <vTaskSwitchContext+0x3e>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	491d      	ldr	r1, [pc, #116]	; (8004868 <vTaskSwitchContext+0xbc>)
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0e4      	beq.n	80047d0 <vTaskSwitchContext+0x24>
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4a15      	ldr	r2, [pc, #84]	; (8004868 <vTaskSwitchContext+0xbc>)
 8004812:	4413      	add	r3, r2
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	605a      	str	r2, [r3, #4]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	3308      	adds	r3, #8
 8004828:	429a      	cmp	r2, r3
 800482a:	d104      	bne.n	8004836 <vTaskSwitchContext+0x8a>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4a0b      	ldr	r2, [pc, #44]	; (800486c <vTaskSwitchContext+0xc0>)
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	4a08      	ldr	r2, [pc, #32]	; (8004864 <vTaskSwitchContext+0xb8>)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <vTaskSwitchContext+0xc0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3354      	adds	r3, #84	; 0x54
 800484c:	4a08      	ldr	r2, [pc, #32]	; (8004870 <vTaskSwitchContext+0xc4>)
 800484e:	6013      	str	r3, [r2, #0]
}
 8004850:	bf00      	nop
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	20000dd8 	.word	0x20000dd8
 8004860:	20000dc4 	.word	0x20000dc4
 8004864:	20000db8 	.word	0x20000db8
 8004868:	200008e0 	.word	0x200008e0
 800486c:	200008dc 	.word	0x200008dc
 8004870:	20000010 	.word	0x20000010

08004874 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	60fb      	str	r3, [r7, #12]
}
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800489a:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <vTaskPlaceOnEventList+0x44>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3318      	adds	r3, #24
 80048a0:	4619      	mov	r1, r3
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fe fcab 	bl	80031fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048a8:	2101      	movs	r1, #1
 80048aa:	6838      	ldr	r0, [r7, #0]
 80048ac:	f000 fb7e 	bl	8004fac <prvAddCurrentTaskToDelayedList>
}
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	200008dc 	.word	0x200008dc

080048bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10a      	bne.n	80048e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	617b      	str	r3, [r7, #20]
}
 80048e0:	bf00      	nop
 80048e2:	e7fe      	b.n	80048e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <vTaskPlaceOnEventListRestricted+0x54>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3318      	adds	r3, #24
 80048ea:	4619      	mov	r1, r3
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f7fe fc62 	bl	80031b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80048f8:	f04f 33ff 	mov.w	r3, #4294967295
 80048fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	68b8      	ldr	r0, [r7, #8]
 8004902:	f000 fb53 	bl	8004fac <prvAddCurrentTaskToDelayedList>
	}
 8004906:	bf00      	nop
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200008dc 	.word	0x200008dc

08004914 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	60fb      	str	r3, [r7, #12]
}
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	3318      	adds	r3, #24
 8004944:	4618      	mov	r0, r3
 8004946:	f7fe fc93 	bl	8003270 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800494a:	4b1e      	ldr	r3, [pc, #120]	; (80049c4 <xTaskRemoveFromEventList+0xb0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d11d      	bne.n	800498e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	3304      	adds	r3, #4
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe fc8a 	bl	8003270 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <xTaskRemoveFromEventList+0xb4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d903      	bls.n	8004970 <xTaskRemoveFromEventList+0x5c>
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <xTaskRemoveFromEventList+0xb4>)
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4a13      	ldr	r2, [pc, #76]	; (80049cc <xTaskRemoveFromEventList+0xb8>)
 800497e:	441a      	add	r2, r3
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	3304      	adds	r3, #4
 8004984:	4619      	mov	r1, r3
 8004986:	4610      	mov	r0, r2
 8004988:	f7fe fc15 	bl	80031b6 <vListInsertEnd>
 800498c:	e005      	b.n	800499a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	3318      	adds	r3, #24
 8004992:	4619      	mov	r1, r3
 8004994:	480e      	ldr	r0, [pc, #56]	; (80049d0 <xTaskRemoveFromEventList+0xbc>)
 8004996:	f7fe fc0e 	bl	80031b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499e:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <xTaskRemoveFromEventList+0xc0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d905      	bls.n	80049b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049a8:	2301      	movs	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <xTaskRemoveFromEventList+0xc4>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e001      	b.n	80049b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80049b8:	697b      	ldr	r3, [r7, #20]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000dd8 	.word	0x20000dd8
 80049c8:	20000db8 	.word	0x20000db8
 80049cc:	200008e0 	.word	0x200008e0
 80049d0:	20000d70 	.word	0x20000d70
 80049d4:	200008dc 	.word	0x200008dc
 80049d8:	20000dc4 	.word	0x20000dc4

080049dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049e4:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <vTaskInternalSetTimeOutState+0x24>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <vTaskInternalSetTimeOutState+0x28>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	605a      	str	r2, [r3, #4]
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	20000dc8 	.word	0x20000dc8
 8004a04:	20000db4 	.word	0x20000db4

08004a08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	613b      	str	r3, [r7, #16]
}
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	60fb      	str	r3, [r7, #12]
}
 8004a46:	bf00      	nop
 8004a48:	e7fe      	b.n	8004a48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a4a:	f000 ff7b 	bl	8005944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <xTaskCheckForTimeOut+0xbc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a66:	d102      	bne.n	8004a6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	e023      	b.n	8004ab6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <xTaskCheckForTimeOut+0xc0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d007      	beq.n	8004a8a <xTaskCheckForTimeOut+0x82>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d302      	bcc.n	8004a8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a84:	2301      	movs	r3, #1
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	e015      	b.n	8004ab6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d20b      	bcs.n	8004aac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	1ad2      	subs	r2, r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff ff9b 	bl	80049dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	e004      	b.n	8004ab6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ab6:	f000 ff75 	bl	80059a4 <vPortExitCritical>

	return xReturn;
 8004aba:	69fb      	ldr	r3, [r7, #28]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20000db4 	.word	0x20000db4
 8004ac8:	20000dc8 	.word	0x20000dc8

08004acc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ad0:	4b03      	ldr	r3, [pc, #12]	; (8004ae0 <vTaskMissedYield+0x14>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	20000dc4 	.word	0x20000dc4

08004ae4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004aec:	f000 f852 	bl	8004b94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004af0:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <prvIdleTask+0x28>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d9f9      	bls.n	8004aec <prvIdleTask+0x8>
			{
				taskYIELD();
 8004af8:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <prvIdleTask+0x2c>)
 8004afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b08:	e7f0      	b.n	8004aec <prvIdleTask+0x8>
 8004b0a:	bf00      	nop
 8004b0c:	200008e0 	.word	0x200008e0
 8004b10:	e000ed04 	.word	0xe000ed04

08004b14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	607b      	str	r3, [r7, #4]
 8004b1e:	e00c      	b.n	8004b3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4a12      	ldr	r2, [pc, #72]	; (8004b74 <prvInitialiseTaskLists+0x60>)
 8004b2c:	4413      	add	r3, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fb14 	bl	800315c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3301      	adds	r3, #1
 8004b38:	607b      	str	r3, [r7, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b37      	cmp	r3, #55	; 0x37
 8004b3e:	d9ef      	bls.n	8004b20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b40:	480d      	ldr	r0, [pc, #52]	; (8004b78 <prvInitialiseTaskLists+0x64>)
 8004b42:	f7fe fb0b 	bl	800315c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b46:	480d      	ldr	r0, [pc, #52]	; (8004b7c <prvInitialiseTaskLists+0x68>)
 8004b48:	f7fe fb08 	bl	800315c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b4c:	480c      	ldr	r0, [pc, #48]	; (8004b80 <prvInitialiseTaskLists+0x6c>)
 8004b4e:	f7fe fb05 	bl	800315c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b52:	480c      	ldr	r0, [pc, #48]	; (8004b84 <prvInitialiseTaskLists+0x70>)
 8004b54:	f7fe fb02 	bl	800315c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b58:	480b      	ldr	r0, [pc, #44]	; (8004b88 <prvInitialiseTaskLists+0x74>)
 8004b5a:	f7fe faff 	bl	800315c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <prvInitialiseTaskLists+0x78>)
 8004b60:	4a05      	ldr	r2, [pc, #20]	; (8004b78 <prvInitialiseTaskLists+0x64>)
 8004b62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b64:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <prvInitialiseTaskLists+0x7c>)
 8004b66:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <prvInitialiseTaskLists+0x68>)
 8004b68:	601a      	str	r2, [r3, #0]
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	200008e0 	.word	0x200008e0
 8004b78:	20000d40 	.word	0x20000d40
 8004b7c:	20000d54 	.word	0x20000d54
 8004b80:	20000d70 	.word	0x20000d70
 8004b84:	20000d84 	.word	0x20000d84
 8004b88:	20000d9c 	.word	0x20000d9c
 8004b8c:	20000d68 	.word	0x20000d68
 8004b90:	20000d6c 	.word	0x20000d6c

08004b94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b9a:	e019      	b.n	8004bd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b9c:	f000 fed2 	bl	8005944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ba0:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <prvCheckTasksWaitingTermination+0x50>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe fb5f 	bl	8003270 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <prvCheckTasksWaitingTermination+0x54>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	4a0b      	ldr	r2, [pc, #44]	; (8004be8 <prvCheckTasksWaitingTermination+0x54>)
 8004bba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <prvCheckTasksWaitingTermination+0x58>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <prvCheckTasksWaitingTermination+0x58>)
 8004bc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bc6:	f000 feed 	bl	80059a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f810 	bl	8004bf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bd0:	4b06      	ldr	r3, [pc, #24]	; (8004bec <prvCheckTasksWaitingTermination+0x58>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e1      	bne.n	8004b9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000d84 	.word	0x20000d84
 8004be8:	20000db0 	.word	0x20000db0
 8004bec:	20000d98 	.word	0x20000d98

08004bf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3354      	adds	r3, #84	; 0x54
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f001 f9f7 	bl	8005ff0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d108      	bne.n	8004c1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 f885 	bl	8005d20 <vPortFree>
				vPortFree( pxTCB );
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f001 f882 	bl	8005d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c1c:	e018      	b.n	8004c50 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d103      	bne.n	8004c30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f001 f879 	bl	8005d20 <vPortFree>
	}
 8004c2e:	e00f      	b.n	8004c50 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d00a      	beq.n	8004c50 <prvDeleteTCB+0x60>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	60fb      	str	r3, [r7, #12]
}
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <prvDeleteTCB+0x5e>
	}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c5e:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <prvResetNextTaskUnblockTime+0x38>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d104      	bne.n	8004c72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <prvResetNextTaskUnblockTime+0x3c>)
 8004c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c70:	e008      	b.n	8004c84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c72:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <prvResetNextTaskUnblockTime+0x38>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <prvResetNextTaskUnblockTime+0x3c>)
 8004c82:	6013      	str	r3, [r2, #0]
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	20000d68 	.word	0x20000d68
 8004c94:	20000dd0 	.word	0x20000dd0

08004c98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <xTaskGetSchedulerState+0x34>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	e008      	b.n	8004cbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cac:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <xTaskGetSchedulerState+0x38>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	e001      	b.n	8004cbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cbe:	687b      	ldr	r3, [r7, #4]
	}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	20000dbc 	.word	0x20000dbc
 8004cd0:	20000dd8 	.word	0x20000dd8

08004cd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d051      	beq.n	8004d8e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cee:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <xTaskPriorityInherit+0xc4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d241      	bcs.n	8004d7c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	db06      	blt.n	8004d0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d00:	4b25      	ldr	r3, [pc, #148]	; (8004d98 <xTaskPriorityInherit+0xc4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	6959      	ldr	r1, [r3, #20]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4a1f      	ldr	r2, [pc, #124]	; (8004d9c <xTaskPriorityInherit+0xc8>)
 8004d20:	4413      	add	r3, r2
 8004d22:	4299      	cmp	r1, r3
 8004d24:	d122      	bne.n	8004d6c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe faa0 	bl	8003270 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <xTaskPriorityInherit+0xc4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3e:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <xTaskPriorityInherit+0xcc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d903      	bls.n	8004d4e <xTaskPriorityInherit+0x7a>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <xTaskPriorityInherit+0xcc>)
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <xTaskPriorityInherit+0xc8>)
 8004d5c:	441a      	add	r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4619      	mov	r1, r3
 8004d64:	4610      	mov	r0, r2
 8004d66:	f7fe fa26 	bl	80031b6 <vListInsertEnd>
 8004d6a:	e004      	b.n	8004d76 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <xTaskPriorityInherit+0xc4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004d76:	2301      	movs	r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e008      	b.n	8004d8e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <xTaskPriorityInherit+0xc4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d201      	bcs.n	8004d8e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
	}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	200008dc 	.word	0x200008dc
 8004d9c:	200008e0 	.word	0x200008e0
 8004da0:	20000db8 	.word	0x20000db8

08004da4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d056      	beq.n	8004e68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004dba:	4b2e      	ldr	r3, [pc, #184]	; (8004e74 <xTaskPriorityDisinherit+0xd0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d00a      	beq.n	8004dda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	60fb      	str	r3, [r7, #12]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	60bb      	str	r3, [r7, #8]
}
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfc:	1e5a      	subs	r2, r3, #1
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d02c      	beq.n	8004e68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d128      	bne.n	8004e68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe fa28 	bl	8003270 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <xTaskPriorityDisinherit+0xd4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d903      	bls.n	8004e48 <xTaskPriorityDisinherit+0xa4>
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	4a0c      	ldr	r2, [pc, #48]	; (8004e78 <xTaskPriorityDisinherit+0xd4>)
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4a09      	ldr	r2, [pc, #36]	; (8004e7c <xTaskPriorityDisinherit+0xd8>)
 8004e56:	441a      	add	r2, r3
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f7fe f9a9 	bl	80031b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e68:	697b      	ldr	r3, [r7, #20]
	}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	200008dc 	.word	0x200008dc
 8004e78:	20000db8 	.word	0x20000db8
 8004e7c:	200008e0 	.word	0x200008e0

08004e80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d06a      	beq.n	8004f6e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60fb      	str	r3, [r7, #12]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d902      	bls.n	8004ec6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	e002      	b.n	8004ecc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d04b      	beq.n	8004f6e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d146      	bne.n	8004f6e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004ee0:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d10a      	bne.n	8004f00 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	60bb      	str	r3, [r7, #8]
}
 8004efc:	bf00      	nop
 8004efe:	e7fe      	b.n	8004efe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db04      	blt.n	8004f1e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	6959      	ldr	r1, [r3, #20]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004f2e:	4413      	add	r3, r2
 8004f30:	4299      	cmp	r1, r3
 8004f32:	d11c      	bne.n	8004f6e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe f999 	bl	8003270 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d903      	bls.n	8004f52 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	4a0c      	ldr	r2, [pc, #48]	; (8004f80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4a07      	ldr	r2, [pc, #28]	; (8004f7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004f60:	441a      	add	r2, r3
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f7fe f924 	bl	80031b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f6e:	bf00      	nop
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	200008dc 	.word	0x200008dc
 8004f7c:	200008e0 	.word	0x200008e0
 8004f80:	20000db8 	.word	0x20000db8

08004f84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004f88:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d004      	beq.n	8004f9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004f90:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f96:	3201      	adds	r2, #1
 8004f98:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004f9a:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
	}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	200008dc 	.word	0x200008dc

08004fac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fb6:	4b21      	ldr	r3, [pc, #132]	; (800503c <prvAddCurrentTaskToDelayedList+0x90>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fbc:	4b20      	ldr	r3, [pc, #128]	; (8005040 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fe f954 	bl	8003270 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d10a      	bne.n	8004fe6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fd6:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4819      	ldr	r0, [pc, #100]	; (8005044 <prvAddCurrentTaskToDelayedList+0x98>)
 8004fe0:	f7fe f8e9 	bl	80031b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fe4:	e026      	b.n	8005034 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4413      	add	r3, r2
 8004fec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fee:	4b14      	ldr	r3, [pc, #80]	; (8005040 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d209      	bcs.n	8005012 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ffe:	4b12      	ldr	r3, [pc, #72]	; (8005048 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <prvAddCurrentTaskToDelayedList+0x94>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3304      	adds	r3, #4
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f7fe f8f7 	bl	80031fe <vListInsert>
}
 8005010:	e010      	b.n	8005034 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005012:	4b0e      	ldr	r3, [pc, #56]	; (800504c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <prvAddCurrentTaskToDelayedList+0x94>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f7fe f8ed 	bl	80031fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005024:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	429a      	cmp	r2, r3
 800502c:	d202      	bcs.n	8005034 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800502e:	4a08      	ldr	r2, [pc, #32]	; (8005050 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	6013      	str	r3, [r2, #0]
}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20000db4 	.word	0x20000db4
 8005040:	200008dc 	.word	0x200008dc
 8005044:	20000d9c 	.word	0x20000d9c
 8005048:	20000d6c 	.word	0x20000d6c
 800504c:	20000d68 	.word	0x20000d68
 8005050:	20000dd0 	.word	0x20000dd0

08005054 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08a      	sub	sp, #40	; 0x28
 8005058:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800505e:	f000 fb07 	bl	8005670 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005062:	4b1c      	ldr	r3, [pc, #112]	; (80050d4 <xTimerCreateTimerTask+0x80>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d021      	beq.n	80050ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005072:	1d3a      	adds	r2, r7, #4
 8005074:	f107 0108 	add.w	r1, r7, #8
 8005078:	f107 030c 	add.w	r3, r7, #12
 800507c:	4618      	mov	r0, r3
 800507e:	f7fe f853 	bl	8003128 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	9202      	str	r2, [sp, #8]
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	2302      	movs	r3, #2
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	2300      	movs	r3, #0
 8005092:	460a      	mov	r2, r1
 8005094:	4910      	ldr	r1, [pc, #64]	; (80050d8 <xTimerCreateTimerTask+0x84>)
 8005096:	4811      	ldr	r0, [pc, #68]	; (80050dc <xTimerCreateTimerTask+0x88>)
 8005098:	f7fe ffea 	bl	8004070 <xTaskCreateStatic>
 800509c:	4603      	mov	r3, r0
 800509e:	4a10      	ldr	r2, [pc, #64]	; (80050e0 <xTimerCreateTimerTask+0x8c>)
 80050a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80050a2:	4b0f      	ldr	r3, [pc, #60]	; (80050e0 <xTimerCreateTimerTask+0x8c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80050aa:	2301      	movs	r3, #1
 80050ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10a      	bne.n	80050ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	613b      	str	r3, [r7, #16]
}
 80050c6:	bf00      	nop
 80050c8:	e7fe      	b.n	80050c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80050ca:	697b      	ldr	r3, [r7, #20]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000e0c 	.word	0x20000e0c
 80050d8:	08006198 	.word	0x08006198
 80050dc:	08005219 	.word	0x08005219
 80050e0:	20000e10 	.word	0x20000e10

080050e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <xTimerGenericCommand+0x2e>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	623b      	str	r3, [r7, #32]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005112:	4b1a      	ldr	r3, [pc, #104]	; (800517c <xTimerGenericCommand+0x98>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d02a      	beq.n	8005170 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b05      	cmp	r3, #5
 800512a:	dc18      	bgt.n	800515e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800512c:	f7ff fdb4 	bl	8004c98 <xTaskGetSchedulerState>
 8005130:	4603      	mov	r3, r0
 8005132:	2b02      	cmp	r3, #2
 8005134:	d109      	bne.n	800514a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005136:	4b11      	ldr	r3, [pc, #68]	; (800517c <xTimerGenericCommand+0x98>)
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	f107 0110 	add.w	r1, r7, #16
 800513e:	2300      	movs	r3, #0
 8005140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005142:	f7fe f9fd 	bl	8003540 <xQueueGenericSend>
 8005146:	6278      	str	r0, [r7, #36]	; 0x24
 8005148:	e012      	b.n	8005170 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800514a:	4b0c      	ldr	r3, [pc, #48]	; (800517c <xTimerGenericCommand+0x98>)
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	f107 0110 	add.w	r1, r7, #16
 8005152:	2300      	movs	r3, #0
 8005154:	2200      	movs	r2, #0
 8005156:	f7fe f9f3 	bl	8003540 <xQueueGenericSend>
 800515a:	6278      	str	r0, [r7, #36]	; 0x24
 800515c:	e008      	b.n	8005170 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800515e:	4b07      	ldr	r3, [pc, #28]	; (800517c <xTimerGenericCommand+0x98>)
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	f107 0110 	add.w	r1, r7, #16
 8005166:	2300      	movs	r3, #0
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	f7fe fae7 	bl	800373c <xQueueGenericSendFromISR>
 800516e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005172:	4618      	mov	r0, r3
 8005174:	3728      	adds	r7, #40	; 0x28
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000e0c 	.word	0x20000e0c

08005180 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af02      	add	r7, sp, #8
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800518a:	4b22      	ldr	r3, [pc, #136]	; (8005214 <prvProcessExpiredTimer+0x94>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	3304      	adds	r3, #4
 8005198:	4618      	mov	r0, r3
 800519a:	f7fe f869 	bl	8003270 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d022      	beq.n	80051f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	699a      	ldr	r2, [r3, #24]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	18d1      	adds	r1, r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	6978      	ldr	r0, [r7, #20]
 80051ba:	f000 f8d1 	bl	8005360 <prvInsertTimerInActiveList>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01f      	beq.n	8005204 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051c4:	2300      	movs	r3, #0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	2300      	movs	r3, #0
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	2100      	movs	r1, #0
 80051ce:	6978      	ldr	r0, [r7, #20]
 80051d0:	f7ff ff88 	bl	80050e4 <xTimerGenericCommand>
 80051d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d113      	bne.n	8005204 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60fb      	str	r3, [r7, #12]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	6978      	ldr	r0, [r7, #20]
 800520a:	4798      	blx	r3
}
 800520c:	bf00      	nop
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20000e04 	.word	0x20000e04

08005218 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005220:	f107 0308 	add.w	r3, r7, #8
 8005224:	4618      	mov	r0, r3
 8005226:	f000 f857 	bl	80052d8 <prvGetNextExpireTime>
 800522a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4619      	mov	r1, r3
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f803 	bl	800523c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005236:	f000 f8d5 	bl	80053e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800523a:	e7f1      	b.n	8005220 <prvTimerTask+0x8>

0800523c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005246:	f7ff f93b 	bl	80044c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800524a:	f107 0308 	add.w	r3, r7, #8
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f866 	bl	8005320 <prvSampleTimeNow>
 8005254:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d130      	bne.n	80052be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10a      	bne.n	8005278 <prvProcessTimerOrBlockTask+0x3c>
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	429a      	cmp	r2, r3
 8005268:	d806      	bhi.n	8005278 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800526a:	f7ff f937 	bl	80044dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff ff85 	bl	8005180 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005276:	e024      	b.n	80052c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800527e:	4b13      	ldr	r3, [pc, #76]	; (80052cc <prvProcessTimerOrBlockTask+0x90>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <prvProcessTimerOrBlockTask+0x50>
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <prvProcessTimerOrBlockTask+0x52>
 800528c:	2300      	movs	r3, #0
 800528e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005290:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <prvProcessTimerOrBlockTask+0x94>)
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	4619      	mov	r1, r3
 800529e:	f7fe feb3 	bl	8004008 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052a2:	f7ff f91b 	bl	80044dc <xTaskResumeAll>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052ac:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <prvProcessTimerOrBlockTask+0x98>)
 80052ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	f3bf 8f6f 	isb	sy
}
 80052bc:	e001      	b.n	80052c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80052be:	f7ff f90d 	bl	80044dc <xTaskResumeAll>
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000e08 	.word	0x20000e08
 80052d0:	20000e0c 	.word	0x20000e0c
 80052d4:	e000ed04 	.word	0xe000ed04

080052d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052e0:	4b0e      	ldr	r3, [pc, #56]	; (800531c <prvGetNextExpireTime+0x44>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <prvGetNextExpireTime+0x16>
 80052ea:	2201      	movs	r2, #1
 80052ec:	e000      	b.n	80052f0 <prvGetNextExpireTime+0x18>
 80052ee:	2200      	movs	r2, #0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d105      	bne.n	8005308 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052fc:	4b07      	ldr	r3, [pc, #28]	; (800531c <prvGetNextExpireTime+0x44>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e001      	b.n	800530c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800530c:	68fb      	ldr	r3, [r7, #12]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	20000e04 	.word	0x20000e04

08005320 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005328:	f7ff f976 	bl	8004618 <xTaskGetTickCount>
 800532c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800532e:	4b0b      	ldr	r3, [pc, #44]	; (800535c <prvSampleTimeNow+0x3c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	429a      	cmp	r2, r3
 8005336:	d205      	bcs.n	8005344 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005338:	f000 f936 	bl	80055a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e002      	b.n	800534a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800534a:	4a04      	ldr	r2, [pc, #16]	; (800535c <prvSampleTimeNow+0x3c>)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005350:	68fb      	ldr	r3, [r7, #12]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20000e14 	.word	0x20000e14

08005360 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	429a      	cmp	r2, r3
 8005384:	d812      	bhi.n	80053ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	1ad2      	subs	r2, r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	429a      	cmp	r2, r3
 8005392:	d302      	bcc.n	800539a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005394:	2301      	movs	r3, #1
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e01b      	b.n	80053d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800539a:	4b10      	ldr	r3, [pc, #64]	; (80053dc <prvInsertTimerInActiveList+0x7c>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f7fd ff2a 	bl	80031fe <vListInsert>
 80053aa:	e012      	b.n	80053d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d206      	bcs.n	80053c2 <prvInsertTimerInActiveList+0x62>
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d302      	bcc.n	80053c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80053bc:	2301      	movs	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e007      	b.n	80053d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053c2:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <prvInsertTimerInActiveList+0x80>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f7fd ff16 	bl	80031fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053d2:	697b      	ldr	r3, [r7, #20]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20000e08 	.word	0x20000e08
 80053e0:	20000e04 	.word	0x20000e04

080053e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08e      	sub	sp, #56	; 0x38
 80053e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053ea:	e0ca      	b.n	8005582 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	da18      	bge.n	8005424 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053f2:	1d3b      	adds	r3, r7, #4
 80053f4:	3304      	adds	r3, #4
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10a      	bne.n	8005414 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	61fb      	str	r3, [r7, #28]
}
 8005410:	bf00      	nop
 8005412:	e7fe      	b.n	8005412 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541a:	6850      	ldr	r0, [r2, #4]
 800541c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541e:	6892      	ldr	r2, [r2, #8]
 8005420:	4611      	mov	r1, r2
 8005422:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	f2c0 80aa 	blt.w	8005580 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d004      	beq.n	8005442 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	3304      	adds	r3, #4
 800543c:	4618      	mov	r0, r3
 800543e:	f7fd ff17 	bl	8003270 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005442:	463b      	mov	r3, r7
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff ff6b 	bl	8005320 <prvSampleTimeNow>
 800544a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b09      	cmp	r3, #9
 8005450:	f200 8097 	bhi.w	8005582 <prvProcessReceivedCommands+0x19e>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <prvProcessReceivedCommands+0x78>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	08005485 	.word	0x08005485
 8005460:	08005485 	.word	0x08005485
 8005464:	08005485 	.word	0x08005485
 8005468:	080054f9 	.word	0x080054f9
 800546c:	0800550d 	.word	0x0800550d
 8005470:	08005557 	.word	0x08005557
 8005474:	08005485 	.word	0x08005485
 8005478:	08005485 	.word	0x08005485
 800547c:	080054f9 	.word	0x080054f9
 8005480:	0800550d 	.word	0x0800550d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	b2da      	uxtb	r2, r3
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	18d1      	adds	r1, r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054a4:	f7ff ff5c 	bl	8005360 <prvInsertTimerInActiveList>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d069      	beq.n	8005582 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d05e      	beq.n	8005582 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	441a      	add	r2, r3
 80054cc:	2300      	movs	r3, #0
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	2300      	movs	r3, #0
 80054d2:	2100      	movs	r1, #0
 80054d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054d6:	f7ff fe05 	bl	80050e4 <xTimerGenericCommand>
 80054da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d14f      	bne.n	8005582 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	61bb      	str	r3, [r7, #24]
}
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	b2da      	uxtb	r2, r3
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800550a:	e03a      	b.n	8005582 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	b2da      	uxtb	r2, r3
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10a      	bne.n	8005542 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	617b      	str	r3, [r7, #20]
}
 800553e:	bf00      	nop
 8005540:	e7fe      	b.n	8005540 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	18d1      	adds	r1, r2, r3
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005550:	f7ff ff06 	bl	8005360 <prvInsertTimerInActiveList>
					break;
 8005554:	e015      	b.n	8005582 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d103      	bne.n	800556c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005566:	f000 fbdb 	bl	8005d20 <vPortFree>
 800556a:	e00a      	b.n	8005582 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005572:	f023 0301 	bic.w	r3, r3, #1
 8005576:	b2da      	uxtb	r2, r3
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800557e:	e000      	b.n	8005582 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005580:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005582:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <prvProcessReceivedCommands+0x1c0>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	1d39      	adds	r1, r7, #4
 8005588:	2200      	movs	r2, #0
 800558a:	4618      	mov	r0, r3
 800558c:	f7fe f9fe 	bl	800398c <xQueueReceive>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	f47f af2a 	bne.w	80053ec <prvProcessReceivedCommands+0x8>
	}
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	3730      	adds	r7, #48	; 0x30
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000e0c 	.word	0x20000e0c

080055a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055ae:	e048      	b.n	8005642 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055b0:	4b2d      	ldr	r3, [pc, #180]	; (8005668 <prvSwitchTimerLists+0xc0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ba:	4b2b      	ldr	r3, [pc, #172]	; (8005668 <prvSwitchTimerLists+0xc0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fd fe51 	bl	8003270 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d02e      	beq.n	8005642 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d90e      	bls.n	8005614 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005602:	4b19      	ldr	r3, [pc, #100]	; (8005668 <prvSwitchTimerLists+0xc0>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3304      	adds	r3, #4
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f7fd fdf6 	bl	80031fe <vListInsert>
 8005612:	e016      	b.n	8005642 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005614:	2300      	movs	r3, #0
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	2300      	movs	r3, #0
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	2100      	movs	r1, #0
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f7ff fd60 	bl	80050e4 <xTimerGenericCommand>
 8005624:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	603b      	str	r3, [r7, #0]
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005642:	4b09      	ldr	r3, [pc, #36]	; (8005668 <prvSwitchTimerLists+0xc0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1b1      	bne.n	80055b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <prvSwitchTimerLists+0xc0>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005652:	4b06      	ldr	r3, [pc, #24]	; (800566c <prvSwitchTimerLists+0xc4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a04      	ldr	r2, [pc, #16]	; (8005668 <prvSwitchTimerLists+0xc0>)
 8005658:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800565a:	4a04      	ldr	r2, [pc, #16]	; (800566c <prvSwitchTimerLists+0xc4>)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	6013      	str	r3, [r2, #0]
}
 8005660:	bf00      	nop
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20000e04 	.word	0x20000e04
 800566c:	20000e08 	.word	0x20000e08

08005670 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005676:	f000 f965 	bl	8005944 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800567a:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <prvCheckForValidListAndQueue+0x60>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d120      	bne.n	80056c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005682:	4814      	ldr	r0, [pc, #80]	; (80056d4 <prvCheckForValidListAndQueue+0x64>)
 8005684:	f7fd fd6a 	bl	800315c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005688:	4813      	ldr	r0, [pc, #76]	; (80056d8 <prvCheckForValidListAndQueue+0x68>)
 800568a:	f7fd fd67 	bl	800315c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800568e:	4b13      	ldr	r3, [pc, #76]	; (80056dc <prvCheckForValidListAndQueue+0x6c>)
 8005690:	4a10      	ldr	r2, [pc, #64]	; (80056d4 <prvCheckForValidListAndQueue+0x64>)
 8005692:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005694:	4b12      	ldr	r3, [pc, #72]	; (80056e0 <prvCheckForValidListAndQueue+0x70>)
 8005696:	4a10      	ldr	r2, [pc, #64]	; (80056d8 <prvCheckForValidListAndQueue+0x68>)
 8005698:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800569a:	2300      	movs	r3, #0
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	4b11      	ldr	r3, [pc, #68]	; (80056e4 <prvCheckForValidListAndQueue+0x74>)
 80056a0:	4a11      	ldr	r2, [pc, #68]	; (80056e8 <prvCheckForValidListAndQueue+0x78>)
 80056a2:	2110      	movs	r1, #16
 80056a4:	200a      	movs	r0, #10
 80056a6:	f7fd fe75 	bl	8003394 <xQueueGenericCreateStatic>
 80056aa:	4603      	mov	r3, r0
 80056ac:	4a08      	ldr	r2, [pc, #32]	; (80056d0 <prvCheckForValidListAndQueue+0x60>)
 80056ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056b0:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <prvCheckForValidListAndQueue+0x60>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d005      	beq.n	80056c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056b8:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <prvCheckForValidListAndQueue+0x60>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	490b      	ldr	r1, [pc, #44]	; (80056ec <prvCheckForValidListAndQueue+0x7c>)
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe fc78 	bl	8003fb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056c4:	f000 f96e 	bl	80059a4 <vPortExitCritical>
}
 80056c8:	bf00      	nop
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20000e0c 	.word	0x20000e0c
 80056d4:	20000ddc 	.word	0x20000ddc
 80056d8:	20000df0 	.word	0x20000df0
 80056dc:	20000e04 	.word	0x20000e04
 80056e0:	20000e08 	.word	0x20000e08
 80056e4:	20000eb8 	.word	0x20000eb8
 80056e8:	20000e18 	.word	0x20000e18
 80056ec:	080061a0 	.word	0x080061a0

080056f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3b04      	subs	r3, #4
 8005700:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3b04      	subs	r3, #4
 800570e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f023 0201 	bic.w	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3b04      	subs	r3, #4
 800571e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005720:	4a0c      	ldr	r2, [pc, #48]	; (8005754 <pxPortInitialiseStack+0x64>)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3b14      	subs	r3, #20
 800572a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3b04      	subs	r3, #4
 8005736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f06f 0202 	mvn.w	r2, #2
 800573e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3b20      	subs	r3, #32
 8005744:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005746:	68fb      	ldr	r3, [r7, #12]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	08005759 	.word	0x08005759

08005758 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005762:	4b12      	ldr	r3, [pc, #72]	; (80057ac <prvTaskExitError+0x54>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d00a      	beq.n	8005782 <prvTaskExitError+0x2a>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	60fb      	str	r3, [r7, #12]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <prvTaskExitError+0x28>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	60bb      	str	r3, [r7, #8]
}
 8005794:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005796:	bf00      	nop
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0fc      	beq.n	8005798 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	2000000c 	.word	0x2000000c

080057b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057b0:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <pxCurrentTCBConst2>)
 80057b2:	6819      	ldr	r1, [r3, #0]
 80057b4:	6808      	ldr	r0, [r1, #0]
 80057b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ba:	f380 8809 	msr	PSP, r0
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f04f 0000 	mov.w	r0, #0
 80057c6:	f380 8811 	msr	BASEPRI, r0
 80057ca:	4770      	bx	lr
 80057cc:	f3af 8000 	nop.w

080057d0 <pxCurrentTCBConst2>:
 80057d0:	200008dc 	.word	0x200008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop

080057d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057d8:	4808      	ldr	r0, [pc, #32]	; (80057fc <prvPortStartFirstTask+0x24>)
 80057da:	6800      	ldr	r0, [r0, #0]
 80057dc:	6800      	ldr	r0, [r0, #0]
 80057de:	f380 8808 	msr	MSP, r0
 80057e2:	f04f 0000 	mov.w	r0, #0
 80057e6:	f380 8814 	msr	CONTROL, r0
 80057ea:	b662      	cpsie	i
 80057ec:	b661      	cpsie	f
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	df00      	svc	0
 80057f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057fa:	bf00      	nop
 80057fc:	e000ed08 	.word	0xe000ed08

08005800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005806:	4b46      	ldr	r3, [pc, #280]	; (8005920 <xPortStartScheduler+0x120>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a46      	ldr	r2, [pc, #280]	; (8005924 <xPortStartScheduler+0x124>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d10a      	bne.n	8005826 <xPortStartScheduler+0x26>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	613b      	str	r3, [r7, #16]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005826:	4b3e      	ldr	r3, [pc, #248]	; (8005920 <xPortStartScheduler+0x120>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a3f      	ldr	r2, [pc, #252]	; (8005928 <xPortStartScheduler+0x128>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d10a      	bne.n	8005846 <xPortStartScheduler+0x46>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	60fb      	str	r3, [r7, #12]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005846:	4b39      	ldr	r3, [pc, #228]	; (800592c <xPortStartScheduler+0x12c>)
 8005848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	22ff      	movs	r2, #255	; 0xff
 8005856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005868:	b2da      	uxtb	r2, r3
 800586a:	4b31      	ldr	r3, [pc, #196]	; (8005930 <xPortStartScheduler+0x130>)
 800586c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800586e:	4b31      	ldr	r3, [pc, #196]	; (8005934 <xPortStartScheduler+0x134>)
 8005870:	2207      	movs	r2, #7
 8005872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005874:	e009      	b.n	800588a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005876:	4b2f      	ldr	r3, [pc, #188]	; (8005934 <xPortStartScheduler+0x134>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3b01      	subs	r3, #1
 800587c:	4a2d      	ldr	r2, [pc, #180]	; (8005934 <xPortStartScheduler+0x134>)
 800587e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	b2db      	uxtb	r3, r3
 8005888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800588a:	78fb      	ldrb	r3, [r7, #3]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005892:	2b80      	cmp	r3, #128	; 0x80
 8005894:	d0ef      	beq.n	8005876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005896:	4b27      	ldr	r3, [pc, #156]	; (8005934 <xPortStartScheduler+0x134>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f1c3 0307 	rsb	r3, r3, #7
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d00a      	beq.n	80058b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	60bb      	str	r3, [r7, #8]
}
 80058b4:	bf00      	nop
 80058b6:	e7fe      	b.n	80058b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058b8:	4b1e      	ldr	r3, [pc, #120]	; (8005934 <xPortStartScheduler+0x134>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <xPortStartScheduler+0x134>)
 80058c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058c2:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <xPortStartScheduler+0x134>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058ca:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <xPortStartScheduler+0x134>)
 80058cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058d6:	4b18      	ldr	r3, [pc, #96]	; (8005938 <xPortStartScheduler+0x138>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a17      	ldr	r2, [pc, #92]	; (8005938 <xPortStartScheduler+0x138>)
 80058dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058e2:	4b15      	ldr	r3, [pc, #84]	; (8005938 <xPortStartScheduler+0x138>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a14      	ldr	r2, [pc, #80]	; (8005938 <xPortStartScheduler+0x138>)
 80058e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058ee:	f000 f8dd 	bl	8005aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058f2:	4b12      	ldr	r3, [pc, #72]	; (800593c <xPortStartScheduler+0x13c>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058f8:	f000 f8fc 	bl	8005af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058fc:	4b10      	ldr	r3, [pc, #64]	; (8005940 <xPortStartScheduler+0x140>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a0f      	ldr	r2, [pc, #60]	; (8005940 <xPortStartScheduler+0x140>)
 8005902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005908:	f7ff ff66 	bl	80057d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800590c:	f7fe ff4e 	bl	80047ac <vTaskSwitchContext>
	prvTaskExitError();
 8005910:	f7ff ff22 	bl	8005758 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	e000ed00 	.word	0xe000ed00
 8005924:	410fc271 	.word	0x410fc271
 8005928:	410fc270 	.word	0x410fc270
 800592c:	e000e400 	.word	0xe000e400
 8005930:	20000f08 	.word	0x20000f08
 8005934:	20000f0c 	.word	0x20000f0c
 8005938:	e000ed20 	.word	0xe000ed20
 800593c:	2000000c 	.word	0x2000000c
 8005940:	e000ef34 	.word	0xe000ef34

08005944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	607b      	str	r3, [r7, #4]
}
 800595c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800595e:	4b0f      	ldr	r3, [pc, #60]	; (800599c <vPortEnterCritical+0x58>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3301      	adds	r3, #1
 8005964:	4a0d      	ldr	r2, [pc, #52]	; (800599c <vPortEnterCritical+0x58>)
 8005966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005968:	4b0c      	ldr	r3, [pc, #48]	; (800599c <vPortEnterCritical+0x58>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d10f      	bne.n	8005990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <vPortEnterCritical+0x5c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <vPortEnterCritical+0x4c>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	603b      	str	r3, [r7, #0]
}
 800598c:	bf00      	nop
 800598e:	e7fe      	b.n	800598e <vPortEnterCritical+0x4a>
	}
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	2000000c 	.word	0x2000000c
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059aa:	4b12      	ldr	r3, [pc, #72]	; (80059f4 <vPortExitCritical+0x50>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <vPortExitCritical+0x24>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	607b      	str	r3, [r7, #4]
}
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059c8:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <vPortExitCritical+0x50>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	4a09      	ldr	r2, [pc, #36]	; (80059f4 <vPortExitCritical+0x50>)
 80059d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059d2:	4b08      	ldr	r3, [pc, #32]	; (80059f4 <vPortExitCritical+0x50>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d105      	bne.n	80059e6 <vPortExitCritical+0x42>
 80059da:	2300      	movs	r3, #0
 80059dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	f383 8811 	msr	BASEPRI, r3
}
 80059e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	2000000c 	.word	0x2000000c
	...

08005a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a00:	f3ef 8009 	mrs	r0, PSP
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	4b15      	ldr	r3, [pc, #84]	; (8005a60 <pxCurrentTCBConst>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	f01e 0f10 	tst.w	lr, #16
 8005a10:	bf08      	it	eq
 8005a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1a:	6010      	str	r0, [r2, #0]
 8005a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a24:	f380 8811 	msr	BASEPRI, r0
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f7fe febc 	bl	80047ac <vTaskSwitchContext>
 8005a34:	f04f 0000 	mov.w	r0, #0
 8005a38:	f380 8811 	msr	BASEPRI, r0
 8005a3c:	bc09      	pop	{r0, r3}
 8005a3e:	6819      	ldr	r1, [r3, #0]
 8005a40:	6808      	ldr	r0, [r1, #0]
 8005a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a46:	f01e 0f10 	tst.w	lr, #16
 8005a4a:	bf08      	it	eq
 8005a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a50:	f380 8809 	msr	PSP, r0
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	f3af 8000 	nop.w

08005a60 <pxCurrentTCBConst>:
 8005a60:	200008dc 	.word	0x200008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop

08005a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	607b      	str	r3, [r7, #4]
}
 8005a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a82:	f7fe fdd9 	bl	8004638 <xTaskIncrementTick>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a8c:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <xPortSysTickHandler+0x40>)
 8005a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	2300      	movs	r3, #0
 8005a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	f383 8811 	msr	BASEPRI, r3
}
 8005a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	e000ed04 	.word	0xe000ed04

08005aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <vPortSetupTimerInterrupt+0x34>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <vPortSetupTimerInterrupt+0x38>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005abc:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <vPortSetupTimerInterrupt+0x3c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a0a      	ldr	r2, [pc, #40]	; (8005aec <vPortSetupTimerInterrupt+0x40>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	099b      	lsrs	r3, r3, #6
 8005ac8:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <vPortSetupTimerInterrupt+0x44>)
 8005aca:	3b01      	subs	r3, #1
 8005acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ace:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <vPortSetupTimerInterrupt+0x34>)
 8005ad0:	2207      	movs	r2, #7
 8005ad2:	601a      	str	r2, [r3, #0]
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	e000e010 	.word	0xe000e010
 8005ae4:	e000e018 	.word	0xe000e018
 8005ae8:	20000000 	.word	0x20000000
 8005aec:	10624dd3 	.word	0x10624dd3
 8005af0:	e000e014 	.word	0xe000e014

08005af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b04 <vPortEnableVFP+0x10>
 8005af8:	6801      	ldr	r1, [r0, #0]
 8005afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005afe:	6001      	str	r1, [r0, #0]
 8005b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b02:	bf00      	nop
 8005b04:	e000ed88 	.word	0xe000ed88

08005b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b0e:	f3ef 8305 	mrs	r3, IPSR
 8005b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b0f      	cmp	r3, #15
 8005b18:	d914      	bls.n	8005b44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b1a:	4a17      	ldr	r2, [pc, #92]	; (8005b78 <vPortValidateInterruptPriority+0x70>)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b24:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <vPortValidateInterruptPriority+0x74>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	7afa      	ldrb	r2, [r7, #11]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d20a      	bcs.n	8005b44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	607b      	str	r3, [r7, #4]
}
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b44:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <vPortValidateInterruptPriority+0x78>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b4c:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <vPortValidateInterruptPriority+0x7c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d90a      	bls.n	8005b6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	603b      	str	r3, [r7, #0]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <vPortValidateInterruptPriority+0x60>
	}
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	e000e3f0 	.word	0xe000e3f0
 8005b7c:	20000f08 	.word	0x20000f08
 8005b80:	e000ed0c 	.word	0xe000ed0c
 8005b84:	20000f0c 	.word	0x20000f0c

08005b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	; 0x28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b94:	f7fe fc94 	bl	80044c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b98:	4b5b      	ldr	r3, [pc, #364]	; (8005d08 <pvPortMalloc+0x180>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ba0:	f000 f920 	bl	8005de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ba4:	4b59      	ldr	r3, [pc, #356]	; (8005d0c <pvPortMalloc+0x184>)
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f040 8093 	bne.w	8005cd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01d      	beq.n	8005bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005bb8:	2208      	movs	r2, #8
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d014      	beq.n	8005bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f023 0307 	bic.w	r3, r3, #7
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <pvPortMalloc+0x6c>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	617b      	str	r3, [r7, #20]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d06e      	beq.n	8005cd8 <pvPortMalloc+0x150>
 8005bfa:	4b45      	ldr	r3, [pc, #276]	; (8005d10 <pvPortMalloc+0x188>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d869      	bhi.n	8005cd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c04:	4b43      	ldr	r3, [pc, #268]	; (8005d14 <pvPortMalloc+0x18c>)
 8005c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c08:	4b42      	ldr	r3, [pc, #264]	; (8005d14 <pvPortMalloc+0x18c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c0e:	e004      	b.n	8005c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d903      	bls.n	8005c2c <pvPortMalloc+0xa4>
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f1      	bne.n	8005c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c2c:	4b36      	ldr	r3, [pc, #216]	; (8005d08 <pvPortMalloc+0x180>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d050      	beq.n	8005cd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2208      	movs	r2, #8
 8005c3c:	4413      	add	r3, r2
 8005c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	2308      	movs	r3, #8
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d91f      	bls.n	8005c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <pvPortMalloc+0xf8>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	613b      	str	r3, [r7, #16]
}
 8005c7c:	bf00      	nop
 8005c7e:	e7fe      	b.n	8005c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	1ad2      	subs	r2, r2, r3
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c92:	69b8      	ldr	r0, [r7, #24]
 8005c94:	f000 f908 	bl	8005ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c98:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <pvPortMalloc+0x188>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <pvPortMalloc+0x188>)
 8005ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ca6:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <pvPortMalloc+0x188>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <pvPortMalloc+0x190>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d203      	bcs.n	8005cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cb2:	4b17      	ldr	r3, [pc, #92]	; (8005d10 <pvPortMalloc+0x188>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <pvPortMalloc+0x190>)
 8005cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <pvPortMalloc+0x184>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cce:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <pvPortMalloc+0x194>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	4a11      	ldr	r2, [pc, #68]	; (8005d1c <pvPortMalloc+0x194>)
 8005cd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cd8:	f7fe fc00 	bl	80044dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <pvPortMalloc+0x174>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60fb      	str	r3, [r7, #12]
}
 8005cf8:	bf00      	nop
 8005cfa:	e7fe      	b.n	8005cfa <pvPortMalloc+0x172>
	return pvReturn;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3728      	adds	r7, #40	; 0x28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20004b18 	.word	0x20004b18
 8005d0c:	20004b2c 	.word	0x20004b2c
 8005d10:	20004b1c 	.word	0x20004b1c
 8005d14:	20004b10 	.word	0x20004b10
 8005d18:	20004b20 	.word	0x20004b20
 8005d1c:	20004b24 	.word	0x20004b24

08005d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d04d      	beq.n	8005dce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d32:	2308      	movs	r3, #8
 8005d34:	425b      	negs	r3, r3
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4413      	add	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <vPortFree+0xb8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <vPortFree+0x44>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60fb      	str	r3, [r7, #12]
}
 8005d60:	bf00      	nop
 8005d62:	e7fe      	b.n	8005d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <vPortFree+0x62>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	60bb      	str	r3, [r7, #8]
}
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <vPortFree+0xb8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01e      	beq.n	8005dce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d11a      	bne.n	8005dce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <vPortFree+0xb8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	43db      	mvns	r3, r3
 8005da2:	401a      	ands	r2, r3
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005da8:	f7fe fb8a 	bl	80044c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <vPortFree+0xbc>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4413      	add	r3, r2
 8005db6:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <vPortFree+0xbc>)
 8005db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dba:	6938      	ldr	r0, [r7, #16]
 8005dbc:	f000 f874 	bl	8005ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <vPortFree+0xc0>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	4a06      	ldr	r2, [pc, #24]	; (8005de0 <vPortFree+0xc0>)
 8005dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005dca:	f7fe fb87 	bl	80044dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dce:	bf00      	nop
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20004b2c 	.word	0x20004b2c
 8005ddc:	20004b1c 	.word	0x20004b1c
 8005de0:	20004b28 	.word	0x20004b28

08005de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005df0:	4b27      	ldr	r3, [pc, #156]	; (8005e90 <prvHeapInit+0xac>)
 8005df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00c      	beq.n	8005e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3307      	adds	r3, #7
 8005e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0307 	bic.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <prvHeapInit+0xac>)
 8005e14:	4413      	add	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e1c:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <prvHeapInit+0xb0>)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e22:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <prvHeapInit+0xb0>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e30:	2208      	movs	r2, #8
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0307 	bic.w	r3, r3, #7
 8005e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <prvHeapInit+0xb4>)
 8005e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e46:	4b14      	ldr	r3, [pc, #80]	; (8005e98 <prvHeapInit+0xb4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e4e:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <prvHeapInit+0xb4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e64:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <prvHeapInit+0xb4>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <prvHeapInit+0xb8>)
 8005e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <prvHeapInit+0xbc>)
 8005e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e7c:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <prvHeapInit+0xc0>)
 8005e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e82:	601a      	str	r2, [r3, #0]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	20000f10 	.word	0x20000f10
 8005e94:	20004b10 	.word	0x20004b10
 8005e98:	20004b18 	.word	0x20004b18
 8005e9c:	20004b20 	.word	0x20004b20
 8005ea0:	20004b1c 	.word	0x20004b1c
 8005ea4:	20004b2c 	.word	0x20004b2c

08005ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005eb0:	4b28      	ldr	r3, [pc, #160]	; (8005f54 <prvInsertBlockIntoFreeList+0xac>)
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e002      	b.n	8005ebc <prvInsertBlockIntoFreeList+0x14>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d8f7      	bhi.n	8005eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d108      	bne.n	8005eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	441a      	add	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	441a      	add	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d118      	bne.n	8005f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <prvInsertBlockIntoFreeList+0xb0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d00d      	beq.n	8005f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	441a      	add	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e008      	b.n	8005f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <prvInsertBlockIntoFreeList+0xb0>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	e003      	b.n	8005f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d002      	beq.n	8005f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20004b10 	.word	0x20004b10
 8005f58:	20004b18 	.word	0x20004b18

08005f5c <__libc_init_array>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	4d0d      	ldr	r5, [pc, #52]	; (8005f94 <__libc_init_array+0x38>)
 8005f60:	4c0d      	ldr	r4, [pc, #52]	; (8005f98 <__libc_init_array+0x3c>)
 8005f62:	1b64      	subs	r4, r4, r5
 8005f64:	10a4      	asrs	r4, r4, #2
 8005f66:	2600      	movs	r6, #0
 8005f68:	42a6      	cmp	r6, r4
 8005f6a:	d109      	bne.n	8005f80 <__libc_init_array+0x24>
 8005f6c:	4d0b      	ldr	r5, [pc, #44]	; (8005f9c <__libc_init_array+0x40>)
 8005f6e:	4c0c      	ldr	r4, [pc, #48]	; (8005fa0 <__libc_init_array+0x44>)
 8005f70:	f000 f8f2 	bl	8006158 <_init>
 8005f74:	1b64      	subs	r4, r4, r5
 8005f76:	10a4      	asrs	r4, r4, #2
 8005f78:	2600      	movs	r6, #0
 8005f7a:	42a6      	cmp	r6, r4
 8005f7c:	d105      	bne.n	8005f8a <__libc_init_array+0x2e>
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}
 8005f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f84:	4798      	blx	r3
 8005f86:	3601      	adds	r6, #1
 8005f88:	e7ee      	b.n	8005f68 <__libc_init_array+0xc>
 8005f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f8e:	4798      	blx	r3
 8005f90:	3601      	adds	r6, #1
 8005f92:	e7f2      	b.n	8005f7a <__libc_init_array+0x1e>
 8005f94:	08006228 	.word	0x08006228
 8005f98:	08006228 	.word	0x08006228
 8005f9c:	08006228 	.word	0x08006228
 8005fa0:	0800622c 	.word	0x0800622c

08005fa4 <__retarget_lock_acquire_recursive>:
 8005fa4:	4770      	bx	lr

08005fa6 <__retarget_lock_release_recursive>:
 8005fa6:	4770      	bx	lr

08005fa8 <memcpy>:
 8005fa8:	440a      	add	r2, r1
 8005faa:	4291      	cmp	r1, r2
 8005fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fb0:	d100      	bne.n	8005fb4 <memcpy+0xc>
 8005fb2:	4770      	bx	lr
 8005fb4:	b510      	push	{r4, lr}
 8005fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fbe:	4291      	cmp	r1, r2
 8005fc0:	d1f9      	bne.n	8005fb6 <memcpy+0xe>
 8005fc2:	bd10      	pop	{r4, pc}

08005fc4 <memset>:
 8005fc4:	4402      	add	r2, r0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d100      	bne.n	8005fce <memset+0xa>
 8005fcc:	4770      	bx	lr
 8005fce:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd2:	e7f9      	b.n	8005fc8 <memset+0x4>

08005fd4 <cleanup_glue>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	6809      	ldr	r1, [r1, #0]
 8005fda:	4605      	mov	r5, r0
 8005fdc:	b109      	cbz	r1, 8005fe2 <cleanup_glue+0xe>
 8005fde:	f7ff fff9 	bl	8005fd4 <cleanup_glue>
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fea:	f000 b869 	b.w	80060c0 <_free_r>
	...

08005ff0 <_reclaim_reent>:
 8005ff0:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <_reclaim_reent+0xb4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4283      	cmp	r3, r0
 8005ff6:	b570      	push	{r4, r5, r6, lr}
 8005ff8:	4604      	mov	r4, r0
 8005ffa:	d051      	beq.n	80060a0 <_reclaim_reent+0xb0>
 8005ffc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ffe:	b143      	cbz	r3, 8006012 <_reclaim_reent+0x22>
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d14a      	bne.n	800609c <_reclaim_reent+0xac>
 8006006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006008:	6819      	ldr	r1, [r3, #0]
 800600a:	b111      	cbz	r1, 8006012 <_reclaim_reent+0x22>
 800600c:	4620      	mov	r0, r4
 800600e:	f000 f857 	bl	80060c0 <_free_r>
 8006012:	6961      	ldr	r1, [r4, #20]
 8006014:	b111      	cbz	r1, 800601c <_reclaim_reent+0x2c>
 8006016:	4620      	mov	r0, r4
 8006018:	f000 f852 	bl	80060c0 <_free_r>
 800601c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800601e:	b111      	cbz	r1, 8006026 <_reclaim_reent+0x36>
 8006020:	4620      	mov	r0, r4
 8006022:	f000 f84d 	bl	80060c0 <_free_r>
 8006026:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006028:	b111      	cbz	r1, 8006030 <_reclaim_reent+0x40>
 800602a:	4620      	mov	r0, r4
 800602c:	f000 f848 	bl	80060c0 <_free_r>
 8006030:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006032:	b111      	cbz	r1, 800603a <_reclaim_reent+0x4a>
 8006034:	4620      	mov	r0, r4
 8006036:	f000 f843 	bl	80060c0 <_free_r>
 800603a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800603c:	b111      	cbz	r1, 8006044 <_reclaim_reent+0x54>
 800603e:	4620      	mov	r0, r4
 8006040:	f000 f83e 	bl	80060c0 <_free_r>
 8006044:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006046:	b111      	cbz	r1, 800604e <_reclaim_reent+0x5e>
 8006048:	4620      	mov	r0, r4
 800604a:	f000 f839 	bl	80060c0 <_free_r>
 800604e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006050:	b111      	cbz	r1, 8006058 <_reclaim_reent+0x68>
 8006052:	4620      	mov	r0, r4
 8006054:	f000 f834 	bl	80060c0 <_free_r>
 8006058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800605a:	b111      	cbz	r1, 8006062 <_reclaim_reent+0x72>
 800605c:	4620      	mov	r0, r4
 800605e:	f000 f82f 	bl	80060c0 <_free_r>
 8006062:	69a3      	ldr	r3, [r4, #24]
 8006064:	b1e3      	cbz	r3, 80060a0 <_reclaim_reent+0xb0>
 8006066:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006068:	4620      	mov	r0, r4
 800606a:	4798      	blx	r3
 800606c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800606e:	b1b9      	cbz	r1, 80060a0 <_reclaim_reent+0xb0>
 8006070:	4620      	mov	r0, r4
 8006072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006076:	f7ff bfad 	b.w	8005fd4 <cleanup_glue>
 800607a:	5949      	ldr	r1, [r1, r5]
 800607c:	b941      	cbnz	r1, 8006090 <_reclaim_reent+0xa0>
 800607e:	3504      	adds	r5, #4
 8006080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006082:	2d80      	cmp	r5, #128	; 0x80
 8006084:	68d9      	ldr	r1, [r3, #12]
 8006086:	d1f8      	bne.n	800607a <_reclaim_reent+0x8a>
 8006088:	4620      	mov	r0, r4
 800608a:	f000 f819 	bl	80060c0 <_free_r>
 800608e:	e7ba      	b.n	8006006 <_reclaim_reent+0x16>
 8006090:	680e      	ldr	r6, [r1, #0]
 8006092:	4620      	mov	r0, r4
 8006094:	f000 f814 	bl	80060c0 <_free_r>
 8006098:	4631      	mov	r1, r6
 800609a:	e7ef      	b.n	800607c <_reclaim_reent+0x8c>
 800609c:	2500      	movs	r5, #0
 800609e:	e7ef      	b.n	8006080 <_reclaim_reent+0x90>
 80060a0:	bd70      	pop	{r4, r5, r6, pc}
 80060a2:	bf00      	nop
 80060a4:	20000010 	.word	0x20000010

080060a8 <__malloc_lock>:
 80060a8:	4801      	ldr	r0, [pc, #4]	; (80060b0 <__malloc_lock+0x8>)
 80060aa:	f7ff bf7b 	b.w	8005fa4 <__retarget_lock_acquire_recursive>
 80060ae:	bf00      	nop
 80060b0:	20004b30 	.word	0x20004b30

080060b4 <__malloc_unlock>:
 80060b4:	4801      	ldr	r0, [pc, #4]	; (80060bc <__malloc_unlock+0x8>)
 80060b6:	f7ff bf76 	b.w	8005fa6 <__retarget_lock_release_recursive>
 80060ba:	bf00      	nop
 80060bc:	20004b30 	.word	0x20004b30

080060c0 <_free_r>:
 80060c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060c2:	2900      	cmp	r1, #0
 80060c4:	d044      	beq.n	8006150 <_free_r+0x90>
 80060c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ca:	9001      	str	r0, [sp, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f1a1 0404 	sub.w	r4, r1, #4
 80060d2:	bfb8      	it	lt
 80060d4:	18e4      	addlt	r4, r4, r3
 80060d6:	f7ff ffe7 	bl	80060a8 <__malloc_lock>
 80060da:	4a1e      	ldr	r2, [pc, #120]	; (8006154 <_free_r+0x94>)
 80060dc:	9801      	ldr	r0, [sp, #4]
 80060de:	6813      	ldr	r3, [r2, #0]
 80060e0:	b933      	cbnz	r3, 80060f0 <_free_r+0x30>
 80060e2:	6063      	str	r3, [r4, #4]
 80060e4:	6014      	str	r4, [r2, #0]
 80060e6:	b003      	add	sp, #12
 80060e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060ec:	f7ff bfe2 	b.w	80060b4 <__malloc_unlock>
 80060f0:	42a3      	cmp	r3, r4
 80060f2:	d908      	bls.n	8006106 <_free_r+0x46>
 80060f4:	6825      	ldr	r5, [r4, #0]
 80060f6:	1961      	adds	r1, r4, r5
 80060f8:	428b      	cmp	r3, r1
 80060fa:	bf01      	itttt	eq
 80060fc:	6819      	ldreq	r1, [r3, #0]
 80060fe:	685b      	ldreq	r3, [r3, #4]
 8006100:	1949      	addeq	r1, r1, r5
 8006102:	6021      	streq	r1, [r4, #0]
 8006104:	e7ed      	b.n	80060e2 <_free_r+0x22>
 8006106:	461a      	mov	r2, r3
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	b10b      	cbz	r3, 8006110 <_free_r+0x50>
 800610c:	42a3      	cmp	r3, r4
 800610e:	d9fa      	bls.n	8006106 <_free_r+0x46>
 8006110:	6811      	ldr	r1, [r2, #0]
 8006112:	1855      	adds	r5, r2, r1
 8006114:	42a5      	cmp	r5, r4
 8006116:	d10b      	bne.n	8006130 <_free_r+0x70>
 8006118:	6824      	ldr	r4, [r4, #0]
 800611a:	4421      	add	r1, r4
 800611c:	1854      	adds	r4, r2, r1
 800611e:	42a3      	cmp	r3, r4
 8006120:	6011      	str	r1, [r2, #0]
 8006122:	d1e0      	bne.n	80060e6 <_free_r+0x26>
 8006124:	681c      	ldr	r4, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	6053      	str	r3, [r2, #4]
 800612a:	4421      	add	r1, r4
 800612c:	6011      	str	r1, [r2, #0]
 800612e:	e7da      	b.n	80060e6 <_free_r+0x26>
 8006130:	d902      	bls.n	8006138 <_free_r+0x78>
 8006132:	230c      	movs	r3, #12
 8006134:	6003      	str	r3, [r0, #0]
 8006136:	e7d6      	b.n	80060e6 <_free_r+0x26>
 8006138:	6825      	ldr	r5, [r4, #0]
 800613a:	1961      	adds	r1, r4, r5
 800613c:	428b      	cmp	r3, r1
 800613e:	bf04      	itt	eq
 8006140:	6819      	ldreq	r1, [r3, #0]
 8006142:	685b      	ldreq	r3, [r3, #4]
 8006144:	6063      	str	r3, [r4, #4]
 8006146:	bf04      	itt	eq
 8006148:	1949      	addeq	r1, r1, r5
 800614a:	6021      	streq	r1, [r4, #0]
 800614c:	6054      	str	r4, [r2, #4]
 800614e:	e7ca      	b.n	80060e6 <_free_r+0x26>
 8006150:	b003      	add	sp, #12
 8006152:	bd30      	pop	{r4, r5, pc}
 8006154:	20004b34 	.word	0x20004b34

08006158 <_init>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	bf00      	nop
 800615c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615e:	bc08      	pop	{r3}
 8006160:	469e      	mov	lr, r3
 8006162:	4770      	bx	lr

08006164 <_fini>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	bf00      	nop
 8006168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616a:	bc08      	pop	{r3}
 800616c:	469e      	mov	lr, r3
 800616e:	4770      	bx	lr
