
013_FreeRTOS_Idle_Hook.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006214  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080063a4  080063a4  000163a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800645c  0800645c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800645c  0800645c  0001645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006464  08006464  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800646c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00004a10  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a8c  20004a8c  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ddc  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032b6  00000000  00000000  00037e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  0003b140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001328  00000000  00000000  0003c590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003907  00000000  00000000  0003d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016283  00000000  00000000  000411bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d417d  00000000  00000000  00057442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b5bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000597c  00000000  00000000  0012b610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800638c 	.word	0x0800638c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800638c 	.word	0x0800638c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationIdleHook>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vApplicationIdleHook(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	ulIdleCycleCount++;
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <vApplicationIdleHook+0x18>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	4a03      	ldr	r2, [pc, #12]	; (800059c <vApplicationIdleHook+0x18>)
 8000590:	6013      	str	r3, [r2, #0]
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	200000dc 	.word	0x200000dc

080005a0 <vTaskFunction>:
void vTaskFunction(void *pvParameters)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b092      	sub	sp, #72	; 0x48
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	char *pcTaskName;
	const TickType_t xDelay250ms = pdMS_TO_TICKS(250);
 80005a8:	23fa      	movs	r3, #250	; 0xfa
 80005aa:	647b      	str	r3, [r7, #68]	; 0x44
	pcTaskName = (char *)pvParameters;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
	char buffer[50];

	for(;;)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)pcTaskName,strlen(pcTaskName), HAL_MAX_DELAY);
 80005b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80005b2:	f7ff fe0d 	bl	80001d0 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80005c0:	480e      	ldr	r0, [pc, #56]	; (80005fc <vTaskFunction+0x5c>)
 80005c2:	f001 fe14 	bl	80021ee <HAL_UART_Transmit>
		sprintf(buffer, "ulIdleCycleCount : %ld\r\n",ulIdleCycleCount);
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <vTaskFunction+0x60>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	490d      	ldr	r1, [pc, #52]	; (8000604 <vTaskFunction+0x64>)
 80005d0:	4618      	mov	r0, r3
 80005d2:	f005 fa7b 	bl	8005acc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fdf8 	bl	80001d0 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	f107 010c 	add.w	r1, r7, #12
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <vTaskFunction+0x5c>)
 80005ee:	f001 fdfe 	bl	80021ee <HAL_UART_Transmit>
		vTaskDelay(xDelay250ms);
 80005f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80005f4:	f003 fd48 	bl	8004088 <vTaskDelay>
	{
 80005f8:	e7da      	b.n	80005b0 <vTaskFunction+0x10>
 80005fa:	bf00      	nop
 80005fc:	20000098 	.word	0x20000098
 8000600:	200000dc 	.word	0x200000dc
 8000604:	080063a4 	.word	0x080063a4

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fabd 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f829 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f8bb 	bl	8000790 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061a:	f000 f88f 	bl	800073c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(vTaskFunction, "Task 1", 1000, (void *)Task1Text, 2, NULL);
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <main+0x4c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2200      	movs	r2, #0
 8000624:	9201      	str	r2, [sp, #4]
 8000626:	2202      	movs	r2, #2
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800062e:	490a      	ldr	r1, [pc, #40]	; (8000658 <main+0x50>)
 8000630:	480a      	ldr	r0, [pc, #40]	; (800065c <main+0x54>)
 8000632:	f003 fbe4 	bl	8003dfe <xTaskCreate>
  xTaskCreate(vTaskFunction, "Task 2", 1000, (void *)Task2Text, 2, NULL);
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <main+0x58>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2202      	movs	r2, #2
 8000640:	9200      	str	r2, [sp, #0]
 8000642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000646:	4907      	ldr	r1, [pc, #28]	; (8000664 <main+0x5c>)
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <main+0x54>)
 800064a:	f003 fbd8 	bl	8003dfe <xTaskCreate>
  vTaskStartScheduler();
 800064e:	f003 fd4f 	bl	80040f0 <vTaskStartScheduler>

  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x4a>
 8000654:	20000000 	.word	0x20000000
 8000658:	080063c0 	.word	0x080063c0
 800065c:	080005a1 	.word	0x080005a1
 8000660:	20000004 	.word	0x20000004
 8000664:	080063c8 	.word	0x080063c8

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fa20 	bl	8005abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a27      	ldr	r2, [pc, #156]	; (8000734 <SystemClock_Config+0xcc>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <SystemClock_Config+0xd0>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e6:	2307      	movs	r3, #7
 80006e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fdb8 	bl	8001264 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fa:	f000 f8ad 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2105      	movs	r1, #5
 800071c:	4618      	mov	r0, r3
 800071e:	f001 f819 	bl	8001754 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000728:	f000 f896 	bl	8000858 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	; 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART2_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000774:	f001 fcee 	bl	8002154 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f86b 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000098 	.word	0x20000098
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_GPIO_Init+0x9c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a1f      	ldr	r2, [pc, #124]	; (800082c <MX_GPIO_Init+0x9c>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_GPIO_Init+0x9c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_GPIO_Init+0x9c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <MX_GPIO_Init+0x9c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_GPIO_Init+0x9c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_GPIO_Init+0x9c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a11      	ldr	r2, [pc, #68]	; (800082c <MX_GPIO_Init+0x9c>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_GPIO_Init+0x9c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <MX_GPIO_Init+0xa0>)
 8000802:	f000 fd15 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000806:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4619      	mov	r1, r3
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_GPIO_Init+0xa0>)
 8000820:	f000 fb6a 	bl	8000ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020c00 	.word	0x40020c00

08000834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000846:	f000 f9c3 	bl	8000bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40002000 	.word	0x40002000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_MspInit+0x54>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <HAL_MspInit+0x54>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_MspInit+0x54>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_MspInit+0x54>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f000 fa69 	bl	8000d80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a1d      	ldr	r2, [pc, #116]	; (8000950 <HAL_UART_MspInit+0x94>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d133      	bne.n	8000946 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <HAL_UART_MspInit+0x98>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <HAL_UART_MspInit+0x98>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <HAL_UART_MspInit+0x98>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_UART_MspInit+0x98>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a14      	ldr	r2, [pc, #80]	; (8000954 <HAL_UART_MspInit+0x98>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_UART_MspInit+0x98>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000916:	230c      	movs	r3, #12
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000926:	2307      	movs	r3, #7
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4809      	ldr	r0, [pc, #36]	; (8000958 <HAL_UART_MspInit+0x9c>)
 8000932:	f000 fae1 	bl	8000ef8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2105      	movs	r1, #5
 800093a:	2026      	movs	r0, #38	; 0x26
 800093c:	f000 fa20 	bl	8000d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000940:	2026      	movs	r0, #38	; 0x26
 8000942:	f000 fa39 	bl	8000db8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40004400 	.word	0x40004400
 8000954:	40023800 	.word	0x40023800
 8000958:	40020000 	.word	0x40020000

0800095c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	; 0x38
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <HAL_InitTick+0xe4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	4a32      	ldr	r2, [pc, #200]	; (8000a40 <HAL_InitTick+0xe4>)
 8000976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097a:	6413      	str	r3, [r2, #64]	; 0x40
 800097c:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <HAL_InitTick+0xe4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000988:	f107 0210 	add.w	r2, r7, #16
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f8fe 	bl	8001b94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000998:	6a3b      	ldr	r3, [r7, #32]
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d103      	bne.n	80009aa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009a2:	f001 f8cf 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 80009a6:	6378      	str	r0, [r7, #52]	; 0x34
 80009a8:	e004      	b.n	80009b4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009aa:	f001 f8cb 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 80009ae:	4603      	mov	r3, r0
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b6:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <HAL_InitTick+0xe8>)
 80009b8:	fba2 2303 	umull	r2, r3, r2, r3
 80009bc:	0c9b      	lsrs	r3, r3, #18
 80009be:	3b01      	subs	r3, #1
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <HAL_InitTick+0xec>)
 80009c4:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <HAL_InitTick+0xf0>)
 80009c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <HAL_InitTick+0xec>)
 80009ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ce:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80009d0:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <HAL_InitTick+0xec>)
 80009d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <HAL_InitTick+0xec>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <HAL_InitTick+0xec>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <HAL_InitTick+0xec>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80009e8:	4817      	ldr	r0, [pc, #92]	; (8000a48 <HAL_InitTick+0xec>)
 80009ea:	f001 f905 	bl	8001bf8 <HAL_TIM_Base_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d11b      	bne.n	8000a34 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80009fc:	4812      	ldr	r0, [pc, #72]	; (8000a48 <HAL_InitTick+0xec>)
 80009fe:	f001 f955 	bl	8001cac <HAL_TIM_Base_Start_IT>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d111      	bne.n	8000a34 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a10:	202d      	movs	r0, #45	; 0x2d
 8000a12:	f000 f9d1 	bl	8000db8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d808      	bhi.n	8000a2e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	202d      	movs	r0, #45	; 0x2d
 8000a22:	f000 f9ad 	bl	8000d80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_InitTick+0xf4>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	e002      	b.n	8000a34 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3738      	adds	r7, #56	; 0x38
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	431bde83 	.word	0x431bde83
 8000a48:	200000e0 	.word	0x200000e0
 8000a4c:	40002000 	.word	0x40002000
 8000a50:	2000000c 	.word	0x2000000c

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <USART2_IRQHandler+0x10>)
 8000a86:	f001 fc45 	bl	8002314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000098 	.word	0x20000098

08000a94 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000a9a:	f001 f977 	bl	8001d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000e0 	.word	0x200000e0

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f004 ffb8 	bl	8005a4c <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20020000 	.word	0x20020000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	20000128 	.word	0x20000128
 8000b10:	20004a90 	.word	0x20004a90

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b3e:	490e      	ldr	r1, [pc, #56]	; (8000b78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b54:	4c0b      	ldr	r4, [pc, #44]	; (8000b84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b62:	f7ff ffd7 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f004 ff77 	bl	8005a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fd4d 	bl	8000608 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000b7c:	0800646c 	.word	0x0800646c
  ldr r2, =_sbss
 8000b80:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000b84:	20004a8c 	.word	0x20004a8c

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <HAL_Init+0x40>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_Init+0x40>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_Init+0x40>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f8d8 	bl	8000d6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f7ff fece 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fe50 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000010 	.word	0x20000010
 8000bf4:	2000012c 	.word	0x2000012c

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000012c 	.word	0x2000012c

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	; (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff4c 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d92:	f7ff ff61 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	6978      	ldr	r0, [r7, #20]
 8000d9e:	f7ff ffb1 	bl	8000d04 <NVIC_EncodePriority>
 8000da2:	4602      	mov	r2, r0
 8000da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff80 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff54 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000de2:	f7ff ff09 	bl	8000bf8 <HAL_GetTick>
 8000de6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d008      	beq.n	8000e06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e052      	b.n	8000eac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0216 	bic.w	r2, r2, #22
 8000e14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	695a      	ldr	r2, [r3, #20]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d103      	bne.n	8000e36 <HAL_DMA_Abort+0x62>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d007      	beq.n	8000e46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0208 	bic.w	r2, r2, #8
 8000e44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0201 	bic.w	r2, r2, #1
 8000e54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e56:	e013      	b.n	8000e80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e58:	f7ff fece 	bl	8000bf8 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b05      	cmp	r3, #5
 8000e64:	d90c      	bls.n	8000e80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2220      	movs	r2, #32
 8000e6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2203      	movs	r2, #3
 8000e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e015      	b.n	8000eac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1e4      	bne.n	8000e58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e92:	223f      	movs	r2, #63	; 0x3f
 8000e94:	409a      	lsls	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d004      	beq.n	8000ed2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2280      	movs	r2, #128	; 0x80
 8000ecc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00c      	b.n	8000eec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 0201 	bic.w	r2, r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e16b      	b.n	80011ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 815a 	bne.w	80011e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d005      	beq.n	8000f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80b4 	beq.w	80011e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b60      	ldr	r3, [pc, #384]	; (8001204 <HAL_GPIO_Init+0x30c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a5f      	ldr	r2, [pc, #380]	; (8001204 <HAL_GPIO_Init+0x30c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <HAL_GPIO_Init+0x30c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a5b      	ldr	r2, [pc, #364]	; (8001208 <HAL_GPIO_Init+0x310>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a52      	ldr	r2, [pc, #328]	; (800120c <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d02b      	beq.n	800111e <HAL_GPIO_Init+0x226>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a51      	ldr	r2, [pc, #324]	; (8001210 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d025      	beq.n	800111a <HAL_GPIO_Init+0x222>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a50      	ldr	r2, [pc, #320]	; (8001214 <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d01f      	beq.n	8001116 <HAL_GPIO_Init+0x21e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	; (8001218 <HAL_GPIO_Init+0x320>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d019      	beq.n	8001112 <HAL_GPIO_Init+0x21a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	; (800121c <HAL_GPIO_Init+0x324>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x216>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <HAL_GPIO_Init+0x328>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x212>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	; (8001224 <HAL_GPIO_Init+0x32c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x20e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <HAL_GPIO_Init+0x330>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x20a>
 80010fe:	2307      	movs	r3, #7
 8001100:	e00e      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001102:	2308      	movs	r3, #8
 8001104:	e00c      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001106:	2306      	movs	r3, #6
 8001108:	e00a      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800110a:	2305      	movs	r3, #5
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800110e:	2304      	movs	r3, #4
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800111e:	2300      	movs	r3, #0
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4935      	ldr	r1, [pc, #212]	; (8001208 <HAL_GPIO_Init+0x310>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <HAL_GPIO_Init+0x334>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a32      	ldr	r2, [pc, #200]	; (800122c <HAL_GPIO_Init+0x334>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b30      	ldr	r3, [pc, #192]	; (800122c <HAL_GPIO_Init+0x334>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a27      	ldr	r2, [pc, #156]	; (800122c <HAL_GPIO_Init+0x334>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <HAL_GPIO_Init+0x334>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_GPIO_Init+0x334>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_GPIO_Init+0x334>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <HAL_GPIO_Init+0x334>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	f67f ae90 	bls.w	8000f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40013800 	.word	0x40013800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40020800 	.word	0x40020800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40021400 	.word	0x40021400
 8001224:	40021800 	.word	0x40021800
 8001228:	40021c00 	.word	0x40021c00
 800122c:	40013c00 	.word	0x40013c00

08001230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
 800123c:	4613      	mov	r3, r2
 800123e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001240:	787b      	ldrb	r3, [r7, #1]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800124c:	e003      	b.n	8001256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	041a      	lsls	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	619a      	str	r2, [r3, #24]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e267      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d075      	beq.n	800136e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001282:	4b88      	ldr	r3, [pc, #544]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b04      	cmp	r3, #4
 800128c:	d00c      	beq.n	80012a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128e:	4b85      	ldr	r3, [pc, #532]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001296:	2b08      	cmp	r3, #8
 8001298:	d112      	bne.n	80012c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800129a:	4b82      	ldr	r3, [pc, #520]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012a6:	d10b      	bne.n	80012c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	4b7e      	ldr	r3, [pc, #504]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d05b      	beq.n	800136c <HAL_RCC_OscConfig+0x108>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d157      	bne.n	800136c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e242      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c8:	d106      	bne.n	80012d8 <HAL_RCC_OscConfig+0x74>
 80012ca:	4b76      	ldr	r3, [pc, #472]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a75      	ldr	r2, [pc, #468]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e01d      	b.n	8001314 <HAL_RCC_OscConfig+0xb0>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x98>
 80012e2:	4b70      	ldr	r3, [pc, #448]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a6f      	ldr	r2, [pc, #444]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b6d      	ldr	r3, [pc, #436]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a6c      	ldr	r2, [pc, #432]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e00b      	b.n	8001314 <HAL_RCC_OscConfig+0xb0>
 80012fc:	4b69      	ldr	r3, [pc, #420]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a68      	ldr	r2, [pc, #416]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b66      	ldr	r3, [pc, #408]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a65      	ldr	r2, [pc, #404]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 800130e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fc6c 	bl	8000bf8 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fc68 	bl	8000bf8 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e207      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	4b5b      	ldr	r3, [pc, #364]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0xc0>
 8001342:	e014      	b.n	800136e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fc58 	bl	8000bf8 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fc54 	bl	8000bf8 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e1f3      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135e:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0xe8>
 800136a:	e000      	b.n	800136e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d063      	beq.n	8001442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137a:	4b4a      	ldr	r3, [pc, #296]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00b      	beq.n	800139e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001386:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138e:	2b08      	cmp	r3, #8
 8001390:	d11c      	bne.n	80013cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001392:	4b44      	ldr	r3, [pc, #272]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d116      	bne.n	80013cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <HAL_RCC_OscConfig+0x152>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e1c7      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b6:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4937      	ldr	r1, [pc, #220]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	e03a      	b.n	8001442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d020      	beq.n	8001416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d4:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <HAL_RCC_OscConfig+0x244>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff fc0d 	bl	8000bf8 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff fc09 	bl	8000bf8 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e1a8      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f4:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4925      	ldr	r1, [pc, #148]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001410:	4313      	orrs	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
 8001414:	e015      	b.n	8001442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001416:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <HAL_RCC_OscConfig+0x244>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fbec 	bl	8000bf8 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001424:	f7ff fbe8 	bl	8000bf8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e187      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d036      	beq.n	80014bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d016      	beq.n	8001484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_RCC_OscConfig+0x248>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7ff fbcc 	bl	8000bf8 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fbc8 	bl	8000bf8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e167      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x200>
 8001482:	e01b      	b.n	80014bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_RCC_OscConfig+0x248>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148a:	f7ff fbb5 	bl	8000bf8 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	e00e      	b.n	80014b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001492:	f7ff fbb1 	bl	8000bf8 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d907      	bls.n	80014b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e150      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
 80014a4:	40023800 	.word	0x40023800
 80014a8:	42470000 	.word	0x42470000
 80014ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b0:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80014b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1ea      	bne.n	8001492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 8097 	beq.w	80015f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ce:	4b81      	ldr	r3, [pc, #516]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10f      	bne.n	80014fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	4b7d      	ldr	r3, [pc, #500]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a7c      	ldr	r2, [pc, #496]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b7a      	ldr	r3, [pc, #488]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f6:	2301      	movs	r3, #1
 80014f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fa:	4b77      	ldr	r3, [pc, #476]	; (80016d8 <HAL_RCC_OscConfig+0x474>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	2b00      	cmp	r3, #0
 8001504:	d118      	bne.n	8001538 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001506:	4b74      	ldr	r3, [pc, #464]	; (80016d8 <HAL_RCC_OscConfig+0x474>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a73      	ldr	r2, [pc, #460]	; (80016d8 <HAL_RCC_OscConfig+0x474>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001512:	f7ff fb71 	bl	8000bf8 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151a:	f7ff fb6d 	bl	8000bf8 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e10c      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <HAL_RCC_OscConfig+0x474>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d106      	bne.n	800154e <HAL_RCC_OscConfig+0x2ea>
 8001540:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	4a63      	ldr	r2, [pc, #396]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6713      	str	r3, [r2, #112]	; 0x70
 800154c:	e01c      	b.n	8001588 <HAL_RCC_OscConfig+0x324>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b05      	cmp	r3, #5
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x30c>
 8001556:	4b5f      	ldr	r3, [pc, #380]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	4a5e      	ldr	r2, [pc, #376]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6713      	str	r3, [r2, #112]	; 0x70
 8001562:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a5b      	ldr	r2, [pc, #364]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
 800156e:	e00b      	b.n	8001588 <HAL_RCC_OscConfig+0x324>
 8001570:	4b58      	ldr	r3, [pc, #352]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001574:	4a57      	ldr	r2, [pc, #348]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001576:	f023 0301 	bic.w	r3, r3, #1
 800157a:	6713      	str	r3, [r2, #112]	; 0x70
 800157c:	4b55      	ldr	r3, [pc, #340]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001580:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001582:	f023 0304 	bic.w	r3, r3, #4
 8001586:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d015      	beq.n	80015bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff fb32 	bl	8000bf8 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fb2e 	bl	8000bf8 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0cb      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0ee      	beq.n	8001598 <HAL_RCC_OscConfig+0x334>
 80015ba:	e014      	b.n	80015e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015bc:	f7ff fb1c 	bl	8000bf8 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c2:	e00a      	b.n	80015da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff fb18 	bl	8000bf8 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e0b5      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015da:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ee      	bne.n	80015c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e6:	7dfb      	ldrb	r3, [r7, #23]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d105      	bne.n	80015f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ec:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	4a38      	ldr	r2, [pc, #224]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80015f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a1 	beq.w	8001744 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001602:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b08      	cmp	r3, #8
 800160c:	d05c      	beq.n	80016c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d141      	bne.n	800169a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_RCC_OscConfig+0x478>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff faec 	bl	8000bf8 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff fae8 	bl	8000bf8 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e087      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69da      	ldr	r2, [r3, #28]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	019b      	lsls	r3, r3, #6
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	085b      	lsrs	r3, r3, #1
 800165a:	3b01      	subs	r3, #1
 800165c:	041b      	lsls	r3, r3, #16
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	061b      	lsls	r3, r3, #24
 8001666:	491b      	ldr	r1, [pc, #108]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_RCC_OscConfig+0x478>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fac1 	bl	8000bf8 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167a:	f7ff fabd 	bl	8000bf8 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e05c      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x416>
 8001698:	e054      	b.n	8001744 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_RCC_OscConfig+0x478>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff faaa 	bl	8000bf8 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff faa6 	bl	8000bf8 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e045      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x444>
 80016c6:	e03d      	b.n	8001744 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d107      	bne.n	80016e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e038      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000
 80016dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <HAL_RCC_OscConfig+0x4ec>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d028      	beq.n	8001740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d121      	bne.n	8001740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d11a      	bne.n	8001740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001710:	4013      	ands	r3, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001716:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001718:	4293      	cmp	r3, r2
 800171a:	d111      	bne.n	8001740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001726:	085b      	lsrs	r3, r3, #1
 8001728:	3b01      	subs	r3, #1
 800172a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d107      	bne.n	8001740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0cc      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001768:	4b68      	ldr	r3, [pc, #416]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d90c      	bls.n	8001790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b65      	ldr	r3, [pc, #404]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b63      	ldr	r3, [pc, #396]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0b8      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d020      	beq.n	80017de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a8:	4b59      	ldr	r3, [pc, #356]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a58      	ldr	r2, [pc, #352]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c0:	4b53      	ldr	r3, [pc, #332]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4a52      	ldr	r2, [pc, #328]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017cc:	4b50      	ldr	r3, [pc, #320]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	494d      	ldr	r1, [pc, #308]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d044      	beq.n	8001874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b47      	ldr	r3, [pc, #284]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d119      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e07f      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d003      	beq.n	8001812 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180e:	2b03      	cmp	r3, #3
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e06f      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001822:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e067      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001832:	4b37      	ldr	r3, [pc, #220]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f023 0203 	bic.w	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4934      	ldr	r1, [pc, #208]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001844:	f7ff f9d8 	bl	8000bf8 <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	e00a      	b.n	8001862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7ff f9d4 	bl	8000bf8 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e04f      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 020c 	and.w	r2, r3, #12
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	429a      	cmp	r2, r3
 8001872:	d1eb      	bne.n	800184c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001874:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d20c      	bcs.n	800189c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e032      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4916      	ldr	r1, [pc, #88]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	490e      	ldr	r1, [pc, #56]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018da:	f000 f821 	bl	8001920 <HAL_RCC_GetSysClockFreq>
 80018de:	4602      	mov	r2, r0
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	490a      	ldr	r1, [pc, #40]	; (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	5ccb      	ldrb	r3, [r1, r3]
 80018ee:	fa22 f303 	lsr.w	r3, r2, r3
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_RCC_ClockConfig+0x1c8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff f82e 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023c00 	.word	0x40023c00
 8001910:	40023800 	.word	0x40023800
 8001914:	08006410 	.word	0x08006410
 8001918:	20000008 	.word	0x20000008
 800191c:	2000000c 	.word	0x2000000c

08001920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001924:	b094      	sub	sp, #80	; 0x50
 8001926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	647b      	str	r3, [r7, #68]	; 0x44
 800192c:	2300      	movs	r3, #0
 800192e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001930:	2300      	movs	r3, #0
 8001932:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001938:	4b79      	ldr	r3, [pc, #484]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d00d      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x40>
 8001944:	2b08      	cmp	r3, #8
 8001946:	f200 80e1 	bhi.w	8001b0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0x34>
 800194e:	2b04      	cmp	r3, #4
 8001950:	d003      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x3a>
 8001952:	e0db      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b73      	ldr	r3, [pc, #460]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001956:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001958:	e0db      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800195a:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x208>)
 800195c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800195e:	e0d8      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001960:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001968:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800196a:	4b6d      	ldr	r3, [pc, #436]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d063      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001976:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	099b      	lsrs	r3, r3, #6
 800197c:	2200      	movs	r2, #0
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001980:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
 800198a:	2300      	movs	r3, #0
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
 800198e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001992:	4622      	mov	r2, r4
 8001994:	462b      	mov	r3, r5
 8001996:	f04f 0000 	mov.w	r0, #0
 800199a:	f04f 0100 	mov.w	r1, #0
 800199e:	0159      	lsls	r1, r3, #5
 80019a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019a4:	0150      	lsls	r0, r2, #5
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4621      	mov	r1, r4
 80019ac:	1a51      	subs	r1, r2, r1
 80019ae:	6139      	str	r1, [r7, #16]
 80019b0:	4629      	mov	r1, r5
 80019b2:	eb63 0301 	sbc.w	r3, r3, r1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019c4:	4659      	mov	r1, fp
 80019c6:	018b      	lsls	r3, r1, #6
 80019c8:	4651      	mov	r1, sl
 80019ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ce:	4651      	mov	r1, sl
 80019d0:	018a      	lsls	r2, r1, #6
 80019d2:	4651      	mov	r1, sl
 80019d4:	ebb2 0801 	subs.w	r8, r2, r1
 80019d8:	4659      	mov	r1, fp
 80019da:	eb63 0901 	sbc.w	r9, r3, r1
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019f2:	4690      	mov	r8, r2
 80019f4:	4699      	mov	r9, r3
 80019f6:	4623      	mov	r3, r4
 80019f8:	eb18 0303 	adds.w	r3, r8, r3
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	462b      	mov	r3, r5
 8001a00:	eb49 0303 	adc.w	r3, r9, r3
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a12:	4629      	mov	r1, r5
 8001a14:	024b      	lsls	r3, r1, #9
 8001a16:	4621      	mov	r1, r4
 8001a18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	024a      	lsls	r2, r1, #9
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a26:	2200      	movs	r2, #0
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a30:	f7fe fc26 	bl	8000280 <__aeabi_uldivmod>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4613      	mov	r3, r2
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a3c:	e058      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	099b      	lsrs	r3, r3, #6
 8001a44:	2200      	movs	r2, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	4611      	mov	r1, r2
 8001a4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a4e:	623b      	str	r3, [r7, #32]
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
 8001a54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a58:	4642      	mov	r2, r8
 8001a5a:	464b      	mov	r3, r9
 8001a5c:	f04f 0000 	mov.w	r0, #0
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	0159      	lsls	r1, r3, #5
 8001a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a6a:	0150      	lsls	r0, r2, #5
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4641      	mov	r1, r8
 8001a72:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a76:	4649      	mov	r1, r9
 8001a78:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a90:	ebb2 040a 	subs.w	r4, r2, sl
 8001a94:	eb63 050b 	sbc.w	r5, r3, fp
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	00eb      	lsls	r3, r5, #3
 8001aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aa6:	00e2      	lsls	r2, r4, #3
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	461d      	mov	r5, r3
 8001aac:	4643      	mov	r3, r8
 8001aae:	18e3      	adds	r3, r4, r3
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	eb45 0303 	adc.w	r3, r5, r3
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	028b      	lsls	r3, r1, #10
 8001aca:	4621      	mov	r1, r4
 8001acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	028a      	lsls	r2, r1, #10
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ada:	2200      	movs	r2, #0
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	61fa      	str	r2, [r7, #28]
 8001ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae4:	f7fe fbcc 	bl	8000280 <__aeabi_uldivmod>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4613      	mov	r3, r2
 8001aee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	3301      	adds	r3, #1
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b0a:	e002      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3750      	adds	r7, #80	; 0x50
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	00f42400 	.word	0x00f42400
 8001b28:	007a1200 	.word	0x007a1200

08001b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000008 	.word	0x20000008

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b48:	f7ff fff0 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0a9b      	lsrs	r3, r3, #10
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08006420 	.word	0x08006420

08001b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b70:	f7ff ffdc 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	0b5b      	lsrs	r3, r3, #13
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4903      	ldr	r1, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	08006420 	.word	0x08006420

08001b94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_RCC_GetClockConfig+0x60>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0207 	and.w	r2, r3, #7
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	601a      	str	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40023c00 	.word	0x40023c00

08001bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e041      	b.n	8001c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f839 	bl	8001c96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f000 f9d8 	bl	8001fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d001      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e04e      	b.n	8001d62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d022      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cee:	d01d      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1f      	ldr	r2, [pc, #124]	; (8001d74 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d018      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d013      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <HAL_TIM_Base_Start_IT+0xd0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00e      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1b      	ldr	r2, [pc, #108]	; (8001d80 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d009      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d004      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d111      	bne.n	8001d50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d010      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0201 	orr.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4e:	e007      	b.n	8001d60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40010000 	.word	0x40010000
 8001d74:	40000400 	.word	0x40000400
 8001d78:	40000800 	.word	0x40000800
 8001d7c:	40000c00 	.word	0x40000c00
 8001d80:	40010400 	.word	0x40010400
 8001d84:	40014000 	.word	0x40014000
 8001d88:	40001800 	.word	0x40001800

08001d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d122      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d11b      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0202 	mvn.w	r2, #2
 8001db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8ee 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8e0 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8f1 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d122      	bne.n	8001e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d11b      	bne.n	8001e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0204 	mvn.w	r2, #4
 8001e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8c4 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001e28:	e005      	b.n	8001e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8b6 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8c7 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d122      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d11b      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0208 	mvn.w	r2, #8
 8001e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2204      	movs	r2, #4
 8001e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f89a 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f88c 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f89d 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d122      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0210 	mvn.w	r2, #16
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2208      	movs	r2, #8
 8001eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f870 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f862 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f873 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0201 	mvn.w	r2, #1
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe fc92 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b80      	cmp	r3, #128	; 0x80
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f902 	bl	8002140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f46:	2b40      	cmp	r3, #64	; 0x40
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f54:	2b40      	cmp	r3, #64	; 0x40
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f838 	bl	8001fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d10e      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d107      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0220 	mvn.w	r2, #32
 8001f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8cc 	bl	800212c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a40      	ldr	r2, [pc, #256]	; (8002100 <TIM_Base_SetConfig+0x114>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200a:	d00f      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3d      	ldr	r2, [pc, #244]	; (8002104 <TIM_Base_SetConfig+0x118>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00b      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3c      	ldr	r2, [pc, #240]	; (8002108 <TIM_Base_SetConfig+0x11c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3b      	ldr	r2, [pc, #236]	; (800210c <TIM_Base_SetConfig+0x120>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d003      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3a      	ldr	r2, [pc, #232]	; (8002110 <TIM_Base_SetConfig+0x124>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d108      	bne.n	800203e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <TIM_Base_SetConfig+0x114>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204c:	d027      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2c      	ldr	r2, [pc, #176]	; (8002104 <TIM_Base_SetConfig+0x118>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d023      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2b      	ldr	r2, [pc, #172]	; (8002108 <TIM_Base_SetConfig+0x11c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01f      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2a      	ldr	r2, [pc, #168]	; (800210c <TIM_Base_SetConfig+0x120>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a29      	ldr	r2, [pc, #164]	; (8002110 <TIM_Base_SetConfig+0x124>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d017      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a28      	ldr	r2, [pc, #160]	; (8002114 <TIM_Base_SetConfig+0x128>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <TIM_Base_SetConfig+0x12c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00f      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <TIM_Base_SetConfig+0x130>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a25      	ldr	r2, [pc, #148]	; (8002120 <TIM_Base_SetConfig+0x134>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a24      	ldr	r2, [pc, #144]	; (8002124 <TIM_Base_SetConfig+0x138>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a23      	ldr	r2, [pc, #140]	; (8002128 <TIM_Base_SetConfig+0x13c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <TIM_Base_SetConfig+0x114>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <TIM_Base_SetConfig+0xf8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <TIM_Base_SetConfig+0x124>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d103      	bne.n	80020ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	615a      	str	r2, [r3, #20]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40010000 	.word	0x40010000
 8002104:	40000400 	.word	0x40000400
 8002108:	40000800 	.word	0x40000800
 800210c:	40000c00 	.word	0x40000c00
 8002110:	40010400 	.word	0x40010400
 8002114:	40014000 	.word	0x40014000
 8002118:	40014400 	.word	0x40014400
 800211c:	40014800 	.word	0x40014800
 8002120:	40001800 	.word	0x40001800
 8002124:	40001c00 	.word	0x40001c00
 8002128:	40002000 	.word	0x40002000

0800212c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e03f      	b.n	80021e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fb9e 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	; 0x24
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fd7b 	bl	8002c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b08a      	sub	sp, #40	; 0x28
 80021f2:	af02      	add	r7, sp, #8
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b20      	cmp	r3, #32
 800220c:	d17c      	bne.n	8002308 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_UART_Transmit+0x2c>
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e075      	b.n	800230a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_UART_Transmit+0x3e>
 8002228:	2302      	movs	r3, #2
 800222a:	e06e      	b.n	800230a <HAL_UART_Transmit+0x11c>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2221      	movs	r2, #33	; 0x21
 800223e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002242:	f7fe fcd9 	bl	8000bf8 <HAL_GetTick>
 8002246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	88fa      	ldrh	r2, [r7, #6]
 800224c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	88fa      	ldrh	r2, [r7, #6]
 8002252:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225c:	d108      	bne.n	8002270 <HAL_UART_Transmit+0x82>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d104      	bne.n	8002270 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	e003      	b.n	8002278 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002280:	e02a      	b.n	80022d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2200      	movs	r2, #0
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 faf9 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e036      	b.n	800230a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10b      	bne.n	80022ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	3302      	adds	r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	e007      	b.n	80022ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	3301      	adds	r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1cf      	bne.n	8002282 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2200      	movs	r2, #0
 80022ea:	2140      	movs	r1, #64	; 0x40
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 fac9 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e006      	b.n	800230a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	e000      	b.n	800230a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002308:	2302      	movs	r3, #2
  }
}
 800230a:	4618      	mov	r0, r3
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b0ba      	sub	sp, #232	; 0xe8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800233a:	2300      	movs	r3, #0
 800233c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10f      	bne.n	800237a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800235a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HAL_UART_IRQHandler+0x66>
 8002366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fbd3 	bl	8002b1e <UART_Receive_IT>
      return;
 8002378:	e256      	b.n	8002828 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800237a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80de 	beq.w	8002540 <HAL_UART_IRQHandler+0x22c>
 8002384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d106      	bne.n	800239e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002394:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80d1 	beq.w	8002540 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800239e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_UART_IRQHandler+0xae>
 80023aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f043 0201 	orr.w	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_UART_IRQHandler+0xd2>
 80023ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f043 0202 	orr.w	r2, r3, #2
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <HAL_UART_IRQHandler+0xf6>
 80023f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f043 0204 	orr.w	r2, r3, #4
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800240a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d011      	beq.n	800243a <HAL_UART_IRQHandler+0x126>
 8002416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f043 0208 	orr.w	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 81ed 	beq.w	800281e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_UART_IRQHandler+0x14e>
 8002450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fb5e 	bl	8002b1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246c:	2b40      	cmp	r3, #64	; 0x40
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <HAL_UART_IRQHandler+0x17a>
 8002486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d04f      	beq.n	800252e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fa66 	bl	8002960 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d141      	bne.n	8002526 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3314      	adds	r3, #20
 80024a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024b0:	e853 3f00 	ldrex	r3, [r3]
 80024b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80024b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3314      	adds	r3, #20
 80024ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024de:	e841 2300 	strex	r3, r2, [r1]
 80024e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80024e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1d9      	bne.n	80024a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d013      	beq.n	800251e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	4a7d      	ldr	r2, [pc, #500]	; (80026f0 <HAL_UART_IRQHandler+0x3dc>)
 80024fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fcd6 	bl	8000eb4 <HAL_DMA_Abort_IT>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d016      	beq.n	800253c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002518:	4610      	mov	r0, r2
 800251a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800251c:	e00e      	b.n	800253c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f99a 	bl	8002858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002524:	e00a      	b.n	800253c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f996 	bl	8002858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800252c:	e006      	b.n	800253c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f992 	bl	8002858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800253a:	e170      	b.n	800281e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800253c:	bf00      	nop
    return;
 800253e:	e16e      	b.n	800281e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	2b01      	cmp	r3, #1
 8002546:	f040 814a 	bne.w	80027de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800254a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8143 	beq.w	80027de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 813c 	beq.w	80027de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b40      	cmp	r3, #64	; 0x40
 8002588:	f040 80b4 	bne.w	80026f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002598:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8140 	beq.w	8002822 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025aa:	429a      	cmp	r2, r3
 80025ac:	f080 8139 	bcs.w	8002822 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c2:	f000 8088 	beq.w	80026d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	330c      	adds	r3, #12
 80025cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80025dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	330c      	adds	r3, #12
 80025ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80025f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80025fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002602:	e841 2300 	strex	r3, r2, [r1]
 8002606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800260a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1d9      	bne.n	80025c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3314      	adds	r3, #20
 8002618:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261c:	e853 3f00 	ldrex	r3, [r3]
 8002620:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	3314      	adds	r3, #20
 8002632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002636:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800263a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800263e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002642:	e841 2300 	strex	r3, r2, [r1]
 8002646:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1e1      	bne.n	8002612 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3314      	adds	r3, #20
 8002654:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002658:	e853 3f00 	ldrex	r3, [r3]
 800265c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800265e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3314      	adds	r3, #20
 800266e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002672:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002674:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002676:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002678:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800267a:	e841 2300 	strex	r3, r2, [r1]
 800267e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e3      	bne.n	800264e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	330c      	adds	r3, #12
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800269e:	e853 3f00 	ldrex	r3, [r3]
 80026a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a6:	f023 0310 	bic.w	r3, r3, #16
 80026aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	330c      	adds	r3, #12
 80026b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80026ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026c0:	e841 2300 	strex	r3, r2, [r1]
 80026c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1e3      	bne.n	8002694 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe fb7f 	bl	8000dd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026de:	b29b      	uxth	r3, r3
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8c0 	bl	800286c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026ec:	e099      	b.n	8002822 <HAL_UART_IRQHandler+0x50e>
 80026ee:	bf00      	nop
 80026f0:	08002a27 	.word	0x08002a27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 808b 	beq.w	8002826 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8086 	beq.w	8002826 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	330c      	adds	r3, #12
 8002720:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	e853 3f00 	ldrex	r3, [r3]
 8002728:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002730:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	330c      	adds	r3, #12
 800273a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800273e:	647a      	str	r2, [r7, #68]	; 0x44
 8002740:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002742:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002746:	e841 2300 	strex	r3, r2, [r1]
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800274c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1e3      	bne.n	800271a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3314      	adds	r3, #20
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	e853 3f00 	ldrex	r3, [r3]
 8002760:	623b      	str	r3, [r7, #32]
   return(result);
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3314      	adds	r3, #20
 8002772:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002776:	633a      	str	r2, [r7, #48]	; 0x30
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800277c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800277e:	e841 2300 	strex	r3, r2, [r1]
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1e3      	bne.n	8002752 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	330c      	adds	r3, #12
 800279e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	e853 3f00 	ldrex	r3, [r3]
 80027a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0310 	bic.w	r3, r3, #16
 80027ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	330c      	adds	r3, #12
 80027b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027bc:	61fa      	str	r2, [r7, #28]
 80027be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c0:	69b9      	ldr	r1, [r7, #24]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	e841 2300 	strex	r3, r2, [r1]
 80027c8:	617b      	str	r3, [r7, #20]
   return(result);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e3      	bne.n	8002798 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027d4:	4619      	mov	r1, r3
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f848 	bl	800286c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027dc:	e023      	b.n	8002826 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_UART_IRQHandler+0x4ea>
 80027ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f929 	bl	8002a4e <UART_Transmit_IT>
    return;
 80027fc:	e014      	b.n	8002828 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00e      	beq.n	8002828 <HAL_UART_IRQHandler+0x514>
 800280a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f969 	bl	8002aee <UART_EndTransmit_IT>
    return;
 800281c:	e004      	b.n	8002828 <HAL_UART_IRQHandler+0x514>
    return;
 800281e:	bf00      	nop
 8002820:	e002      	b.n	8002828 <HAL_UART_IRQHandler+0x514>
      return;
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <HAL_UART_IRQHandler+0x514>
      return;
 8002826:	bf00      	nop
  }
}
 8002828:	37e8      	adds	r7, #232	; 0xe8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop

08002830 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b090      	sub	sp, #64	; 0x40
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002894:	e050      	b.n	8002938 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d04c      	beq.n	8002938 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800289e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80028a4:	f7fe f9a8 	bl	8000bf8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d241      	bcs.n	8002938 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	330c      	adds	r3, #12
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	e853 3f00 	ldrex	r3, [r3]
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	330c      	adds	r3, #12
 80028d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028d4:	637a      	str	r2, [r7, #52]	; 0x34
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028dc:	e841 2300 	strex	r3, r2, [r1]
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e5      	bne.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3314      	adds	r3, #20
 80028ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	e853 3f00 	ldrex	r3, [r3]
 80028f6:	613b      	str	r3, [r7, #16]
   return(result);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3314      	adds	r3, #20
 8002906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002908:	623a      	str	r2, [r7, #32]
 800290a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	69f9      	ldr	r1, [r7, #28]
 800290e:	6a3a      	ldr	r2, [r7, #32]
 8002910:	e841 2300 	strex	r3, r2, [r1]
 8002914:	61bb      	str	r3, [r7, #24]
   return(result);
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e5      	bne.n	80028e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e00f      	b.n	8002958 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4013      	ands	r3, r2
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	429a      	cmp	r2, r3
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	429a      	cmp	r2, r3
 8002954:	d09f      	beq.n	8002896 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3740      	adds	r7, #64	; 0x40
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002960:	b480      	push	{r7}
 8002962:	b095      	sub	sp, #84	; 0x54
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	330c      	adds	r3, #12
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002972:	e853 3f00 	ldrex	r3, [r3]
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800297e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	330c      	adds	r3, #12
 8002986:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002988:	643a      	str	r2, [r7, #64]	; 0x40
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800298e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002990:	e841 2300 	strex	r3, r2, [r1]
 8002994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e5      	bne.n	8002968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3314      	adds	r3, #20
 80029a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	e853 3f00 	ldrex	r3, [r3]
 80029aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3314      	adds	r3, #20
 80029ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c4:	e841 2300 	strex	r3, r2, [r1]
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e5      	bne.n	800299c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d119      	bne.n	8002a0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	330c      	adds	r3, #12
 80029de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	e853 3f00 	ldrex	r3, [r3]
 80029e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f023 0310 	bic.w	r3, r3, #16
 80029ee:	647b      	str	r3, [r7, #68]	; 0x44
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029f8:	61ba      	str	r2, [r7, #24]
 80029fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fc:	6979      	ldr	r1, [r7, #20]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	e841 2300 	strex	r3, r2, [r1]
 8002a04:	613b      	str	r3, [r7, #16]
   return(result);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e5      	bne.n	80029d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a1a:	bf00      	nop
 8002a1c:	3754      	adds	r7, #84	; 0x54
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7ff ff09 	bl	8002858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b21      	cmp	r3, #33	; 0x21
 8002a60:	d13e      	bne.n	8002ae0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6a:	d114      	bne.n	8002a96 <UART_Transmit_IT+0x48>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d110      	bne.n	8002a96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	1c9a      	adds	r2, r3, #2
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	621a      	str	r2, [r3, #32]
 8002a94:	e008      	b.n	8002aa8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	1c59      	adds	r1, r3, #1
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6211      	str	r1, [r2, #32]
 8002aa0:	781a      	ldrb	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10f      	bne.n	8002adc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ada:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	e000      	b.n	8002ae2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ae0:	2302      	movs	r3, #2
  }
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fe8e 	bl	8002830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b08c      	sub	sp, #48	; 0x30
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b22      	cmp	r3, #34	; 0x22
 8002b30:	f040 80ab 	bne.w	8002c8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b3c:	d117      	bne.n	8002b6e <UART_Receive_IT+0x50>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d113      	bne.n	8002b6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	1c9a      	adds	r2, r3, #2
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b6c:	e026      	b.n	8002bbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b80:	d007      	beq.n	8002b92 <UART_Receive_IT+0x74>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <UART_Receive_IT+0x82>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	e008      	b.n	8002bb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d15a      	bne.n	8002c86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0220 	bic.w	r2, r2, #32
 8002bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d135      	bne.n	8002c7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	330c      	adds	r3, #12
 8002c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	e853 3f00 	ldrex	r3, [r3]
 8002c24:	613b      	str	r3, [r7, #16]
   return(result);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f023 0310 	bic.w	r3, r3, #16
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c36:	623a      	str	r2, [r7, #32]
 8002c38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	69f9      	ldr	r1, [r7, #28]
 8002c3c:	6a3a      	ldr	r2, [r7, #32]
 8002c3e:	e841 2300 	strex	r3, r2, [r1]
 8002c42:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1e5      	bne.n	8002c16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d10a      	bne.n	8002c6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff fdf9 	bl	800286c <HAL_UARTEx_RxEventCallback>
 8002c7a:	e002      	b.n	8002c82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff fde1 	bl	8002844 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e002      	b.n	8002c8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e000      	b.n	8002c8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002c8a:	2302      	movs	r3, #2
  }
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3730      	adds	r7, #48	; 0x30
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c98:	b0c0      	sub	sp, #256	; 0x100
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb0:	68d9      	ldr	r1, [r3, #12]
 8002cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	ea40 0301 	orr.w	r3, r0, r1
 8002cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002cec:	f021 010c 	bic.w	r1, r1, #12
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0e:	6999      	ldr	r1, [r3, #24]
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	ea40 0301 	orr.w	r3, r0, r1
 8002d1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4b8f      	ldr	r3, [pc, #572]	; (8002f60 <UART_SetConfig+0x2cc>)
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d005      	beq.n	8002d34 <UART_SetConfig+0xa0>
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4b8d      	ldr	r3, [pc, #564]	; (8002f64 <UART_SetConfig+0x2d0>)
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d104      	bne.n	8002d3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d34:	f7fe ff1a 	bl	8001b6c <HAL_RCC_GetPCLK2Freq>
 8002d38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d3c:	e003      	b.n	8002d46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d3e:	f7fe ff01 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8002d42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d50:	f040 810c 	bne.w	8002f6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d66:	4622      	mov	r2, r4
 8002d68:	462b      	mov	r3, r5
 8002d6a:	1891      	adds	r1, r2, r2
 8002d6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d6e:	415b      	adcs	r3, r3
 8002d70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d76:	4621      	mov	r1, r4
 8002d78:	eb12 0801 	adds.w	r8, r2, r1
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	eb43 0901 	adc.w	r9, r3, r1
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d96:	4690      	mov	r8, r2
 8002d98:	4699      	mov	r9, r3
 8002d9a:	4623      	mov	r3, r4
 8002d9c:	eb18 0303 	adds.w	r3, r8, r3
 8002da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002da4:	462b      	mov	r3, r5
 8002da6:	eb49 0303 	adc.w	r3, r9, r3
 8002daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002dba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002dbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	18db      	adds	r3, r3, r3
 8002dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8002dc8:	4613      	mov	r3, r2
 8002dca:	eb42 0303 	adc.w	r3, r2, r3
 8002dce:	657b      	str	r3, [r7, #84]	; 0x54
 8002dd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002dd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002dd8:	f7fd fa52 	bl	8000280 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4b61      	ldr	r3, [pc, #388]	; (8002f68 <UART_SetConfig+0x2d4>)
 8002de2:	fba3 2302 	umull	r2, r3, r3, r2
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	011c      	lsls	r4, r3, #4
 8002dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002df4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002df8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	464b      	mov	r3, r9
 8002e00:	1891      	adds	r1, r2, r2
 8002e02:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e04:	415b      	adcs	r3, r3
 8002e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e0c:	4641      	mov	r1, r8
 8002e0e:	eb12 0a01 	adds.w	sl, r2, r1
 8002e12:	4649      	mov	r1, r9
 8002e14:	eb43 0b01 	adc.w	fp, r3, r1
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e2c:	4692      	mov	sl, r2
 8002e2e:	469b      	mov	fp, r3
 8002e30:	4643      	mov	r3, r8
 8002e32:	eb1a 0303 	adds.w	r3, sl, r3
 8002e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	18db      	adds	r3, r3, r3
 8002e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8002e5e:	4613      	mov	r3, r2
 8002e60:	eb42 0303 	adc.w	r3, r2, r3
 8002e64:	647b      	str	r3, [r7, #68]	; 0x44
 8002e66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e6e:	f7fd fa07 	bl	8000280 <__aeabi_uldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4611      	mov	r1, r2
 8002e78:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <UART_SetConfig+0x2d4>)
 8002e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	2264      	movs	r2, #100	; 0x64
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	1acb      	subs	r3, r1, r3
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e8e:	4b36      	ldr	r3, [pc, #216]	; (8002f68 <UART_SetConfig+0x2d4>)
 8002e90:	fba3 2302 	umull	r2, r3, r3, r2
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e9c:	441c      	add	r4, r3
 8002e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ea8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002eac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	1891      	adds	r1, r2, r2
 8002eb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002eb8:	415b      	adcs	r3, r3
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	1851      	adds	r1, r2, r1
 8002ec4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	414b      	adcs	r3, r1
 8002eca:	637b      	str	r3, [r7, #52]	; 0x34
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ed8:	4659      	mov	r1, fp
 8002eda:	00cb      	lsls	r3, r1, #3
 8002edc:	4651      	mov	r1, sl
 8002ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ee2:	4651      	mov	r1, sl
 8002ee4:	00ca      	lsls	r2, r1, #3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	4642      	mov	r2, r8
 8002eee:	189b      	adds	r3, r3, r2
 8002ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ef4:	464b      	mov	r3, r9
 8002ef6:	460a      	mov	r2, r1
 8002ef8:	eb42 0303 	adc.w	r3, r2, r3
 8002efc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f14:	460b      	mov	r3, r1
 8002f16:	18db      	adds	r3, r3, r3
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	eb42 0303 	adc.w	r3, r2, r3
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f2a:	f7fd f9a9 	bl	8000280 <__aeabi_uldivmod>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <UART_SetConfig+0x2d4>)
 8002f34:	fba3 1302 	umull	r1, r3, r3, r2
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	2164      	movs	r1, #100	; 0x64
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	3332      	adds	r3, #50	; 0x32
 8002f46:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <UART_SetConfig+0x2d4>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	f003 0207 	and.w	r2, r3, #7
 8002f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4422      	add	r2, r4
 8002f5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f5c:	e105      	b.n	800316a <UART_SetConfig+0x4d6>
 8002f5e:	bf00      	nop
 8002f60:	40011000 	.word	0x40011000
 8002f64:	40011400 	.word	0x40011400
 8002f68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f70:	2200      	movs	r2, #0
 8002f72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f7e:	4642      	mov	r2, r8
 8002f80:	464b      	mov	r3, r9
 8002f82:	1891      	adds	r1, r2, r2
 8002f84:	6239      	str	r1, [r7, #32]
 8002f86:	415b      	adcs	r3, r3
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f8e:	4641      	mov	r1, r8
 8002f90:	1854      	adds	r4, r2, r1
 8002f92:	4649      	mov	r1, r9
 8002f94:	eb43 0501 	adc.w	r5, r3, r1
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	00eb      	lsls	r3, r5, #3
 8002fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa6:	00e2      	lsls	r2, r4, #3
 8002fa8:	4614      	mov	r4, r2
 8002faa:	461d      	mov	r5, r3
 8002fac:	4643      	mov	r3, r8
 8002fae:	18e3      	adds	r3, r4, r3
 8002fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	eb45 0303 	adc.w	r3, r5, r3
 8002fba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002fda:	4629      	mov	r1, r5
 8002fdc:	008b      	lsls	r3, r1, #2
 8002fde:	4621      	mov	r1, r4
 8002fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	008a      	lsls	r2, r1, #2
 8002fe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002fec:	f7fd f948 	bl	8000280 <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4b60      	ldr	r3, [pc, #384]	; (8003178 <UART_SetConfig+0x4e4>)
 8002ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	011c      	lsls	r4, r3, #4
 8002ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003002:	2200      	movs	r2, #0
 8003004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003008:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800300c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003010:	4642      	mov	r2, r8
 8003012:	464b      	mov	r3, r9
 8003014:	1891      	adds	r1, r2, r2
 8003016:	61b9      	str	r1, [r7, #24]
 8003018:	415b      	adcs	r3, r3
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003020:	4641      	mov	r1, r8
 8003022:	1851      	adds	r1, r2, r1
 8003024:	6139      	str	r1, [r7, #16]
 8003026:	4649      	mov	r1, r9
 8003028:	414b      	adcs	r3, r1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003038:	4659      	mov	r1, fp
 800303a:	00cb      	lsls	r3, r1, #3
 800303c:	4651      	mov	r1, sl
 800303e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003042:	4651      	mov	r1, sl
 8003044:	00ca      	lsls	r2, r1, #3
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	4603      	mov	r3, r0
 800304c:	4642      	mov	r2, r8
 800304e:	189b      	adds	r3, r3, r2
 8003050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003054:	464b      	mov	r3, r9
 8003056:	460a      	mov	r2, r1
 8003058:	eb42 0303 	adc.w	r3, r2, r3
 800305c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	67bb      	str	r3, [r7, #120]	; 0x78
 800306a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003078:	4649      	mov	r1, r9
 800307a:	008b      	lsls	r3, r1, #2
 800307c:	4641      	mov	r1, r8
 800307e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003082:	4641      	mov	r1, r8
 8003084:	008a      	lsls	r2, r1, #2
 8003086:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800308a:	f7fd f8f9 	bl	8000280 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4b39      	ldr	r3, [pc, #228]	; (8003178 <UART_SetConfig+0x4e4>)
 8003094:	fba3 1302 	umull	r1, r3, r3, r2
 8003098:	095b      	lsrs	r3, r3, #5
 800309a:	2164      	movs	r1, #100	; 0x64
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	3332      	adds	r3, #50	; 0x32
 80030a6:	4a34      	ldr	r2, [pc, #208]	; (8003178 <UART_SetConfig+0x4e4>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b2:	441c      	add	r4, r3
 80030b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b8:	2200      	movs	r2, #0
 80030ba:	673b      	str	r3, [r7, #112]	; 0x70
 80030bc:	677a      	str	r2, [r7, #116]	; 0x74
 80030be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80030c2:	4642      	mov	r2, r8
 80030c4:	464b      	mov	r3, r9
 80030c6:	1891      	adds	r1, r2, r2
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	415b      	adcs	r3, r3
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030d2:	4641      	mov	r1, r8
 80030d4:	1851      	adds	r1, r2, r1
 80030d6:	6039      	str	r1, [r7, #0]
 80030d8:	4649      	mov	r1, r9
 80030da:	414b      	adcs	r3, r1
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030ea:	4659      	mov	r1, fp
 80030ec:	00cb      	lsls	r3, r1, #3
 80030ee:	4651      	mov	r1, sl
 80030f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f4:	4651      	mov	r1, sl
 80030f6:	00ca      	lsls	r2, r1, #3
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	4603      	mov	r3, r0
 80030fe:	4642      	mov	r2, r8
 8003100:	189b      	adds	r3, r3, r2
 8003102:	66bb      	str	r3, [r7, #104]	; 0x68
 8003104:	464b      	mov	r3, r9
 8003106:	460a      	mov	r2, r1
 8003108:	eb42 0303 	adc.w	r3, r2, r3
 800310c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800310e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	663b      	str	r3, [r7, #96]	; 0x60
 8003118:	667a      	str	r2, [r7, #100]	; 0x64
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003126:	4649      	mov	r1, r9
 8003128:	008b      	lsls	r3, r1, #2
 800312a:	4641      	mov	r1, r8
 800312c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003130:	4641      	mov	r1, r8
 8003132:	008a      	lsls	r2, r1, #2
 8003134:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003138:	f7fd f8a2 	bl	8000280 <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <UART_SetConfig+0x4e4>)
 8003142:	fba3 1302 	umull	r1, r3, r3, r2
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2164      	movs	r1, #100	; 0x64
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	3332      	adds	r3, #50	; 0x32
 8003154:	4a08      	ldr	r2, [pc, #32]	; (8003178 <UART_SetConfig+0x4e4>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	f003 020f 	and.w	r2, r3, #15
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4422      	add	r2, r4
 8003168:	609a      	str	r2, [r3, #8]
}
 800316a:	bf00      	nop
 800316c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003170:	46bd      	mov	sp, r7
 8003172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003176:	bf00      	nop
 8003178:	51eb851f 	.word	0x51eb851f

0800317c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <SysTick_Handler+0x1c>)
 8003182:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003184:	f001 fbfe 	bl	8004984 <xTaskGetSchedulerState>
 8003188:	4603      	mov	r3, r0
 800318a:	2b01      	cmp	r3, #1
 800318c:	d001      	beq.n	8003192 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800318e:	f002 f9e3 	bl	8005558 <xPortSysTickHandler>
  }
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	e000e010 	.word	0xe000e010

0800319c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a07      	ldr	r2, [pc, #28]	; (80031c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80031ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4a06      	ldr	r2, [pc, #24]	; (80031cc <vApplicationGetIdleTaskMemory+0x30>)
 80031b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000130 	.word	0x20000130
 80031cc:	2000018c 	.word	0x2000018c

080031d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4a07      	ldr	r2, [pc, #28]	; (80031fc <vApplicationGetTimerTaskMemory+0x2c>)
 80031e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	4a06      	ldr	r2, [pc, #24]	; (8003200 <vApplicationGetTimerTaskMemory+0x30>)
 80031e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031ee:	601a      	str	r2, [r3, #0]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	2000038c 	.word	0x2000038c
 8003200:	200003e8 	.word	0x200003e8

08003204 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f103 0208 	add.w	r2, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f103 0208 	add.w	r2, r3, #8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f103 0208 	add.w	r2, r3, #8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	601a      	str	r2, [r3, #0]
}
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d103      	bne.n	80032c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e00c      	b.n	80032e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3308      	adds	r3, #8
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e002      	b.n	80032d4 <vListInsert+0x2e>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d2f6      	bcs.n	80032ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6892      	ldr	r2, [r2, #8]
 800332e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6852      	ldr	r2, [r2, #4]
 8003338:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	d103      	bne.n	800334c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	1e5a      	subs	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003396:	f002 f84d 	bl	8005434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	68f9      	ldr	r1, [r7, #12]
 80033a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	441a      	add	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	3b01      	subs	r3, #1
 80033c8:	68f9      	ldr	r1, [r7, #12]
 80033ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	441a      	add	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	22ff      	movs	r2, #255	; 0xff
 80033da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	22ff      	movs	r2, #255	; 0xff
 80033e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d114      	bne.n	8003416 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01a      	beq.n	800342a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3310      	adds	r3, #16
 80033f8:	4618      	mov	r0, r3
 80033fa:	f001 f903 	bl	8004604 <xTaskRemoveFromEventList>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d012      	beq.n	800342a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <xQueueGenericReset+0xcc>)
 8003406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	e009      	b.n	800342a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3310      	adds	r3, #16
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fef2 	bl	8003204 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3324      	adds	r3, #36	; 0x24
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff feed 	bl	8003204 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800342a:	f002 f833 	bl	8005494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800342e:	2301      	movs	r3, #1
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	e000ed04 	.word	0xe000ed04

0800343c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08e      	sub	sp, #56	; 0x38
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003462:	bf00      	nop
 8003464:	e7fe      	b.n	8003464 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800347e:	bf00      	nop
 8003480:	e7fe      	b.n	8003480 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <xQueueGenericCreateStatic+0x52>
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <xQueueGenericCreateStatic+0x56>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <xQueueGenericCreateStatic+0x58>
 8003492:	2300      	movs	r3, #0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	623b      	str	r3, [r7, #32]
}
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <xQueueGenericCreateStatic+0x7e>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <xQueueGenericCreateStatic+0x82>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <xQueueGenericCreateStatic+0x84>
 80034be:	2300      	movs	r3, #0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	61fb      	str	r3, [r7, #28]
}
 80034d6:	bf00      	nop
 80034d8:	e7fe      	b.n	80034d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034da:	2350      	movs	r3, #80	; 0x50
 80034dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b50      	cmp	r3, #80	; 0x50
 80034e2:	d00a      	beq.n	80034fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	61bb      	str	r3, [r7, #24]
}
 80034f6:	bf00      	nop
 80034f8:	e7fe      	b.n	80034f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80034fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00d      	beq.n	8003522 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800350e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	4613      	mov	r3, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f805 	bl	800352c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003524:	4618      	mov	r0, r3
 8003526:	3730      	adds	r7, #48	; 0x30
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d103      	bne.n	8003548 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e002      	b.n	800354e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800355a:	2101      	movs	r1, #1
 800355c:	69b8      	ldr	r0, [r7, #24]
 800355e:	f7ff ff05 	bl	800336c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08e      	sub	sp, #56	; 0x38
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003582:	2300      	movs	r3, #0
 8003584:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <xQueueGenericSend+0x32>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d103      	bne.n	80035b4 <xQueueGenericSend+0x40>
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <xQueueGenericSend+0x44>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <xQueueGenericSend+0x46>
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <xQueueGenericSend+0x60>
	__asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035d0:	bf00      	nop
 80035d2:	e7fe      	b.n	80035d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d103      	bne.n	80035e2 <xQueueGenericSend+0x6e>
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <xQueueGenericSend+0x72>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <xQueueGenericSend+0x74>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xQueueGenericSend+0x8e>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	623b      	str	r3, [r7, #32]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003602:	f001 f9bf 	bl	8004984 <xTaskGetSchedulerState>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <xQueueGenericSend+0x9e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <xQueueGenericSend+0xa2>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <xQueueGenericSend+0xa4>
 8003616:	2300      	movs	r3, #0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <xQueueGenericSend+0xbe>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	61fb      	str	r3, [r7, #28]
}
 800362e:	bf00      	nop
 8003630:	e7fe      	b.n	8003630 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003632:	f001 feff 	bl	8005434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <xQueueGenericSend+0xd4>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d129      	bne.n	800369c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800364e:	f000 fa0b 	bl	8003a68 <prvCopyDataToQueue>
 8003652:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	2b00      	cmp	r3, #0
 800365a:	d010      	beq.n	800367e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	3324      	adds	r3, #36	; 0x24
 8003660:	4618      	mov	r0, r3
 8003662:	f000 ffcf 	bl	8004604 <xTaskRemoveFromEventList>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800366c:	4b3f      	ldr	r3, [pc, #252]	; (800376c <xQueueGenericSend+0x1f8>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	e00a      	b.n	8003694 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003684:	4b39      	ldr	r3, [pc, #228]	; (800376c <xQueueGenericSend+0x1f8>)
 8003686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003694:	f001 fefe 	bl	8005494 <vPortExitCritical>
				return pdPASS;
 8003698:	2301      	movs	r3, #1
 800369a:	e063      	b.n	8003764 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d103      	bne.n	80036aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036a2:	f001 fef7 	bl	8005494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e05c      	b.n	8003764 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 f809 	bl	80046cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036ba:	2301      	movs	r3, #1
 80036bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036be:	f001 fee9 	bl	8005494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036c2:	f000 fd7b 	bl	80041bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036c6:	f001 feb5 	bl	8005434 <vPortEnterCritical>
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036d0:	b25b      	sxtb	r3, r3
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d103      	bne.n	80036e0 <xQueueGenericSend+0x16c>
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036e6:	b25b      	sxtb	r3, r3
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d103      	bne.n	80036f6 <xQueueGenericSend+0x182>
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036f6:	f001 fecd 	bl	8005494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036fa:	1d3a      	adds	r2, r7, #4
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fff8 	bl	80046f8 <xTaskCheckForTimeOut>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d124      	bne.n	8003758 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800370e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003710:	f000 faa2 	bl	8003c58 <prvIsQueueFull>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d018      	beq.n	800374c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	3310      	adds	r3, #16
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f000 ff1e 	bl	8004564 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800372a:	f000 fa2d 	bl	8003b88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800372e:	f000 fd53 	bl	80041d8 <xTaskResumeAll>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	f47f af7c 	bne.w	8003632 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800373a:	4b0c      	ldr	r3, [pc, #48]	; (800376c <xQueueGenericSend+0x1f8>)
 800373c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	e772      	b.n	8003632 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800374c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800374e:	f000 fa1b 	bl	8003b88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003752:	f000 fd41 	bl	80041d8 <xTaskResumeAll>
 8003756:	e76c      	b.n	8003632 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800375a:	f000 fa15 	bl	8003b88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800375e:	f000 fd3b 	bl	80041d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003762:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003764:	4618      	mov	r0, r3
 8003766:	3738      	adds	r7, #56	; 0x38
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	e000ed04 	.word	0xe000ed04

08003770 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b090      	sub	sp, #64	; 0x40
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800379a:	bf00      	nop
 800379c:	e7fe      	b.n	800379c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <xQueueGenericSendFromISR+0x3c>
 80037a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <xQueueGenericSendFromISR+0x40>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <xQueueGenericSendFromISR+0x42>
 80037b0:	2300      	movs	r3, #0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10a      	bne.n	80037cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80037b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037c8:	bf00      	nop
 80037ca:	e7fe      	b.n	80037ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d103      	bne.n	80037da <xQueueGenericSendFromISR+0x6a>
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <xQueueGenericSendFromISR+0x6e>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <xQueueGenericSendFromISR+0x70>
 80037de:	2300      	movs	r3, #0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	623b      	str	r3, [r7, #32]
}
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037fa:	f001 fefd 	bl	80055f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80037fe:	f3ef 8211 	mrs	r2, BASEPRI
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	61fa      	str	r2, [r7, #28]
 8003814:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003816:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003818:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <xQueueGenericSendFromISR+0xbc>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d12f      	bne.n	800388c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003842:	f000 f911 	bl	8003a68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003846:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d112      	bne.n	8003876 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	2b00      	cmp	r3, #0
 8003856:	d016      	beq.n	8003886 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385a:	3324      	adds	r3, #36	; 0x24
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fed1 	bl	8004604 <xTaskRemoveFromEventList>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00e      	beq.n	8003886 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e007      	b.n	8003886 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003876:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800387a:	3301      	adds	r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	b25a      	sxtb	r2, r3
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003886:	2301      	movs	r3, #1
 8003888:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800388a:	e001      	b.n	8003890 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800388c:	2300      	movs	r3, #0
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800389a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800389c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3740      	adds	r7, #64	; 0x40
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08c      	sub	sp, #48	; 0x30
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <xQueueReceive+0x30>
	__asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	623b      	str	r3, [r7, #32]
}
 80038d4:	bf00      	nop
 80038d6:	e7fe      	b.n	80038d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <xQueueReceive+0x3e>
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <xQueueReceive+0x42>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <xQueueReceive+0x44>
 80038ea:	2300      	movs	r3, #0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <xQueueReceive+0x5e>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	61fb      	str	r3, [r7, #28]
}
 8003902:	bf00      	nop
 8003904:	e7fe      	b.n	8003904 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003906:	f001 f83d 	bl	8004984 <xTaskGetSchedulerState>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <xQueueReceive+0x6e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <xQueueReceive+0x72>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <xQueueReceive+0x74>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <xQueueReceive+0x8e>
	__asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	61bb      	str	r3, [r7, #24]
}
 8003932:	bf00      	nop
 8003934:	e7fe      	b.n	8003934 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003936:	f001 fd7d 	bl	8005434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	d01f      	beq.n	8003986 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800394a:	f000 f8f7 	bl	8003b3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	1e5a      	subs	r2, r3, #1
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00f      	beq.n	800397e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003960:	3310      	adds	r3, #16
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fe4e 	bl	8004604 <xTaskRemoveFromEventList>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800396e:	4b3d      	ldr	r3, [pc, #244]	; (8003a64 <xQueueReceive+0x1bc>)
 8003970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800397e:	f001 fd89 	bl	8005494 <vPortExitCritical>
				return pdPASS;
 8003982:	2301      	movs	r3, #1
 8003984:	e069      	b.n	8003a5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d103      	bne.n	8003994 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800398c:	f001 fd82 	bl	8005494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003990:	2300      	movs	r3, #0
 8003992:	e062      	b.n	8003a5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800399a:	f107 0310 	add.w	r3, r7, #16
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fe94 	bl	80046cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039a4:	2301      	movs	r3, #1
 80039a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039a8:	f001 fd74 	bl	8005494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ac:	f000 fc06 	bl	80041bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039b0:	f001 fd40 	bl	8005434 <vPortEnterCritical>
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039ba:	b25b      	sxtb	r3, r3
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c0:	d103      	bne.n	80039ca <xQueueReceive+0x122>
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039d0:	b25b      	sxtb	r3, r3
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d6:	d103      	bne.n	80039e0 <xQueueReceive+0x138>
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039e0:	f001 fd58 	bl	8005494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039e4:	1d3a      	adds	r2, r7, #4
 80039e6:	f107 0310 	add.w	r3, r7, #16
 80039ea:	4611      	mov	r1, r2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fe83 	bl	80046f8 <xTaskCheckForTimeOut>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d123      	bne.n	8003a40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039fa:	f000 f917 	bl	8003c2c <prvIsQueueEmpty>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d017      	beq.n	8003a34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	3324      	adds	r3, #36	; 0x24
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fda9 	bl	8004564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a14:	f000 f8b8 	bl	8003b88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a18:	f000 fbde 	bl	80041d8 <xTaskResumeAll>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d189      	bne.n	8003936 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <xQueueReceive+0x1bc>)
 8003a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	e780      	b.n	8003936 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a36:	f000 f8a7 	bl	8003b88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a3a:	f000 fbcd 	bl	80041d8 <xTaskResumeAll>
 8003a3e:	e77a      	b.n	8003936 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a42:	f000 f8a1 	bl	8003b88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a46:	f000 fbc7 	bl	80041d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a4c:	f000 f8ee 	bl	8003c2c <prvIsQueueEmpty>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f43f af6f 	beq.w	8003936 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3730      	adds	r7, #48	; 0x30
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10d      	bne.n	8003aa2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d14d      	bne.n	8003b2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 ff94 	bl	80049c0 <xTaskPriorityDisinherit>
 8003a98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	e043      	b.n	8003b2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d119      	bne.n	8003adc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6858      	ldr	r0, [r3, #4]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	f001 fff4 	bl	8005aa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	441a      	add	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d32b      	bcc.n	8003b2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	e026      	b.n	8003b2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	68d8      	ldr	r0, [r3, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	f001 ffda 	bl	8005aa0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	425b      	negs	r3, r3
 8003af6:	441a      	add	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d207      	bcs.n	8003b18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	425b      	negs	r3, r3
 8003b12:	441a      	add	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d105      	bne.n	8003b2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b32:	697b      	ldr	r3, [r7, #20]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d018      	beq.n	8003b80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	441a      	add	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d303      	bcc.n	8003b70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68d9      	ldr	r1, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	461a      	mov	r2, r3
 8003b7a:	6838      	ldr	r0, [r7, #0]
 8003b7c:	f001 ff90 	bl	8005aa0 <memcpy>
	}
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b90:	f001 fc50 	bl	8005434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b9c:	e011      	b.n	8003bc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d012      	beq.n	8003bcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3324      	adds	r3, #36	; 0x24
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fd2a 	bl	8004604 <xTaskRemoveFromEventList>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003bb6:	f000 fe01 	bl	80047bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	dce9      	bgt.n	8003b9e <prvUnlockQueue+0x16>
 8003bca:	e000      	b.n	8003bce <prvUnlockQueue+0x46>
					break;
 8003bcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	22ff      	movs	r2, #255	; 0xff
 8003bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003bd6:	f001 fc5d 	bl	8005494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003bda:	f001 fc2b 	bl	8005434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003be4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003be6:	e011      	b.n	8003c0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d012      	beq.n	8003c16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3310      	adds	r3, #16
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fd05 	bl	8004604 <xTaskRemoveFromEventList>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c00:	f000 fddc 	bl	80047bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c04:	7bbb      	ldrb	r3, [r7, #14]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	dce9      	bgt.n	8003be8 <prvUnlockQueue+0x60>
 8003c14:	e000      	b.n	8003c18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	22ff      	movs	r2, #255	; 0xff
 8003c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c20:	f001 fc38 	bl	8005494 <vPortExitCritical>
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c34:	f001 fbfe 	bl	8005434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c40:	2301      	movs	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e001      	b.n	8003c4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c4a:	f001 fc23 	bl	8005494 <vPortExitCritical>

	return xReturn;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c60:	f001 fbe8 	bl	8005434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d102      	bne.n	8003c76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c70:	2301      	movs	r3, #1
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	e001      	b.n	8003c7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c7a:	f001 fc0b 	bl	8005494 <vPortExitCritical>

	return xReturn;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	e014      	b.n	8003cc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c98:	4a0f      	ldr	r2, [pc, #60]	; (8003cd8 <vQueueAddToRegistry+0x50>)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10b      	bne.n	8003cbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ca4:	490c      	ldr	r1, [pc, #48]	; (8003cd8 <vQueueAddToRegistry+0x50>)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003cae:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <vQueueAddToRegistry+0x50>)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003cba:	e006      	b.n	8003cca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b07      	cmp	r3, #7
 8003cc6:	d9e7      	bls.n	8003c98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	200007e8 	.word	0x200007e8

08003cdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003cec:	f001 fba2 	bl	8005434 <vPortEnterCritical>
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d103      	bne.n	8003d06 <vQueueWaitForMessageRestricted+0x2a>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d0c:	b25b      	sxtb	r3, r3
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d103      	bne.n	8003d1c <vQueueWaitForMessageRestricted+0x40>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d1c:	f001 fbba 	bl	8005494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	3324      	adds	r3, #36	; 0x24
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fc3b 	bl	80045ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d36:	6978      	ldr	r0, [r7, #20]
 8003d38:	f7ff ff26 	bl	8003b88 <prvUnlockQueue>
	}
 8003d3c:	bf00      	nop
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08e      	sub	sp, #56	; 0x38
 8003d48:	af04      	add	r7, sp, #16
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	623b      	str	r3, [r7, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	e7fe      	b.n	8003d6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xTaskCreateStatic+0x46>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	61fb      	str	r3, [r7, #28]
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d8a:	235c      	movs	r3, #92	; 0x5c
 8003d8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	2b5c      	cmp	r3, #92	; 0x5c
 8003d92:	d00a      	beq.n	8003daa <xTaskCreateStatic+0x66>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	61bb      	str	r3, [r7, #24]
}
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003daa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01e      	beq.n	8003df0 <xTaskCreateStatic+0xac>
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01b      	beq.n	8003df0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9303      	str	r3, [sp, #12]
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	9302      	str	r3, [sp, #8]
 8003dd2:	f107 0314 	add.w	r3, r7, #20
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f850 	bl	8003e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dea:	f000 f8dd 	bl	8003fa8 <prvAddNewTaskToReadyList>
 8003dee:	e001      	b.n	8003df4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003df4:	697b      	ldr	r3, [r7, #20]
	}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3728      	adds	r7, #40	; 0x28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b08c      	sub	sp, #48	; 0x30
 8003e02:	af04      	add	r7, sp, #16
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 fc30 	bl	8005678 <pvPortMalloc>
 8003e18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00e      	beq.n	8003e3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e20:	205c      	movs	r0, #92	; 0x5c
 8003e22:	f001 fc29 	bl	8005678 <pvPortMalloc>
 8003e26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
 8003e34:	e005      	b.n	8003e42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e36:	6978      	ldr	r0, [r7, #20]
 8003e38:	f001 fcea 	bl	8005810 <vPortFree>
 8003e3c:	e001      	b.n	8003e42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d017      	beq.n	8003e78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e50:	88fa      	ldrh	r2, [r7, #6]
 8003e52:	2300      	movs	r3, #0
 8003e54:	9303      	str	r3, [sp, #12]
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	9302      	str	r3, [sp, #8]
 8003e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f80e 	bl	8003e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e6c:	69f8      	ldr	r0, [r7, #28]
 8003e6e:	f000 f89b 	bl	8003fa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e72:	2301      	movs	r3, #1
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	e002      	b.n	8003e7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e78:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
	}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3720      	adds	r7, #32
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	21a5      	movs	r1, #165	; 0xa5
 8003ea2:	f001 fe0b 	bl	8005abc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f023 0307 	bic.w	r3, r3, #7
 8003ebe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	617b      	str	r3, [r7, #20]
}
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01f      	beq.n	8003f26 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	e012      	b.n	8003f12 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	7819      	ldrb	r1, [r3, #0]
 8003ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	3334      	adds	r3, #52	; 0x34
 8003efc:	460a      	mov	r2, r1
 8003efe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d006      	beq.n	8003f1a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	2b0f      	cmp	r3, #15
 8003f16:	d9e9      	bls.n	8003eec <prvInitialiseNewTask+0x64>
 8003f18:	e000      	b.n	8003f1c <prvInitialiseNewTask+0x94>
			{
				break;
 8003f1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f24:	e003      	b.n	8003f2e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	2b37      	cmp	r3, #55	; 0x37
 8003f32:	d901      	bls.n	8003f38 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f34:	2337      	movs	r3, #55	; 0x37
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	2200      	movs	r2, #0
 8003f48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff f978 	bl	8003244 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	3318      	adds	r3, #24
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff f973 	bl	8003244 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	2200      	movs	r2, #0
 8003f78:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	68f9      	ldr	r1, [r7, #12]
 8003f86:	69b8      	ldr	r0, [r7, #24]
 8003f88:	f001 f92a 	bl	80051e0 <pxPortInitialiseStack>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f9e:	bf00      	nop
 8003fa0:	3720      	adds	r7, #32
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fb0:	f001 fa40 	bl	8005434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fb4:	4b2d      	ldr	r3, [pc, #180]	; (800406c <prvAddNewTaskToReadyList+0xc4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	4a2c      	ldr	r2, [pc, #176]	; (800406c <prvAddNewTaskToReadyList+0xc4>)
 8003fbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fbe:	4b2c      	ldr	r3, [pc, #176]	; (8004070 <prvAddNewTaskToReadyList+0xc8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fc6:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <prvAddNewTaskToReadyList+0xc8>)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fcc:	4b27      	ldr	r3, [pc, #156]	; (800406c <prvAddNewTaskToReadyList+0xc4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d110      	bne.n	8003ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fd4:	f000 fc18 	bl	8004808 <prvInitialiseTaskLists>
 8003fd8:	e00d      	b.n	8003ff6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <prvAddNewTaskToReadyList+0xcc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fe2:	4b23      	ldr	r3, [pc, #140]	; (8004070 <prvAddNewTaskToReadyList+0xc8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d802      	bhi.n	8003ff6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ff0:	4a1f      	ldr	r2, [pc, #124]	; (8004070 <prvAddNewTaskToReadyList+0xc8>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ff6:	4b20      	ldr	r3, [pc, #128]	; (8004078 <prvAddNewTaskToReadyList+0xd0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <prvAddNewTaskToReadyList+0xd0>)
 8003ffe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004000:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <prvAddNewTaskToReadyList+0xd0>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <prvAddNewTaskToReadyList+0xd4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d903      	bls.n	800401c <prvAddNewTaskToReadyList+0x74>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	4a18      	ldr	r2, [pc, #96]	; (800407c <prvAddNewTaskToReadyList+0xd4>)
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4a15      	ldr	r2, [pc, #84]	; (8004080 <prvAddNewTaskToReadyList+0xd8>)
 800402a:	441a      	add	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f7ff f913 	bl	800325e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004038:	f001 fa2c 	bl	8005494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800403c:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <prvAddNewTaskToReadyList+0xcc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00e      	beq.n	8004062 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004044:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <prvAddNewTaskToReadyList+0xc8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	429a      	cmp	r2, r3
 8004050:	d207      	bcs.n	8004062 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004052:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <prvAddNewTaskToReadyList+0xdc>)
 8004054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000cfc 	.word	0x20000cfc
 8004070:	20000828 	.word	0x20000828
 8004074:	20000d08 	.word	0x20000d08
 8004078:	20000d18 	.word	0x20000d18
 800407c:	20000d04 	.word	0x20000d04
 8004080:	2000082c 	.word	0x2000082c
 8004084:	e000ed04 	.word	0xe000ed04

08004088 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d017      	beq.n	80040ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800409a:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <vTaskDelay+0x60>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <vTaskDelay+0x30>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	60bb      	str	r3, [r7, #8]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040b8:	f000 f880 	bl	80041bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040bc:	2100      	movs	r1, #0
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fcec 	bl	8004a9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040c4:	f000 f888 	bl	80041d8 <xTaskResumeAll>
 80040c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d107      	bne.n	80040e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <vTaskDelay+0x64>)
 80040d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000d24 	.word	0x20000d24
 80040ec:	e000ed04 	.word	0xe000ed04

080040f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	; 0x28
 80040f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040fe:	463a      	mov	r2, r7
 8004100:	1d39      	adds	r1, r7, #4
 8004102:	f107 0308 	add.w	r3, r7, #8
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff f848 	bl	800319c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800410c:	6839      	ldr	r1, [r7, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	9202      	str	r2, [sp, #8]
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	2300      	movs	r3, #0
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	2300      	movs	r3, #0
 800411c:	460a      	mov	r2, r1
 800411e:	4921      	ldr	r1, [pc, #132]	; (80041a4 <vTaskStartScheduler+0xb4>)
 8004120:	4821      	ldr	r0, [pc, #132]	; (80041a8 <vTaskStartScheduler+0xb8>)
 8004122:	f7ff fe0f 	bl	8003d44 <xTaskCreateStatic>
 8004126:	4603      	mov	r3, r0
 8004128:	4a20      	ldr	r2, [pc, #128]	; (80041ac <vTaskStartScheduler+0xbc>)
 800412a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800412c:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <vTaskStartScheduler+0xbc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004134:	2301      	movs	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	e001      	b.n	800413e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d102      	bne.n	800414a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004144:	f000 fcfe 	bl	8004b44 <xTimerCreateTimerTask>
 8004148:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d116      	bne.n	800417e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	613b      	str	r3, [r7, #16]
}
 8004162:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004164:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <vTaskStartScheduler+0xc0>)
 8004166:	f04f 32ff 	mov.w	r2, #4294967295
 800416a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <vTaskStartScheduler+0xc4>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004172:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <vTaskStartScheduler+0xc8>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004178:	f001 f8ba 	bl	80052f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800417c:	e00e      	b.n	800419c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d10a      	bne.n	800419c <vTaskStartScheduler+0xac>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60fb      	str	r3, [r7, #12]
}
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <vTaskStartScheduler+0xaa>
}
 800419c:	bf00      	nop
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	080063f8 	.word	0x080063f8
 80041a8:	080047d5 	.word	0x080047d5
 80041ac:	20000d20 	.word	0x20000d20
 80041b0:	20000d1c 	.word	0x20000d1c
 80041b4:	20000d08 	.word	0x20000d08
 80041b8:	20000d00 	.word	0x20000d00

080041bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <vTaskSuspendAll+0x18>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	4a03      	ldr	r2, [pc, #12]	; (80041d4 <vTaskSuspendAll+0x18>)
 80041c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80041ca:	bf00      	nop
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	20000d24 	.word	0x20000d24

080041d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041e6:	4b42      	ldr	r3, [pc, #264]	; (80042f0 <xTaskResumeAll+0x118>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <xTaskResumeAll+0x2c>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	603b      	str	r3, [r7, #0]
}
 8004200:	bf00      	nop
 8004202:	e7fe      	b.n	8004202 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004204:	f001 f916 	bl	8005434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004208:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <xTaskResumeAll+0x118>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3b01      	subs	r3, #1
 800420e:	4a38      	ldr	r2, [pc, #224]	; (80042f0 <xTaskResumeAll+0x118>)
 8004210:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004212:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <xTaskResumeAll+0x118>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d162      	bne.n	80042e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800421a:	4b36      	ldr	r3, [pc, #216]	; (80042f4 <xTaskResumeAll+0x11c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d05e      	beq.n	80042e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004222:	e02f      	b.n	8004284 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004224:	4b34      	ldr	r3, [pc, #208]	; (80042f8 <xTaskResumeAll+0x120>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3318      	adds	r3, #24
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff f871 	bl	8003318 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3304      	adds	r3, #4
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff f86c 	bl	8003318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004244:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <xTaskResumeAll+0x124>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d903      	bls.n	8004254 <xTaskResumeAll+0x7c>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	4a2a      	ldr	r2, [pc, #168]	; (80042fc <xTaskResumeAll+0x124>)
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4a27      	ldr	r2, [pc, #156]	; (8004300 <xTaskResumeAll+0x128>)
 8004262:	441a      	add	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3304      	adds	r3, #4
 8004268:	4619      	mov	r1, r3
 800426a:	4610      	mov	r0, r2
 800426c:	f7fe fff7 	bl	800325e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004274:	4b23      	ldr	r3, [pc, #140]	; (8004304 <xTaskResumeAll+0x12c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	429a      	cmp	r2, r3
 800427c:	d302      	bcc.n	8004284 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800427e:	4b22      	ldr	r3, [pc, #136]	; (8004308 <xTaskResumeAll+0x130>)
 8004280:	2201      	movs	r2, #1
 8004282:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004284:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <xTaskResumeAll+0x120>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1cb      	bne.n	8004224 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004292:	f000 fb57 	bl	8004944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004296:	4b1d      	ldr	r3, [pc, #116]	; (800430c <xTaskResumeAll+0x134>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d010      	beq.n	80042c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042a2:	f000 f847 	bl	8004334 <xTaskIncrementTick>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042ac:	4b16      	ldr	r3, [pc, #88]	; (8004308 <xTaskResumeAll+0x130>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f1      	bne.n	80042a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <xTaskResumeAll+0x134>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <xTaskResumeAll+0x130>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042cc:	2301      	movs	r3, #1
 80042ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <xTaskResumeAll+0x138>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042e0:	f001 f8d8 	bl	8005494 <vPortExitCritical>

	return xAlreadyYielded;
 80042e4:	68bb      	ldr	r3, [r7, #8]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000d24 	.word	0x20000d24
 80042f4:	20000cfc 	.word	0x20000cfc
 80042f8:	20000cbc 	.word	0x20000cbc
 80042fc:	20000d04 	.word	0x20000d04
 8004300:	2000082c 	.word	0x2000082c
 8004304:	20000828 	.word	0x20000828
 8004308:	20000d10 	.word	0x20000d10
 800430c:	20000d0c 	.word	0x20000d0c
 8004310:	e000ed04 	.word	0xe000ed04

08004314 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <xTaskGetTickCount+0x1c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004320:	687b      	ldr	r3, [r7, #4]
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000d00 	.word	0x20000d00

08004334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800433e:	4b4f      	ldr	r3, [pc, #316]	; (800447c <xTaskIncrementTick+0x148>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f040 808f 	bne.w	8004466 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004348:	4b4d      	ldr	r3, [pc, #308]	; (8004480 <xTaskIncrementTick+0x14c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3301      	adds	r3, #1
 800434e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004350:	4a4b      	ldr	r2, [pc, #300]	; (8004480 <xTaskIncrementTick+0x14c>)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d120      	bne.n	800439e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800435c:	4b49      	ldr	r3, [pc, #292]	; (8004484 <xTaskIncrementTick+0x150>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <xTaskIncrementTick+0x48>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	603b      	str	r3, [r7, #0]
}
 8004378:	bf00      	nop
 800437a:	e7fe      	b.n	800437a <xTaskIncrementTick+0x46>
 800437c:	4b41      	ldr	r3, [pc, #260]	; (8004484 <xTaskIncrementTick+0x150>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	4b41      	ldr	r3, [pc, #260]	; (8004488 <xTaskIncrementTick+0x154>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a3f      	ldr	r2, [pc, #252]	; (8004484 <xTaskIncrementTick+0x150>)
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4a3f      	ldr	r2, [pc, #252]	; (8004488 <xTaskIncrementTick+0x154>)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	4b3e      	ldr	r3, [pc, #248]	; (800448c <xTaskIncrementTick+0x158>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	4a3d      	ldr	r2, [pc, #244]	; (800448c <xTaskIncrementTick+0x158>)
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	f000 fad3 	bl	8004944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800439e:	4b3c      	ldr	r3, [pc, #240]	; (8004490 <xTaskIncrementTick+0x15c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d349      	bcc.n	800443c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043a8:	4b36      	ldr	r3, [pc, #216]	; (8004484 <xTaskIncrementTick+0x150>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d104      	bne.n	80043bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b2:	4b37      	ldr	r3, [pc, #220]	; (8004490 <xTaskIncrementTick+0x15c>)
 80043b4:	f04f 32ff 	mov.w	r2, #4294967295
 80043b8:	601a      	str	r2, [r3, #0]
					break;
 80043ba:	e03f      	b.n	800443c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043bc:	4b31      	ldr	r3, [pc, #196]	; (8004484 <xTaskIncrementTick+0x150>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d203      	bcs.n	80043dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043d4:	4a2e      	ldr	r2, [pc, #184]	; (8004490 <xTaskIncrementTick+0x15c>)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043da:	e02f      	b.n	800443c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	3304      	adds	r3, #4
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe ff99 	bl	8003318 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	3318      	adds	r3, #24
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe ff90 	bl	8003318 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	4b25      	ldr	r3, [pc, #148]	; (8004494 <xTaskIncrementTick+0x160>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d903      	bls.n	800440c <xTaskIncrementTick+0xd8>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	4a22      	ldr	r2, [pc, #136]	; (8004494 <xTaskIncrementTick+0x160>)
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4a1f      	ldr	r2, [pc, #124]	; (8004498 <xTaskIncrementTick+0x164>)
 800441a:	441a      	add	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f7fe ff1b 	bl	800325e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442c:	4b1b      	ldr	r3, [pc, #108]	; (800449c <xTaskIncrementTick+0x168>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	429a      	cmp	r2, r3
 8004434:	d3b8      	bcc.n	80043a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004436:	2301      	movs	r3, #1
 8004438:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800443a:	e7b5      	b.n	80043a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800443c:	4b17      	ldr	r3, [pc, #92]	; (800449c <xTaskIncrementTick+0x168>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004442:	4915      	ldr	r1, [pc, #84]	; (8004498 <xTaskIncrementTick+0x164>)
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d901      	bls.n	8004458 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004454:	2301      	movs	r3, #1
 8004456:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004458:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <xTaskIncrementTick+0x16c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d007      	beq.n	8004470 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004460:	2301      	movs	r3, #1
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e004      	b.n	8004470 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004466:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <xTaskIncrementTick+0x170>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3301      	adds	r3, #1
 800446c:	4a0d      	ldr	r2, [pc, #52]	; (80044a4 <xTaskIncrementTick+0x170>)
 800446e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004470:	697b      	ldr	r3, [r7, #20]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000d24 	.word	0x20000d24
 8004480:	20000d00 	.word	0x20000d00
 8004484:	20000cb4 	.word	0x20000cb4
 8004488:	20000cb8 	.word	0x20000cb8
 800448c:	20000d14 	.word	0x20000d14
 8004490:	20000d1c 	.word	0x20000d1c
 8004494:	20000d04 	.word	0x20000d04
 8004498:	2000082c 	.word	0x2000082c
 800449c:	20000828 	.word	0x20000828
 80044a0:	20000d10 	.word	0x20000d10
 80044a4:	20000d0c 	.word	0x20000d0c

080044a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044ae:	4b28      	ldr	r3, [pc, #160]	; (8004550 <vTaskSwitchContext+0xa8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044b6:	4b27      	ldr	r3, [pc, #156]	; (8004554 <vTaskSwitchContext+0xac>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044bc:	e041      	b.n	8004542 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80044be:	4b25      	ldr	r3, [pc, #148]	; (8004554 <vTaskSwitchContext+0xac>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c4:	4b24      	ldr	r3, [pc, #144]	; (8004558 <vTaskSwitchContext+0xb0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e010      	b.n	80044ee <vTaskSwitchContext+0x46>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	607b      	str	r3, [r7, #4]
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <vTaskSwitchContext+0x3e>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	491b      	ldr	r1, [pc, #108]	; (800455c <vTaskSwitchContext+0xb4>)
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0e4      	beq.n	80044cc <vTaskSwitchContext+0x24>
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4a13      	ldr	r2, [pc, #76]	; (800455c <vTaskSwitchContext+0xb4>)
 800450e:	4413      	add	r3, r2
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	605a      	str	r2, [r3, #4]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	3308      	adds	r3, #8
 8004524:	429a      	cmp	r2, r3
 8004526:	d104      	bne.n	8004532 <vTaskSwitchContext+0x8a>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4a09      	ldr	r2, [pc, #36]	; (8004560 <vTaskSwitchContext+0xb8>)
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4a06      	ldr	r2, [pc, #24]	; (8004558 <vTaskSwitchContext+0xb0>)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6013      	str	r3, [r2, #0]
}
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000d24 	.word	0x20000d24
 8004554:	20000d10 	.word	0x20000d10
 8004558:	20000d04 	.word	0x20000d04
 800455c:	2000082c 	.word	0x2000082c
 8004560:	20000828 	.word	0x20000828

08004564 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	60fb      	str	r3, [r7, #12]
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800458a:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <vTaskPlaceOnEventList+0x44>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3318      	adds	r3, #24
 8004590:	4619      	mov	r1, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fe fe87 	bl	80032a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004598:	2101      	movs	r1, #1
 800459a:	6838      	ldr	r0, [r7, #0]
 800459c:	f000 fa7e 	bl	8004a9c <prvAddCurrentTaskToDelayedList>
}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000828 	.word	0x20000828

080045ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10a      	bne.n	80045d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	617b      	str	r3, [r7, #20]
}
 80045d0:	bf00      	nop
 80045d2:	e7fe      	b.n	80045d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <vTaskPlaceOnEventListRestricted+0x54>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3318      	adds	r3, #24
 80045da:	4619      	mov	r1, r3
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7fe fe3e 	bl	800325e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80045e8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	68b8      	ldr	r0, [r7, #8]
 80045f2:	f000 fa53 	bl	8004a9c <prvAddCurrentTaskToDelayedList>
	}
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000828 	.word	0x20000828

08004604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	60fb      	str	r3, [r7, #12]
}
 800462c:	bf00      	nop
 800462e:	e7fe      	b.n	800462e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	3318      	adds	r3, #24
 8004634:	4618      	mov	r0, r3
 8004636:	f7fe fe6f 	bl	8003318 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463a:	4b1e      	ldr	r3, [pc, #120]	; (80046b4 <xTaskRemoveFromEventList+0xb0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d11d      	bne.n	800467e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3304      	adds	r3, #4
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe fe66 	bl	8003318 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <xTaskRemoveFromEventList+0xb4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d903      	bls.n	8004660 <xTaskRemoveFromEventList+0x5c>
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <xTaskRemoveFromEventList+0xb4>)
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4a13      	ldr	r2, [pc, #76]	; (80046bc <xTaskRemoveFromEventList+0xb8>)
 800466e:	441a      	add	r2, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	3304      	adds	r3, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f7fe fdf1 	bl	800325e <vListInsertEnd>
 800467c:	e005      	b.n	800468a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	3318      	adds	r3, #24
 8004682:	4619      	mov	r1, r3
 8004684:	480e      	ldr	r0, [pc, #56]	; (80046c0 <xTaskRemoveFromEventList+0xbc>)
 8004686:	f7fe fdea 	bl	800325e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468e:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <xTaskRemoveFromEventList+0xc0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	429a      	cmp	r2, r3
 8004696:	d905      	bls.n	80046a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004698:	2301      	movs	r3, #1
 800469a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <xTaskRemoveFromEventList+0xc4>)
 800469e:	2201      	movs	r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	e001      	b.n	80046a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80046a8:	697b      	ldr	r3, [r7, #20]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000d24 	.word	0x20000d24
 80046b8:	20000d04 	.word	0x20000d04
 80046bc:	2000082c 	.word	0x2000082c
 80046c0:	20000cbc 	.word	0x20000cbc
 80046c4:	20000828 	.word	0x20000828
 80046c8:	20000d10 	.word	0x20000d10

080046cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <vTaskInternalSetTimeOutState+0x24>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <vTaskInternalSetTimeOutState+0x28>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	605a      	str	r2, [r3, #4]
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	20000d14 	.word	0x20000d14
 80046f4:	20000d00 	.word	0x20000d00

080046f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	613b      	str	r3, [r7, #16]
}
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	60fb      	str	r3, [r7, #12]
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800473a:	f000 fe7b 	bl	8005434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800473e:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <xTaskCheckForTimeOut+0xbc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004756:	d102      	bne.n	800475e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004758:	2300      	movs	r3, #0
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	e023      	b.n	80047a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <xTaskCheckForTimeOut+0xc0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d007      	beq.n	800477a <xTaskCheckForTimeOut+0x82>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	429a      	cmp	r2, r3
 8004772:	d302      	bcc.n	800477a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004774:	2301      	movs	r3, #1
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	e015      	b.n	80047a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	429a      	cmp	r2, r3
 8004782:	d20b      	bcs.n	800479c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	1ad2      	subs	r2, r2, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ff9b 	bl	80046cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	e004      	b.n	80047a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047a2:	2301      	movs	r3, #1
 80047a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047a6:	f000 fe75 	bl	8005494 <vPortExitCritical>

	return xReturn;
 80047aa:	69fb      	ldr	r3, [r7, #28]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000d00 	.word	0x20000d00
 80047b8:	20000d14 	.word	0x20000d14

080047bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047c0:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <vTaskMissedYield+0x14>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
}
 80047c6:	bf00      	nop
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	20000d10 	.word	0x20000d10

080047d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047dc:	f000 f854 	bl	8004888 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <prvIdleTask+0x2c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d907      	bls.n	80047f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <prvIdleTask+0x30>)
 80047ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80047f8:	f7fb fec4 	bl	8000584 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80047fc:	e7ee      	b.n	80047dc <prvIdleTask+0x8>
 80047fe:	bf00      	nop
 8004800:	2000082c 	.word	0x2000082c
 8004804:	e000ed04 	.word	0xe000ed04

08004808 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	e00c      	b.n	800482e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4a12      	ldr	r2, [pc, #72]	; (8004868 <prvInitialiseTaskLists+0x60>)
 8004820:	4413      	add	r3, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe fcee 	bl	8003204 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3301      	adds	r3, #1
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b37      	cmp	r3, #55	; 0x37
 8004832:	d9ef      	bls.n	8004814 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004834:	480d      	ldr	r0, [pc, #52]	; (800486c <prvInitialiseTaskLists+0x64>)
 8004836:	f7fe fce5 	bl	8003204 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800483a:	480d      	ldr	r0, [pc, #52]	; (8004870 <prvInitialiseTaskLists+0x68>)
 800483c:	f7fe fce2 	bl	8003204 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004840:	480c      	ldr	r0, [pc, #48]	; (8004874 <prvInitialiseTaskLists+0x6c>)
 8004842:	f7fe fcdf 	bl	8003204 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004846:	480c      	ldr	r0, [pc, #48]	; (8004878 <prvInitialiseTaskLists+0x70>)
 8004848:	f7fe fcdc 	bl	8003204 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800484c:	480b      	ldr	r0, [pc, #44]	; (800487c <prvInitialiseTaskLists+0x74>)
 800484e:	f7fe fcd9 	bl	8003204 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <prvInitialiseTaskLists+0x78>)
 8004854:	4a05      	ldr	r2, [pc, #20]	; (800486c <prvInitialiseTaskLists+0x64>)
 8004856:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004858:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <prvInitialiseTaskLists+0x7c>)
 800485a:	4a05      	ldr	r2, [pc, #20]	; (8004870 <prvInitialiseTaskLists+0x68>)
 800485c:	601a      	str	r2, [r3, #0]
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	2000082c 	.word	0x2000082c
 800486c:	20000c8c 	.word	0x20000c8c
 8004870:	20000ca0 	.word	0x20000ca0
 8004874:	20000cbc 	.word	0x20000cbc
 8004878:	20000cd0 	.word	0x20000cd0
 800487c:	20000ce8 	.word	0x20000ce8
 8004880:	20000cb4 	.word	0x20000cb4
 8004884:	20000cb8 	.word	0x20000cb8

08004888 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800488e:	e019      	b.n	80048c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004890:	f000 fdd0 	bl	8005434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004894:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <prvCheckTasksWaitingTermination+0x50>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe fd39 	bl	8003318 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048a6:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <prvCheckTasksWaitingTermination+0x54>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	4a0b      	ldr	r2, [pc, #44]	; (80048dc <prvCheckTasksWaitingTermination+0x54>)
 80048ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <prvCheckTasksWaitingTermination+0x58>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <prvCheckTasksWaitingTermination+0x58>)
 80048b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048ba:	f000 fdeb 	bl	8005494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f810 	bl	80048e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048c4:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <prvCheckTasksWaitingTermination+0x58>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e1      	bne.n	8004890 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048cc:	bf00      	nop
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000cd0 	.word	0x20000cd0
 80048dc:	20000cfc 	.word	0x20000cfc
 80048e0:	20000ce4 	.word	0x20000ce4

080048e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d108      	bne.n	8004908 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 ff88 	bl	8005810 <vPortFree>
				vPortFree( pxTCB );
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 ff85 	bl	8005810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004906:	e018      	b.n	800493a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800490e:	2b01      	cmp	r3, #1
 8004910:	d103      	bne.n	800491a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 ff7c 	bl	8005810 <vPortFree>
	}
 8004918:	e00f      	b.n	800493a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004920:	2b02      	cmp	r3, #2
 8004922:	d00a      	beq.n	800493a <prvDeleteTCB+0x56>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	60fb      	str	r3, [r7, #12]
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <prvDeleteTCB+0x54>
	}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800494a:	4b0c      	ldr	r3, [pc, #48]	; (800497c <prvResetNextTaskUnblockTime+0x38>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <prvResetNextTaskUnblockTime+0x3c>)
 8004956:	f04f 32ff 	mov.w	r2, #4294967295
 800495a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800495c:	e008      	b.n	8004970 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800495e:	4b07      	ldr	r3, [pc, #28]	; (800497c <prvResetNextTaskUnblockTime+0x38>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4a04      	ldr	r2, [pc, #16]	; (8004980 <prvResetNextTaskUnblockTime+0x3c>)
 800496e:	6013      	str	r3, [r2, #0]
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000cb4 	.word	0x20000cb4
 8004980:	20000d1c 	.word	0x20000d1c

08004984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800498a:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <xTaskGetSchedulerState+0x34>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004992:	2301      	movs	r3, #1
 8004994:	607b      	str	r3, [r7, #4]
 8004996:	e008      	b.n	80049aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004998:	4b08      	ldr	r3, [pc, #32]	; (80049bc <xTaskGetSchedulerState+0x38>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049a0:	2302      	movs	r3, #2
 80049a2:	607b      	str	r3, [r7, #4]
 80049a4:	e001      	b.n	80049aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049a6:	2300      	movs	r3, #0
 80049a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049aa:	687b      	ldr	r3, [r7, #4]
	}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	20000d08 	.word	0x20000d08
 80049bc:	20000d24 	.word	0x20000d24

080049c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d056      	beq.n	8004a84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049d6:	4b2e      	ldr	r3, [pc, #184]	; (8004a90 <xTaskPriorityDisinherit+0xd0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d00a      	beq.n	80049f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	60fb      	str	r3, [r7, #12]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	60bb      	str	r3, [r7, #8]
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a18:	1e5a      	subs	r2, r3, #1
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d02c      	beq.n	8004a84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d128      	bne.n	8004a84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	3304      	adds	r3, #4
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fe fc6e 	bl	8003318 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a54:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <xTaskPriorityDisinherit+0xd4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d903      	bls.n	8004a64 <xTaskPriorityDisinherit+0xa4>
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	4a0c      	ldr	r2, [pc, #48]	; (8004a94 <xTaskPriorityDisinherit+0xd4>)
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4a09      	ldr	r2, [pc, #36]	; (8004a98 <xTaskPriorityDisinherit+0xd8>)
 8004a72:	441a      	add	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f7fe fbef 	bl	800325e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a80:	2301      	movs	r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a84:	697b      	ldr	r3, [r7, #20]
	}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000828 	.word	0x20000828
 8004a94:	20000d04 	.word	0x20000d04
 8004a98:	2000082c 	.word	0x2000082c

08004a9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004aa6:	4b21      	ldr	r3, [pc, #132]	; (8004b2c <prvAddCurrentTaskToDelayedList+0x90>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aac:	4b20      	ldr	r3, [pc, #128]	; (8004b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe fc30 	bl	8003318 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d10a      	bne.n	8004ad6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ac6:	4b1a      	ldr	r3, [pc, #104]	; (8004b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4619      	mov	r1, r3
 8004ace:	4819      	ldr	r0, [pc, #100]	; (8004b34 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ad0:	f7fe fbc5 	bl	800325e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ad4:	e026      	b.n	8004b24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4413      	add	r3, r2
 8004adc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ade:	4b14      	ldr	r3, [pc, #80]	; (8004b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d209      	bcs.n	8004b02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f7fe fbd3 	bl	80032a6 <vListInsert>
}
 8004b00:	e010      	b.n	8004b24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b02:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f7fe fbc9 	bl	80032a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b14:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d202      	bcs.n	8004b24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b1e:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6013      	str	r3, [r2, #0]
}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20000d00 	.word	0x20000d00
 8004b30:	20000828 	.word	0x20000828
 8004b34:	20000ce8 	.word	0x20000ce8
 8004b38:	20000cb8 	.word	0x20000cb8
 8004b3c:	20000cb4 	.word	0x20000cb4
 8004b40:	20000d1c 	.word	0x20000d1c

08004b44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	; 0x28
 8004b48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b4e:	f000 fb07 	bl	8005160 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b52:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <xTimerCreateTimerTask+0x80>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d021      	beq.n	8004b9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b62:	1d3a      	adds	r2, r7, #4
 8004b64:	f107 0108 	add.w	r1, r7, #8
 8004b68:	f107 030c 	add.w	r3, r7, #12
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe fb2f 	bl	80031d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	9202      	str	r2, [sp, #8]
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	2300      	movs	r3, #0
 8004b82:	460a      	mov	r2, r1
 8004b84:	4910      	ldr	r1, [pc, #64]	; (8004bc8 <xTimerCreateTimerTask+0x84>)
 8004b86:	4811      	ldr	r0, [pc, #68]	; (8004bcc <xTimerCreateTimerTask+0x88>)
 8004b88:	f7ff f8dc 	bl	8003d44 <xTaskCreateStatic>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4a10      	ldr	r2, [pc, #64]	; (8004bd0 <xTimerCreateTimerTask+0x8c>)
 8004b90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b92:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <xTimerCreateTimerTask+0x8c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	613b      	str	r3, [r7, #16]
}
 8004bb6:	bf00      	nop
 8004bb8:	e7fe      	b.n	8004bb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004bba:	697b      	ldr	r3, [r7, #20]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000d58 	.word	0x20000d58
 8004bc8:	08006400 	.word	0x08006400
 8004bcc:	08004d09 	.word	0x08004d09
 8004bd0:	20000d5c 	.word	0x20000d5c

08004bd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	; 0x28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	623b      	str	r3, [r7, #32]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c02:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <xTimerGenericCommand+0x98>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d02a      	beq.n	8004c60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b05      	cmp	r3, #5
 8004c1a:	dc18      	bgt.n	8004c4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c1c:	f7ff feb2 	bl	8004984 <xTaskGetSchedulerState>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d109      	bne.n	8004c3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c26:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <xTimerGenericCommand+0x98>)
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	f107 0110 	add.w	r1, r7, #16
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c32:	f7fe fc9f 	bl	8003574 <xQueueGenericSend>
 8004c36:	6278      	str	r0, [r7, #36]	; 0x24
 8004c38:	e012      	b.n	8004c60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <xTimerGenericCommand+0x98>)
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	f107 0110 	add.w	r1, r7, #16
 8004c42:	2300      	movs	r3, #0
 8004c44:	2200      	movs	r2, #0
 8004c46:	f7fe fc95 	bl	8003574 <xQueueGenericSend>
 8004c4a:	6278      	str	r0, [r7, #36]	; 0x24
 8004c4c:	e008      	b.n	8004c60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c4e:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <xTimerGenericCommand+0x98>)
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	f107 0110 	add.w	r1, r7, #16
 8004c56:	2300      	movs	r3, #0
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	f7fe fd89 	bl	8003770 <xQueueGenericSendFromISR>
 8004c5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3728      	adds	r7, #40	; 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000d58 	.word	0x20000d58

08004c70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c7a:	4b22      	ldr	r3, [pc, #136]	; (8004d04 <prvProcessExpiredTimer+0x94>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fe fb45 	bl	8003318 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d022      	beq.n	8004ce2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	699a      	ldr	r2, [r3, #24]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	18d1      	adds	r1, r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	6978      	ldr	r0, [r7, #20]
 8004caa:	f000 f8d1 	bl	8004e50 <prvInsertTimerInActiveList>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01f      	beq.n	8004cf4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	6978      	ldr	r0, [r7, #20]
 8004cc0:	f7ff ff88 	bl	8004bd4 <xTimerGenericCommand>
 8004cc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d113      	bne.n	8004cf4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	60fb      	str	r3, [r7, #12]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	6978      	ldr	r0, [r7, #20]
 8004cfa:	4798      	blx	r3
}
 8004cfc:	bf00      	nop
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20000d50 	.word	0x20000d50

08004d08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d10:	f107 0308 	add.w	r3, r7, #8
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 f857 	bl	8004dc8 <prvGetNextExpireTime>
 8004d1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4619      	mov	r1, r3
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f803 	bl	8004d2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d26:	f000 f8d5 	bl	8004ed4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d2a:	e7f1      	b.n	8004d10 <prvTimerTask+0x8>

08004d2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d36:	f7ff fa41 	bl	80041bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d3a:	f107 0308 	add.w	r3, r7, #8
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f866 	bl	8004e10 <prvSampleTimeNow>
 8004d44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d130      	bne.n	8004dae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <prvProcessTimerOrBlockTask+0x3c>
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d806      	bhi.n	8004d68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d5a:	f7ff fa3d 	bl	80041d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d5e:	68f9      	ldr	r1, [r7, #12]
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff ff85 	bl	8004c70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d66:	e024      	b.n	8004db2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <prvProcessTimerOrBlockTask+0x90>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <prvProcessTimerOrBlockTask+0x50>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <prvProcessTimerOrBlockTask+0x52>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d80:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <prvProcessTimerOrBlockTask+0x94>)
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	f7fe ffa5 	bl	8003cdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d92:	f7ff fa21 	bl	80041d8 <xTaskResumeAll>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10a      	bne.n	8004db2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <prvProcessTimerOrBlockTask+0x98>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	f3bf 8f6f 	isb	sy
}
 8004dac:	e001      	b.n	8004db2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004dae:	f7ff fa13 	bl	80041d8 <xTaskResumeAll>
}
 8004db2:	bf00      	nop
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000d54 	.word	0x20000d54
 8004dc0:	20000d58 	.word	0x20000d58
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <prvGetNextExpireTime+0x44>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <prvGetNextExpireTime+0x16>
 8004dda:	2201      	movs	r2, #1
 8004ddc:	e000      	b.n	8004de0 <prvGetNextExpireTime+0x18>
 8004dde:	2200      	movs	r2, #0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d105      	bne.n	8004df8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dec:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <prvGetNextExpireTime+0x44>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	e001      	b.n	8004dfc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000d50 	.word	0x20000d50

08004e10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e18:	f7ff fa7c 	bl	8004314 <xTaskGetTickCount>
 8004e1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <prvSampleTimeNow+0x3c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d205      	bcs.n	8004e34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e28:	f000 f936 	bl	8005098 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	e002      	b.n	8004e3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e3a:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <prvSampleTimeNow+0x3c>)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e40:	68fb      	ldr	r3, [r7, #12]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000d60 	.word	0x20000d60

08004e50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d812      	bhi.n	8004e9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	1ad2      	subs	r2, r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d302      	bcc.n	8004e8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e84:	2301      	movs	r3, #1
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	e01b      	b.n	8004ec2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e8a:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <prvInsertTimerInActiveList+0x7c>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3304      	adds	r3, #4
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f7fe fa06 	bl	80032a6 <vListInsert>
 8004e9a:	e012      	b.n	8004ec2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d206      	bcs.n	8004eb2 <prvInsertTimerInActiveList+0x62>
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d302      	bcc.n	8004eb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004eac:	2301      	movs	r3, #1
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	e007      	b.n	8004ec2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eb2:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <prvInsertTimerInActiveList+0x80>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	f7fe f9f2 	bl	80032a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ec2:	697b      	ldr	r3, [r7, #20]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000d54 	.word	0x20000d54
 8004ed0:	20000d50 	.word	0x20000d50

08004ed4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08e      	sub	sp, #56	; 0x38
 8004ed8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eda:	e0ca      	b.n	8005072 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	da18      	bge.n	8004f14 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ee2:	1d3b      	adds	r3, r7, #4
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	61fb      	str	r3, [r7, #28]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f0a:	6850      	ldr	r0, [r2, #4]
 8004f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f0e:	6892      	ldr	r2, [r2, #8]
 8004f10:	4611      	mov	r1, r2
 8004f12:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f2c0 80aa 	blt.w	8005070 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe f9f3 	bl	8003318 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f32:	463b      	mov	r3, r7
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff6b 	bl	8004e10 <prvSampleTimeNow>
 8004f3a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b09      	cmp	r3, #9
 8004f40:	f200 8097 	bhi.w	8005072 <prvProcessReceivedCommands+0x19e>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <prvProcessReceivedCommands+0x78>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f75 	.word	0x08004f75
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f75 	.word	0x08004f75
 8004f58:	08004fe9 	.word	0x08004fe9
 8004f5c:	08004ffd 	.word	0x08004ffd
 8004f60:	08005047 	.word	0x08005047
 8004f64:	08004f75 	.word	0x08004f75
 8004f68:	08004f75 	.word	0x08004f75
 8004f6c:	08004fe9 	.word	0x08004fe9
 8004f70:	08004ffd 	.word	0x08004ffd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	18d1      	adds	r1, r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f94:	f7ff ff5c 	bl	8004e50 <prvInsertTimerInActiveList>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d069      	beq.n	8005072 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d05e      	beq.n	8005072 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	441a      	add	r2, r3
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc6:	f7ff fe05 	bl	8004bd4 <xTimerGenericCommand>
 8004fca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d14f      	bne.n	8005072 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	61bb      	str	r3, [r7, #24]
}
 8004fe4:	bf00      	nop
 8004fe6:	e7fe      	b.n	8004fe6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004ffa:	e03a      	b.n	8005072 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	b2da      	uxtb	r2, r3
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	617b      	str	r3, [r7, #20]
}
 800502e:	bf00      	nop
 8005030:	e7fe      	b.n	8005030 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	18d1      	adds	r1, r2, r3
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005040:	f7ff ff06 	bl	8004e50 <prvInsertTimerInActiveList>
					break;
 8005044:	e015      	b.n	8005072 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d103      	bne.n	800505c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005056:	f000 fbdb 	bl	8005810 <vPortFree>
 800505a:	e00a      	b.n	8005072 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	b2da      	uxtb	r2, r3
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800506e:	e000      	b.n	8005072 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005070:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005072:	4b08      	ldr	r3, [pc, #32]	; (8005094 <prvProcessReceivedCommands+0x1c0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	1d39      	adds	r1, r7, #4
 8005078:	2200      	movs	r2, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fc14 	bl	80038a8 <xQueueReceive>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	f47f af2a 	bne.w	8004edc <prvProcessReceivedCommands+0x8>
	}
}
 8005088:	bf00      	nop
 800508a:	bf00      	nop
 800508c:	3730      	adds	r7, #48	; 0x30
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000d58 	.word	0x20000d58

08005098 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800509e:	e048      	b.n	8005132 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050a0:	4b2d      	ldr	r3, [pc, #180]	; (8005158 <prvSwitchTimerLists+0xc0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050aa:	4b2b      	ldr	r3, [pc, #172]	; (8005158 <prvSwitchTimerLists+0xc0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fe f92d 	bl	8003318 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d02e      	beq.n	8005132 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4413      	add	r3, r2
 80050dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d90e      	bls.n	8005104 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050f2:	4b19      	ldr	r3, [pc, #100]	; (8005158 <prvSwitchTimerLists+0xc0>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f7fe f8d2 	bl	80032a6 <vListInsert>
 8005102:	e016      	b.n	8005132 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005104:	2300      	movs	r3, #0
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	2300      	movs	r3, #0
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	2100      	movs	r1, #0
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fd60 	bl	8004bd4 <xTimerGenericCommand>
 8005114:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	603b      	str	r3, [r7, #0]
}
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005132:	4b09      	ldr	r3, [pc, #36]	; (8005158 <prvSwitchTimerLists+0xc0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1b1      	bne.n	80050a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <prvSwitchTimerLists+0xc0>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <prvSwitchTimerLists+0xc4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a04      	ldr	r2, [pc, #16]	; (8005158 <prvSwitchTimerLists+0xc0>)
 8005148:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800514a:	4a04      	ldr	r2, [pc, #16]	; (800515c <prvSwitchTimerLists+0xc4>)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	6013      	str	r3, [r2, #0]
}
 8005150:	bf00      	nop
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000d50 	.word	0x20000d50
 800515c:	20000d54 	.word	0x20000d54

08005160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005166:	f000 f965 	bl	8005434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800516a:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d120      	bne.n	80051b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005172:	4814      	ldr	r0, [pc, #80]	; (80051c4 <prvCheckForValidListAndQueue+0x64>)
 8005174:	f7fe f846 	bl	8003204 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005178:	4813      	ldr	r0, [pc, #76]	; (80051c8 <prvCheckForValidListAndQueue+0x68>)
 800517a:	f7fe f843 	bl	8003204 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <prvCheckForValidListAndQueue+0x6c>)
 8005180:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <prvCheckForValidListAndQueue+0x64>)
 8005182:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005184:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <prvCheckForValidListAndQueue+0x70>)
 8005186:	4a10      	ldr	r2, [pc, #64]	; (80051c8 <prvCheckForValidListAndQueue+0x68>)
 8005188:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800518a:	2300      	movs	r3, #0
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <prvCheckForValidListAndQueue+0x74>)
 8005190:	4a11      	ldr	r2, [pc, #68]	; (80051d8 <prvCheckForValidListAndQueue+0x78>)
 8005192:	2110      	movs	r1, #16
 8005194:	200a      	movs	r0, #10
 8005196:	f7fe f951 	bl	800343c <xQueueGenericCreateStatic>
 800519a:	4603      	mov	r3, r0
 800519c:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 800519e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	490b      	ldr	r1, [pc, #44]	; (80051dc <prvCheckForValidListAndQueue+0x7c>)
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe fd6a 	bl	8003c88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051b4:	f000 f96e 	bl	8005494 <vPortExitCritical>
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000d58 	.word	0x20000d58
 80051c4:	20000d28 	.word	0x20000d28
 80051c8:	20000d3c 	.word	0x20000d3c
 80051cc:	20000d50 	.word	0x20000d50
 80051d0:	20000d54 	.word	0x20000d54
 80051d4:	20000e04 	.word	0x20000e04
 80051d8:	20000d64 	.word	0x20000d64
 80051dc:	08006408 	.word	0x08006408

080051e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3b04      	subs	r3, #4
 80051f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3b04      	subs	r3, #4
 80051fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f023 0201 	bic.w	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3b04      	subs	r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005210:	4a0c      	ldr	r2, [pc, #48]	; (8005244 <pxPortInitialiseStack+0x64>)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3b14      	subs	r3, #20
 800521a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3b04      	subs	r3, #4
 8005226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f06f 0202 	mvn.w	r2, #2
 800522e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3b20      	subs	r3, #32
 8005234:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	08005249 	.word	0x08005249

08005248 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800524e:	2300      	movs	r3, #0
 8005250:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005252:	4b12      	ldr	r3, [pc, #72]	; (800529c <prvTaskExitError+0x54>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525a:	d00a      	beq.n	8005272 <prvTaskExitError+0x2a>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	60fb      	str	r3, [r7, #12]
}
 800526e:	bf00      	nop
 8005270:	e7fe      	b.n	8005270 <prvTaskExitError+0x28>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	60bb      	str	r3, [r7, #8]
}
 8005284:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005286:	bf00      	nop
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0fc      	beq.n	8005288 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	20000014 	.word	0x20000014

080052a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <pxCurrentTCBConst2>)
 80052a2:	6819      	ldr	r1, [r3, #0]
 80052a4:	6808      	ldr	r0, [r1, #0]
 80052a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052aa:	f380 8809 	msr	PSP, r0
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f380 8811 	msr	BASEPRI, r0
 80052ba:	4770      	bx	lr
 80052bc:	f3af 8000 	nop.w

080052c0 <pxCurrentTCBConst2>:
 80052c0:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop

080052c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052c8:	4808      	ldr	r0, [pc, #32]	; (80052ec <prvPortStartFirstTask+0x24>)
 80052ca:	6800      	ldr	r0, [r0, #0]
 80052cc:	6800      	ldr	r0, [r0, #0]
 80052ce:	f380 8808 	msr	MSP, r0
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f380 8814 	msr	CONTROL, r0
 80052da:	b662      	cpsie	i
 80052dc:	b661      	cpsie	f
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	df00      	svc	0
 80052e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052ea:	bf00      	nop
 80052ec:	e000ed08 	.word	0xe000ed08

080052f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052f6:	4b46      	ldr	r3, [pc, #280]	; (8005410 <xPortStartScheduler+0x120>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a46      	ldr	r2, [pc, #280]	; (8005414 <xPortStartScheduler+0x124>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d10a      	bne.n	8005316 <xPortStartScheduler+0x26>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	613b      	str	r3, [r7, #16]
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005316:	4b3e      	ldr	r3, [pc, #248]	; (8005410 <xPortStartScheduler+0x120>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a3f      	ldr	r2, [pc, #252]	; (8005418 <xPortStartScheduler+0x128>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d10a      	bne.n	8005336 <xPortStartScheduler+0x46>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	60fb      	str	r3, [r7, #12]
}
 8005332:	bf00      	nop
 8005334:	e7fe      	b.n	8005334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005336:	4b39      	ldr	r3, [pc, #228]	; (800541c <xPortStartScheduler+0x12c>)
 8005338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	22ff      	movs	r2, #255	; 0xff
 8005346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005358:	b2da      	uxtb	r2, r3
 800535a:	4b31      	ldr	r3, [pc, #196]	; (8005420 <xPortStartScheduler+0x130>)
 800535c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800535e:	4b31      	ldr	r3, [pc, #196]	; (8005424 <xPortStartScheduler+0x134>)
 8005360:	2207      	movs	r2, #7
 8005362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005364:	e009      	b.n	800537a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005366:	4b2f      	ldr	r3, [pc, #188]	; (8005424 <xPortStartScheduler+0x134>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3b01      	subs	r3, #1
 800536c:	4a2d      	ldr	r2, [pc, #180]	; (8005424 <xPortStartScheduler+0x134>)
 800536e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800537a:	78fb      	ldrb	r3, [r7, #3]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	2b80      	cmp	r3, #128	; 0x80
 8005384:	d0ef      	beq.n	8005366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005386:	4b27      	ldr	r3, [pc, #156]	; (8005424 <xPortStartScheduler+0x134>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1c3 0307 	rsb	r3, r3, #7
 800538e:	2b04      	cmp	r3, #4
 8005390:	d00a      	beq.n	80053a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	60bb      	str	r3, [r7, #8]
}
 80053a4:	bf00      	nop
 80053a6:	e7fe      	b.n	80053a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053a8:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <xPortStartScheduler+0x134>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <xPortStartScheduler+0x134>)
 80053b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053b2:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <xPortStartScheduler+0x134>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053ba:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <xPortStartScheduler+0x134>)
 80053bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <xPortStartScheduler+0x138>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <xPortStartScheduler+0x138>)
 80053cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053d2:	4b15      	ldr	r3, [pc, #84]	; (8005428 <xPortStartScheduler+0x138>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a14      	ldr	r2, [pc, #80]	; (8005428 <xPortStartScheduler+0x138>)
 80053d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053de:	f000 f8dd 	bl	800559c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053e2:	4b12      	ldr	r3, [pc, #72]	; (800542c <xPortStartScheduler+0x13c>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053e8:	f000 f8fc 	bl	80055e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053ec:	4b10      	ldr	r3, [pc, #64]	; (8005430 <xPortStartScheduler+0x140>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a0f      	ldr	r2, [pc, #60]	; (8005430 <xPortStartScheduler+0x140>)
 80053f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80053f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053f8:	f7ff ff66 	bl	80052c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053fc:	f7ff f854 	bl	80044a8 <vTaskSwitchContext>
	prvTaskExitError();
 8005400:	f7ff ff22 	bl	8005248 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	e000ed00 	.word	0xe000ed00
 8005414:	410fc271 	.word	0x410fc271
 8005418:	410fc270 	.word	0x410fc270
 800541c:	e000e400 	.word	0xe000e400
 8005420:	20000e54 	.word	0x20000e54
 8005424:	20000e58 	.word	0x20000e58
 8005428:	e000ed20 	.word	0xe000ed20
 800542c:	20000014 	.word	0x20000014
 8005430:	e000ef34 	.word	0xe000ef34

08005434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	607b      	str	r3, [r7, #4]
}
 800544c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800544e:	4b0f      	ldr	r3, [pc, #60]	; (800548c <vPortEnterCritical+0x58>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	4a0d      	ldr	r2, [pc, #52]	; (800548c <vPortEnterCritical+0x58>)
 8005456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005458:	4b0c      	ldr	r3, [pc, #48]	; (800548c <vPortEnterCritical+0x58>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d10f      	bne.n	8005480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005460:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <vPortEnterCritical+0x5c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <vPortEnterCritical+0x4c>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	603b      	str	r3, [r7, #0]
}
 800547c:	bf00      	nop
 800547e:	e7fe      	b.n	800547e <vPortEnterCritical+0x4a>
	}
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000014 	.word	0x20000014
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800549a:	4b12      	ldr	r3, [pc, #72]	; (80054e4 <vPortExitCritical+0x50>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <vPortExitCritical+0x24>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	607b      	str	r3, [r7, #4]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <vPortExitCritical+0x50>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3b01      	subs	r3, #1
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <vPortExitCritical+0x50>)
 80054c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054c2:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <vPortExitCritical+0x50>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d105      	bne.n	80054d6 <vPortExitCritical+0x42>
 80054ca:	2300      	movs	r3, #0
 80054cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	f383 8811 	msr	BASEPRI, r3
}
 80054d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000014 	.word	0x20000014
	...

080054f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054f0:	f3ef 8009 	mrs	r0, PSP
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	4b15      	ldr	r3, [pc, #84]	; (8005550 <pxCurrentTCBConst>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	f01e 0f10 	tst.w	lr, #16
 8005500:	bf08      	it	eq
 8005502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550a:	6010      	str	r0, [r2, #0]
 800550c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005514:	f380 8811 	msr	BASEPRI, r0
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f7fe ffc2 	bl	80044a8 <vTaskSwitchContext>
 8005524:	f04f 0000 	mov.w	r0, #0
 8005528:	f380 8811 	msr	BASEPRI, r0
 800552c:	bc09      	pop	{r0, r3}
 800552e:	6819      	ldr	r1, [r3, #0]
 8005530:	6808      	ldr	r0, [r1, #0]
 8005532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005536:	f01e 0f10 	tst.w	lr, #16
 800553a:	bf08      	it	eq
 800553c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005540:	f380 8809 	msr	PSP, r0
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	f3af 8000 	nop.w

08005550 <pxCurrentTCBConst>:
 8005550:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop

08005558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	607b      	str	r3, [r7, #4]
}
 8005570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005572:	f7fe fedf 	bl	8004334 <xTaskIncrementTick>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <xPortSysTickHandler+0x40>)
 800557e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	2300      	movs	r3, #0
 8005586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	f383 8811 	msr	BASEPRI, r3
}
 800558e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <vPortSetupTimerInterrupt+0x34>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055a6:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <vPortSetupTimerInterrupt+0x38>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055ac:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <vPortSetupTimerInterrupt+0x3c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <vPortSetupTimerInterrupt+0x40>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	099b      	lsrs	r3, r3, #6
 80055b8:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <vPortSetupTimerInterrupt+0x44>)
 80055ba:	3b01      	subs	r3, #1
 80055bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055be:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <vPortSetupTimerInterrupt+0x34>)
 80055c0:	2207      	movs	r2, #7
 80055c2:	601a      	str	r2, [r3, #0]
}
 80055c4:	bf00      	nop
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	e000e010 	.word	0xe000e010
 80055d4:	e000e018 	.word	0xe000e018
 80055d8:	20000008 	.word	0x20000008
 80055dc:	10624dd3 	.word	0x10624dd3
 80055e0:	e000e014 	.word	0xe000e014

080055e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80055f4 <vPortEnableVFP+0x10>
 80055e8:	6801      	ldr	r1, [r0, #0]
 80055ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80055ee:	6001      	str	r1, [r0, #0]
 80055f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055f2:	bf00      	nop
 80055f4:	e000ed88 	.word	0xe000ed88

080055f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055fe:	f3ef 8305 	mrs	r3, IPSR
 8005602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b0f      	cmp	r3, #15
 8005608:	d914      	bls.n	8005634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800560a:	4a17      	ldr	r2, [pc, #92]	; (8005668 <vPortValidateInterruptPriority+0x70>)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005614:	4b15      	ldr	r3, [pc, #84]	; (800566c <vPortValidateInterruptPriority+0x74>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	7afa      	ldrb	r2, [r7, #11]
 800561a:	429a      	cmp	r2, r3
 800561c:	d20a      	bcs.n	8005634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	607b      	str	r3, [r7, #4]
}
 8005630:	bf00      	nop
 8005632:	e7fe      	b.n	8005632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005634:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <vPortValidateInterruptPriority+0x78>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800563c:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <vPortValidateInterruptPriority+0x7c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d90a      	bls.n	800565a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	603b      	str	r3, [r7, #0]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <vPortValidateInterruptPriority+0x60>
	}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	e000e3f0 	.word	0xe000e3f0
 800566c:	20000e54 	.word	0x20000e54
 8005670:	e000ed0c 	.word	0xe000ed0c
 8005674:	20000e58 	.word	0x20000e58

08005678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08a      	sub	sp, #40	; 0x28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005684:	f7fe fd9a 	bl	80041bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005688:	4b5b      	ldr	r3, [pc, #364]	; (80057f8 <pvPortMalloc+0x180>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005690:	f000 f920 	bl	80058d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005694:	4b59      	ldr	r3, [pc, #356]	; (80057fc <pvPortMalloc+0x184>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4013      	ands	r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	f040 8093 	bne.w	80057c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01d      	beq.n	80056e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80056a8:	2208      	movs	r2, #8
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4413      	add	r3, r2
 80056ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d014      	beq.n	80056e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f023 0307 	bic.w	r3, r3, #7
 80056c0:	3308      	adds	r3, #8
 80056c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <pvPortMalloc+0x6c>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	617b      	str	r3, [r7, #20]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d06e      	beq.n	80057c8 <pvPortMalloc+0x150>
 80056ea:	4b45      	ldr	r3, [pc, #276]	; (8005800 <pvPortMalloc+0x188>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d869      	bhi.n	80057c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056f4:	4b43      	ldr	r3, [pc, #268]	; (8005804 <pvPortMalloc+0x18c>)
 80056f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056f8:	4b42      	ldr	r3, [pc, #264]	; (8005804 <pvPortMalloc+0x18c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056fe:	e004      	b.n	800570a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	429a      	cmp	r2, r3
 8005712:	d903      	bls.n	800571c <pvPortMalloc+0xa4>
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1f1      	bne.n	8005700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800571c:	4b36      	ldr	r3, [pc, #216]	; (80057f8 <pvPortMalloc+0x180>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005722:	429a      	cmp	r2, r3
 8005724:	d050      	beq.n	80057c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2208      	movs	r2, #8
 800572c:	4413      	add	r3, r2
 800572e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	1ad2      	subs	r2, r2, r3
 8005740:	2308      	movs	r3, #8
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	429a      	cmp	r2, r3
 8005746:	d91f      	bls.n	8005788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4413      	add	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <pvPortMalloc+0xf8>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	613b      	str	r3, [r7, #16]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	1ad2      	subs	r2, r2, r3
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005782:	69b8      	ldr	r0, [r7, #24]
 8005784:	f000 f908 	bl	8005998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005788:	4b1d      	ldr	r3, [pc, #116]	; (8005800 <pvPortMalloc+0x188>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	4a1b      	ldr	r2, [pc, #108]	; (8005800 <pvPortMalloc+0x188>)
 8005794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005796:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <pvPortMalloc+0x188>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <pvPortMalloc+0x190>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d203      	bcs.n	80057aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057a2:	4b17      	ldr	r3, [pc, #92]	; (8005800 <pvPortMalloc+0x188>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a18      	ldr	r2, [pc, #96]	; (8005808 <pvPortMalloc+0x190>)
 80057a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	4b13      	ldr	r3, [pc, #76]	; (80057fc <pvPortMalloc+0x184>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	431a      	orrs	r2, r3
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057be:	4b13      	ldr	r3, [pc, #76]	; (800580c <pvPortMalloc+0x194>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3301      	adds	r3, #1
 80057c4:	4a11      	ldr	r2, [pc, #68]	; (800580c <pvPortMalloc+0x194>)
 80057c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057c8:	f7fe fd06 	bl	80041d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <pvPortMalloc+0x174>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	60fb      	str	r3, [r7, #12]
}
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <pvPortMalloc+0x172>
	return pvReturn;
 80057ec:	69fb      	ldr	r3, [r7, #28]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3728      	adds	r7, #40	; 0x28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20004a64 	.word	0x20004a64
 80057fc:	20004a78 	.word	0x20004a78
 8005800:	20004a68 	.word	0x20004a68
 8005804:	20004a5c 	.word	0x20004a5c
 8005808:	20004a6c 	.word	0x20004a6c
 800580c:	20004a70 	.word	0x20004a70

08005810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d04d      	beq.n	80058be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005822:	2308      	movs	r3, #8
 8005824:	425b      	negs	r3, r3
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4413      	add	r3, r2
 800582a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	4b24      	ldr	r3, [pc, #144]	; (80058c8 <vPortFree+0xb8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4013      	ands	r3, r2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <vPortFree+0x44>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	60fb      	str	r3, [r7, #12]
}
 8005850:	bf00      	nop
 8005852:	e7fe      	b.n	8005852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <vPortFree+0x62>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	60bb      	str	r3, [r7, #8]
}
 800586e:	bf00      	nop
 8005870:	e7fe      	b.n	8005870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <vPortFree+0xb8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01e      	beq.n	80058be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d11a      	bne.n	80058be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	4b0e      	ldr	r3, [pc, #56]	; (80058c8 <vPortFree+0xb8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	43db      	mvns	r3, r3
 8005892:	401a      	ands	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005898:	f7fe fc90 	bl	80041bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <vPortFree+0xbc>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4413      	add	r3, r2
 80058a6:	4a09      	ldr	r2, [pc, #36]	; (80058cc <vPortFree+0xbc>)
 80058a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058aa:	6938      	ldr	r0, [r7, #16]
 80058ac:	f000 f874 	bl	8005998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <vPortFree+0xc0>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3301      	adds	r3, #1
 80058b6:	4a06      	ldr	r2, [pc, #24]	; (80058d0 <vPortFree+0xc0>)
 80058b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058ba:	f7fe fc8d 	bl	80041d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058be:	bf00      	nop
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20004a78 	.word	0x20004a78
 80058cc:	20004a68 	.word	0x20004a68
 80058d0:	20004a74 	.word	0x20004a74

080058d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80058de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058e0:	4b27      	ldr	r3, [pc, #156]	; (8005980 <prvHeapInit+0xac>)
 80058e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00c      	beq.n	8005908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3307      	adds	r3, #7
 80058f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0307 	bic.w	r3, r3, #7
 80058fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	4a1f      	ldr	r2, [pc, #124]	; (8005980 <prvHeapInit+0xac>)
 8005904:	4413      	add	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800590c:	4a1d      	ldr	r2, [pc, #116]	; (8005984 <prvHeapInit+0xb0>)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005912:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <prvHeapInit+0xb0>)
 8005914:	2200      	movs	r2, #0
 8005916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	4413      	add	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005920:	2208      	movs	r2, #8
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0307 	bic.w	r3, r3, #7
 800592e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a15      	ldr	r2, [pc, #84]	; (8005988 <prvHeapInit+0xb4>)
 8005934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005936:	4b14      	ldr	r3, [pc, #80]	; (8005988 <prvHeapInit+0xb4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2200      	movs	r2, #0
 800593c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800593e:	4b12      	ldr	r3, [pc, #72]	; (8005988 <prvHeapInit+0xb4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	1ad2      	subs	r2, r2, r3
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <prvHeapInit+0xb4>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	4a0a      	ldr	r2, [pc, #40]	; (800598c <prvHeapInit+0xb8>)
 8005962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4a09      	ldr	r2, [pc, #36]	; (8005990 <prvHeapInit+0xbc>)
 800596a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800596c:	4b09      	ldr	r3, [pc, #36]	; (8005994 <prvHeapInit+0xc0>)
 800596e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005972:	601a      	str	r2, [r3, #0]
}
 8005974:	bf00      	nop
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	20000e5c 	.word	0x20000e5c
 8005984:	20004a5c 	.word	0x20004a5c
 8005988:	20004a64 	.word	0x20004a64
 800598c:	20004a6c 	.word	0x20004a6c
 8005990:	20004a68 	.word	0x20004a68
 8005994:	20004a78 	.word	0x20004a78

08005998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059a0:	4b28      	ldr	r3, [pc, #160]	; (8005a44 <prvInsertBlockIntoFreeList+0xac>)
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e002      	b.n	80059ac <prvInsertBlockIntoFreeList+0x14>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d8f7      	bhi.n	80059a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	4413      	add	r3, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d108      	bne.n	80059da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	441a      	add	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	441a      	add	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d118      	bne.n	8005a20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4b15      	ldr	r3, [pc, #84]	; (8005a48 <prvInsertBlockIntoFreeList+0xb0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d00d      	beq.n	8005a16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	441a      	add	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	e008      	b.n	8005a28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a16:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <prvInsertBlockIntoFreeList+0xb0>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	e003      	b.n	8005a28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d002      	beq.n	8005a36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a36:	bf00      	nop
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	20004a5c 	.word	0x20004a5c
 8005a48:	20004a64 	.word	0x20004a64

08005a4c <__errno>:
 8005a4c:	4b01      	ldr	r3, [pc, #4]	; (8005a54 <__errno+0x8>)
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20000018 	.word	0x20000018

08005a58 <__libc_init_array>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	4d0d      	ldr	r5, [pc, #52]	; (8005a90 <__libc_init_array+0x38>)
 8005a5c:	4c0d      	ldr	r4, [pc, #52]	; (8005a94 <__libc_init_array+0x3c>)
 8005a5e:	1b64      	subs	r4, r4, r5
 8005a60:	10a4      	asrs	r4, r4, #2
 8005a62:	2600      	movs	r6, #0
 8005a64:	42a6      	cmp	r6, r4
 8005a66:	d109      	bne.n	8005a7c <__libc_init_array+0x24>
 8005a68:	4d0b      	ldr	r5, [pc, #44]	; (8005a98 <__libc_init_array+0x40>)
 8005a6a:	4c0c      	ldr	r4, [pc, #48]	; (8005a9c <__libc_init_array+0x44>)
 8005a6c:	f000 fc8e 	bl	800638c <_init>
 8005a70:	1b64      	subs	r4, r4, r5
 8005a72:	10a4      	asrs	r4, r4, #2
 8005a74:	2600      	movs	r6, #0
 8005a76:	42a6      	cmp	r6, r4
 8005a78:	d105      	bne.n	8005a86 <__libc_init_array+0x2e>
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a80:	4798      	blx	r3
 8005a82:	3601      	adds	r6, #1
 8005a84:	e7ee      	b.n	8005a64 <__libc_init_array+0xc>
 8005a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8a:	4798      	blx	r3
 8005a8c:	3601      	adds	r6, #1
 8005a8e:	e7f2      	b.n	8005a76 <__libc_init_array+0x1e>
 8005a90:	08006464 	.word	0x08006464
 8005a94:	08006464 	.word	0x08006464
 8005a98:	08006464 	.word	0x08006464
 8005a9c:	08006468 	.word	0x08006468

08005aa0 <memcpy>:
 8005aa0:	440a      	add	r2, r1
 8005aa2:	4291      	cmp	r1, r2
 8005aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005aa8:	d100      	bne.n	8005aac <memcpy+0xc>
 8005aaa:	4770      	bx	lr
 8005aac:	b510      	push	{r4, lr}
 8005aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ab6:	4291      	cmp	r1, r2
 8005ab8:	d1f9      	bne.n	8005aae <memcpy+0xe>
 8005aba:	bd10      	pop	{r4, pc}

08005abc <memset>:
 8005abc:	4402      	add	r2, r0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d100      	bne.n	8005ac6 <memset+0xa>
 8005ac4:	4770      	bx	lr
 8005ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aca:	e7f9      	b.n	8005ac0 <memset+0x4>

08005acc <siprintf>:
 8005acc:	b40e      	push	{r1, r2, r3}
 8005ace:	b500      	push	{lr}
 8005ad0:	b09c      	sub	sp, #112	; 0x70
 8005ad2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ad4:	9002      	str	r0, [sp, #8]
 8005ad6:	9006      	str	r0, [sp, #24]
 8005ad8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005adc:	4809      	ldr	r0, [pc, #36]	; (8005b04 <siprintf+0x38>)
 8005ade:	9107      	str	r1, [sp, #28]
 8005ae0:	9104      	str	r1, [sp, #16]
 8005ae2:	4909      	ldr	r1, [pc, #36]	; (8005b08 <siprintf+0x3c>)
 8005ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae8:	9105      	str	r1, [sp, #20]
 8005aea:	6800      	ldr	r0, [r0, #0]
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	a902      	add	r1, sp, #8
 8005af0:	f000 f868 	bl	8005bc4 <_svfiprintf_r>
 8005af4:	9b02      	ldr	r3, [sp, #8]
 8005af6:	2200      	movs	r2, #0
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	b01c      	add	sp, #112	; 0x70
 8005afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b00:	b003      	add	sp, #12
 8005b02:	4770      	bx	lr
 8005b04:	20000018 	.word	0x20000018
 8005b08:	ffff0208 	.word	0xffff0208

08005b0c <__ssputs_r>:
 8005b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b10:	688e      	ldr	r6, [r1, #8]
 8005b12:	429e      	cmp	r6, r3
 8005b14:	4682      	mov	sl, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	4690      	mov	r8, r2
 8005b1a:	461f      	mov	r7, r3
 8005b1c:	d838      	bhi.n	8005b90 <__ssputs_r+0x84>
 8005b1e:	898a      	ldrh	r2, [r1, #12]
 8005b20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b24:	d032      	beq.n	8005b8c <__ssputs_r+0x80>
 8005b26:	6825      	ldr	r5, [r4, #0]
 8005b28:	6909      	ldr	r1, [r1, #16]
 8005b2a:	eba5 0901 	sub.w	r9, r5, r1
 8005b2e:	6965      	ldr	r5, [r4, #20]
 8005b30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b38:	3301      	adds	r3, #1
 8005b3a:	444b      	add	r3, r9
 8005b3c:	106d      	asrs	r5, r5, #1
 8005b3e:	429d      	cmp	r5, r3
 8005b40:	bf38      	it	cc
 8005b42:	461d      	movcc	r5, r3
 8005b44:	0553      	lsls	r3, r2, #21
 8005b46:	d531      	bpl.n	8005bac <__ssputs_r+0xa0>
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f000 fb55 	bl	80061f8 <_malloc_r>
 8005b4e:	4606      	mov	r6, r0
 8005b50:	b950      	cbnz	r0, 8005b68 <__ssputs_r+0x5c>
 8005b52:	230c      	movs	r3, #12
 8005b54:	f8ca 3000 	str.w	r3, [sl]
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b5e:	81a3      	strh	r3, [r4, #12]
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b68:	6921      	ldr	r1, [r4, #16]
 8005b6a:	464a      	mov	r2, r9
 8005b6c:	f7ff ff98 	bl	8005aa0 <memcpy>
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7a:	81a3      	strh	r3, [r4, #12]
 8005b7c:	6126      	str	r6, [r4, #16]
 8005b7e:	6165      	str	r5, [r4, #20]
 8005b80:	444e      	add	r6, r9
 8005b82:	eba5 0509 	sub.w	r5, r5, r9
 8005b86:	6026      	str	r6, [r4, #0]
 8005b88:	60a5      	str	r5, [r4, #8]
 8005b8a:	463e      	mov	r6, r7
 8005b8c:	42be      	cmp	r6, r7
 8005b8e:	d900      	bls.n	8005b92 <__ssputs_r+0x86>
 8005b90:	463e      	mov	r6, r7
 8005b92:	6820      	ldr	r0, [r4, #0]
 8005b94:	4632      	mov	r2, r6
 8005b96:	4641      	mov	r1, r8
 8005b98:	f000 faa8 	bl	80060ec <memmove>
 8005b9c:	68a3      	ldr	r3, [r4, #8]
 8005b9e:	1b9b      	subs	r3, r3, r6
 8005ba0:	60a3      	str	r3, [r4, #8]
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	4433      	add	r3, r6
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e7db      	b.n	8005b64 <__ssputs_r+0x58>
 8005bac:	462a      	mov	r2, r5
 8005bae:	f000 fb97 	bl	80062e0 <_realloc_r>
 8005bb2:	4606      	mov	r6, r0
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d1e1      	bne.n	8005b7c <__ssputs_r+0x70>
 8005bb8:	6921      	ldr	r1, [r4, #16]
 8005bba:	4650      	mov	r0, sl
 8005bbc:	f000 fab0 	bl	8006120 <_free_r>
 8005bc0:	e7c7      	b.n	8005b52 <__ssputs_r+0x46>
	...

08005bc4 <_svfiprintf_r>:
 8005bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc8:	4698      	mov	r8, r3
 8005bca:	898b      	ldrh	r3, [r1, #12]
 8005bcc:	061b      	lsls	r3, r3, #24
 8005bce:	b09d      	sub	sp, #116	; 0x74
 8005bd0:	4607      	mov	r7, r0
 8005bd2:	460d      	mov	r5, r1
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	d50e      	bpl.n	8005bf6 <_svfiprintf_r+0x32>
 8005bd8:	690b      	ldr	r3, [r1, #16]
 8005bda:	b963      	cbnz	r3, 8005bf6 <_svfiprintf_r+0x32>
 8005bdc:	2140      	movs	r1, #64	; 0x40
 8005bde:	f000 fb0b 	bl	80061f8 <_malloc_r>
 8005be2:	6028      	str	r0, [r5, #0]
 8005be4:	6128      	str	r0, [r5, #16]
 8005be6:	b920      	cbnz	r0, 8005bf2 <_svfiprintf_r+0x2e>
 8005be8:	230c      	movs	r3, #12
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf0:	e0d1      	b.n	8005d96 <_svfiprintf_r+0x1d2>
 8005bf2:	2340      	movs	r3, #64	; 0x40
 8005bf4:	616b      	str	r3, [r5, #20]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfa:	2320      	movs	r3, #32
 8005bfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c00:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c04:	2330      	movs	r3, #48	; 0x30
 8005c06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005db0 <_svfiprintf_r+0x1ec>
 8005c0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c0e:	f04f 0901 	mov.w	r9, #1
 8005c12:	4623      	mov	r3, r4
 8005c14:	469a      	mov	sl, r3
 8005c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c1a:	b10a      	cbz	r2, 8005c20 <_svfiprintf_r+0x5c>
 8005c1c:	2a25      	cmp	r2, #37	; 0x25
 8005c1e:	d1f9      	bne.n	8005c14 <_svfiprintf_r+0x50>
 8005c20:	ebba 0b04 	subs.w	fp, sl, r4
 8005c24:	d00b      	beq.n	8005c3e <_svfiprintf_r+0x7a>
 8005c26:	465b      	mov	r3, fp
 8005c28:	4622      	mov	r2, r4
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	f7ff ff6d 	bl	8005b0c <__ssputs_r>
 8005c32:	3001      	adds	r0, #1
 8005c34:	f000 80aa 	beq.w	8005d8c <_svfiprintf_r+0x1c8>
 8005c38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c3a:	445a      	add	r2, fp
 8005c3c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 80a2 	beq.w	8005d8c <_svfiprintf_r+0x1c8>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c52:	f10a 0a01 	add.w	sl, sl, #1
 8005c56:	9304      	str	r3, [sp, #16]
 8005c58:	9307      	str	r3, [sp, #28]
 8005c5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c5e:	931a      	str	r3, [sp, #104]	; 0x68
 8005c60:	4654      	mov	r4, sl
 8005c62:	2205      	movs	r2, #5
 8005c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c68:	4851      	ldr	r0, [pc, #324]	; (8005db0 <_svfiprintf_r+0x1ec>)
 8005c6a:	f7fa fab9 	bl	80001e0 <memchr>
 8005c6e:	9a04      	ldr	r2, [sp, #16]
 8005c70:	b9d8      	cbnz	r0, 8005caa <_svfiprintf_r+0xe6>
 8005c72:	06d0      	lsls	r0, r2, #27
 8005c74:	bf44      	itt	mi
 8005c76:	2320      	movmi	r3, #32
 8005c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c7c:	0711      	lsls	r1, r2, #28
 8005c7e:	bf44      	itt	mi
 8005c80:	232b      	movmi	r3, #43	; 0x2b
 8005c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c86:	f89a 3000 	ldrb.w	r3, [sl]
 8005c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c8c:	d015      	beq.n	8005cba <_svfiprintf_r+0xf6>
 8005c8e:	9a07      	ldr	r2, [sp, #28]
 8005c90:	4654      	mov	r4, sl
 8005c92:	2000      	movs	r0, #0
 8005c94:	f04f 0c0a 	mov.w	ip, #10
 8005c98:	4621      	mov	r1, r4
 8005c9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c9e:	3b30      	subs	r3, #48	; 0x30
 8005ca0:	2b09      	cmp	r3, #9
 8005ca2:	d94e      	bls.n	8005d42 <_svfiprintf_r+0x17e>
 8005ca4:	b1b0      	cbz	r0, 8005cd4 <_svfiprintf_r+0x110>
 8005ca6:	9207      	str	r2, [sp, #28]
 8005ca8:	e014      	b.n	8005cd4 <_svfiprintf_r+0x110>
 8005caa:	eba0 0308 	sub.w	r3, r0, r8
 8005cae:	fa09 f303 	lsl.w	r3, r9, r3
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	9304      	str	r3, [sp, #16]
 8005cb6:	46a2      	mov	sl, r4
 8005cb8:	e7d2      	b.n	8005c60 <_svfiprintf_r+0x9c>
 8005cba:	9b03      	ldr	r3, [sp, #12]
 8005cbc:	1d19      	adds	r1, r3, #4
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	9103      	str	r1, [sp, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bfbb      	ittet	lt
 8005cc6:	425b      	neglt	r3, r3
 8005cc8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ccc:	9307      	strge	r3, [sp, #28]
 8005cce:	9307      	strlt	r3, [sp, #28]
 8005cd0:	bfb8      	it	lt
 8005cd2:	9204      	strlt	r2, [sp, #16]
 8005cd4:	7823      	ldrb	r3, [r4, #0]
 8005cd6:	2b2e      	cmp	r3, #46	; 0x2e
 8005cd8:	d10c      	bne.n	8005cf4 <_svfiprintf_r+0x130>
 8005cda:	7863      	ldrb	r3, [r4, #1]
 8005cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8005cde:	d135      	bne.n	8005d4c <_svfiprintf_r+0x188>
 8005ce0:	9b03      	ldr	r3, [sp, #12]
 8005ce2:	1d1a      	adds	r2, r3, #4
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	9203      	str	r2, [sp, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bfb8      	it	lt
 8005cec:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cf0:	3402      	adds	r4, #2
 8005cf2:	9305      	str	r3, [sp, #20]
 8005cf4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005dc0 <_svfiprintf_r+0x1fc>
 8005cf8:	7821      	ldrb	r1, [r4, #0]
 8005cfa:	2203      	movs	r2, #3
 8005cfc:	4650      	mov	r0, sl
 8005cfe:	f7fa fa6f 	bl	80001e0 <memchr>
 8005d02:	b140      	cbz	r0, 8005d16 <_svfiprintf_r+0x152>
 8005d04:	2340      	movs	r3, #64	; 0x40
 8005d06:	eba0 000a 	sub.w	r0, r0, sl
 8005d0a:	fa03 f000 	lsl.w	r0, r3, r0
 8005d0e:	9b04      	ldr	r3, [sp, #16]
 8005d10:	4303      	orrs	r3, r0
 8005d12:	3401      	adds	r4, #1
 8005d14:	9304      	str	r3, [sp, #16]
 8005d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d1a:	4826      	ldr	r0, [pc, #152]	; (8005db4 <_svfiprintf_r+0x1f0>)
 8005d1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d20:	2206      	movs	r2, #6
 8005d22:	f7fa fa5d 	bl	80001e0 <memchr>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d038      	beq.n	8005d9c <_svfiprintf_r+0x1d8>
 8005d2a:	4b23      	ldr	r3, [pc, #140]	; (8005db8 <_svfiprintf_r+0x1f4>)
 8005d2c:	bb1b      	cbnz	r3, 8005d76 <_svfiprintf_r+0x1b2>
 8005d2e:	9b03      	ldr	r3, [sp, #12]
 8005d30:	3307      	adds	r3, #7
 8005d32:	f023 0307 	bic.w	r3, r3, #7
 8005d36:	3308      	adds	r3, #8
 8005d38:	9303      	str	r3, [sp, #12]
 8005d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3c:	4433      	add	r3, r6
 8005d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d40:	e767      	b.n	8005c12 <_svfiprintf_r+0x4e>
 8005d42:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d46:	460c      	mov	r4, r1
 8005d48:	2001      	movs	r0, #1
 8005d4a:	e7a5      	b.n	8005c98 <_svfiprintf_r+0xd4>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	3401      	adds	r4, #1
 8005d50:	9305      	str	r3, [sp, #20]
 8005d52:	4619      	mov	r1, r3
 8005d54:	f04f 0c0a 	mov.w	ip, #10
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d5e:	3a30      	subs	r2, #48	; 0x30
 8005d60:	2a09      	cmp	r2, #9
 8005d62:	d903      	bls.n	8005d6c <_svfiprintf_r+0x1a8>
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0c5      	beq.n	8005cf4 <_svfiprintf_r+0x130>
 8005d68:	9105      	str	r1, [sp, #20]
 8005d6a:	e7c3      	b.n	8005cf4 <_svfiprintf_r+0x130>
 8005d6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d70:	4604      	mov	r4, r0
 8005d72:	2301      	movs	r3, #1
 8005d74:	e7f0      	b.n	8005d58 <_svfiprintf_r+0x194>
 8005d76:	ab03      	add	r3, sp, #12
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	462a      	mov	r2, r5
 8005d7c:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <_svfiprintf_r+0x1f8>)
 8005d7e:	a904      	add	r1, sp, #16
 8005d80:	4638      	mov	r0, r7
 8005d82:	f3af 8000 	nop.w
 8005d86:	1c42      	adds	r2, r0, #1
 8005d88:	4606      	mov	r6, r0
 8005d8a:	d1d6      	bne.n	8005d3a <_svfiprintf_r+0x176>
 8005d8c:	89ab      	ldrh	r3, [r5, #12]
 8005d8e:	065b      	lsls	r3, r3, #25
 8005d90:	f53f af2c 	bmi.w	8005bec <_svfiprintf_r+0x28>
 8005d94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d96:	b01d      	add	sp, #116	; 0x74
 8005d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9c:	ab03      	add	r3, sp, #12
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	462a      	mov	r2, r5
 8005da2:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <_svfiprintf_r+0x1f8>)
 8005da4:	a904      	add	r1, sp, #16
 8005da6:	4638      	mov	r0, r7
 8005da8:	f000 f87a 	bl	8005ea0 <_printf_i>
 8005dac:	e7eb      	b.n	8005d86 <_svfiprintf_r+0x1c2>
 8005dae:	bf00      	nop
 8005db0:	08006428 	.word	0x08006428
 8005db4:	08006432 	.word	0x08006432
 8005db8:	00000000 	.word	0x00000000
 8005dbc:	08005b0d 	.word	0x08005b0d
 8005dc0:	0800642e 	.word	0x0800642e

08005dc4 <_printf_common>:
 8005dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	4616      	mov	r6, r2
 8005dca:	4699      	mov	r9, r3
 8005dcc:	688a      	ldr	r2, [r1, #8]
 8005dce:	690b      	ldr	r3, [r1, #16]
 8005dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	bfb8      	it	lt
 8005dd8:	4613      	movlt	r3, r2
 8005dda:	6033      	str	r3, [r6, #0]
 8005ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005de0:	4607      	mov	r7, r0
 8005de2:	460c      	mov	r4, r1
 8005de4:	b10a      	cbz	r2, 8005dea <_printf_common+0x26>
 8005de6:	3301      	adds	r3, #1
 8005de8:	6033      	str	r3, [r6, #0]
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	0699      	lsls	r1, r3, #26
 8005dee:	bf42      	ittt	mi
 8005df0:	6833      	ldrmi	r3, [r6, #0]
 8005df2:	3302      	addmi	r3, #2
 8005df4:	6033      	strmi	r3, [r6, #0]
 8005df6:	6825      	ldr	r5, [r4, #0]
 8005df8:	f015 0506 	ands.w	r5, r5, #6
 8005dfc:	d106      	bne.n	8005e0c <_printf_common+0x48>
 8005dfe:	f104 0a19 	add.w	sl, r4, #25
 8005e02:	68e3      	ldr	r3, [r4, #12]
 8005e04:	6832      	ldr	r2, [r6, #0]
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	42ab      	cmp	r3, r5
 8005e0a:	dc26      	bgt.n	8005e5a <_printf_common+0x96>
 8005e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e10:	1e13      	subs	r3, r2, #0
 8005e12:	6822      	ldr	r2, [r4, #0]
 8005e14:	bf18      	it	ne
 8005e16:	2301      	movne	r3, #1
 8005e18:	0692      	lsls	r2, r2, #26
 8005e1a:	d42b      	bmi.n	8005e74 <_printf_common+0xb0>
 8005e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e20:	4649      	mov	r1, r9
 8005e22:	4638      	mov	r0, r7
 8005e24:	47c0      	blx	r8
 8005e26:	3001      	adds	r0, #1
 8005e28:	d01e      	beq.n	8005e68 <_printf_common+0xa4>
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	68e5      	ldr	r5, [r4, #12]
 8005e2e:	6832      	ldr	r2, [r6, #0]
 8005e30:	f003 0306 	and.w	r3, r3, #6
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	bf08      	it	eq
 8005e38:	1aad      	subeq	r5, r5, r2
 8005e3a:	68a3      	ldr	r3, [r4, #8]
 8005e3c:	6922      	ldr	r2, [r4, #16]
 8005e3e:	bf0c      	ite	eq
 8005e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e44:	2500      	movne	r5, #0
 8005e46:	4293      	cmp	r3, r2
 8005e48:	bfc4      	itt	gt
 8005e4a:	1a9b      	subgt	r3, r3, r2
 8005e4c:	18ed      	addgt	r5, r5, r3
 8005e4e:	2600      	movs	r6, #0
 8005e50:	341a      	adds	r4, #26
 8005e52:	42b5      	cmp	r5, r6
 8005e54:	d11a      	bne.n	8005e8c <_printf_common+0xc8>
 8005e56:	2000      	movs	r0, #0
 8005e58:	e008      	b.n	8005e6c <_printf_common+0xa8>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	4652      	mov	r2, sl
 8005e5e:	4649      	mov	r1, r9
 8005e60:	4638      	mov	r0, r7
 8005e62:	47c0      	blx	r8
 8005e64:	3001      	adds	r0, #1
 8005e66:	d103      	bne.n	8005e70 <_printf_common+0xac>
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e70:	3501      	adds	r5, #1
 8005e72:	e7c6      	b.n	8005e02 <_printf_common+0x3e>
 8005e74:	18e1      	adds	r1, r4, r3
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	2030      	movs	r0, #48	; 0x30
 8005e7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e7e:	4422      	add	r2, r4
 8005e80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e88:	3302      	adds	r3, #2
 8005e8a:	e7c7      	b.n	8005e1c <_printf_common+0x58>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	4622      	mov	r2, r4
 8005e90:	4649      	mov	r1, r9
 8005e92:	4638      	mov	r0, r7
 8005e94:	47c0      	blx	r8
 8005e96:	3001      	adds	r0, #1
 8005e98:	d0e6      	beq.n	8005e68 <_printf_common+0xa4>
 8005e9a:	3601      	adds	r6, #1
 8005e9c:	e7d9      	b.n	8005e52 <_printf_common+0x8e>
	...

08005ea0 <_printf_i>:
 8005ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea4:	7e0f      	ldrb	r7, [r1, #24]
 8005ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ea8:	2f78      	cmp	r7, #120	; 0x78
 8005eaa:	4691      	mov	r9, r2
 8005eac:	4680      	mov	r8, r0
 8005eae:	460c      	mov	r4, r1
 8005eb0:	469a      	mov	sl, r3
 8005eb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eb6:	d807      	bhi.n	8005ec8 <_printf_i+0x28>
 8005eb8:	2f62      	cmp	r7, #98	; 0x62
 8005eba:	d80a      	bhi.n	8005ed2 <_printf_i+0x32>
 8005ebc:	2f00      	cmp	r7, #0
 8005ebe:	f000 80d8 	beq.w	8006072 <_printf_i+0x1d2>
 8005ec2:	2f58      	cmp	r7, #88	; 0x58
 8005ec4:	f000 80a3 	beq.w	800600e <_printf_i+0x16e>
 8005ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ed0:	e03a      	b.n	8005f48 <_printf_i+0xa8>
 8005ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ed6:	2b15      	cmp	r3, #21
 8005ed8:	d8f6      	bhi.n	8005ec8 <_printf_i+0x28>
 8005eda:	a101      	add	r1, pc, #4	; (adr r1, 8005ee0 <_printf_i+0x40>)
 8005edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ee0:	08005f39 	.word	0x08005f39
 8005ee4:	08005f4d 	.word	0x08005f4d
 8005ee8:	08005ec9 	.word	0x08005ec9
 8005eec:	08005ec9 	.word	0x08005ec9
 8005ef0:	08005ec9 	.word	0x08005ec9
 8005ef4:	08005ec9 	.word	0x08005ec9
 8005ef8:	08005f4d 	.word	0x08005f4d
 8005efc:	08005ec9 	.word	0x08005ec9
 8005f00:	08005ec9 	.word	0x08005ec9
 8005f04:	08005ec9 	.word	0x08005ec9
 8005f08:	08005ec9 	.word	0x08005ec9
 8005f0c:	08006059 	.word	0x08006059
 8005f10:	08005f7d 	.word	0x08005f7d
 8005f14:	0800603b 	.word	0x0800603b
 8005f18:	08005ec9 	.word	0x08005ec9
 8005f1c:	08005ec9 	.word	0x08005ec9
 8005f20:	0800607b 	.word	0x0800607b
 8005f24:	08005ec9 	.word	0x08005ec9
 8005f28:	08005f7d 	.word	0x08005f7d
 8005f2c:	08005ec9 	.word	0x08005ec9
 8005f30:	08005ec9 	.word	0x08005ec9
 8005f34:	08006043 	.word	0x08006043
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	1d1a      	adds	r2, r3, #4
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	602a      	str	r2, [r5, #0]
 8005f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0a3      	b.n	8006094 <_printf_i+0x1f4>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	6829      	ldr	r1, [r5, #0]
 8005f50:	0606      	lsls	r6, r0, #24
 8005f52:	f101 0304 	add.w	r3, r1, #4
 8005f56:	d50a      	bpl.n	8005f6e <_printf_i+0xce>
 8005f58:	680e      	ldr	r6, [r1, #0]
 8005f5a:	602b      	str	r3, [r5, #0]
 8005f5c:	2e00      	cmp	r6, #0
 8005f5e:	da03      	bge.n	8005f68 <_printf_i+0xc8>
 8005f60:	232d      	movs	r3, #45	; 0x2d
 8005f62:	4276      	negs	r6, r6
 8005f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f68:	485e      	ldr	r0, [pc, #376]	; (80060e4 <_printf_i+0x244>)
 8005f6a:	230a      	movs	r3, #10
 8005f6c:	e019      	b.n	8005fa2 <_printf_i+0x102>
 8005f6e:	680e      	ldr	r6, [r1, #0]
 8005f70:	602b      	str	r3, [r5, #0]
 8005f72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f76:	bf18      	it	ne
 8005f78:	b236      	sxthne	r6, r6
 8005f7a:	e7ef      	b.n	8005f5c <_printf_i+0xbc>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	6820      	ldr	r0, [r4, #0]
 8005f80:	1d19      	adds	r1, r3, #4
 8005f82:	6029      	str	r1, [r5, #0]
 8005f84:	0601      	lsls	r1, r0, #24
 8005f86:	d501      	bpl.n	8005f8c <_printf_i+0xec>
 8005f88:	681e      	ldr	r6, [r3, #0]
 8005f8a:	e002      	b.n	8005f92 <_printf_i+0xf2>
 8005f8c:	0646      	lsls	r6, r0, #25
 8005f8e:	d5fb      	bpl.n	8005f88 <_printf_i+0xe8>
 8005f90:	881e      	ldrh	r6, [r3, #0]
 8005f92:	4854      	ldr	r0, [pc, #336]	; (80060e4 <_printf_i+0x244>)
 8005f94:	2f6f      	cmp	r7, #111	; 0x6f
 8005f96:	bf0c      	ite	eq
 8005f98:	2308      	moveq	r3, #8
 8005f9a:	230a      	movne	r3, #10
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fa2:	6865      	ldr	r5, [r4, #4]
 8005fa4:	60a5      	str	r5, [r4, #8]
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	bfa2      	ittt	ge
 8005faa:	6821      	ldrge	r1, [r4, #0]
 8005fac:	f021 0104 	bicge.w	r1, r1, #4
 8005fb0:	6021      	strge	r1, [r4, #0]
 8005fb2:	b90e      	cbnz	r6, 8005fb8 <_printf_i+0x118>
 8005fb4:	2d00      	cmp	r5, #0
 8005fb6:	d04d      	beq.n	8006054 <_printf_i+0x1b4>
 8005fb8:	4615      	mov	r5, r2
 8005fba:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fbe:	fb03 6711 	mls	r7, r3, r1, r6
 8005fc2:	5dc7      	ldrb	r7, [r0, r7]
 8005fc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fc8:	4637      	mov	r7, r6
 8005fca:	42bb      	cmp	r3, r7
 8005fcc:	460e      	mov	r6, r1
 8005fce:	d9f4      	bls.n	8005fba <_printf_i+0x11a>
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d10b      	bne.n	8005fec <_printf_i+0x14c>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	07de      	lsls	r6, r3, #31
 8005fd8:	d508      	bpl.n	8005fec <_printf_i+0x14c>
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	6861      	ldr	r1, [r4, #4]
 8005fde:	4299      	cmp	r1, r3
 8005fe0:	bfde      	ittt	le
 8005fe2:	2330      	movle	r3, #48	; 0x30
 8005fe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fe8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fec:	1b52      	subs	r2, r2, r5
 8005fee:	6122      	str	r2, [r4, #16]
 8005ff0:	f8cd a000 	str.w	sl, [sp]
 8005ff4:	464b      	mov	r3, r9
 8005ff6:	aa03      	add	r2, sp, #12
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	f7ff fee2 	bl	8005dc4 <_printf_common>
 8006000:	3001      	adds	r0, #1
 8006002:	d14c      	bne.n	800609e <_printf_i+0x1fe>
 8006004:	f04f 30ff 	mov.w	r0, #4294967295
 8006008:	b004      	add	sp, #16
 800600a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800600e:	4835      	ldr	r0, [pc, #212]	; (80060e4 <_printf_i+0x244>)
 8006010:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006014:	6829      	ldr	r1, [r5, #0]
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	f851 6b04 	ldr.w	r6, [r1], #4
 800601c:	6029      	str	r1, [r5, #0]
 800601e:	061d      	lsls	r5, r3, #24
 8006020:	d514      	bpl.n	800604c <_printf_i+0x1ac>
 8006022:	07df      	lsls	r7, r3, #31
 8006024:	bf44      	itt	mi
 8006026:	f043 0320 	orrmi.w	r3, r3, #32
 800602a:	6023      	strmi	r3, [r4, #0]
 800602c:	b91e      	cbnz	r6, 8006036 <_printf_i+0x196>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	f023 0320 	bic.w	r3, r3, #32
 8006034:	6023      	str	r3, [r4, #0]
 8006036:	2310      	movs	r3, #16
 8006038:	e7b0      	b.n	8005f9c <_printf_i+0xfc>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	f043 0320 	orr.w	r3, r3, #32
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	2378      	movs	r3, #120	; 0x78
 8006044:	4828      	ldr	r0, [pc, #160]	; (80060e8 <_printf_i+0x248>)
 8006046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800604a:	e7e3      	b.n	8006014 <_printf_i+0x174>
 800604c:	0659      	lsls	r1, r3, #25
 800604e:	bf48      	it	mi
 8006050:	b2b6      	uxthmi	r6, r6
 8006052:	e7e6      	b.n	8006022 <_printf_i+0x182>
 8006054:	4615      	mov	r5, r2
 8006056:	e7bb      	b.n	8005fd0 <_printf_i+0x130>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	6826      	ldr	r6, [r4, #0]
 800605c:	6961      	ldr	r1, [r4, #20]
 800605e:	1d18      	adds	r0, r3, #4
 8006060:	6028      	str	r0, [r5, #0]
 8006062:	0635      	lsls	r5, r6, #24
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	d501      	bpl.n	800606c <_printf_i+0x1cc>
 8006068:	6019      	str	r1, [r3, #0]
 800606a:	e002      	b.n	8006072 <_printf_i+0x1d2>
 800606c:	0670      	lsls	r0, r6, #25
 800606e:	d5fb      	bpl.n	8006068 <_printf_i+0x1c8>
 8006070:	8019      	strh	r1, [r3, #0]
 8006072:	2300      	movs	r3, #0
 8006074:	6123      	str	r3, [r4, #16]
 8006076:	4615      	mov	r5, r2
 8006078:	e7ba      	b.n	8005ff0 <_printf_i+0x150>
 800607a:	682b      	ldr	r3, [r5, #0]
 800607c:	1d1a      	adds	r2, r3, #4
 800607e:	602a      	str	r2, [r5, #0]
 8006080:	681d      	ldr	r5, [r3, #0]
 8006082:	6862      	ldr	r2, [r4, #4]
 8006084:	2100      	movs	r1, #0
 8006086:	4628      	mov	r0, r5
 8006088:	f7fa f8aa 	bl	80001e0 <memchr>
 800608c:	b108      	cbz	r0, 8006092 <_printf_i+0x1f2>
 800608e:	1b40      	subs	r0, r0, r5
 8006090:	6060      	str	r0, [r4, #4]
 8006092:	6863      	ldr	r3, [r4, #4]
 8006094:	6123      	str	r3, [r4, #16]
 8006096:	2300      	movs	r3, #0
 8006098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800609c:	e7a8      	b.n	8005ff0 <_printf_i+0x150>
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	462a      	mov	r2, r5
 80060a2:	4649      	mov	r1, r9
 80060a4:	4640      	mov	r0, r8
 80060a6:	47d0      	blx	sl
 80060a8:	3001      	adds	r0, #1
 80060aa:	d0ab      	beq.n	8006004 <_printf_i+0x164>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	079b      	lsls	r3, r3, #30
 80060b0:	d413      	bmi.n	80060da <_printf_i+0x23a>
 80060b2:	68e0      	ldr	r0, [r4, #12]
 80060b4:	9b03      	ldr	r3, [sp, #12]
 80060b6:	4298      	cmp	r0, r3
 80060b8:	bfb8      	it	lt
 80060ba:	4618      	movlt	r0, r3
 80060bc:	e7a4      	b.n	8006008 <_printf_i+0x168>
 80060be:	2301      	movs	r3, #1
 80060c0:	4632      	mov	r2, r6
 80060c2:	4649      	mov	r1, r9
 80060c4:	4640      	mov	r0, r8
 80060c6:	47d0      	blx	sl
 80060c8:	3001      	adds	r0, #1
 80060ca:	d09b      	beq.n	8006004 <_printf_i+0x164>
 80060cc:	3501      	adds	r5, #1
 80060ce:	68e3      	ldr	r3, [r4, #12]
 80060d0:	9903      	ldr	r1, [sp, #12]
 80060d2:	1a5b      	subs	r3, r3, r1
 80060d4:	42ab      	cmp	r3, r5
 80060d6:	dcf2      	bgt.n	80060be <_printf_i+0x21e>
 80060d8:	e7eb      	b.n	80060b2 <_printf_i+0x212>
 80060da:	2500      	movs	r5, #0
 80060dc:	f104 0619 	add.w	r6, r4, #25
 80060e0:	e7f5      	b.n	80060ce <_printf_i+0x22e>
 80060e2:	bf00      	nop
 80060e4:	08006439 	.word	0x08006439
 80060e8:	0800644a 	.word	0x0800644a

080060ec <memmove>:
 80060ec:	4288      	cmp	r0, r1
 80060ee:	b510      	push	{r4, lr}
 80060f0:	eb01 0402 	add.w	r4, r1, r2
 80060f4:	d902      	bls.n	80060fc <memmove+0x10>
 80060f6:	4284      	cmp	r4, r0
 80060f8:	4623      	mov	r3, r4
 80060fa:	d807      	bhi.n	800610c <memmove+0x20>
 80060fc:	1e43      	subs	r3, r0, #1
 80060fe:	42a1      	cmp	r1, r4
 8006100:	d008      	beq.n	8006114 <memmove+0x28>
 8006102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006106:	f803 2f01 	strb.w	r2, [r3, #1]!
 800610a:	e7f8      	b.n	80060fe <memmove+0x12>
 800610c:	4402      	add	r2, r0
 800610e:	4601      	mov	r1, r0
 8006110:	428a      	cmp	r2, r1
 8006112:	d100      	bne.n	8006116 <memmove+0x2a>
 8006114:	bd10      	pop	{r4, pc}
 8006116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800611a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800611e:	e7f7      	b.n	8006110 <memmove+0x24>

08006120 <_free_r>:
 8006120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006122:	2900      	cmp	r1, #0
 8006124:	d044      	beq.n	80061b0 <_free_r+0x90>
 8006126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800612a:	9001      	str	r0, [sp, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	f1a1 0404 	sub.w	r4, r1, #4
 8006132:	bfb8      	it	lt
 8006134:	18e4      	addlt	r4, r4, r3
 8006136:	f000 f913 	bl	8006360 <__malloc_lock>
 800613a:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <_free_r+0x94>)
 800613c:	9801      	ldr	r0, [sp, #4]
 800613e:	6813      	ldr	r3, [r2, #0]
 8006140:	b933      	cbnz	r3, 8006150 <_free_r+0x30>
 8006142:	6063      	str	r3, [r4, #4]
 8006144:	6014      	str	r4, [r2, #0]
 8006146:	b003      	add	sp, #12
 8006148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800614c:	f000 b90e 	b.w	800636c <__malloc_unlock>
 8006150:	42a3      	cmp	r3, r4
 8006152:	d908      	bls.n	8006166 <_free_r+0x46>
 8006154:	6825      	ldr	r5, [r4, #0]
 8006156:	1961      	adds	r1, r4, r5
 8006158:	428b      	cmp	r3, r1
 800615a:	bf01      	itttt	eq
 800615c:	6819      	ldreq	r1, [r3, #0]
 800615e:	685b      	ldreq	r3, [r3, #4]
 8006160:	1949      	addeq	r1, r1, r5
 8006162:	6021      	streq	r1, [r4, #0]
 8006164:	e7ed      	b.n	8006142 <_free_r+0x22>
 8006166:	461a      	mov	r2, r3
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	b10b      	cbz	r3, 8006170 <_free_r+0x50>
 800616c:	42a3      	cmp	r3, r4
 800616e:	d9fa      	bls.n	8006166 <_free_r+0x46>
 8006170:	6811      	ldr	r1, [r2, #0]
 8006172:	1855      	adds	r5, r2, r1
 8006174:	42a5      	cmp	r5, r4
 8006176:	d10b      	bne.n	8006190 <_free_r+0x70>
 8006178:	6824      	ldr	r4, [r4, #0]
 800617a:	4421      	add	r1, r4
 800617c:	1854      	adds	r4, r2, r1
 800617e:	42a3      	cmp	r3, r4
 8006180:	6011      	str	r1, [r2, #0]
 8006182:	d1e0      	bne.n	8006146 <_free_r+0x26>
 8006184:	681c      	ldr	r4, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	6053      	str	r3, [r2, #4]
 800618a:	4421      	add	r1, r4
 800618c:	6011      	str	r1, [r2, #0]
 800618e:	e7da      	b.n	8006146 <_free_r+0x26>
 8006190:	d902      	bls.n	8006198 <_free_r+0x78>
 8006192:	230c      	movs	r3, #12
 8006194:	6003      	str	r3, [r0, #0]
 8006196:	e7d6      	b.n	8006146 <_free_r+0x26>
 8006198:	6825      	ldr	r5, [r4, #0]
 800619a:	1961      	adds	r1, r4, r5
 800619c:	428b      	cmp	r3, r1
 800619e:	bf04      	itt	eq
 80061a0:	6819      	ldreq	r1, [r3, #0]
 80061a2:	685b      	ldreq	r3, [r3, #4]
 80061a4:	6063      	str	r3, [r4, #4]
 80061a6:	bf04      	itt	eq
 80061a8:	1949      	addeq	r1, r1, r5
 80061aa:	6021      	streq	r1, [r4, #0]
 80061ac:	6054      	str	r4, [r2, #4]
 80061ae:	e7ca      	b.n	8006146 <_free_r+0x26>
 80061b0:	b003      	add	sp, #12
 80061b2:	bd30      	pop	{r4, r5, pc}
 80061b4:	20004a7c 	.word	0x20004a7c

080061b8 <sbrk_aligned>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	4e0e      	ldr	r6, [pc, #56]	; (80061f4 <sbrk_aligned+0x3c>)
 80061bc:	460c      	mov	r4, r1
 80061be:	6831      	ldr	r1, [r6, #0]
 80061c0:	4605      	mov	r5, r0
 80061c2:	b911      	cbnz	r1, 80061ca <sbrk_aligned+0x12>
 80061c4:	f000 f8bc 	bl	8006340 <_sbrk_r>
 80061c8:	6030      	str	r0, [r6, #0]
 80061ca:	4621      	mov	r1, r4
 80061cc:	4628      	mov	r0, r5
 80061ce:	f000 f8b7 	bl	8006340 <_sbrk_r>
 80061d2:	1c43      	adds	r3, r0, #1
 80061d4:	d00a      	beq.n	80061ec <sbrk_aligned+0x34>
 80061d6:	1cc4      	adds	r4, r0, #3
 80061d8:	f024 0403 	bic.w	r4, r4, #3
 80061dc:	42a0      	cmp	r0, r4
 80061de:	d007      	beq.n	80061f0 <sbrk_aligned+0x38>
 80061e0:	1a21      	subs	r1, r4, r0
 80061e2:	4628      	mov	r0, r5
 80061e4:	f000 f8ac 	bl	8006340 <_sbrk_r>
 80061e8:	3001      	adds	r0, #1
 80061ea:	d101      	bne.n	80061f0 <sbrk_aligned+0x38>
 80061ec:	f04f 34ff 	mov.w	r4, #4294967295
 80061f0:	4620      	mov	r0, r4
 80061f2:	bd70      	pop	{r4, r5, r6, pc}
 80061f4:	20004a80 	.word	0x20004a80

080061f8 <_malloc_r>:
 80061f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fc:	1ccd      	adds	r5, r1, #3
 80061fe:	f025 0503 	bic.w	r5, r5, #3
 8006202:	3508      	adds	r5, #8
 8006204:	2d0c      	cmp	r5, #12
 8006206:	bf38      	it	cc
 8006208:	250c      	movcc	r5, #12
 800620a:	2d00      	cmp	r5, #0
 800620c:	4607      	mov	r7, r0
 800620e:	db01      	blt.n	8006214 <_malloc_r+0x1c>
 8006210:	42a9      	cmp	r1, r5
 8006212:	d905      	bls.n	8006220 <_malloc_r+0x28>
 8006214:	230c      	movs	r3, #12
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	2600      	movs	r6, #0
 800621a:	4630      	mov	r0, r6
 800621c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006220:	4e2e      	ldr	r6, [pc, #184]	; (80062dc <_malloc_r+0xe4>)
 8006222:	f000 f89d 	bl	8006360 <__malloc_lock>
 8006226:	6833      	ldr	r3, [r6, #0]
 8006228:	461c      	mov	r4, r3
 800622a:	bb34      	cbnz	r4, 800627a <_malloc_r+0x82>
 800622c:	4629      	mov	r1, r5
 800622e:	4638      	mov	r0, r7
 8006230:	f7ff ffc2 	bl	80061b8 <sbrk_aligned>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	4604      	mov	r4, r0
 8006238:	d14d      	bne.n	80062d6 <_malloc_r+0xde>
 800623a:	6834      	ldr	r4, [r6, #0]
 800623c:	4626      	mov	r6, r4
 800623e:	2e00      	cmp	r6, #0
 8006240:	d140      	bne.n	80062c4 <_malloc_r+0xcc>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	4631      	mov	r1, r6
 8006246:	4638      	mov	r0, r7
 8006248:	eb04 0803 	add.w	r8, r4, r3
 800624c:	f000 f878 	bl	8006340 <_sbrk_r>
 8006250:	4580      	cmp	r8, r0
 8006252:	d13a      	bne.n	80062ca <_malloc_r+0xd2>
 8006254:	6821      	ldr	r1, [r4, #0]
 8006256:	3503      	adds	r5, #3
 8006258:	1a6d      	subs	r5, r5, r1
 800625a:	f025 0503 	bic.w	r5, r5, #3
 800625e:	3508      	adds	r5, #8
 8006260:	2d0c      	cmp	r5, #12
 8006262:	bf38      	it	cc
 8006264:	250c      	movcc	r5, #12
 8006266:	4629      	mov	r1, r5
 8006268:	4638      	mov	r0, r7
 800626a:	f7ff ffa5 	bl	80061b8 <sbrk_aligned>
 800626e:	3001      	adds	r0, #1
 8006270:	d02b      	beq.n	80062ca <_malloc_r+0xd2>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	442b      	add	r3, r5
 8006276:	6023      	str	r3, [r4, #0]
 8006278:	e00e      	b.n	8006298 <_malloc_r+0xa0>
 800627a:	6822      	ldr	r2, [r4, #0]
 800627c:	1b52      	subs	r2, r2, r5
 800627e:	d41e      	bmi.n	80062be <_malloc_r+0xc6>
 8006280:	2a0b      	cmp	r2, #11
 8006282:	d916      	bls.n	80062b2 <_malloc_r+0xba>
 8006284:	1961      	adds	r1, r4, r5
 8006286:	42a3      	cmp	r3, r4
 8006288:	6025      	str	r5, [r4, #0]
 800628a:	bf18      	it	ne
 800628c:	6059      	strne	r1, [r3, #4]
 800628e:	6863      	ldr	r3, [r4, #4]
 8006290:	bf08      	it	eq
 8006292:	6031      	streq	r1, [r6, #0]
 8006294:	5162      	str	r2, [r4, r5]
 8006296:	604b      	str	r3, [r1, #4]
 8006298:	4638      	mov	r0, r7
 800629a:	f104 060b 	add.w	r6, r4, #11
 800629e:	f000 f865 	bl	800636c <__malloc_unlock>
 80062a2:	f026 0607 	bic.w	r6, r6, #7
 80062a6:	1d23      	adds	r3, r4, #4
 80062a8:	1af2      	subs	r2, r6, r3
 80062aa:	d0b6      	beq.n	800621a <_malloc_r+0x22>
 80062ac:	1b9b      	subs	r3, r3, r6
 80062ae:	50a3      	str	r3, [r4, r2]
 80062b0:	e7b3      	b.n	800621a <_malloc_r+0x22>
 80062b2:	6862      	ldr	r2, [r4, #4]
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	bf0c      	ite	eq
 80062b8:	6032      	streq	r2, [r6, #0]
 80062ba:	605a      	strne	r2, [r3, #4]
 80062bc:	e7ec      	b.n	8006298 <_malloc_r+0xa0>
 80062be:	4623      	mov	r3, r4
 80062c0:	6864      	ldr	r4, [r4, #4]
 80062c2:	e7b2      	b.n	800622a <_malloc_r+0x32>
 80062c4:	4634      	mov	r4, r6
 80062c6:	6876      	ldr	r6, [r6, #4]
 80062c8:	e7b9      	b.n	800623e <_malloc_r+0x46>
 80062ca:	230c      	movs	r3, #12
 80062cc:	603b      	str	r3, [r7, #0]
 80062ce:	4638      	mov	r0, r7
 80062d0:	f000 f84c 	bl	800636c <__malloc_unlock>
 80062d4:	e7a1      	b.n	800621a <_malloc_r+0x22>
 80062d6:	6025      	str	r5, [r4, #0]
 80062d8:	e7de      	b.n	8006298 <_malloc_r+0xa0>
 80062da:	bf00      	nop
 80062dc:	20004a7c 	.word	0x20004a7c

080062e0 <_realloc_r>:
 80062e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e4:	4680      	mov	r8, r0
 80062e6:	4614      	mov	r4, r2
 80062e8:	460e      	mov	r6, r1
 80062ea:	b921      	cbnz	r1, 80062f6 <_realloc_r+0x16>
 80062ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062f0:	4611      	mov	r1, r2
 80062f2:	f7ff bf81 	b.w	80061f8 <_malloc_r>
 80062f6:	b92a      	cbnz	r2, 8006304 <_realloc_r+0x24>
 80062f8:	f7ff ff12 	bl	8006120 <_free_r>
 80062fc:	4625      	mov	r5, r4
 80062fe:	4628      	mov	r0, r5
 8006300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006304:	f000 f838 	bl	8006378 <_malloc_usable_size_r>
 8006308:	4284      	cmp	r4, r0
 800630a:	4607      	mov	r7, r0
 800630c:	d802      	bhi.n	8006314 <_realloc_r+0x34>
 800630e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006312:	d812      	bhi.n	800633a <_realloc_r+0x5a>
 8006314:	4621      	mov	r1, r4
 8006316:	4640      	mov	r0, r8
 8006318:	f7ff ff6e 	bl	80061f8 <_malloc_r>
 800631c:	4605      	mov	r5, r0
 800631e:	2800      	cmp	r0, #0
 8006320:	d0ed      	beq.n	80062fe <_realloc_r+0x1e>
 8006322:	42bc      	cmp	r4, r7
 8006324:	4622      	mov	r2, r4
 8006326:	4631      	mov	r1, r6
 8006328:	bf28      	it	cs
 800632a:	463a      	movcs	r2, r7
 800632c:	f7ff fbb8 	bl	8005aa0 <memcpy>
 8006330:	4631      	mov	r1, r6
 8006332:	4640      	mov	r0, r8
 8006334:	f7ff fef4 	bl	8006120 <_free_r>
 8006338:	e7e1      	b.n	80062fe <_realloc_r+0x1e>
 800633a:	4635      	mov	r5, r6
 800633c:	e7df      	b.n	80062fe <_realloc_r+0x1e>
	...

08006340 <_sbrk_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d06      	ldr	r5, [pc, #24]	; (800635c <_sbrk_r+0x1c>)
 8006344:	2300      	movs	r3, #0
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	602b      	str	r3, [r5, #0]
 800634c:	f7fa fbac 	bl	8000aa8 <_sbrk>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_sbrk_r+0x1a>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_sbrk_r+0x1a>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	20004a84 	.word	0x20004a84

08006360 <__malloc_lock>:
 8006360:	4801      	ldr	r0, [pc, #4]	; (8006368 <__malloc_lock+0x8>)
 8006362:	f000 b811 	b.w	8006388 <__retarget_lock_acquire_recursive>
 8006366:	bf00      	nop
 8006368:	20004a88 	.word	0x20004a88

0800636c <__malloc_unlock>:
 800636c:	4801      	ldr	r0, [pc, #4]	; (8006374 <__malloc_unlock+0x8>)
 800636e:	f000 b80c 	b.w	800638a <__retarget_lock_release_recursive>
 8006372:	bf00      	nop
 8006374:	20004a88 	.word	0x20004a88

08006378 <_malloc_usable_size_r>:
 8006378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800637c:	1f18      	subs	r0, r3, #4
 800637e:	2b00      	cmp	r3, #0
 8006380:	bfbc      	itt	lt
 8006382:	580b      	ldrlt	r3, [r1, r0]
 8006384:	18c0      	addlt	r0, r0, r3
 8006386:	4770      	bx	lr

08006388 <__retarget_lock_acquire_recursive>:
 8006388:	4770      	bx	lr

0800638a <__retarget_lock_release_recursive>:
 800638a:	4770      	bx	lr

0800638c <_init>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	bf00      	nop
 8006390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006392:	bc08      	pop	{r3}
 8006394:	469e      	mov	lr, r3
 8006396:	4770      	bx	lr

08006398 <_fini>:
 8006398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639a:	bf00      	nop
 800639c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639e:	bc08      	pop	{r3}
 80063a0:	469e      	mov	lr, r3
 80063a2:	4770      	bx	lr
