
041_FreeRTOS_UART_Task_Receive_Notification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005e40  08005e40  00015e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f0c  08005f0c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005f0c  08005f0c  00015f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f14  08005f14  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f14  08005f14  00015f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ac4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b38  20004b38  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000194b4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000326d  00000000  00000000  00039558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0003c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001318  00000000  00000000  0003dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002fbf  00000000  00000000  0003ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015eea  00000000  00000000  00041ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d417a  00000000  00000000  00057db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012bf33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005868  00000000  00000000  0012bf84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e28 	.word	0x08005e28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005e28 	.word	0x08005e28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vTaskUARTHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vTaskUARTHandler(void *pvParameters)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	TickType_t xTicksToWait = pdMS_TO_TICKS(3000);
 80004ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80004f0:	60fb      	str	r3, [r7, #12]
	const char *msg = "Since 3 second no message has been received\r\n";
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <vTaskUARTHandler+0x44>)
 80004f4:	60bb      	str	r3, [r7, #8]
	HAL_UART_Receive_IT(&huart2, &buffer, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	490c      	ldr	r1, [pc, #48]	; (800052c <vTaskUARTHandler+0x48>)
 80004fa:	480d      	ldr	r0, [pc, #52]	; (8000530 <vTaskUARTHandler+0x4c>)
 80004fc:	f001 fec1 	bl	8002282 <HAL_UART_Receive_IT>
	for(;;)
	{
		if(ulTaskNotifyTake(pdTRUE, xTicksToWait) == 0)
 8000500:	68f9      	ldr	r1, [r7, #12]
 8000502:	2001      	movs	r0, #1
 8000504:	f004 fada 	bl	8004abc <ulTaskNotifyTake>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d1f8      	bne.n	8000500 <vTaskUARTHandler+0x1c>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800050e:	68b8      	ldr	r0, [r7, #8]
 8000510:	f7ff fe5e 	bl	80001d0 <strlen>
 8000514:	4603      	mov	r3, r0
 8000516:	b29a      	uxth	r2, r3
 8000518:	f04f 33ff 	mov.w	r3, #4294967295
 800051c:	68b9      	ldr	r1, [r7, #8]
 800051e:	4804      	ldr	r0, [pc, #16]	; (8000530 <vTaskUARTHandler+0x4c>)
 8000520:	f001 fe1d 	bl	800215e <HAL_UART_Transmit>
		if(ulTaskNotifyTake(pdTRUE, xTicksToWait) == 0)
 8000524:	e7ec      	b.n	8000500 <vTaskUARTHandler+0x1c>
 8000526:	bf00      	nop
 8000528:	08005e40 	.word	0x08005e40
 800052c:	200000d4 	.word	0x200000d4
 8000530:	20000090 	.word	0x20000090

08000534 <HAL_UART_RxCpltCallback>:
		}
	}

}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(vTaskUARTHandler, &xHigherPriorityTaskWoken);
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	4619      	mov	r1, r3
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <HAL_UART_RxCpltCallback+0x40>)
 8000548:	f004 fb04 	bl	8004b54 <vTaskNotifyGiveFromISR>

	HAL_UART_Receive_IT(&huart2, &buffer, 1);
 800054c:	2201      	movs	r2, #1
 800054e:	490a      	ldr	r1, [pc, #40]	; (8000578 <HAL_UART_RxCpltCallback+0x44>)
 8000550:	480a      	ldr	r0, [pc, #40]	; (800057c <HAL_UART_RxCpltCallback+0x48>)
 8000552:	f001 fe96 	bl	8002282 <HAL_UART_Receive_IT>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d007      	beq.n	800056c <HAL_UART_RxCpltCallback+0x38>
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <HAL_UART_RxCpltCallback+0x4c>)
 800055e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	f3bf 8f4f 	dsb	sy
 8000568:	f3bf 8f6f 	isb	sy
}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	080004e5 	.word	0x080004e5
 8000578:	200000d4 	.word	0x200000d4
 800057c:	20000090 	.word	0x20000090
 8000580:	e000ed04 	.word	0xe000ed04

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fa93 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f815 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8a7 	bl	80006e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f87b 	bl	8000690 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(vTaskUARTHandler, "Uart-task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800059a:	2300      	movs	r3, #0
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	4903      	ldr	r1, [pc, #12]	; (80005b4 <main+0x30>)
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <main+0x34>)
 80005aa:	f003 fc44 	bl	8003e36 <xTaskCreate>
  vTaskStartScheduler();
 80005ae:	f003 fd9d 	bl	80040ec <vTaskStartScheduler>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <main+0x2e>
 80005b4:	08005e70 	.word	0x08005e70
 80005b8:	080004e5 	.word	0x080004e5

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fb62 	bl	8005c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800062c:	2308      	movs	r3, #8
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000630:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000634:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063a:	2307      	movs	r3, #7
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fdc6 	bl	80011d4 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800064e:	f000 f8c5 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2105      	movs	r1, #5
 8000670:	4618      	mov	r0, r3
 8000672:	f001 f827 	bl	80016c4 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800067c:	f000 f8ae 	bl	80007dc <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	; 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_USART2_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c8:	f001 fcfc 	bl	80020c4 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 f883 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000090 	.word	0x20000090
 80006e0:	40004400 	.word	0x40004400

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <MX_GPIO_Init+0xc8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a2a      	ldr	r2, [pc, #168]	; (80007ac <MX_GPIO_Init+0xc8>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <MX_GPIO_Init+0xc8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <MX_GPIO_Init+0xc8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a23      	ldr	r2, [pc, #140]	; (80007ac <MX_GPIO_Init+0xc8>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_GPIO_Init+0xc8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_GPIO_Init+0xc8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <MX_GPIO_Init+0xc8>)
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_GPIO_Init+0xc8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0308 	and.w	r3, r3, #8
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000754:	4816      	ldr	r0, [pc, #88]	; (80007b0 <MX_GPIO_Init+0xcc>)
 8000756:	f000 fcff 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800075a:	2301      	movs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4619      	mov	r1, r3
 800076e:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_GPIO_Init+0xd0>)
 8000770:	f000 fb56 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000774:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	4808      	ldr	r0, [pc, #32]	; (80007b0 <MX_GPIO_Init+0xcc>)
 800078e:	f000 fb47 	bl	8000e20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2105      	movs	r1, #5
 8000796:	2006      	movs	r0, #6
 8000798:	f000 fa86 	bl	8000ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800079c:	2006      	movs	r0, #6
 800079e:	f000 fa9f 	bl	8000ce0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a2:	bf00      	nop
 80007a4:	3720      	adds	r7, #32
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020c00 	.word	0x40020c00
 80007b4:	40020000 	.word	0x40020000

080007b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d101      	bne.n	80007ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ca:	f000 f995 	bl	8000af8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40002000 	.word	0x40002000

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_MspInit+0x54>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a11      	ldr	r2, [pc, #68]	; (800083c <HAL_MspInit+0x54>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_MspInit+0x54>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <HAL_MspInit+0x54>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <HAL_MspInit+0x54>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_MspInit+0x54>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	210f      	movs	r1, #15
 800082a:	f06f 0001 	mvn.w	r0, #1
 800082e:	f000 fa3b 	bl	8000ca8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <HAL_UART_MspInit+0x94>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d133      	bne.n	80008ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <HAL_UART_MspInit+0x98>)
 800086c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089a:	230c      	movs	r3, #12
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <HAL_UART_MspInit+0x9c>)
 80008b6:	f000 fab3 	bl	8000e20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2105      	movs	r1, #5
 80008be:	2026      	movs	r0, #38	; 0x26
 80008c0:	f000 f9f2 	bl	8000ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c4:	2026      	movs	r0, #38	; 0x26
 80008c6:	f000 fa0b 	bl	8000ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000

080008e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08e      	sub	sp, #56	; 0x38
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <HAL_InitTick+0xe4>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	4a32      	ldr	r2, [pc, #200]	; (80009c4 <HAL_InitTick+0xe4>)
 80008fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <HAL_InitTick+0xe4>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090c:	f107 0210 	add.w	r2, r7, #16
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4611      	mov	r1, r2
 8000916:	4618      	mov	r0, r3
 8000918:	f001 f8f4 	bl	8001b04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800091c:	6a3b      	ldr	r3, [r7, #32]
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000922:	2b00      	cmp	r3, #0
 8000924:	d103      	bne.n	800092e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000926:	f001 f8c5 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 800092a:	6378      	str	r0, [r7, #52]	; 0x34
 800092c:	e004      	b.n	8000938 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800092e:	f001 f8c1 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 8000932:	4603      	mov	r3, r0
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800093a:	4a23      	ldr	r2, [pc, #140]	; (80009c8 <HAL_InitTick+0xe8>)
 800093c:	fba2 2303 	umull	r2, r3, r2, r3
 8000940:	0c9b      	lsrs	r3, r3, #18
 8000942:	3b01      	subs	r3, #1
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <HAL_InitTick+0xec>)
 8000948:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <HAL_InitTick+0xf0>)
 800094a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <HAL_InitTick+0xec>)
 800094e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000952:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000954:	4a1d      	ldr	r2, [pc, #116]	; (80009cc <HAL_InitTick+0xec>)
 8000956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000958:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <HAL_InitTick+0xec>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <HAL_InitTick+0xec>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_InitTick+0xec>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 800096c:	4817      	ldr	r0, [pc, #92]	; (80009cc <HAL_InitTick+0xec>)
 800096e:	f001 f8fb 	bl	8001b68 <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000978:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800097c:	2b00      	cmp	r3, #0
 800097e:	d11b      	bne.n	80009b8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000980:	4812      	ldr	r0, [pc, #72]	; (80009cc <HAL_InitTick+0xec>)
 8000982:	f001 f94b 	bl	8001c1c <HAL_TIM_Base_Start_IT>
 8000986:	4603      	mov	r3, r0
 8000988:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800098c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000990:	2b00      	cmp	r3, #0
 8000992:	d111      	bne.n	80009b8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000994:	202d      	movs	r0, #45	; 0x2d
 8000996:	f000 f9a3 	bl	8000ce0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d808      	bhi.n	80009b2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	202d      	movs	r0, #45	; 0x2d
 80009a6:	f000 f97f 	bl	8000ca8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <HAL_InitTick+0xf4>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	e002      	b.n	80009b8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3738      	adds	r7, #56	; 0x38
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	431bde83 	.word	0x431bde83
 80009cc:	200000d8 	.word	0x200000d8
 80009d0:	40002000 	.word	0x40002000
 80009d4:	20000004 	.word	0x20000004

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f000 fbbf 	bl	800118c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <USART2_IRQHandler+0x10>)
 8000a1a:	f001 fc63 	bl	80022e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000090 	.word	0x20000090

08000a28 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000a2e:	f001 f965 	bl	8001cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000d8 	.word	0x200000d8

08000a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a66:	490e      	ldr	r1, [pc, #56]	; (8000aa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a7c:	4c0b      	ldr	r4, [pc, #44]	; (8000aac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a8a:	f7ff ffd7 	bl	8000a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f005 f8cd 	bl	8005c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a92:	f7ff fd77 	bl	8000584 <main>
  bx  lr    
 8000a96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000aa4:	08005f1c 	.word	0x08005f1c
  ldr r2, =_sbss
 8000aa8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000aac:	20004b38 	.word	0x20004b38

08000ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <HAL_Init+0x40>)
 8000abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_Init+0x40>)
 8000aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_Init+0x40>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f8d8 	bl	8000c92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	f7ff fefc 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff fe7e 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023c00 	.word	0x40023c00

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000120 	.word	0x20000120

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000120 	.word	0x20000120

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <__NVIC_EnableIRQ+0x38>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ff4c 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cba:	f7ff ff61 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	68b9      	ldr	r1, [r7, #8]
 8000cc4:	6978      	ldr	r0, [r7, #20]
 8000cc6:	f7ff ffb1 	bl	8000c2c <NVIC_EncodePriority>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff80 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000cd8:	bf00      	nop
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff54 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d0a:	f7ff ff09 	bl	8000b20 <HAL_GetTick>
 8000d0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d008      	beq.n	8000d2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e052      	b.n	8000dd4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0216 	bic.w	r2, r2, #22
 8000d3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	695a      	ldr	r2, [r3, #20]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d103      	bne.n	8000d5e <HAL_DMA_Abort+0x62>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d007      	beq.n	8000d6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0208 	bic.w	r2, r2, #8
 8000d6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0201 	bic.w	r2, r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d7e:	e013      	b.n	8000da8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d80:	f7ff fece 	bl	8000b20 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	d90c      	bls.n	8000da8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2220      	movs	r2, #32
 8000d92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2203      	movs	r2, #3
 8000d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e015      	b.n	8000dd4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1e4      	bne.n	8000d80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dba:	223f      	movs	r2, #63	; 0x3f
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d004      	beq.n	8000dfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00c      	b.n	8000e14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2205      	movs	r2, #5
 8000dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0201 	bic.w	r2, r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e16b      	b.n	8001114 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 815a 	bne.w	800110e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d005      	beq.n	8000e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d130      	bne.n	8000ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	f003 0201 	and.w	r2, r3, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d017      	beq.n	8000f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d123      	bne.n	8000f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	220f      	movs	r2, #15
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	691a      	ldr	r2, [r3, #16]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	69b9      	ldr	r1, [r7, #24]
 8000f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0203 	and.w	r2, r3, #3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80b4 	beq.w	800110e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b60      	ldr	r3, [pc, #384]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a5f      	ldr	r2, [pc, #380]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc2:	4a5b      	ldr	r2, [pc, #364]	; (8001130 <HAL_GPIO_Init+0x310>)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a52      	ldr	r2, [pc, #328]	; (8001134 <HAL_GPIO_Init+0x314>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d02b      	beq.n	8001046 <HAL_GPIO_Init+0x226>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a51      	ldr	r2, [pc, #324]	; (8001138 <HAL_GPIO_Init+0x318>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d025      	beq.n	8001042 <HAL_GPIO_Init+0x222>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a50      	ldr	r2, [pc, #320]	; (800113c <HAL_GPIO_Init+0x31c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01f      	beq.n	800103e <HAL_GPIO_Init+0x21e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4f      	ldr	r2, [pc, #316]	; (8001140 <HAL_GPIO_Init+0x320>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x21a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <HAL_GPIO_Init+0x324>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x216>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4d      	ldr	r2, [pc, #308]	; (8001148 <HAL_GPIO_Init+0x328>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x212>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4c      	ldr	r2, [pc, #304]	; (800114c <HAL_GPIO_Init+0x32c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x20e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4b      	ldr	r2, [pc, #300]	; (8001150 <HAL_GPIO_Init+0x330>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x20a>
 8001026:	2307      	movs	r3, #7
 8001028:	e00e      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102a:	2308      	movs	r3, #8
 800102c:	e00c      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102e:	2306      	movs	r3, #6
 8001030:	e00a      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001032:	2305      	movs	r3, #5
 8001034:	e008      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001036:	2304      	movs	r3, #4
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103a:	2303      	movs	r3, #3
 800103c:	e004      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103e:	2302      	movs	r3, #2
 8001040:	e002      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001046:	2300      	movs	r3, #0
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	f002 0203 	and.w	r2, r2, #3
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4093      	lsls	r3, r2
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001058:	4935      	ldr	r1, [pc, #212]	; (8001130 <HAL_GPIO_Init+0x310>)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <HAL_GPIO_Init+0x334>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108a:	4a32      	ldr	r2, [pc, #200]	; (8001154 <HAL_GPIO_Init+0x334>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <HAL_GPIO_Init+0x334>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b4:	4a27      	ldr	r2, [pc, #156]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010de:	4a1d      	ldr	r2, [pc, #116]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <HAL_GPIO_Init+0x334>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3301      	adds	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	2b0f      	cmp	r3, #15
 8001118:	f67f ae90 	bls.w	8000e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40013800 	.word	0x40013800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40021c00 	.word	0x40021c00
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f806 	bl	80011bc <HAL_GPIO_EXTI_Callback>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e267      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d075      	beq.n	80012de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f2:	4b88      	ldr	r3, [pc, #544]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 030c 	and.w	r3, r3, #12
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d00c      	beq.n	8001218 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fe:	4b85      	ldr	r3, [pc, #532]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001206:	2b08      	cmp	r3, #8
 8001208:	d112      	bne.n	8001230 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120a:	4b82      	ldr	r3, [pc, #520]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001216:	d10b      	bne.n	8001230 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	4b7e      	ldr	r3, [pc, #504]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d05b      	beq.n	80012dc <HAL_RCC_OscConfig+0x108>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d157      	bne.n	80012dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e242      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001238:	d106      	bne.n	8001248 <HAL_RCC_OscConfig+0x74>
 800123a:	4b76      	ldr	r3, [pc, #472]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a75      	ldr	r2, [pc, #468]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e01d      	b.n	8001284 <HAL_RCC_OscConfig+0xb0>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0x98>
 8001252:	4b70      	ldr	r3, [pc, #448]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a6f      	ldr	r2, [pc, #444]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b6d      	ldr	r3, [pc, #436]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a6c      	ldr	r2, [pc, #432]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e00b      	b.n	8001284 <HAL_RCC_OscConfig+0xb0>
 800126c:	4b69      	ldr	r3, [pc, #420]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a68      	ldr	r2, [pc, #416]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b66      	ldr	r3, [pc, #408]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a65      	ldr	r2, [pc, #404]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 800127e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d013      	beq.n	80012b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fc48 	bl	8000b20 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fc44 	bl	8000b20 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e207      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	4b5b      	ldr	r3, [pc, #364]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0xc0>
 80012b2:	e014      	b.n	80012de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc34 	bl	8000b20 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fc30 	bl	8000b20 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e1f3      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	4b51      	ldr	r3, [pc, #324]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0xe8>
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d063      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ea:	4b4a      	ldr	r3, [pc, #296]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d11c      	bne.n	800133c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001302:	4b44      	ldr	r3, [pc, #272]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d116      	bne.n	800133c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_RCC_OscConfig+0x152>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d001      	beq.n	8001326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e1c7      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4937      	ldr	r1, [pc, #220]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	e03a      	b.n	80013b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d020      	beq.n	8001386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001344:	4b34      	ldr	r3, [pc, #208]	; (8001418 <HAL_RCC_OscConfig+0x244>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134a:	f7ff fbe9 	bl	8000b20 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff fbe5 	bl	8000b20 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e1a8      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b28      	ldr	r3, [pc, #160]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4925      	ldr	r1, [pc, #148]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
 8001384:	e015      	b.n	80013b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001386:	4b24      	ldr	r3, [pc, #144]	; (8001418 <HAL_RCC_OscConfig+0x244>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fbc8 	bl	8000b20 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff fbc4 	bl	8000b20 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e187      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d036      	beq.n	800142c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d016      	beq.n	80013f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_RCC_OscConfig+0x248>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013cc:	f7ff fba8 	bl	8000b20 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fba4 	bl	8000b20 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e167      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_OscConfig+0x240>)
 80013e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x200>
 80013f2:	e01b      	b.n	800142c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_OscConfig+0x248>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb91 	bl	8000b20 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	e00e      	b.n	8001420 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001402:	f7ff fb8d 	bl	8000b20 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d907      	bls.n	8001420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e150      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
 8001414:	40023800 	.word	0x40023800
 8001418:	42470000 	.word	0x42470000
 800141c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	4b88      	ldr	r3, [pc, #544]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 8001422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1ea      	bne.n	8001402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 8097 	beq.w	8001568 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143e:	4b81      	ldr	r3, [pc, #516]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10f      	bne.n	800146a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b7d      	ldr	r3, [pc, #500]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a7c      	ldr	r2, [pc, #496]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b7a      	ldr	r3, [pc, #488]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001466:	2301      	movs	r3, #1
 8001468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146a:	4b77      	ldr	r3, [pc, #476]	; (8001648 <HAL_RCC_OscConfig+0x474>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001472:	2b00      	cmp	r3, #0
 8001474:	d118      	bne.n	80014a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001476:	4b74      	ldr	r3, [pc, #464]	; (8001648 <HAL_RCC_OscConfig+0x474>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a73      	ldr	r2, [pc, #460]	; (8001648 <HAL_RCC_OscConfig+0x474>)
 800147c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001482:	f7ff fb4d 	bl	8000b20 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148a:	f7ff fb49 	bl	8000b20 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e10c      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	4b6a      	ldr	r3, [pc, #424]	; (8001648 <HAL_RCC_OscConfig+0x474>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d106      	bne.n	80014be <HAL_RCC_OscConfig+0x2ea>
 80014b0:	4b64      	ldr	r3, [pc, #400]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 80014b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b4:	4a63      	ldr	r2, [pc, #396]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6713      	str	r3, [r2, #112]	; 0x70
 80014bc:	e01c      	b.n	80014f8 <HAL_RCC_OscConfig+0x324>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d10c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x30c>
 80014c6:	4b5f      	ldr	r3, [pc, #380]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ca:	4a5e      	ldr	r2, [pc, #376]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6713      	str	r3, [r2, #112]	; 0x70
 80014d2:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 80014d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d6:	4a5b      	ldr	r2, [pc, #364]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6713      	str	r3, [r2, #112]	; 0x70
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0x324>
 80014e0:	4b58      	ldr	r3, [pc, #352]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e4:	4a57      	ldr	r2, [pc, #348]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6713      	str	r3, [r2, #112]	; 0x70
 80014ec:	4b55      	ldr	r3, [pc, #340]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	4a54      	ldr	r2, [pc, #336]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 80014f2:	f023 0304 	bic.w	r3, r3, #4
 80014f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d015      	beq.n	800152c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001500:	f7ff fb0e 	bl	8000b20 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001506:	e00a      	b.n	800151e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001508:	f7ff fb0a 	bl	8000b20 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	; 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e0cb      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151e:	4b49      	ldr	r3, [pc, #292]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0ee      	beq.n	8001508 <HAL_RCC_OscConfig+0x334>
 800152a:	e014      	b.n	8001556 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152c:	f7ff faf8 	bl	8000b20 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff faf4 	bl	8000b20 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e0b5      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154a:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1ee      	bne.n	8001534 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155c:	4b39      	ldr	r3, [pc, #228]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	4a38      	ldr	r2, [pc, #224]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 8001562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001566:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a1 	beq.w	80016b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b08      	cmp	r3, #8
 800157c:	d05c      	beq.n	8001638 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d141      	bne.n	800160a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <HAL_RCC_OscConfig+0x478>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fac8 	bl	8000b20 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fac4 	bl	8000b20 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e087      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69da      	ldr	r2, [r3, #28]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	019b      	lsls	r3, r3, #6
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	3b01      	subs	r3, #1
 80015cc:	041b      	lsls	r3, r3, #16
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	061b      	lsls	r3, r3, #24
 80015d6:	491b      	ldr	r1, [pc, #108]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x478>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fa9d 	bl	8000b20 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ea:	f7ff fa99 	bl	8000b20 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e05c      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x416>
 8001608:	e054      	b.n	80016b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_RCC_OscConfig+0x478>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fa86 	bl	8000b20 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fa82 	bl	8000b20 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e045      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_RCC_OscConfig+0x470>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x444>
 8001636:	e03d      	b.n	80016b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d107      	bne.n	8001650 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e038      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
 8001644:	40023800 	.word	0x40023800
 8001648:	40007000 	.word	0x40007000
 800164c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_RCC_OscConfig+0x4ec>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d028      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d121      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001676:	429a      	cmp	r2, r3
 8001678:	d11a      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001680:	4013      	ands	r3, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001686:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001688:	4293      	cmp	r3, r2
 800168a:	d111      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	3b01      	subs	r3, #1
 800169a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0cc      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d8:	4b68      	ldr	r3, [pc, #416]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d90c      	bls.n	8001700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b65      	ldr	r3, [pc, #404]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b63      	ldr	r3, [pc, #396]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0b8      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001718:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a58      	ldr	r2, [pc, #352]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001722:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001730:	4b53      	ldr	r3, [pc, #332]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4a52      	ldr	r2, [pc, #328]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800173a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	494d      	ldr	r1, [pc, #308]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d044      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d119      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e07f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d003      	beq.n	8001782 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177e:	2b03      	cmp	r3, #3
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001782:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e06f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e067      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f023 0203 	bic.w	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4934      	ldr	r1, [pc, #208]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b4:	f7ff f9b4 	bl	8000b20 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017bc:	f7ff f9b0 	bl	8000b20 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e04f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 020c 	and.w	r2, r3, #12
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d1eb      	bne.n	80017bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d20c      	bcs.n	800180c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e032      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4916      	ldr	r1, [pc, #88]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	490e      	ldr	r1, [pc, #56]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184a:	f000 f821 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 800184e:	4602      	mov	r2, r0
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	490a      	ldr	r1, [pc, #40]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	5ccb      	ldrb	r3, [r1, r3]
 800185e:	fa22 f303 	lsr.w	r3, r2, r3
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f838 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00
 8001880:	40023800 	.word	0x40023800
 8001884:	08005e94 	.word	0x08005e94
 8001888:	20000000 	.word	0x20000000
 800188c:	20000004 	.word	0x20000004

08001890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001894:	b094      	sub	sp, #80	; 0x50
 8001896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
 800189c:	2300      	movs	r3, #0
 800189e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018a0:	2300      	movs	r3, #0
 80018a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a8:	4b79      	ldr	r3, [pc, #484]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d00d      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x40>
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	f200 80e1 	bhi.w	8001a7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x34>
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d003      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x3a>
 80018c2:	e0db      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c4:	4b73      	ldr	r3, [pc, #460]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x204>)
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018c8:	e0db      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ca:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x208>)
 80018cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ce:	e0d8      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d0:	4b6f      	ldr	r3, [pc, #444]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018da:	4b6d      	ldr	r3, [pc, #436]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d063      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e6:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	099b      	lsrs	r3, r3, #6
 80018ec:	2200      	movs	r2, #0
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80018f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
 80018fa:	2300      	movs	r3, #0
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
 80018fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001902:	4622      	mov	r2, r4
 8001904:	462b      	mov	r3, r5
 8001906:	f04f 0000 	mov.w	r0, #0
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	0159      	lsls	r1, r3, #5
 8001910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001914:	0150      	lsls	r0, r2, #5
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4621      	mov	r1, r4
 800191c:	1a51      	subs	r1, r2, r1
 800191e:	6139      	str	r1, [r7, #16]
 8001920:	4629      	mov	r1, r5
 8001922:	eb63 0301 	sbc.w	r3, r3, r1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001934:	4659      	mov	r1, fp
 8001936:	018b      	lsls	r3, r1, #6
 8001938:	4651      	mov	r1, sl
 800193a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193e:	4651      	mov	r1, sl
 8001940:	018a      	lsls	r2, r1, #6
 8001942:	4651      	mov	r1, sl
 8001944:	ebb2 0801 	subs.w	r8, r2, r1
 8001948:	4659      	mov	r1, fp
 800194a:	eb63 0901 	sbc.w	r9, r3, r1
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800195a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800195e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001962:	4690      	mov	r8, r2
 8001964:	4699      	mov	r9, r3
 8001966:	4623      	mov	r3, r4
 8001968:	eb18 0303 	adds.w	r3, r8, r3
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	462b      	mov	r3, r5
 8001970:	eb49 0303 	adc.w	r3, r9, r3
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001982:	4629      	mov	r1, r5
 8001984:	024b      	lsls	r3, r1, #9
 8001986:	4621      	mov	r1, r4
 8001988:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800198c:	4621      	mov	r1, r4
 800198e:	024a      	lsls	r2, r1, #9
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001996:	2200      	movs	r2, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
 800199a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800199c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019a0:	f7fe fc1e 	bl	80001e0 <__aeabi_uldivmod>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4613      	mov	r3, r2
 80019aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019ac:	e058      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	099b      	lsrs	r3, r3, #6
 80019b4:	2200      	movs	r2, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	4611      	mov	r1, r2
 80019ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019be:	623b      	str	r3, [r7, #32]
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
 80019c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019c8:	4642      	mov	r2, r8
 80019ca:	464b      	mov	r3, r9
 80019cc:	f04f 0000 	mov.w	r0, #0
 80019d0:	f04f 0100 	mov.w	r1, #0
 80019d4:	0159      	lsls	r1, r3, #5
 80019d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019da:	0150      	lsls	r0, r2, #5
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4641      	mov	r1, r8
 80019e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80019e6:	4649      	mov	r1, r9
 80019e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a00:	ebb2 040a 	subs.w	r4, r2, sl
 8001a04:	eb63 050b 	sbc.w	r5, r3, fp
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	00eb      	lsls	r3, r5, #3
 8001a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a16:	00e2      	lsls	r2, r4, #3
 8001a18:	4614      	mov	r4, r2
 8001a1a:	461d      	mov	r5, r3
 8001a1c:	4643      	mov	r3, r8
 8001a1e:	18e3      	adds	r3, r4, r3
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	464b      	mov	r3, r9
 8001a24:	eb45 0303 	adc.w	r3, r5, r3
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a36:	4629      	mov	r1, r5
 8001a38:	028b      	lsls	r3, r1, #10
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a40:	4621      	mov	r1, r4
 8001a42:	028a      	lsls	r2, r1, #10
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	61fa      	str	r2, [r7, #28]
 8001a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a54:	f7fe fbc4 	bl	80001e0 <__aeabi_uldivmod>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	0c1b      	lsrs	r3, r3, #16
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a7a:	e002      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3750      	adds	r7, #80	; 0x50
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800
 8001a94:	00f42400 	.word	0x00f42400
 8001a98:	007a1200 	.word	0x007a1200

08001a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000000 	.word	0x20000000

08001ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ab8:	f7ff fff0 	bl	8001a9c <HAL_RCC_GetHCLKFreq>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	0a9b      	lsrs	r3, r3, #10
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	4903      	ldr	r1, [pc, #12]	; (8001ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aca:	5ccb      	ldrb	r3, [r1, r3]
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08005ea4 	.word	0x08005ea4

08001adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ae0:	f7ff ffdc 	bl	8001a9c <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	0b5b      	lsrs	r3, r3, #13
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4903      	ldr	r1, [pc, #12]	; (8001b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	08005ea4 	.word	0x08005ea4

08001b04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	220f      	movs	r2, #15
 8001b12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_GetClockConfig+0x5c>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_RCC_GetClockConfig+0x5c>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_RCC_GetClockConfig+0x5c>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	08db      	lsrs	r3, r3, #3
 8001b3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <HAL_RCC_GetClockConfig+0x60>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0207 	and.w	r2, r3, #7
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40023c00 	.word	0x40023c00

08001b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e041      	b.n	8001bfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f839 	bl	8001c06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	f000 f9d8 	bl	8001f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d001      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e04e      	b.n	8001cd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d022      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x80>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5e:	d01d      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x80>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1f      	ldr	r2, [pc, #124]	; (8001ce4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d018      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x80>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d013      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x80>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <HAL_TIM_Base_Start_IT+0xd0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00e      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x80>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d009      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x80>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d004      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x80>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a18      	ldr	r2, [pc, #96]	; (8001cf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d111      	bne.n	8001cc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d010      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cbe:	e007      	b.n	8001cd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40000400 	.word	0x40000400
 8001ce8:	40000800 	.word	0x40000800
 8001cec:	40000c00 	.word	0x40000c00
 8001cf0:	40010400 	.word	0x40010400
 8001cf4:	40014000 	.word	0x40014000
 8001cf8:	40001800 	.word	0x40001800

08001cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d122      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d11b      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0202 	mvn.w	r2, #2
 8001d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8ee 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8001d44:	e005      	b.n	8001d52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8e0 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8f1 	bl	8001f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d122      	bne.n	8001dac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d11b      	bne.n	8001dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0204 	mvn.w	r2, #4
 8001d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2202      	movs	r2, #2
 8001d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8c4 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8b6 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f8c7 	bl	8001f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0208 	mvn.w	r2, #8
 8001dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f89a 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f88c 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f89d 	bl	8001f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	d122      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0210 	mvn.w	r2, #16
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f870 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f862 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f873 	bl	8001f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d10e      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0201 	mvn.w	r2, #1
 8001e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe fc9c 	bl	80007b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8a:	2b80      	cmp	r3, #128	; 0x80
 8001e8c:	d10e      	bne.n	8001eac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e98:	2b80      	cmp	r3, #128	; 0x80
 8001e9a:	d107      	bne.n	8001eac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f902 	bl	80020b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb6:	2b40      	cmp	r3, #64	; 0x40
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	d107      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f838 	bl	8001f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	d10e      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d107      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0220 	mvn.w	r2, #32
 8001efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8cc 	bl	800209c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a40      	ldr	r2, [pc, #256]	; (8002070 <TIM_Base_SetConfig+0x114>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <TIM_Base_SetConfig+0x40>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7a:	d00f      	beq.n	8001f9c <TIM_Base_SetConfig+0x40>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a3d      	ldr	r2, [pc, #244]	; (8002074 <TIM_Base_SetConfig+0x118>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d00b      	beq.n	8001f9c <TIM_Base_SetConfig+0x40>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a3c      	ldr	r2, [pc, #240]	; (8002078 <TIM_Base_SetConfig+0x11c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d007      	beq.n	8001f9c <TIM_Base_SetConfig+0x40>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a3b      	ldr	r2, [pc, #236]	; (800207c <TIM_Base_SetConfig+0x120>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <TIM_Base_SetConfig+0x40>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a3a      	ldr	r2, [pc, #232]	; (8002080 <TIM_Base_SetConfig+0x124>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d108      	bne.n	8001fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2f      	ldr	r2, [pc, #188]	; (8002070 <TIM_Base_SetConfig+0x114>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02b      	beq.n	800200e <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbc:	d027      	beq.n	800200e <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a2c      	ldr	r2, [pc, #176]	; (8002074 <TIM_Base_SetConfig+0x118>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d023      	beq.n	800200e <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a2b      	ldr	r2, [pc, #172]	; (8002078 <TIM_Base_SetConfig+0x11c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01f      	beq.n	800200e <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a2a      	ldr	r2, [pc, #168]	; (800207c <TIM_Base_SetConfig+0x120>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01b      	beq.n	800200e <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a29      	ldr	r2, [pc, #164]	; (8002080 <TIM_Base_SetConfig+0x124>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d017      	beq.n	800200e <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a28      	ldr	r2, [pc, #160]	; (8002084 <TIM_Base_SetConfig+0x128>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a27      	ldr	r2, [pc, #156]	; (8002088 <TIM_Base_SetConfig+0x12c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00f      	beq.n	800200e <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a26      	ldr	r2, [pc, #152]	; (800208c <TIM_Base_SetConfig+0x130>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00b      	beq.n	800200e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a25      	ldr	r2, [pc, #148]	; (8002090 <TIM_Base_SetConfig+0x134>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d007      	beq.n	800200e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a24      	ldr	r2, [pc, #144]	; (8002094 <TIM_Base_SetConfig+0x138>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d003      	beq.n	800200e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a23      	ldr	r2, [pc, #140]	; (8002098 <TIM_Base_SetConfig+0x13c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d108      	bne.n	8002020 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <TIM_Base_SetConfig+0x114>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d003      	beq.n	8002054 <TIM_Base_SetConfig+0xf8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <TIM_Base_SetConfig+0x124>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d103      	bne.n	800205c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	615a      	str	r2, [r3, #20]
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40010000 	.word	0x40010000
 8002074:	40000400 	.word	0x40000400
 8002078:	40000800 	.word	0x40000800
 800207c:	40000c00 	.word	0x40000c00
 8002080:	40010400 	.word	0x40010400
 8002084:	40014000 	.word	0x40014000
 8002088:	40014400 	.word	0x40014400
 800208c:	40014800 	.word	0x40014800
 8002090:	40001800 	.word	0x40001800
 8002094:	40001c00 	.word	0x40001c00
 8002098:	40002000 	.word	0x40002000

0800209c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e03f      	b.n	8002156 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fba8 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2224      	movs	r2, #36	; 0x24
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fddf 	bl	8002ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800211c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800212c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800213c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b08a      	sub	sp, #40	; 0x28
 8002162:	af02      	add	r7, sp, #8
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	4613      	mov	r3, r2
 800216c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b20      	cmp	r3, #32
 800217c:	d17c      	bne.n	8002278 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_UART_Transmit+0x2c>
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e075      	b.n	800227a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_UART_Transmit+0x3e>
 8002198:	2302      	movs	r3, #2
 800219a:	e06e      	b.n	800227a <HAL_UART_Transmit+0x11c>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2221      	movs	r2, #33	; 0x21
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021b2:	f7fe fcb5 	bl	8000b20 <HAL_GetTick>
 80021b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	88fa      	ldrh	r2, [r7, #6]
 80021bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	88fa      	ldrh	r2, [r7, #6]
 80021c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021cc:	d108      	bne.n	80021e0 <HAL_UART_Transmit+0x82>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d104      	bne.n	80021e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	e003      	b.n	80021e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021f0:	e02a      	b.n	8002248 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2200      	movs	r2, #0
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 fb1f 	bl	8002840 <UART_WaitOnFlagUntilTimeout>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e036      	b.n	800227a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10b      	bne.n	800222a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002220:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	3302      	adds	r3, #2
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	e007      	b.n	800223a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	781a      	ldrb	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	3301      	adds	r3, #1
 8002238:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800224c:	b29b      	uxth	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1cf      	bne.n	80021f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2200      	movs	r2, #0
 800225a:	2140      	movs	r1, #64	; 0x40
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 faef 	bl	8002840 <UART_WaitOnFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e006      	b.n	800227a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	e000      	b.n	800227a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002278:	2302      	movs	r3, #2
  }
}
 800227a:	4618      	mov	r0, r3
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	4613      	mov	r3, r2
 800228e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b20      	cmp	r3, #32
 800229a:	d11d      	bne.n	80022d8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_UART_Receive_IT+0x26>
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e016      	b.n	80022da <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_UART_Receive_IT+0x38>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e00f      	b.n	80022da <HAL_UART_Receive_IT+0x58>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 fb24 	bl	800291c <UART_Start_Receive_IT>
 80022d4:	4603      	mov	r3, r0
 80022d6:	e000      	b.n	80022da <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80022d8:	2302      	movs	r3, #2
  }
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b0ba      	sub	sp, #232	; 0xe8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800232a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_UART_IRQHandler+0x66>
 8002336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fc07 	bl	8002b56 <UART_Receive_IT>
      return;
 8002348:	e256      	b.n	80027f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800234a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80de 	beq.w	8002510 <HAL_UART_IRQHandler+0x22c>
 8002354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d106      	bne.n	800236e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002364:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80d1 	beq.w	8002510 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800236e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_UART_IRQHandler+0xae>
 800237a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_UART_IRQHandler+0xd2>
 800239e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f043 0202 	orr.w	r2, r3, #2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_UART_IRQHandler+0xf6>
 80023c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f043 0204 	orr.w	r2, r3, #4
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d011      	beq.n	800240a <HAL_UART_IRQHandler+0x126>
 80023e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d105      	bne.n	80023fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f043 0208 	orr.w	r2, r3, #8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 81ed 	beq.w	80027ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_UART_IRQHandler+0x14e>
 8002420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fb92 	bl	8002b56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243c:	2b40      	cmp	r3, #64	; 0x40
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <HAL_UART_IRQHandler+0x17a>
 8002456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d04f      	beq.n	80024fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fa9a 	bl	8002998 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d141      	bne.n	80024f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	3314      	adds	r3, #20
 8002478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002480:	e853 3f00 	ldrex	r3, [r3]
 8002484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800248c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3314      	adds	r3, #20
 800249a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800249e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024ae:	e841 2300 	strex	r3, r2, [r1]
 80024b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80024b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1d9      	bne.n	8002472 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d013      	beq.n	80024ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ca:	4a7d      	ldr	r2, [pc, #500]	; (80026c0 <HAL_UART_IRQHandler+0x3dc>)
 80024cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fc82 	bl	8000ddc <HAL_DMA_Abort_IT>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d016      	beq.n	800250c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024e8:	4610      	mov	r0, r2
 80024ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ec:	e00e      	b.n	800250c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f990 	bl	8002814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f4:	e00a      	b.n	800250c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f98c 	bl	8002814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024fc:	e006      	b.n	800250c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f988 	bl	8002814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800250a:	e170      	b.n	80027ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800250c:	bf00      	nop
    return;
 800250e:	e16e      	b.n	80027ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	2b01      	cmp	r3, #1
 8002516:	f040 814a 	bne.w	80027ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800251a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8143 	beq.w	80027ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 813c 	beq.w	80027ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	f040 80b4 	bne.w	80026c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002568:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 8140 	beq.w	80027f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800257a:	429a      	cmp	r2, r3
 800257c:	f080 8139 	bcs.w	80027f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002586:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002592:	f000 8088 	beq.w	80026a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	330c      	adds	r3, #12
 800259c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025a4:	e853 3f00 	ldrex	r3, [r3]
 80025a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80025ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	330c      	adds	r3, #12
 80025be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80025c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80025ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025d2:	e841 2300 	strex	r3, r2, [r1]
 80025d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80025da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1d9      	bne.n	8002596 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3314      	adds	r3, #20
 80025e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ec:	e853 3f00 	ldrex	r3, [r3]
 80025f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3314      	adds	r3, #20
 8002602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002606:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800260a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800260e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002612:	e841 2300 	strex	r3, r2, [r1]
 8002616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e1      	bne.n	80025e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	3314      	adds	r3, #20
 8002624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800262e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3314      	adds	r3, #20
 800263e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002642:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002644:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800264a:	e841 2300 	strex	r3, r2, [r1]
 800264e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e3      	bne.n	800261e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	330c      	adds	r3, #12
 800266a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266e:	e853 3f00 	ldrex	r3, [r3]
 8002672:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002676:	f023 0310 	bic.w	r3, r3, #16
 800267a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	330c      	adds	r3, #12
 8002684:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002688:	65ba      	str	r2, [r7, #88]	; 0x58
 800268a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800268e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002690:	e841 2300 	strex	r3, r2, [r1]
 8002694:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1e3      	bne.n	8002664 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe fb2b 	bl	8000cfc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4619      	mov	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f8b6 	bl	8002828 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026bc:	e099      	b.n	80027f2 <HAL_UART_IRQHandler+0x50e>
 80026be:	bf00      	nop
 80026c0:	08002a5f 	.word	0x08002a5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 808b 	beq.w	80027f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80026e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8086 	beq.w	80027f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	e853 3f00 	ldrex	r3, [r3]
 80026f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002700:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800270e:	647a      	str	r2, [r7, #68]	; 0x44
 8002710:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002716:	e841 2300 	strex	r3, r2, [r1]
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800271c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e3      	bne.n	80026ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3314      	adds	r3, #20
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	e853 3f00 	ldrex	r3, [r3]
 8002730:	623b      	str	r3, [r7, #32]
   return(result);
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3314      	adds	r3, #20
 8002742:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002746:	633a      	str	r2, [r7, #48]	; 0x30
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800274c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800274e:	e841 2300 	strex	r3, r2, [r1]
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1e3      	bne.n	8002722 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	330c      	adds	r3, #12
 800276e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	e853 3f00 	ldrex	r3, [r3]
 8002776:	60fb      	str	r3, [r7, #12]
   return(result);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0310 	bic.w	r3, r3, #16
 800277e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	330c      	adds	r3, #12
 8002788:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800278c:	61fa      	str	r2, [r7, #28]
 800278e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002790:	69b9      	ldr	r1, [r7, #24]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	e841 2300 	strex	r3, r2, [r1]
 8002798:	617b      	str	r3, [r7, #20]
   return(result);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e3      	bne.n	8002768 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027a4:	4619      	mov	r1, r3
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f83e 	bl	8002828 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027ac:	e023      	b.n	80027f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_UART_IRQHandler+0x4ea>
 80027ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f95d 	bl	8002a86 <UART_Transmit_IT>
    return;
 80027cc:	e014      	b.n	80027f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00e      	beq.n	80027f8 <HAL_UART_IRQHandler+0x514>
 80027da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f99d 	bl	8002b26 <UART_EndTransmit_IT>
    return;
 80027ec:	e004      	b.n	80027f8 <HAL_UART_IRQHandler+0x514>
    return;
 80027ee:	bf00      	nop
 80027f0:	e002      	b.n	80027f8 <HAL_UART_IRQHandler+0x514>
      return;
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <HAL_UART_IRQHandler+0x514>
      return;
 80027f6:	bf00      	nop
  }
}
 80027f8:	37e8      	adds	r7, #232	; 0xe8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop

08002800 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b090      	sub	sp, #64	; 0x40
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002850:	e050      	b.n	80028f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d04c      	beq.n	80028f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800285a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285c:	2b00      	cmp	r3, #0
 800285e:	d007      	beq.n	8002870 <UART_WaitOnFlagUntilTimeout+0x30>
 8002860:	f7fe f95e 	bl	8000b20 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800286c:	429a      	cmp	r2, r3
 800286e:	d241      	bcs.n	80028f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	330c      	adds	r3, #12
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	e853 3f00 	ldrex	r3, [r3]
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	330c      	adds	r3, #12
 800288e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002890:	637a      	str	r2, [r7, #52]	; 0x34
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002898:	e841 2300 	strex	r3, r2, [r1]
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1e5      	bne.n	8002870 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3314      	adds	r3, #20
 80028aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	e853 3f00 	ldrex	r3, [r3]
 80028b2:	613b      	str	r3, [r7, #16]
   return(result);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3314      	adds	r3, #20
 80028c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028c4:	623a      	str	r2, [r7, #32]
 80028c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c8:	69f9      	ldr	r1, [r7, #28]
 80028ca:	6a3a      	ldr	r2, [r7, #32]
 80028cc:	e841 2300 	strex	r3, r2, [r1]
 80028d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1e5      	bne.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e00f      	b.n	8002914 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	4013      	ands	r3, r2
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	429a      	cmp	r2, r3
 8002902:	bf0c      	ite	eq
 8002904:	2301      	moveq	r3, #1
 8002906:	2300      	movne	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	429a      	cmp	r2, r3
 8002910:	d09f      	beq.n	8002852 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3740      	adds	r7, #64	; 0x40
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	4613      	mov	r3, r2
 8002928:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	88fa      	ldrh	r2, [r7, #6]
 8002934:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2222      	movs	r2, #34	; 0x22
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002968:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695a      	ldr	r2, [r3, #20]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0201 	orr.w	r2, r2, #1
 8002978:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0220 	orr.w	r2, r2, #32
 8002988:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002998:	b480      	push	{r7}
 800299a:	b095      	sub	sp, #84	; 0x54
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029aa:	e853 3f00 	ldrex	r3, [r3]
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	330c      	adds	r3, #12
 80029be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029c0:	643a      	str	r2, [r7, #64]	; 0x40
 80029c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029c8:	e841 2300 	strex	r3, r2, [r1]
 80029cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e5      	bne.n	80029a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3314      	adds	r3, #20
 80029da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	e853 3f00 	ldrex	r3, [r3]
 80029e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3314      	adds	r3, #20
 80029f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fc:	e841 2300 	strex	r3, r2, [r1]
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e5      	bne.n	80029d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d119      	bne.n	8002a44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	330c      	adds	r3, #12
 8002a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	e853 3f00 	ldrex	r3, [r3]
 8002a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f023 0310 	bic.w	r3, r3, #16
 8002a26:	647b      	str	r3, [r7, #68]	; 0x44
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a30:	61ba      	str	r2, [r7, #24]
 8002a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a34:	6979      	ldr	r1, [r7, #20]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	e841 2300 	strex	r3, r2, [r1]
 8002a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e5      	bne.n	8002a10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a52:	bf00      	nop
 8002a54:	3754      	adds	r7, #84	; 0x54
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff fecb 	bl	8002814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b21      	cmp	r3, #33	; 0x21
 8002a98:	d13e      	bne.n	8002b18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa2:	d114      	bne.n	8002ace <UART_Transmit_IT+0x48>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d110      	bne.n	8002ace <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	1c9a      	adds	r2, r3, #2
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	621a      	str	r2, [r3, #32]
 8002acc:	e008      	b.n	8002ae0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	1c59      	adds	r1, r3, #1
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6211      	str	r1, [r2, #32]
 8002ad8:	781a      	ldrb	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4619      	mov	r1, r3
 8002aee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10f      	bne.n	8002b14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e000      	b.n	8002b1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b18:	2302      	movs	r3, #2
  }
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff fe5a 	bl	8002800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b08c      	sub	sp, #48	; 0x30
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b22      	cmp	r3, #34	; 0x22
 8002b68:	f040 80ab 	bne.w	8002cc2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b74:	d117      	bne.n	8002ba6 <UART_Receive_IT+0x50>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d113      	bne.n	8002ba6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	1c9a      	adds	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba4:	e026      	b.n	8002bf4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb8:	d007      	beq.n	8002bca <UART_Receive_IT+0x74>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <UART_Receive_IT+0x82>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e008      	b.n	8002bea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4619      	mov	r1, r3
 8002c02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d15a      	bne.n	8002cbe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0220 	bic.w	r2, r2, #32
 8002c16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d135      	bne.n	8002cb4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	330c      	adds	r3, #12
 8002c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f023 0310 	bic.w	r3, r3, #16
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6e:	623a      	str	r2, [r7, #32]
 8002c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c72:	69f9      	ldr	r1, [r7, #28]
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e5      	bne.n	8002c4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d10a      	bne.n	8002ca6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002caa:	4619      	mov	r1, r3
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff fdbb 	bl	8002828 <HAL_UARTEx_RxEventCallback>
 8002cb2:	e002      	b.n	8002cba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7fd fc3d 	bl	8000534 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e002      	b.n	8002cc4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e000      	b.n	8002cc4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002cc2:	2302      	movs	r3, #2
  }
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3730      	adds	r7, #48	; 0x30
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd0:	b0c0      	sub	sp, #256	; 0x100
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce8:	68d9      	ldr	r1, [r3, #12]
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	ea40 0301 	orr.w	r3, r0, r1
 8002cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d24:	f021 010c 	bic.w	r1, r1, #12
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d32:	430b      	orrs	r3, r1
 8002d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d46:	6999      	ldr	r1, [r3, #24]
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	ea40 0301 	orr.w	r3, r0, r1
 8002d52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b8f      	ldr	r3, [pc, #572]	; (8002f98 <UART_SetConfig+0x2cc>)
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d005      	beq.n	8002d6c <UART_SetConfig+0xa0>
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b8d      	ldr	r3, [pc, #564]	; (8002f9c <UART_SetConfig+0x2d0>)
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d104      	bne.n	8002d76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d6c:	f7fe feb6 	bl	8001adc <HAL_RCC_GetPCLK2Freq>
 8002d70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d74:	e003      	b.n	8002d7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d76:	f7fe fe9d 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 8002d7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d88:	f040 810c 	bne.w	8002fa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d90:	2200      	movs	r2, #0
 8002d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d9e:	4622      	mov	r2, r4
 8002da0:	462b      	mov	r3, r5
 8002da2:	1891      	adds	r1, r2, r2
 8002da4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002da6:	415b      	adcs	r3, r3
 8002da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002daa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dae:	4621      	mov	r1, r4
 8002db0:	eb12 0801 	adds.w	r8, r2, r1
 8002db4:	4629      	mov	r1, r5
 8002db6:	eb43 0901 	adc.w	r9, r3, r1
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dce:	4690      	mov	r8, r2
 8002dd0:	4699      	mov	r9, r3
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	eb18 0303 	adds.w	r3, r8, r3
 8002dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ddc:	462b      	mov	r3, r5
 8002dde:	eb49 0303 	adc.w	r3, r9, r3
 8002de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002df2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	18db      	adds	r3, r3, r3
 8002dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8002e00:	4613      	mov	r3, r2
 8002e02:	eb42 0303 	adc.w	r3, r2, r3
 8002e06:	657b      	str	r3, [r7, #84]	; 0x54
 8002e08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e10:	f7fd f9e6 	bl	80001e0 <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	011c      	lsls	r4, r3, #4
 8002e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e34:	4642      	mov	r2, r8
 8002e36:	464b      	mov	r3, r9
 8002e38:	1891      	adds	r1, r2, r2
 8002e3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e3c:	415b      	adcs	r3, r3
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e44:	4641      	mov	r1, r8
 8002e46:	eb12 0a01 	adds.w	sl, r2, r1
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e64:	4692      	mov	sl, r2
 8002e66:	469b      	mov	fp, r3
 8002e68:	4643      	mov	r3, r8
 8002e6a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e72:	464b      	mov	r3, r9
 8002e74:	eb4b 0303 	adc.w	r3, fp, r3
 8002e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e90:	460b      	mov	r3, r1
 8002e92:	18db      	adds	r3, r3, r3
 8002e94:	643b      	str	r3, [r7, #64]	; 0x40
 8002e96:	4613      	mov	r3, r2
 8002e98:	eb42 0303 	adc.w	r3, r2, r3
 8002e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ea6:	f7fd f99b 	bl	80001e0 <__aeabi_uldivmod>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4b3b      	ldr	r3, [pc, #236]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2264      	movs	r2, #100	; 0x64
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	1acb      	subs	r3, r1, r3
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ed4:	441c      	add	r4, r3
 8002ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ee0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ee4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ee8:	4642      	mov	r2, r8
 8002eea:	464b      	mov	r3, r9
 8002eec:	1891      	adds	r1, r2, r2
 8002eee:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ef0:	415b      	adcs	r3, r3
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ef8:	4641      	mov	r1, r8
 8002efa:	1851      	adds	r1, r2, r1
 8002efc:	6339      	str	r1, [r7, #48]	; 0x30
 8002efe:	4649      	mov	r1, r9
 8002f00:	414b      	adcs	r3, r1
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f10:	4659      	mov	r1, fp
 8002f12:	00cb      	lsls	r3, r1, #3
 8002f14:	4651      	mov	r1, sl
 8002f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f1a:	4651      	mov	r1, sl
 8002f1c:	00ca      	lsls	r2, r1, #3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	4642      	mov	r2, r8
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f2c:	464b      	mov	r3, r9
 8002f2e:	460a      	mov	r2, r1
 8002f30:	eb42 0303 	adc.w	r3, r2, r3
 8002f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	18db      	adds	r3, r3, r3
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f52:	4613      	mov	r3, r2
 8002f54:	eb42 0303 	adc.w	r3, r2, r3
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f62:	f7fd f93d 	bl	80001e0 <__aeabi_uldivmod>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	2164      	movs	r1, #100	; 0x64
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	3332      	adds	r3, #50	; 0x32
 8002f7e:	4a08      	ldr	r2, [pc, #32]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	f003 0207 	and.w	r2, r3, #7
 8002f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4422      	add	r2, r4
 8002f92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f94:	e105      	b.n	80031a2 <UART_SetConfig+0x4d6>
 8002f96:	bf00      	nop
 8002f98:	40011000 	.word	0x40011000
 8002f9c:	40011400 	.word	0x40011400
 8002fa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fb6:	4642      	mov	r2, r8
 8002fb8:	464b      	mov	r3, r9
 8002fba:	1891      	adds	r1, r2, r2
 8002fbc:	6239      	str	r1, [r7, #32]
 8002fbe:	415b      	adcs	r3, r3
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	1854      	adds	r4, r2, r1
 8002fca:	4649      	mov	r1, r9
 8002fcc:	eb43 0501 	adc.w	r5, r3, r1
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	00eb      	lsls	r3, r5, #3
 8002fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fde:	00e2      	lsls	r2, r4, #3
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	461d      	mov	r5, r3
 8002fe4:	4643      	mov	r3, r8
 8002fe6:	18e3      	adds	r3, r4, r3
 8002fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fec:	464b      	mov	r3, r9
 8002fee:	eb45 0303 	adc.w	r3, r5, r3
 8002ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003002:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003012:	4629      	mov	r1, r5
 8003014:	008b      	lsls	r3, r1, #2
 8003016:	4621      	mov	r1, r4
 8003018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800301c:	4621      	mov	r1, r4
 800301e:	008a      	lsls	r2, r1, #2
 8003020:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003024:	f7fd f8dc 	bl	80001e0 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4b60      	ldr	r3, [pc, #384]	; (80031b0 <UART_SetConfig+0x4e4>)
 800302e:	fba3 2302 	umull	r2, r3, r3, r2
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	011c      	lsls	r4, r3, #4
 8003036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800303a:	2200      	movs	r2, #0
 800303c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003040:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003048:	4642      	mov	r2, r8
 800304a:	464b      	mov	r3, r9
 800304c:	1891      	adds	r1, r2, r2
 800304e:	61b9      	str	r1, [r7, #24]
 8003050:	415b      	adcs	r3, r3
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003058:	4641      	mov	r1, r8
 800305a:	1851      	adds	r1, r2, r1
 800305c:	6139      	str	r1, [r7, #16]
 800305e:	4649      	mov	r1, r9
 8003060:	414b      	adcs	r3, r1
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003070:	4659      	mov	r1, fp
 8003072:	00cb      	lsls	r3, r1, #3
 8003074:	4651      	mov	r1, sl
 8003076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800307a:	4651      	mov	r1, sl
 800307c:	00ca      	lsls	r2, r1, #3
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	4603      	mov	r3, r0
 8003084:	4642      	mov	r2, r8
 8003086:	189b      	adds	r3, r3, r2
 8003088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800308c:	464b      	mov	r3, r9
 800308e:	460a      	mov	r2, r1
 8003090:	eb42 0303 	adc.w	r3, r2, r3
 8003094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80030a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030b0:	4649      	mov	r1, r9
 80030b2:	008b      	lsls	r3, r1, #2
 80030b4:	4641      	mov	r1, r8
 80030b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ba:	4641      	mov	r1, r8
 80030bc:	008a      	lsls	r2, r1, #2
 80030be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030c2:	f7fd f88d 	bl	80001e0 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <UART_SetConfig+0x4e4>)
 80030cc:	fba3 1302 	umull	r1, r3, r3, r2
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	2164      	movs	r1, #100	; 0x64
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	3332      	adds	r3, #50	; 0x32
 80030de:	4a34      	ldr	r2, [pc, #208]	; (80031b0 <UART_SetConfig+0x4e4>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ea:	441c      	add	r4, r3
 80030ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f0:	2200      	movs	r2, #0
 80030f2:	673b      	str	r3, [r7, #112]	; 0x70
 80030f4:	677a      	str	r2, [r7, #116]	; 0x74
 80030f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80030fa:	4642      	mov	r2, r8
 80030fc:	464b      	mov	r3, r9
 80030fe:	1891      	adds	r1, r2, r2
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	415b      	adcs	r3, r3
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800310a:	4641      	mov	r1, r8
 800310c:	1851      	adds	r1, r2, r1
 800310e:	6039      	str	r1, [r7, #0]
 8003110:	4649      	mov	r1, r9
 8003112:	414b      	adcs	r3, r1
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003122:	4659      	mov	r1, fp
 8003124:	00cb      	lsls	r3, r1, #3
 8003126:	4651      	mov	r1, sl
 8003128:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800312c:	4651      	mov	r1, sl
 800312e:	00ca      	lsls	r2, r1, #3
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	4603      	mov	r3, r0
 8003136:	4642      	mov	r2, r8
 8003138:	189b      	adds	r3, r3, r2
 800313a:	66bb      	str	r3, [r7, #104]	; 0x68
 800313c:	464b      	mov	r3, r9
 800313e:	460a      	mov	r2, r1
 8003140:	eb42 0303 	adc.w	r3, r2, r3
 8003144:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	663b      	str	r3, [r7, #96]	; 0x60
 8003150:	667a      	str	r2, [r7, #100]	; 0x64
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800315e:	4649      	mov	r1, r9
 8003160:	008b      	lsls	r3, r1, #2
 8003162:	4641      	mov	r1, r8
 8003164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003168:	4641      	mov	r1, r8
 800316a:	008a      	lsls	r2, r1, #2
 800316c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003170:	f7fd f836 	bl	80001e0 <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <UART_SetConfig+0x4e4>)
 800317a:	fba3 1302 	umull	r1, r3, r3, r2
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2164      	movs	r1, #100	; 0x64
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	3332      	adds	r3, #50	; 0x32
 800318c:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <UART_SetConfig+0x4e4>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	f003 020f 	and.w	r2, r3, #15
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4422      	add	r2, r4
 80031a0:	609a      	str	r2, [r3, #8]
}
 80031a2:	bf00      	nop
 80031a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031a8:	46bd      	mov	sp, r7
 80031aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ae:	bf00      	nop
 80031b0:	51eb851f 	.word	0x51eb851f

080031b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <SysTick_Handler+0x1c>)
 80031ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80031bc:	f001 fbf2 	bl	80049a4 <xTaskGetSchedulerState>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d001      	beq.n	80031ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80031c6:	f002 fab7 	bl	8005738 <xPortSysTickHandler>
  }
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	e000e010 	.word	0xe000e010

080031d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4a07      	ldr	r2, [pc, #28]	; (8003200 <vApplicationGetIdleTaskMemory+0x2c>)
 80031e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4a06      	ldr	r2, [pc, #24]	; (8003204 <vApplicationGetIdleTaskMemory+0x30>)
 80031ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2280      	movs	r2, #128	; 0x80
 80031f0:	601a      	str	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000124 	.word	0x20000124
 8003204:	200001e0 	.word	0x200001e0

08003208 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a07      	ldr	r2, [pc, #28]	; (8003234 <vApplicationGetTimerTaskMemory+0x2c>)
 8003218:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4a06      	ldr	r2, [pc, #24]	; (8003238 <vApplicationGetTimerTaskMemory+0x30>)
 800321e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003226:	601a      	str	r2, [r3, #0]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	200003e0 	.word	0x200003e0
 8003238:	2000049c 	.word	0x2000049c

0800323c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f103 0208 	add.w	r2, r3, #8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f04f 32ff 	mov.w	r2, #4294967295
 8003254:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f103 0208 	add.w	r2, r3, #8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f103 0208 	add.w	r2, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003296:	b480      	push	{r7}
 8003298:	b085      	sub	sp, #20
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	601a      	str	r2, [r3, #0]
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d103      	bne.n	80032fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e00c      	b.n	8003318 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3308      	adds	r3, #8
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	e002      	b.n	800330c <vListInsert+0x2e>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	d2f6      	bcs.n	8003306 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	601a      	str	r2, [r3, #0]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6892      	ldr	r2, [r2, #8]
 8003366:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6852      	ldr	r2, [r2, #4]
 8003370:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	d103      	bne.n	8003384 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1e5a      	subs	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033ca:	bf00      	nop
 80033cc:	e7fe      	b.n	80033cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033ce:	f002 f921 	bl	8005614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033da:	68f9      	ldr	r1, [r7, #12]
 80033dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	441a      	add	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	3b01      	subs	r3, #1
 8003400:	68f9      	ldr	r1, [r7, #12]
 8003402:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	441a      	add	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	22ff      	movs	r2, #255	; 0xff
 8003412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	22ff      	movs	r2, #255	; 0xff
 800341a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d114      	bne.n	800344e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01a      	beq.n	8003462 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3310      	adds	r3, #16
 8003430:	4618      	mov	r0, r3
 8003432:	f001 f8f5 	bl	8004620 <xTaskRemoveFromEventList>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d012      	beq.n	8003462 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <xQueueGenericReset+0xcc>)
 800343e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	e009      	b.n	8003462 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3310      	adds	r3, #16
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fef2 	bl	800323c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3324      	adds	r3, #36	; 0x24
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff feed 	bl	800323c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003462:	f002 f907 	bl	8005674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003466:	2301      	movs	r3, #1
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	e000ed04 	.word	0xe000ed04

08003474 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08e      	sub	sp, #56	; 0x38
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034b6:	bf00      	nop
 80034b8:	e7fe      	b.n	80034b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <xQueueGenericCreateStatic+0x52>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <xQueueGenericCreateStatic+0x56>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <xQueueGenericCreateStatic+0x58>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	623b      	str	r3, [r7, #32]
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <xQueueGenericCreateStatic+0x7e>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <xQueueGenericCreateStatic+0x82>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <xQueueGenericCreateStatic+0x84>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10a      	bne.n	8003512 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	61fb      	str	r3, [r7, #28]
}
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003512:	2350      	movs	r3, #80	; 0x50
 8003514:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b50      	cmp	r3, #80	; 0x50
 800351a:	d00a      	beq.n	8003532 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	61bb      	str	r3, [r7, #24]
}
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003532:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003546:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	4613      	mov	r3, r2
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f805 	bl	8003564 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800355c:	4618      	mov	r0, r3
 800355e:	3730      	adds	r7, #48	; 0x30
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e002      	b.n	8003586 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003592:	2101      	movs	r1, #1
 8003594:	69b8      	ldr	r0, [r7, #24]
 8003596:	f7ff ff05 	bl	80033a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08e      	sub	sp, #56	; 0x38
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035ba:	2300      	movs	r3, #0
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <xQueueGenericSend+0x32>
	__asm volatile
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035da:	bf00      	nop
 80035dc:	e7fe      	b.n	80035dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <xQueueGenericSend+0x40>
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <xQueueGenericSend+0x44>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <xQueueGenericSend+0x46>
 80035f0:	2300      	movs	r3, #0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <xQueueGenericSend+0x60>
	__asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003608:	bf00      	nop
 800360a:	e7fe      	b.n	800360a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d103      	bne.n	800361a <xQueueGenericSend+0x6e>
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <xQueueGenericSend+0x72>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <xQueueGenericSend+0x74>
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <xQueueGenericSend+0x8e>
	__asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	623b      	str	r3, [r7, #32]
}
 8003636:	bf00      	nop
 8003638:	e7fe      	b.n	8003638 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800363a:	f001 f9b3 	bl	80049a4 <xTaskGetSchedulerState>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <xQueueGenericSend+0x9e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <xQueueGenericSend+0xa2>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <xQueueGenericSend+0xa4>
 800364e:	2300      	movs	r3, #0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <xQueueGenericSend+0xbe>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	61fb      	str	r3, [r7, #28]
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800366a:	f001 ffd3 	bl	8005614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <xQueueGenericSend+0xd4>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d129      	bne.n	80036d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003686:	f000 fa0b 	bl	8003aa0 <prvCopyDataToQueue>
 800368a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	2b00      	cmp	r3, #0
 8003692:	d010      	beq.n	80036b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003696:	3324      	adds	r3, #36	; 0x24
 8003698:	4618      	mov	r0, r3
 800369a:	f000 ffc1 	bl	8004620 <xTaskRemoveFromEventList>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d013      	beq.n	80036cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036a4:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <xQueueGenericSend+0x1f8>)
 80036a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	e00a      	b.n	80036cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036bc:	4b39      	ldr	r3, [pc, #228]	; (80037a4 <xQueueGenericSend+0x1f8>)
 80036be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036cc:	f001 ffd2 	bl	8005674 <vPortExitCritical>
				return pdPASS;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e063      	b.n	800379c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036da:	f001 ffcb 	bl	8005674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	e05c      	b.n	800379c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d106      	bne.n	80036f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036e8:	f107 0314 	add.w	r3, r7, #20
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fffb 	bl	80046e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036f2:	2301      	movs	r3, #1
 80036f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036f6:	f001 ffbd 	bl	8005674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036fa:	f000 fd67 	bl	80041cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036fe:	f001 ff89 	bl	8005614 <vPortEnterCritical>
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003708:	b25b      	sxtb	r3, r3
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d103      	bne.n	8003718 <xQueueGenericSend+0x16c>
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800371e:	b25b      	sxtb	r3, r3
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d103      	bne.n	800372e <xQueueGenericSend+0x182>
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800372e:	f001 ffa1 	bl	8005674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003732:	1d3a      	adds	r2, r7, #4
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f000 ffea 	bl	8004714 <xTaskCheckForTimeOut>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d124      	bne.n	8003790 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003748:	f000 faa2 	bl	8003c90 <prvIsQueueFull>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d018      	beq.n	8003784 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	3310      	adds	r3, #16
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f000 ff10 	bl	8004580 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003762:	f000 fa2d 	bl	8003bc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003766:	f000 fd3f 	bl	80041e8 <xTaskResumeAll>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	f47f af7c 	bne.w	800366a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <xQueueGenericSend+0x1f8>)
 8003774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	e772      	b.n	800366a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003786:	f000 fa1b 	bl	8003bc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800378a:	f000 fd2d 	bl	80041e8 <xTaskResumeAll>
 800378e:	e76c      	b.n	800366a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003792:	f000 fa15 	bl	8003bc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003796:	f000 fd27 	bl	80041e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800379a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800379c:	4618      	mov	r0, r3
 800379e:	3738      	adds	r7, #56	; 0x38
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	e000ed04 	.word	0xe000ed04

080037a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b090      	sub	sp, #64	; 0x40
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <xQueueGenericSendFromISR+0x3c>
 80037dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <xQueueGenericSendFromISR+0x40>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <xQueueGenericSendFromISR+0x42>
 80037e8:	2300      	movs	r3, #0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10a      	bne.n	8003804 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003800:	bf00      	nop
 8003802:	e7fe      	b.n	8003802 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d103      	bne.n	8003812 <xQueueGenericSendFromISR+0x6a>
 800380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <xQueueGenericSendFromISR+0x6e>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <xQueueGenericSendFromISR+0x70>
 8003816:	2300      	movs	r3, #0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	623b      	str	r3, [r7, #32]
}
 800382e:	bf00      	nop
 8003830:	e7fe      	b.n	8003830 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003832:	f001 ffd1 	bl	80057d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003836:	f3ef 8211 	mrs	r2, BASEPRI
 800383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	61fa      	str	r2, [r7, #28]
 800384c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800384e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <xQueueGenericSendFromISR+0xbc>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d12f      	bne.n	80038c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800386a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800387a:	f000 f911 	bl	8003aa0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800387e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d112      	bne.n	80038ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	2b00      	cmp	r3, #0
 800388e:	d016      	beq.n	80038be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	3324      	adds	r3, #36	; 0x24
 8003894:	4618      	mov	r0, r3
 8003896:	f000 fec3 	bl	8004620 <xTaskRemoveFromEventList>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00e      	beq.n	80038be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00b      	beq.n	80038be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e007      	b.n	80038be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038b2:	3301      	adds	r3, #1
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	b25a      	sxtb	r2, r3
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038be:	2301      	movs	r3, #1
 80038c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80038c2:	e001      	b.n	80038c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3740      	adds	r7, #64	; 0x40
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	; 0x30
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10a      	bne.n	8003910 <xQueueReceive+0x30>
	__asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	623b      	str	r3, [r7, #32]
}
 800390c:	bf00      	nop
 800390e:	e7fe      	b.n	800390e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <xQueueReceive+0x3e>
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <xQueueReceive+0x42>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <xQueueReceive+0x44>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <xQueueReceive+0x5e>
	__asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	61fb      	str	r3, [r7, #28]
}
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800393e:	f001 f831 	bl	80049a4 <xTaskGetSchedulerState>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <xQueueReceive+0x6e>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <xQueueReceive+0x72>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <xQueueReceive+0x74>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <xQueueReceive+0x8e>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	61bb      	str	r3, [r7, #24]
}
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800396e:	f001 fe51 	bl	8005614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01f      	beq.n	80039be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003982:	f000 f8f7 	bl	8003b74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	1e5a      	subs	r2, r3, #1
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00f      	beq.n	80039b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	3310      	adds	r3, #16
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fe40 	bl	8004620 <xTaskRemoveFromEventList>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039a6:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <xQueueReceive+0x1bc>)
 80039a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039b6:	f001 fe5d 	bl	8005674 <vPortExitCritical>
				return pdPASS;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e069      	b.n	8003a92 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d103      	bne.n	80039cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039c4:	f001 fe56 	bl	8005674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e062      	b.n	8003a92 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039d2:	f107 0310 	add.w	r3, r7, #16
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fe86 	bl	80046e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039dc:	2301      	movs	r3, #1
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039e0:	f001 fe48 	bl	8005674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039e4:	f000 fbf2 	bl	80041cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039e8:	f001 fe14 	bl	8005614 <vPortEnterCritical>
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d103      	bne.n	8003a02 <xQueueReceive+0x122>
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a08:	b25b      	sxtb	r3, r3
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d103      	bne.n	8003a18 <xQueueReceive+0x138>
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a18:	f001 fe2c 	bl	8005674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a1c:	1d3a      	adds	r2, r7, #4
 8003a1e:	f107 0310 	add.w	r3, r7, #16
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fe75 	bl	8004714 <xTaskCheckForTimeOut>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d123      	bne.n	8003a78 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a32:	f000 f917 	bl	8003c64 <prvIsQueueEmpty>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d017      	beq.n	8003a6c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	3324      	adds	r3, #36	; 0x24
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4611      	mov	r1, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fd9b 	bl	8004580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a4c:	f000 f8b8 	bl	8003bc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a50:	f000 fbca 	bl	80041e8 <xTaskResumeAll>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d189      	bne.n	800396e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a5a:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <xQueueReceive+0x1bc>)
 8003a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	e780      	b.n	800396e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a6e:	f000 f8a7 	bl	8003bc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a72:	f000 fbb9 	bl	80041e8 <xTaskResumeAll>
 8003a76:	e77a      	b.n	800396e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a7a:	f000 f8a1 	bl	8003bc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a7e:	f000 fbb3 	bl	80041e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a84:	f000 f8ee 	bl	8003c64 <prvIsQueueEmpty>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f43f af6f 	beq.w	800396e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3730      	adds	r7, #48	; 0x30
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	e000ed04 	.word	0xe000ed04

08003aa0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10d      	bne.n	8003ada <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d14d      	bne.n	8003b62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 ff88 	bl	80049e0 <xTaskPriorityDisinherit>
 8003ad0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	e043      	b.n	8003b62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d119      	bne.n	8003b14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6858      	ldr	r0, [r3, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	f002 f8c4 	bl	8005c78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	441a      	add	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d32b      	bcc.n	8003b62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	e026      	b.n	8003b62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68d8      	ldr	r0, [r3, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	f002 f8aa 	bl	8005c78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	425b      	negs	r3, r3
 8003b2e:	441a      	add	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d207      	bcs.n	8003b50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	425b      	negs	r3, r3
 8003b4a:	441a      	add	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d105      	bne.n	8003b62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b6a:	697b      	ldr	r3, [r7, #20]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d018      	beq.n	8003bb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	441a      	add	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d303      	bcc.n	8003ba8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68d9      	ldr	r1, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	6838      	ldr	r0, [r7, #0]
 8003bb4:	f002 f860 	bl	8005c78 <memcpy>
	}
}
 8003bb8:	bf00      	nop
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003bc8:	f001 fd24 	bl	8005614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bd4:	e011      	b.n	8003bfa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d012      	beq.n	8003c04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3324      	adds	r3, #36	; 0x24
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fd1c 	bl	8004620 <xTaskRemoveFromEventList>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003bee:	f000 fdf3 	bl	80047d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	dce9      	bgt.n	8003bd6 <prvUnlockQueue+0x16>
 8003c02:	e000      	b.n	8003c06 <prvUnlockQueue+0x46>
					break;
 8003c04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	22ff      	movs	r2, #255	; 0xff
 8003c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c0e:	f001 fd31 	bl	8005674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c12:	f001 fcff 	bl	8005614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c1e:	e011      	b.n	8003c44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d012      	beq.n	8003c4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3310      	adds	r3, #16
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fcf7 	bl	8004620 <xTaskRemoveFromEventList>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c38:	f000 fdce 	bl	80047d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c3c:	7bbb      	ldrb	r3, [r7, #14]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	dce9      	bgt.n	8003c20 <prvUnlockQueue+0x60>
 8003c4c:	e000      	b.n	8003c50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	22ff      	movs	r2, #255	; 0xff
 8003c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c58:	f001 fd0c 	bl	8005674 <vPortExitCritical>
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c6c:	f001 fcd2 	bl	8005614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e001      	b.n	8003c82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c82:	f001 fcf7 	bl	8005674 <vPortExitCritical>

	return xReturn;
 8003c86:	68fb      	ldr	r3, [r7, #12]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c98:	f001 fcbc 	bl	8005614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d102      	bne.n	8003cae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	e001      	b.n	8003cb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cb2:	f001 fcdf 	bl	8005674 <vPortExitCritical>

	return xReturn;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e014      	b.n	8003cfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cd0:	4a0f      	ldr	r2, [pc, #60]	; (8003d10 <vQueueAddToRegistry+0x50>)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003cdc:	490c      	ldr	r1, [pc, #48]	; (8003d10 <vQueueAddToRegistry+0x50>)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <vQueueAddToRegistry+0x50>)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003cf2:	e006      	b.n	8003d02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b07      	cmp	r3, #7
 8003cfe:	d9e7      	bls.n	8003cd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	2000089c 	.word	0x2000089c

08003d14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d24:	f001 fc76 	bl	8005614 <vPortEnterCritical>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d2e:	b25b      	sxtb	r3, r3
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d103      	bne.n	8003d3e <vQueueWaitForMessageRestricted+0x2a>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d103      	bne.n	8003d54 <vQueueWaitForMessageRestricted+0x40>
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d54:	f001 fc8e 	bl	8005674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d106      	bne.n	8003d6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3324      	adds	r3, #36	; 0x24
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fc2d 	bl	80045c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d6e:	6978      	ldr	r0, [r7, #20]
 8003d70:	f7ff ff26 	bl	8003bc0 <prvUnlockQueue>
	}
 8003d74:	bf00      	nop
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08e      	sub	sp, #56	; 0x38
 8003d80:	af04      	add	r7, sp, #16
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	623b      	str	r3, [r7, #32]
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	61fb      	str	r3, [r7, #28]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003dc2:	23bc      	movs	r3, #188	; 0xbc
 8003dc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2bbc      	cmp	r3, #188	; 0xbc
 8003dca:	d00a      	beq.n	8003de2 <xTaskCreateStatic+0x66>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	61bb      	str	r3, [r7, #24]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003de2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d01e      	beq.n	8003e28 <xTaskCreateStatic+0xac>
 8003dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01b      	beq.n	8003e28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e02:	2300      	movs	r3, #0
 8003e04:	9303      	str	r3, [sp, #12]
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	9302      	str	r3, [sp, #8]
 8003e0a:	f107 0314 	add.w	r3, r7, #20
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f850 	bl	8003ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e22:	f000 f8f3 	bl	800400c <prvAddNewTaskToReadyList>
 8003e26:	e001      	b.n	8003e2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e2c:	697b      	ldr	r3, [r7, #20]
	}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3728      	adds	r7, #40	; 0x28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b08c      	sub	sp, #48	; 0x30
 8003e3a:	af04      	add	r7, sp, #16
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fd04 	bl	8005858 <pvPortMalloc>
 8003e50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00e      	beq.n	8003e76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e58:	20bc      	movs	r0, #188	; 0xbc
 8003e5a:	f001 fcfd 	bl	8005858 <pvPortMalloc>
 8003e5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8003e6c:	e005      	b.n	8003e7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e6e:	6978      	ldr	r0, [r7, #20]
 8003e70:	f001 fdbe 	bl	80059f0 <vPortFree>
 8003e74:	e001      	b.n	8003e7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d017      	beq.n	8003eb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9303      	str	r3, [sp, #12]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	9302      	str	r3, [sp, #8]
 8003e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e94:	9301      	str	r3, [sp, #4]
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f80e 	bl	8003ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ea4:	69f8      	ldr	r0, [r7, #28]
 8003ea6:	f000 f8b1 	bl	800400c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	e002      	b.n	8003eb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003eb6:	69bb      	ldr	r3, [r7, #24]
	}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	21a5      	movs	r1, #165	; 0xa5
 8003eda:	f001 fedb 	bl	8005c94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	f023 0307 	bic.w	r3, r3, #7
 8003ef6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	617b      	str	r3, [r7, #20]
}
 8003f14:	bf00      	nop
 8003f16:	e7fe      	b.n	8003f16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01f      	beq.n	8003f5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	e012      	b.n	8003f4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	4413      	add	r3, r2
 8003f2a:	7819      	ldrb	r1, [r3, #0]
 8003f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	3334      	adds	r3, #52	; 0x34
 8003f34:	460a      	mov	r2, r1
 8003f36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d006      	beq.n	8003f52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	3301      	adds	r3, #1
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	2b0f      	cmp	r3, #15
 8003f4e:	d9e9      	bls.n	8003f24 <prvInitialiseNewTask+0x64>
 8003f50:	e000      	b.n	8003f54 <prvInitialiseNewTask+0x94>
			{
				break;
 8003f52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f5c:	e003      	b.n	8003f66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	2b37      	cmp	r3, #55	; 0x37
 8003f6a:	d901      	bls.n	8003f70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f6c:	2337      	movs	r3, #55	; 0x37
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	2200      	movs	r2, #0
 8003f80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	3304      	adds	r3, #4
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff f978 	bl	800327c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	3318      	adds	r3, #24
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff f973 	bl	800327c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbe:	3354      	adds	r3, #84	; 0x54
 8003fc0:	2260      	movs	r2, #96	; 0x60
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 fe65 	bl	8005c94 <memset>
 8003fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fcc:	4a0c      	ldr	r2, [pc, #48]	; (8004000 <prvInitialiseNewTask+0x140>)
 8003fce:	659a      	str	r2, [r3, #88]	; 0x58
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	4a0c      	ldr	r2, [pc, #48]	; (8004004 <prvInitialiseNewTask+0x144>)
 8003fd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	4a0b      	ldr	r2, [pc, #44]	; (8004008 <prvInitialiseNewTask+0x148>)
 8003fda:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	68f9      	ldr	r1, [r7, #12]
 8003fe0:	69b8      	ldr	r0, [r7, #24]
 8003fe2:	f001 f9ed 	bl	80053c0 <pxPortInitialiseStack>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ff6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ff8:	bf00      	nop
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	08005ecc 	.word	0x08005ecc
 8004004:	08005eec 	.word	0x08005eec
 8004008:	08005eac 	.word	0x08005eac

0800400c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004014:	f001 fafe 	bl	8005614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004018:	4b2d      	ldr	r3, [pc, #180]	; (80040d0 <prvAddNewTaskToReadyList+0xc4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3301      	adds	r3, #1
 800401e:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <prvAddNewTaskToReadyList+0xc4>)
 8004020:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004022:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <prvAddNewTaskToReadyList+0xc8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800402a:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <prvAddNewTaskToReadyList+0xc8>)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <prvAddNewTaskToReadyList+0xc4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d110      	bne.n	800405a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004038:	f000 fbf2 	bl	8004820 <prvInitialiseTaskLists>
 800403c:	e00d      	b.n	800405a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800403e:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <prvAddNewTaskToReadyList+0xcc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004046:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <prvAddNewTaskToReadyList+0xc8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	429a      	cmp	r2, r3
 8004052:	d802      	bhi.n	800405a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004054:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <prvAddNewTaskToReadyList+0xc8>)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <prvAddNewTaskToReadyList+0xd0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3301      	adds	r3, #1
 8004060:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <prvAddNewTaskToReadyList+0xd0>)
 8004062:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004064:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <prvAddNewTaskToReadyList+0xd0>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <prvAddNewTaskToReadyList+0xd4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d903      	bls.n	8004080 <prvAddNewTaskToReadyList+0x74>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <prvAddNewTaskToReadyList+0xd4>)
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <prvAddNewTaskToReadyList+0xd8>)
 800408e:	441a      	add	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f7ff f8fd 	bl	8003296 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800409c:	f001 faea 	bl	8005674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040a0:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <prvAddNewTaskToReadyList+0xcc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00e      	beq.n	80040c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <prvAddNewTaskToReadyList+0xc8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d207      	bcs.n	80040c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <prvAddNewTaskToReadyList+0xdc>)
 80040b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000db0 	.word	0x20000db0
 80040d4:	200008dc 	.word	0x200008dc
 80040d8:	20000dbc 	.word	0x20000dbc
 80040dc:	20000dcc 	.word	0x20000dcc
 80040e0:	20000db8 	.word	0x20000db8
 80040e4:	200008e0 	.word	0x200008e0
 80040e8:	e000ed04 	.word	0xe000ed04

080040ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040fa:	463a      	mov	r2, r7
 80040fc:	1d39      	adds	r1, r7, #4
 80040fe:	f107 0308 	add.w	r3, r7, #8
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff f866 	bl	80031d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004108:	6839      	ldr	r1, [r7, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	9202      	str	r2, [sp, #8]
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	2300      	movs	r3, #0
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	2300      	movs	r3, #0
 8004118:	460a      	mov	r2, r1
 800411a:	4924      	ldr	r1, [pc, #144]	; (80041ac <vTaskStartScheduler+0xc0>)
 800411c:	4824      	ldr	r0, [pc, #144]	; (80041b0 <vTaskStartScheduler+0xc4>)
 800411e:	f7ff fe2d 	bl	8003d7c <xTaskCreateStatic>
 8004122:	4603      	mov	r3, r0
 8004124:	4a23      	ldr	r2, [pc, #140]	; (80041b4 <vTaskStartScheduler+0xc8>)
 8004126:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004128:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <vTaskStartScheduler+0xc8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004130:	2301      	movs	r3, #1
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e001      	b.n	800413a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d102      	bne.n	8004146 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004140:	f000 fdf0 	bl	8004d24 <xTimerCreateTimerTask>
 8004144:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d11b      	bne.n	8004184 <vTaskStartScheduler+0x98>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	613b      	str	r3, [r7, #16]
}
 800415e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004160:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <vTaskStartScheduler+0xcc>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3354      	adds	r3, #84	; 0x54
 8004166:	4a15      	ldr	r2, [pc, #84]	; (80041bc <vTaskStartScheduler+0xd0>)
 8004168:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800416a:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <vTaskStartScheduler+0xd4>)
 800416c:	f04f 32ff 	mov.w	r2, #4294967295
 8004170:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004172:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <vTaskStartScheduler+0xd8>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004178:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <vTaskStartScheduler+0xdc>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800417e:	f001 f9a7 	bl	80054d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004182:	e00e      	b.n	80041a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418a:	d10a      	bne.n	80041a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	60fb      	str	r3, [r7, #12]
}
 800419e:	bf00      	nop
 80041a0:	e7fe      	b.n	80041a0 <vTaskStartScheduler+0xb4>
}
 80041a2:	bf00      	nop
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	08005e7c 	.word	0x08005e7c
 80041b0:	080047f1 	.word	0x080047f1
 80041b4:	20000dd4 	.word	0x20000dd4
 80041b8:	200008dc 	.word	0x200008dc
 80041bc:	20000010 	.word	0x20000010
 80041c0:	20000dd0 	.word	0x20000dd0
 80041c4:	20000dbc 	.word	0x20000dbc
 80041c8:	20000db4 	.word	0x20000db4

080041cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80041d0:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <vTaskSuspendAll+0x18>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3301      	adds	r3, #1
 80041d6:	4a03      	ldr	r2, [pc, #12]	; (80041e4 <vTaskSuspendAll+0x18>)
 80041d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80041da:	bf00      	nop
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	20000dd8 	.word	0x20000dd8

080041e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041f6:	4b42      	ldr	r3, [pc, #264]	; (8004300 <xTaskResumeAll+0x118>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10a      	bne.n	8004214 <xTaskResumeAll+0x2c>
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	603b      	str	r3, [r7, #0]
}
 8004210:	bf00      	nop
 8004212:	e7fe      	b.n	8004212 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004214:	f001 f9fe 	bl	8005614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004218:	4b39      	ldr	r3, [pc, #228]	; (8004300 <xTaskResumeAll+0x118>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3b01      	subs	r3, #1
 800421e:	4a38      	ldr	r2, [pc, #224]	; (8004300 <xTaskResumeAll+0x118>)
 8004220:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004222:	4b37      	ldr	r3, [pc, #220]	; (8004300 <xTaskResumeAll+0x118>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d162      	bne.n	80042f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800422a:	4b36      	ldr	r3, [pc, #216]	; (8004304 <xTaskResumeAll+0x11c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d05e      	beq.n	80042f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004232:	e02f      	b.n	8004294 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004234:	4b34      	ldr	r3, [pc, #208]	; (8004308 <xTaskResumeAll+0x120>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3318      	adds	r3, #24
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff f885 	bl	8003350 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3304      	adds	r3, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff f880 	bl	8003350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	4b2d      	ldr	r3, [pc, #180]	; (800430c <xTaskResumeAll+0x124>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d903      	bls.n	8004264 <xTaskResumeAll+0x7c>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4a2a      	ldr	r2, [pc, #168]	; (800430c <xTaskResumeAll+0x124>)
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4a27      	ldr	r2, [pc, #156]	; (8004310 <xTaskResumeAll+0x128>)
 8004272:	441a      	add	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f7ff f80b 	bl	8003296 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004284:	4b23      	ldr	r3, [pc, #140]	; (8004314 <xTaskResumeAll+0x12c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	429a      	cmp	r2, r3
 800428c:	d302      	bcc.n	8004294 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800428e:	4b22      	ldr	r3, [pc, #136]	; (8004318 <xTaskResumeAll+0x130>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004294:	4b1c      	ldr	r3, [pc, #112]	; (8004308 <xTaskResumeAll+0x120>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1cb      	bne.n	8004234 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042a2:	f000 fb5f 	bl	8004964 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80042a6:	4b1d      	ldr	r3, [pc, #116]	; (800431c <xTaskResumeAll+0x134>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d010      	beq.n	80042d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042b2:	f000 f847 	bl	8004344 <xTaskIncrementTick>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042bc:	4b16      	ldr	r3, [pc, #88]	; (8004318 <xTaskResumeAll+0x130>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f1      	bne.n	80042b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80042ce:	4b13      	ldr	r3, [pc, #76]	; (800431c <xTaskResumeAll+0x134>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042d4:	4b10      	ldr	r3, [pc, #64]	; (8004318 <xTaskResumeAll+0x130>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d009      	beq.n	80042f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042dc:	2301      	movs	r3, #1
 80042de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042e0:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <xTaskResumeAll+0x138>)
 80042e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042f0:	f001 f9c0 	bl	8005674 <vPortExitCritical>

	return xAlreadyYielded;
 80042f4:	68bb      	ldr	r3, [r7, #8]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000dd8 	.word	0x20000dd8
 8004304:	20000db0 	.word	0x20000db0
 8004308:	20000d70 	.word	0x20000d70
 800430c:	20000db8 	.word	0x20000db8
 8004310:	200008e0 	.word	0x200008e0
 8004314:	200008dc 	.word	0x200008dc
 8004318:	20000dc4 	.word	0x20000dc4
 800431c:	20000dc0 	.word	0x20000dc0
 8004320:	e000ed04 	.word	0xe000ed04

08004324 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <xTaskGetTickCount+0x1c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004330:	687b      	ldr	r3, [r7, #4]
}
 8004332:	4618      	mov	r0, r3
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	20000db4 	.word	0x20000db4

08004344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800434e:	4b4f      	ldr	r3, [pc, #316]	; (800448c <xTaskIncrementTick+0x148>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f040 808f 	bne.w	8004476 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004358:	4b4d      	ldr	r3, [pc, #308]	; (8004490 <xTaskIncrementTick+0x14c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3301      	adds	r3, #1
 800435e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004360:	4a4b      	ldr	r2, [pc, #300]	; (8004490 <xTaskIncrementTick+0x14c>)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d120      	bne.n	80043ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800436c:	4b49      	ldr	r3, [pc, #292]	; (8004494 <xTaskIncrementTick+0x150>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <xTaskIncrementTick+0x48>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	603b      	str	r3, [r7, #0]
}
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <xTaskIncrementTick+0x46>
 800438c:	4b41      	ldr	r3, [pc, #260]	; (8004494 <xTaskIncrementTick+0x150>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	4b41      	ldr	r3, [pc, #260]	; (8004498 <xTaskIncrementTick+0x154>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a3f      	ldr	r2, [pc, #252]	; (8004494 <xTaskIncrementTick+0x150>)
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	4a3f      	ldr	r2, [pc, #252]	; (8004498 <xTaskIncrementTick+0x154>)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	4b3e      	ldr	r3, [pc, #248]	; (800449c <xTaskIncrementTick+0x158>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3301      	adds	r3, #1
 80043a6:	4a3d      	ldr	r2, [pc, #244]	; (800449c <xTaskIncrementTick+0x158>)
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	f000 fadb 	bl	8004964 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043ae:	4b3c      	ldr	r3, [pc, #240]	; (80044a0 <xTaskIncrementTick+0x15c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d349      	bcc.n	800444c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043b8:	4b36      	ldr	r3, [pc, #216]	; (8004494 <xTaskIncrementTick+0x150>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d104      	bne.n	80043cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043c2:	4b37      	ldr	r3, [pc, #220]	; (80044a0 <xTaskIncrementTick+0x15c>)
 80043c4:	f04f 32ff 	mov.w	r2, #4294967295
 80043c8:	601a      	str	r2, [r3, #0]
					break;
 80043ca:	e03f      	b.n	800444c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043cc:	4b31      	ldr	r3, [pc, #196]	; (8004494 <xTaskIncrementTick+0x150>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d203      	bcs.n	80043ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043e4:	4a2e      	ldr	r2, [pc, #184]	; (80044a0 <xTaskIncrementTick+0x15c>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043ea:	e02f      	b.n	800444c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe ffad 	bl	8003350 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	3318      	adds	r3, #24
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe ffa4 	bl	8003350 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <xTaskIncrementTick+0x160>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d903      	bls.n	800441c <xTaskIncrementTick+0xd8>
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	4a22      	ldr	r2, [pc, #136]	; (80044a4 <xTaskIncrementTick+0x160>)
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4a1f      	ldr	r2, [pc, #124]	; (80044a8 <xTaskIncrementTick+0x164>)
 800442a:	441a      	add	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f7fe ff2f 	bl	8003296 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <xTaskIncrementTick+0x168>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	429a      	cmp	r2, r3
 8004444:	d3b8      	bcc.n	80043b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004446:	2301      	movs	r3, #1
 8004448:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800444a:	e7b5      	b.n	80043b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800444c:	4b17      	ldr	r3, [pc, #92]	; (80044ac <xTaskIncrementTick+0x168>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004452:	4915      	ldr	r1, [pc, #84]	; (80044a8 <xTaskIncrementTick+0x164>)
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d901      	bls.n	8004468 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004464:	2301      	movs	r3, #1
 8004466:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <xTaskIncrementTick+0x16c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004470:	2301      	movs	r3, #1
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	e004      	b.n	8004480 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004476:	4b0f      	ldr	r3, [pc, #60]	; (80044b4 <xTaskIncrementTick+0x170>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3301      	adds	r3, #1
 800447c:	4a0d      	ldr	r2, [pc, #52]	; (80044b4 <xTaskIncrementTick+0x170>)
 800447e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004480:	697b      	ldr	r3, [r7, #20]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20000dd8 	.word	0x20000dd8
 8004490:	20000db4 	.word	0x20000db4
 8004494:	20000d68 	.word	0x20000d68
 8004498:	20000d6c 	.word	0x20000d6c
 800449c:	20000dc8 	.word	0x20000dc8
 80044a0:	20000dd0 	.word	0x20000dd0
 80044a4:	20000db8 	.word	0x20000db8
 80044a8:	200008e0 	.word	0x200008e0
 80044ac:	200008dc 	.word	0x200008dc
 80044b0:	20000dc4 	.word	0x20000dc4
 80044b4:	20000dc0 	.word	0x20000dc0

080044b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044be:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <vTaskSwitchContext+0xb0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044c6:	4b29      	ldr	r3, [pc, #164]	; (800456c <vTaskSwitchContext+0xb4>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044cc:	e046      	b.n	800455c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80044ce:	4b27      	ldr	r3, [pc, #156]	; (800456c <vTaskSwitchContext+0xb4>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d4:	4b26      	ldr	r3, [pc, #152]	; (8004570 <vTaskSwitchContext+0xb8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e010      	b.n	80044fe <vTaskSwitchContext+0x46>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	607b      	str	r3, [r7, #4]
}
 80044f4:	bf00      	nop
 80044f6:	e7fe      	b.n	80044f6 <vTaskSwitchContext+0x3e>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	491d      	ldr	r1, [pc, #116]	; (8004574 <vTaskSwitchContext+0xbc>)
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0e4      	beq.n	80044dc <vTaskSwitchContext+0x24>
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4a15      	ldr	r2, [pc, #84]	; (8004574 <vTaskSwitchContext+0xbc>)
 800451e:	4413      	add	r3, r2
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	3308      	adds	r3, #8
 8004534:	429a      	cmp	r2, r3
 8004536:	d104      	bne.n	8004542 <vTaskSwitchContext+0x8a>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a0b      	ldr	r2, [pc, #44]	; (8004578 <vTaskSwitchContext+0xc0>)
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4a08      	ldr	r2, [pc, #32]	; (8004570 <vTaskSwitchContext+0xb8>)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <vTaskSwitchContext+0xc0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3354      	adds	r3, #84	; 0x54
 8004558:	4a08      	ldr	r2, [pc, #32]	; (800457c <vTaskSwitchContext+0xc4>)
 800455a:	6013      	str	r3, [r2, #0]
}
 800455c:	bf00      	nop
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	20000dd8 	.word	0x20000dd8
 800456c:	20000dc4 	.word	0x20000dc4
 8004570:	20000db8 	.word	0x20000db8
 8004574:	200008e0 	.word	0x200008e0
 8004578:	200008dc 	.word	0x200008dc
 800457c:	20000010 	.word	0x20000010

08004580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	60fb      	str	r3, [r7, #12]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045a6:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <vTaskPlaceOnEventList+0x44>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3318      	adds	r3, #24
 80045ac:	4619      	mov	r1, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fe fe95 	bl	80032de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045b4:	2101      	movs	r1, #1
 80045b6:	6838      	ldr	r0, [r7, #0]
 80045b8:	f000 fb60 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
}
 80045bc:	bf00      	nop
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	200008dc 	.word	0x200008dc

080045c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	617b      	str	r3, [r7, #20]
}
 80045ec:	bf00      	nop
 80045ee:	e7fe      	b.n	80045ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <vTaskPlaceOnEventListRestricted+0x54>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3318      	adds	r3, #24
 80045f6:	4619      	mov	r1, r3
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7fe fe4c 	bl	8003296 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004604:	f04f 33ff 	mov.w	r3, #4294967295
 8004608:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	68b8      	ldr	r0, [r7, #8]
 800460e:	f000 fb35 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
	}
 8004612:	bf00      	nop
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	200008dc 	.word	0x200008dc

08004620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	60fb      	str	r3, [r7, #12]
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	3318      	adds	r3, #24
 8004650:	4618      	mov	r0, r3
 8004652:	f7fe fe7d 	bl	8003350 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004656:	4b1e      	ldr	r3, [pc, #120]	; (80046d0 <xTaskRemoveFromEventList+0xb0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d11d      	bne.n	800469a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3304      	adds	r3, #4
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fe74 	bl	8003350 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466c:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <xTaskRemoveFromEventList+0xb4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d903      	bls.n	800467c <xTaskRemoveFromEventList+0x5c>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	4a16      	ldr	r2, [pc, #88]	; (80046d4 <xTaskRemoveFromEventList+0xb4>)
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4a13      	ldr	r2, [pc, #76]	; (80046d8 <xTaskRemoveFromEventList+0xb8>)
 800468a:	441a      	add	r2, r3
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	3304      	adds	r3, #4
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f7fe fdff 	bl	8003296 <vListInsertEnd>
 8004698:	e005      	b.n	80046a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	3318      	adds	r3, #24
 800469e:	4619      	mov	r1, r3
 80046a0:	480e      	ldr	r0, [pc, #56]	; (80046dc <xTaskRemoveFromEventList+0xbc>)
 80046a2:	f7fe fdf8 	bl	8003296 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <xTaskRemoveFromEventList+0xc0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d905      	bls.n	80046c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <xTaskRemoveFromEventList+0xc4>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e001      	b.n	80046c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80046c4:	697b      	ldr	r3, [r7, #20]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000dd8 	.word	0x20000dd8
 80046d4:	20000db8 	.word	0x20000db8
 80046d8:	200008e0 	.word	0x200008e0
 80046dc:	20000d70 	.word	0x20000d70
 80046e0:	200008dc 	.word	0x200008dc
 80046e4:	20000dc4 	.word	0x20000dc4

080046e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <vTaskInternalSetTimeOutState+0x24>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <vTaskInternalSetTimeOutState+0x28>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	605a      	str	r2, [r3, #4]
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	20000dc8 	.word	0x20000dc8
 8004710:	20000db4 	.word	0x20000db4

08004714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	613b      	str	r3, [r7, #16]
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	60fb      	str	r3, [r7, #12]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004756:	f000 ff5d 	bl	8005614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800475a:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <xTaskCheckForTimeOut+0xbc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	d102      	bne.n	800477a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	e023      	b.n	80047c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <xTaskCheckForTimeOut+0xc0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d007      	beq.n	8004796 <xTaskCheckForTimeOut+0x82>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	429a      	cmp	r2, r3
 800478e:	d302      	bcc.n	8004796 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004790:	2301      	movs	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	e015      	b.n	80047c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	429a      	cmp	r2, r3
 800479e:	d20b      	bcs.n	80047b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	1ad2      	subs	r2, r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff ff9b 	bl	80046e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	e004      	b.n	80047c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047be:	2301      	movs	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047c2:	f000 ff57 	bl	8005674 <vPortExitCritical>

	return xReturn;
 80047c6:	69fb      	ldr	r3, [r7, #28]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3720      	adds	r7, #32
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20000db4 	.word	0x20000db4
 80047d4:	20000dc8 	.word	0x20000dc8

080047d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <vTaskMissedYield+0x14>)
 80047de:	2201      	movs	r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
}
 80047e2:	bf00      	nop
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	20000dc4 	.word	0x20000dc4

080047f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047f8:	f000 f852 	bl	80048a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <prvIdleTask+0x28>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d9f9      	bls.n	80047f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <prvIdleTask+0x2c>)
 8004806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004814:	e7f0      	b.n	80047f8 <prvIdleTask+0x8>
 8004816:	bf00      	nop
 8004818:	200008e0 	.word	0x200008e0
 800481c:	e000ed04 	.word	0xe000ed04

08004820 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004826:	2300      	movs	r3, #0
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	e00c      	b.n	8004846 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4a12      	ldr	r2, [pc, #72]	; (8004880 <prvInitialiseTaskLists+0x60>)
 8004838:	4413      	add	r3, r2
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe fcfe 	bl	800323c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3301      	adds	r3, #1
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b37      	cmp	r3, #55	; 0x37
 800484a:	d9ef      	bls.n	800482c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800484c:	480d      	ldr	r0, [pc, #52]	; (8004884 <prvInitialiseTaskLists+0x64>)
 800484e:	f7fe fcf5 	bl	800323c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004852:	480d      	ldr	r0, [pc, #52]	; (8004888 <prvInitialiseTaskLists+0x68>)
 8004854:	f7fe fcf2 	bl	800323c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004858:	480c      	ldr	r0, [pc, #48]	; (800488c <prvInitialiseTaskLists+0x6c>)
 800485a:	f7fe fcef 	bl	800323c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800485e:	480c      	ldr	r0, [pc, #48]	; (8004890 <prvInitialiseTaskLists+0x70>)
 8004860:	f7fe fcec 	bl	800323c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004864:	480b      	ldr	r0, [pc, #44]	; (8004894 <prvInitialiseTaskLists+0x74>)
 8004866:	f7fe fce9 	bl	800323c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <prvInitialiseTaskLists+0x78>)
 800486c:	4a05      	ldr	r2, [pc, #20]	; (8004884 <prvInitialiseTaskLists+0x64>)
 800486e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004870:	4b0a      	ldr	r3, [pc, #40]	; (800489c <prvInitialiseTaskLists+0x7c>)
 8004872:	4a05      	ldr	r2, [pc, #20]	; (8004888 <prvInitialiseTaskLists+0x68>)
 8004874:	601a      	str	r2, [r3, #0]
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	200008e0 	.word	0x200008e0
 8004884:	20000d40 	.word	0x20000d40
 8004888:	20000d54 	.word	0x20000d54
 800488c:	20000d70 	.word	0x20000d70
 8004890:	20000d84 	.word	0x20000d84
 8004894:	20000d9c 	.word	0x20000d9c
 8004898:	20000d68 	.word	0x20000d68
 800489c:	20000d6c 	.word	0x20000d6c

080048a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048a6:	e019      	b.n	80048dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048a8:	f000 feb4 	bl	8005614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ac:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <prvCheckTasksWaitingTermination+0x50>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3304      	adds	r3, #4
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fe fd49 	bl	8003350 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <prvCheckTasksWaitingTermination+0x54>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	4a0b      	ldr	r2, [pc, #44]	; (80048f4 <prvCheckTasksWaitingTermination+0x54>)
 80048c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <prvCheckTasksWaitingTermination+0x58>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <prvCheckTasksWaitingTermination+0x58>)
 80048d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048d2:	f000 fecf 	bl	8005674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f810 	bl	80048fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <prvCheckTasksWaitingTermination+0x58>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e1      	bne.n	80048a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000d84 	.word	0x20000d84
 80048f4:	20000db0 	.word	0x20000db0
 80048f8:	20000d98 	.word	0x20000d98

080048fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3354      	adds	r3, #84	; 0x54
 8004908:	4618      	mov	r0, r3
 800490a:	f001 f9d9 	bl	8005cc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004914:	2b00      	cmp	r3, #0
 8004916:	d108      	bne.n	800492a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	4618      	mov	r0, r3
 800491e:	f001 f867 	bl	80059f0 <vPortFree>
				vPortFree( pxTCB );
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f001 f864 	bl	80059f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004928:	e018      	b.n	800495c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004930:	2b01      	cmp	r3, #1
 8004932:	d103      	bne.n	800493c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f001 f85b 	bl	80059f0 <vPortFree>
	}
 800493a:	e00f      	b.n	800495c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004942:	2b02      	cmp	r3, #2
 8004944:	d00a      	beq.n	800495c <prvDeleteTCB+0x60>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	60fb      	str	r3, [r7, #12]
}
 8004958:	bf00      	nop
 800495a:	e7fe      	b.n	800495a <prvDeleteTCB+0x5e>
	}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496a:	4b0c      	ldr	r3, [pc, #48]	; (800499c <prvResetNextTaskUnblockTime+0x38>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <prvResetNextTaskUnblockTime+0x3c>)
 8004976:	f04f 32ff 	mov.w	r2, #4294967295
 800497a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800497c:	e008      	b.n	8004990 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497e:	4b07      	ldr	r3, [pc, #28]	; (800499c <prvResetNextTaskUnblockTime+0x38>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a04      	ldr	r2, [pc, #16]	; (80049a0 <prvResetNextTaskUnblockTime+0x3c>)
 800498e:	6013      	str	r3, [r2, #0]
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	20000d68 	.word	0x20000d68
 80049a0:	20000dd0 	.word	0x20000dd0

080049a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <xTaskGetSchedulerState+0x34>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049b2:	2301      	movs	r3, #1
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	e008      	b.n	80049ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b8:	4b08      	ldr	r3, [pc, #32]	; (80049dc <xTaskGetSchedulerState+0x38>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049c0:	2302      	movs	r3, #2
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	e001      	b.n	80049ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049c6:	2300      	movs	r3, #0
 80049c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049ca:	687b      	ldr	r3, [r7, #4]
	}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	20000dbc 	.word	0x20000dbc
 80049dc:	20000dd8 	.word	0x20000dd8

080049e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d056      	beq.n	8004aa4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049f6:	4b2e      	ldr	r3, [pc, #184]	; (8004ab0 <xTaskPriorityDisinherit+0xd0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d00a      	beq.n	8004a16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60fb      	str	r3, [r7, #12]
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	60bb      	str	r3, [r7, #8]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a38:	1e5a      	subs	r2, r3, #1
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d02c      	beq.n	8004aa4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d128      	bne.n	8004aa4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3304      	adds	r3, #4
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fc7a 	bl	8003350 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <xTaskPriorityDisinherit+0xd4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d903      	bls.n	8004a84 <xTaskPriorityDisinherit+0xa4>
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4a0c      	ldr	r2, [pc, #48]	; (8004ab4 <xTaskPriorityDisinherit+0xd4>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <xTaskPriorityDisinherit+0xd8>)
 8004a92:	441a      	add	r2, r3
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f7fe fbfb 	bl	8003296 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004aa4:	697b      	ldr	r3, [r7, #20]
	}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	200008dc 	.word	0x200008dc
 8004ab4:	20000db8 	.word	0x20000db8
 8004ab8:	200008e0 	.word	0x200008e0

08004abc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004ac6:	f000 fda5 	bl	8005614 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004aca:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <ulTaskNotifyTake+0x90>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d113      	bne.n	8004afe <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004ad6:	4b1d      	ldr	r3, [pc, #116]	; (8004b4c <ulTaskNotifyTake+0x90>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00b      	beq.n	8004afe <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	6838      	ldr	r0, [r7, #0]
 8004aea:	f000 f8c7 	bl	8004c7c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004aee:	4b18      	ldr	r3, [pc, #96]	; (8004b50 <ulTaskNotifyTake+0x94>)
 8004af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004afe:	f000 fdb9 	bl	8005674 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004b02:	f000 fd87 	bl	8005614 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004b06:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <ulTaskNotifyTake+0x90>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b0e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00e      	beq.n	8004b34 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <ulTaskNotifyTake+0x90>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8004b26:	e005      	b.n	8004b34 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8004b28:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <ulTaskNotifyTake+0x90>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	3a01      	subs	r2, #1
 8004b30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <ulTaskNotifyTake+0x90>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8004b3e:	f000 fd99 	bl	8005674 <vPortExitCritical>

		return ulReturn;
 8004b42:	68fb      	ldr	r3, [r7, #12]
	}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	200008dc 	.word	0x200008dc
 8004b50:	e000ed04 	.word	0xe000ed04

08004b54 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	; 0x28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	61bb      	str	r3, [r7, #24]
}
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b7a:	f000 fe2d 	bl	80057d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8004b82:	f3ef 8211 	mrs	r2, BASEPRI
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	617a      	str	r2, [r7, #20]
 8004b98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004b9a:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b9c:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004ba4:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	2202      	movs	r2, #2
 8004baa:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004bbc:	7ffb      	ldrb	r3, [r7, #31]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d146      	bne.n	8004c50 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	60fb      	str	r3, [r7, #12]
}
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004be0:	4b20      	ldr	r3, [pc, #128]	; (8004c64 <vTaskNotifyGiveFromISR+0x110>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d11d      	bne.n	8004c24 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	3304      	adds	r3, #4
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fe fbaf 	bl	8003350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf6:	4b1c      	ldr	r3, [pc, #112]	; (8004c68 <vTaskNotifyGiveFromISR+0x114>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d903      	bls.n	8004c06 <vTaskNotifyGiveFromISR+0xb2>
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <vTaskNotifyGiveFromISR+0x114>)
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4a16      	ldr	r2, [pc, #88]	; (8004c6c <vTaskNotifyGiveFromISR+0x118>)
 8004c14:	441a      	add	r2, r3
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f7fe fb3a 	bl	8003296 <vListInsertEnd>
 8004c22:	e005      	b.n	8004c30 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	3318      	adds	r3, #24
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4811      	ldr	r0, [pc, #68]	; (8004c70 <vTaskNotifyGiveFromISR+0x11c>)
 8004c2c:	f7fe fb33 	bl	8003296 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c34:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <vTaskNotifyGiveFromISR+0x120>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d908      	bls.n	8004c50 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <vTaskNotifyGiveFromISR+0x124>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f383 8811 	msr	BASEPRI, r3
}
 8004c5a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8004c5c:	bf00      	nop
 8004c5e:	3728      	adds	r7, #40	; 0x28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000dd8 	.word	0x20000dd8
 8004c68:	20000db8 	.word	0x20000db8
 8004c6c:	200008e0 	.word	0x200008e0
 8004c70:	20000d70 	.word	0x20000d70
 8004c74:	200008dc 	.word	0x200008dc
 8004c78:	20000dc4 	.word	0x20000dc4

08004c7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c86:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <prvAddCurrentTaskToDelayedList+0x90>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c8c:	4b20      	ldr	r3, [pc, #128]	; (8004d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3304      	adds	r3, #4
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe fb5c 	bl	8003350 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9e:	d10a      	bne.n	8004cb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca6:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4619      	mov	r1, r3
 8004cae:	4819      	ldr	r0, [pc, #100]	; (8004d14 <prvAddCurrentTaskToDelayedList+0x98>)
 8004cb0:	f7fe faf1 	bl	8003296 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cb4:	e026      	b.n	8004d04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4413      	add	r3, r2
 8004cbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cbe:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d209      	bcs.n	8004ce2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f7fe faff 	bl	80032de <vListInsert>
}
 8004ce0:	e010      	b.n	8004d04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ce2:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3304      	adds	r3, #4
 8004cec:	4619      	mov	r1, r3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	f7fe faf5 	bl	80032de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d202      	bcs.n	8004d04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cfe:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	6013      	str	r3, [r2, #0]
}
 8004d04:	bf00      	nop
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20000db4 	.word	0x20000db4
 8004d10:	200008dc 	.word	0x200008dc
 8004d14:	20000d9c 	.word	0x20000d9c
 8004d18:	20000d6c 	.word	0x20000d6c
 8004d1c:	20000d68 	.word	0x20000d68
 8004d20:	20000dd0 	.word	0x20000dd0

08004d24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d2e:	f000 fb07 	bl	8005340 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d32:	4b1c      	ldr	r3, [pc, #112]	; (8004da4 <xTimerCreateTimerTask+0x80>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d021      	beq.n	8004d7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d42:	1d3a      	adds	r2, r7, #4
 8004d44:	f107 0108 	add.w	r1, r7, #8
 8004d48:	f107 030c 	add.w	r3, r7, #12
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fe fa5b 	bl	8003208 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	9202      	str	r2, [sp, #8]
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	2300      	movs	r3, #0
 8004d62:	460a      	mov	r2, r1
 8004d64:	4910      	ldr	r1, [pc, #64]	; (8004da8 <xTimerCreateTimerTask+0x84>)
 8004d66:	4811      	ldr	r0, [pc, #68]	; (8004dac <xTimerCreateTimerTask+0x88>)
 8004d68:	f7ff f808 	bl	8003d7c <xTaskCreateStatic>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4a10      	ldr	r2, [pc, #64]	; (8004db0 <xTimerCreateTimerTask+0x8c>)
 8004d70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d72:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <xTimerCreateTimerTask+0x8c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	613b      	str	r3, [r7, #16]
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d9a:	697b      	ldr	r3, [r7, #20]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000e0c 	.word	0x20000e0c
 8004da8:	08005e84 	.word	0x08005e84
 8004dac:	08004ee9 	.word	0x08004ee9
 8004db0:	20000e10 	.word	0x20000e10

08004db4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	; 0x28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	623b      	str	r3, [r7, #32]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004de2:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <xTimerGenericCommand+0x98>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d02a      	beq.n	8004e40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b05      	cmp	r3, #5
 8004dfa:	dc18      	bgt.n	8004e2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004dfc:	f7ff fdd2 	bl	80049a4 <xTaskGetSchedulerState>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d109      	bne.n	8004e1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e06:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <xTimerGenericCommand+0x98>)
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	f107 0110 	add.w	r1, r7, #16
 8004e0e:	2300      	movs	r3, #0
 8004e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e12:	f7fe fbcb 	bl	80035ac <xQueueGenericSend>
 8004e16:	6278      	str	r0, [r7, #36]	; 0x24
 8004e18:	e012      	b.n	8004e40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <xTimerGenericCommand+0x98>)
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	f107 0110 	add.w	r1, r7, #16
 8004e22:	2300      	movs	r3, #0
 8004e24:	2200      	movs	r2, #0
 8004e26:	f7fe fbc1 	bl	80035ac <xQueueGenericSend>
 8004e2a:	6278      	str	r0, [r7, #36]	; 0x24
 8004e2c:	e008      	b.n	8004e40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <xTimerGenericCommand+0x98>)
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	f107 0110 	add.w	r1, r7, #16
 8004e36:	2300      	movs	r3, #0
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	f7fe fcb5 	bl	80037a8 <xQueueGenericSendFromISR>
 8004e3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3728      	adds	r7, #40	; 0x28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000e0c 	.word	0x20000e0c

08004e50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e5a:	4b22      	ldr	r3, [pc, #136]	; (8004ee4 <prvProcessExpiredTimer+0x94>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fe fa71 	bl	8003350 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d022      	beq.n	8004ec2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	699a      	ldr	r2, [r3, #24]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	18d1      	adds	r1, r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	6978      	ldr	r0, [r7, #20]
 8004e8a:	f000 f8d1 	bl	8005030 <prvInsertTimerInActiveList>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01f      	beq.n	8004ed4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e94:	2300      	movs	r3, #0
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	6978      	ldr	r0, [r7, #20]
 8004ea0:	f7ff ff88 	bl	8004db4 <xTimerGenericCommand>
 8004ea4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d113      	bne.n	8004ed4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	60fb      	str	r3, [r7, #12]
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	6978      	ldr	r0, [r7, #20]
 8004eda:	4798      	blx	r3
}
 8004edc:	bf00      	nop
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20000e04 	.word	0x20000e04

08004ee8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ef0:	f107 0308 	add.w	r3, r7, #8
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 f857 	bl	8004fa8 <prvGetNextExpireTime>
 8004efa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4619      	mov	r1, r3
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f803 	bl	8004f0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f06:	f000 f8d5 	bl	80050b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f0a:	e7f1      	b.n	8004ef0 <prvTimerTask+0x8>

08004f0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f16:	f7ff f959 	bl	80041cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f1a:	f107 0308 	add.w	r3, r7, #8
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f866 	bl	8004ff0 <prvSampleTimeNow>
 8004f24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d130      	bne.n	8004f8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <prvProcessTimerOrBlockTask+0x3c>
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d806      	bhi.n	8004f48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f3a:	f7ff f955 	bl	80041e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff ff85 	bl	8004e50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f46:	e024      	b.n	8004f92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <prvProcessTimerOrBlockTask+0x90>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <prvProcessTimerOrBlockTask+0x50>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <prvProcessTimerOrBlockTask+0x52>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f60:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <prvProcessTimerOrBlockTask+0x94>)
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f7fe fed1 	bl	8003d14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f72:	f7ff f939 	bl	80041e8 <xTaskResumeAll>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f7c:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <prvProcessTimerOrBlockTask+0x98>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	f3bf 8f6f 	isb	sy
}
 8004f8c:	e001      	b.n	8004f92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f8e:	f7ff f92b 	bl	80041e8 <xTaskResumeAll>
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000e08 	.word	0x20000e08
 8004fa0:	20000e0c 	.word	0x20000e0c
 8004fa4:	e000ed04 	.word	0xe000ed04

08004fa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fb0:	4b0e      	ldr	r3, [pc, #56]	; (8004fec <prvGetNextExpireTime+0x44>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <prvGetNextExpireTime+0x16>
 8004fba:	2201      	movs	r2, #1
 8004fbc:	e000      	b.n	8004fc0 <prvGetNextExpireTime+0x18>
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d105      	bne.n	8004fd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fcc:	4b07      	ldr	r3, [pc, #28]	; (8004fec <prvGetNextExpireTime+0x44>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	e001      	b.n	8004fdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20000e04 	.word	0x20000e04

08004ff0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ff8:	f7ff f994 	bl	8004324 <xTaskGetTickCount>
 8004ffc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	; (800502c <prvSampleTimeNow+0x3c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	429a      	cmp	r2, r3
 8005006:	d205      	bcs.n	8005014 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005008:	f000 f936 	bl	8005278 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	e002      	b.n	800501a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800501a:	4a04      	ldr	r2, [pc, #16]	; (800502c <prvSampleTimeNow+0x3c>)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005020:	68fb      	ldr	r3, [r7, #12]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000e14 	.word	0x20000e14

08005030 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	429a      	cmp	r2, r3
 8005054:	d812      	bhi.n	800507c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	1ad2      	subs	r2, r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	429a      	cmp	r2, r3
 8005062:	d302      	bcc.n	800506a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005064:	2301      	movs	r3, #1
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	e01b      	b.n	80050a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <prvInsertTimerInActiveList+0x7c>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3304      	adds	r3, #4
 8005072:	4619      	mov	r1, r3
 8005074:	4610      	mov	r0, r2
 8005076:	f7fe f932 	bl	80032de <vListInsert>
 800507a:	e012      	b.n	80050a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d206      	bcs.n	8005092 <prvInsertTimerInActiveList+0x62>
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d302      	bcc.n	8005092 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800508c:	2301      	movs	r3, #1
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e007      	b.n	80050a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005092:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <prvInsertTimerInActiveList+0x80>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3304      	adds	r3, #4
 800509a:	4619      	mov	r1, r3
 800509c:	4610      	mov	r0, r2
 800509e:	f7fe f91e 	bl	80032de <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050a2:	697b      	ldr	r3, [r7, #20]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20000e08 	.word	0x20000e08
 80050b0:	20000e04 	.word	0x20000e04

080050b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08e      	sub	sp, #56	; 0x38
 80050b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050ba:	e0ca      	b.n	8005252 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	da18      	bge.n	80050f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050c2:	1d3b      	adds	r3, r7, #4
 80050c4:	3304      	adds	r3, #4
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	61fb      	str	r3, [r7, #28]
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ea:	6850      	ldr	r0, [r2, #4]
 80050ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ee:	6892      	ldr	r2, [r2, #8]
 80050f0:	4611      	mov	r1, r2
 80050f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f2c0 80aa 	blt.w	8005250 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d004      	beq.n	8005112 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	3304      	adds	r3, #4
 800510c:	4618      	mov	r0, r3
 800510e:	f7fe f91f 	bl	8003350 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005112:	463b      	mov	r3, r7
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ff6b 	bl	8004ff0 <prvSampleTimeNow>
 800511a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b09      	cmp	r3, #9
 8005120:	f200 8097 	bhi.w	8005252 <prvProcessReceivedCommands+0x19e>
 8005124:	a201      	add	r2, pc, #4	; (adr r2, 800512c <prvProcessReceivedCommands+0x78>)
 8005126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512a:	bf00      	nop
 800512c:	08005155 	.word	0x08005155
 8005130:	08005155 	.word	0x08005155
 8005134:	08005155 	.word	0x08005155
 8005138:	080051c9 	.word	0x080051c9
 800513c:	080051dd 	.word	0x080051dd
 8005140:	08005227 	.word	0x08005227
 8005144:	08005155 	.word	0x08005155
 8005148:	08005155 	.word	0x08005155
 800514c:	080051c9 	.word	0x080051c9
 8005150:	080051dd 	.word	0x080051dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	b2da      	uxtb	r2, r3
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	18d1      	adds	r1, r2, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005174:	f7ff ff5c 	bl	8005030 <prvInsertTimerInActiveList>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d069      	beq.n	8005252 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005184:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d05e      	beq.n	8005252 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	441a      	add	r2, r3
 800519c:	2300      	movs	r3, #0
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	2300      	movs	r3, #0
 80051a2:	2100      	movs	r1, #0
 80051a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051a6:	f7ff fe05 	bl	8004db4 <xTimerGenericCommand>
 80051aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d14f      	bne.n	8005252 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	61bb      	str	r3, [r7, #24]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ce:	f023 0301 	bic.w	r3, r3, #1
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80051da:	e03a      	b.n	8005252 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051e2:	f043 0301 	orr.w	r3, r3, #1
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	617b      	str	r3, [r7, #20]
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	18d1      	adds	r1, r2, r3
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005220:	f7ff ff06 	bl	8005030 <prvInsertTimerInActiveList>
					break;
 8005224:	e015      	b.n	8005252 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d103      	bne.n	800523c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005236:	f000 fbdb 	bl	80059f0 <vPortFree>
 800523a:	e00a      	b.n	8005252 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	b2da      	uxtb	r2, r3
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800524e:	e000      	b.n	8005252 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005250:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005252:	4b08      	ldr	r3, [pc, #32]	; (8005274 <prvProcessReceivedCommands+0x1c0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	1d39      	adds	r1, r7, #4
 8005258:	2200      	movs	r2, #0
 800525a:	4618      	mov	r0, r3
 800525c:	f7fe fb40 	bl	80038e0 <xQueueReceive>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	f47f af2a 	bne.w	80050bc <prvProcessReceivedCommands+0x8>
	}
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	3730      	adds	r7, #48	; 0x30
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20000e0c 	.word	0x20000e0c

08005278 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800527e:	e048      	b.n	8005312 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005280:	4b2d      	ldr	r3, [pc, #180]	; (8005338 <prvSwitchTimerLists+0xc0>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800528a:	4b2b      	ldr	r3, [pc, #172]	; (8005338 <prvSwitchTimerLists+0xc0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3304      	adds	r3, #4
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe f859 	bl	8003350 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d02e      	beq.n	8005312 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4413      	add	r3, r2
 80052bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d90e      	bls.n	80052e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052d2:	4b19      	ldr	r3, [pc, #100]	; (8005338 <prvSwitchTimerLists+0xc0>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3304      	adds	r3, #4
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f7fd fffe 	bl	80032de <vListInsert>
 80052e2:	e016      	b.n	8005312 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052e4:	2300      	movs	r3, #0
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	2300      	movs	r3, #0
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	2100      	movs	r1, #0
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff fd60 	bl	8004db4 <xTimerGenericCommand>
 80052f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	603b      	str	r3, [r7, #0]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005312:	4b09      	ldr	r3, [pc, #36]	; (8005338 <prvSwitchTimerLists+0xc0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1b1      	bne.n	8005280 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800531c:	4b06      	ldr	r3, [pc, #24]	; (8005338 <prvSwitchTimerLists+0xc0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <prvSwitchTimerLists+0xc4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a04      	ldr	r2, [pc, #16]	; (8005338 <prvSwitchTimerLists+0xc0>)
 8005328:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800532a:	4a04      	ldr	r2, [pc, #16]	; (800533c <prvSwitchTimerLists+0xc4>)
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	6013      	str	r3, [r2, #0]
}
 8005330:	bf00      	nop
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	20000e04 	.word	0x20000e04
 800533c:	20000e08 	.word	0x20000e08

08005340 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005346:	f000 f965 	bl	8005614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800534a:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <prvCheckForValidListAndQueue+0x60>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d120      	bne.n	8005394 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005352:	4814      	ldr	r0, [pc, #80]	; (80053a4 <prvCheckForValidListAndQueue+0x64>)
 8005354:	f7fd ff72 	bl	800323c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005358:	4813      	ldr	r0, [pc, #76]	; (80053a8 <prvCheckForValidListAndQueue+0x68>)
 800535a:	f7fd ff6f 	bl	800323c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800535e:	4b13      	ldr	r3, [pc, #76]	; (80053ac <prvCheckForValidListAndQueue+0x6c>)
 8005360:	4a10      	ldr	r2, [pc, #64]	; (80053a4 <prvCheckForValidListAndQueue+0x64>)
 8005362:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005364:	4b12      	ldr	r3, [pc, #72]	; (80053b0 <prvCheckForValidListAndQueue+0x70>)
 8005366:	4a10      	ldr	r2, [pc, #64]	; (80053a8 <prvCheckForValidListAndQueue+0x68>)
 8005368:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800536a:	2300      	movs	r3, #0
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <prvCheckForValidListAndQueue+0x74>)
 8005370:	4a11      	ldr	r2, [pc, #68]	; (80053b8 <prvCheckForValidListAndQueue+0x78>)
 8005372:	2110      	movs	r1, #16
 8005374:	200a      	movs	r0, #10
 8005376:	f7fe f87d 	bl	8003474 <xQueueGenericCreateStatic>
 800537a:	4603      	mov	r3, r0
 800537c:	4a08      	ldr	r2, [pc, #32]	; (80053a0 <prvCheckForValidListAndQueue+0x60>)
 800537e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <prvCheckForValidListAndQueue+0x60>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <prvCheckForValidListAndQueue+0x60>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	490b      	ldr	r1, [pc, #44]	; (80053bc <prvCheckForValidListAndQueue+0x7c>)
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe fc96 	bl	8003cc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005394:	f000 f96e 	bl	8005674 <vPortExitCritical>
}
 8005398:	bf00      	nop
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000e0c 	.word	0x20000e0c
 80053a4:	20000ddc 	.word	0x20000ddc
 80053a8:	20000df0 	.word	0x20000df0
 80053ac:	20000e04 	.word	0x20000e04
 80053b0:	20000e08 	.word	0x20000e08
 80053b4:	20000eb8 	.word	0x20000eb8
 80053b8:	20000e18 	.word	0x20000e18
 80053bc:	08005e8c 	.word	0x08005e8c

080053c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3b04      	subs	r3, #4
 80053d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3b04      	subs	r3, #4
 80053de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f023 0201 	bic.w	r2, r3, #1
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3b04      	subs	r3, #4
 80053ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053f0:	4a0c      	ldr	r2, [pc, #48]	; (8005424 <pxPortInitialiseStack+0x64>)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3b14      	subs	r3, #20
 80053fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3b04      	subs	r3, #4
 8005406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f06f 0202 	mvn.w	r2, #2
 800540e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3b20      	subs	r3, #32
 8005414:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005416:	68fb      	ldr	r3, [r7, #12]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	08005429 	.word	0x08005429

08005428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005432:	4b12      	ldr	r3, [pc, #72]	; (800547c <prvTaskExitError+0x54>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543a:	d00a      	beq.n	8005452 <prvTaskExitError+0x2a>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	60fb      	str	r3, [r7, #12]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <prvTaskExitError+0x28>
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	60bb      	str	r3, [r7, #8]
}
 8005464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005466:	bf00      	nop
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0fc      	beq.n	8005468 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	2000000c 	.word	0x2000000c

08005480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005480:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <pxCurrentTCBConst2>)
 8005482:	6819      	ldr	r1, [r3, #0]
 8005484:	6808      	ldr	r0, [r1, #0]
 8005486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548a:	f380 8809 	msr	PSP, r0
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f04f 0000 	mov.w	r0, #0
 8005496:	f380 8811 	msr	BASEPRI, r0
 800549a:	4770      	bx	lr
 800549c:	f3af 8000 	nop.w

080054a0 <pxCurrentTCBConst2>:
 80054a0:	200008dc 	.word	0x200008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop

080054a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80054a8:	4808      	ldr	r0, [pc, #32]	; (80054cc <prvPortStartFirstTask+0x24>)
 80054aa:	6800      	ldr	r0, [r0, #0]
 80054ac:	6800      	ldr	r0, [r0, #0]
 80054ae:	f380 8808 	msr	MSP, r0
 80054b2:	f04f 0000 	mov.w	r0, #0
 80054b6:	f380 8814 	msr	CONTROL, r0
 80054ba:	b662      	cpsie	i
 80054bc:	b661      	cpsie	f
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	df00      	svc	0
 80054c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054ca:	bf00      	nop
 80054cc:	e000ed08 	.word	0xe000ed08

080054d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054d6:	4b46      	ldr	r3, [pc, #280]	; (80055f0 <xPortStartScheduler+0x120>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a46      	ldr	r2, [pc, #280]	; (80055f4 <xPortStartScheduler+0x124>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10a      	bne.n	80054f6 <xPortStartScheduler+0x26>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	613b      	str	r3, [r7, #16]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <xPortStartScheduler+0x120>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a3f      	ldr	r2, [pc, #252]	; (80055f8 <xPortStartScheduler+0x128>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10a      	bne.n	8005516 <xPortStartScheduler+0x46>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	60fb      	str	r3, [r7, #12]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005516:	4b39      	ldr	r3, [pc, #228]	; (80055fc <xPortStartScheduler+0x12c>)
 8005518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	b2db      	uxtb	r3, r3
 8005520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	22ff      	movs	r2, #255	; 0xff
 8005526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005538:	b2da      	uxtb	r2, r3
 800553a:	4b31      	ldr	r3, [pc, #196]	; (8005600 <xPortStartScheduler+0x130>)
 800553c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800553e:	4b31      	ldr	r3, [pc, #196]	; (8005604 <xPortStartScheduler+0x134>)
 8005540:	2207      	movs	r2, #7
 8005542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005544:	e009      	b.n	800555a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005546:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <xPortStartScheduler+0x134>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3b01      	subs	r3, #1
 800554c:	4a2d      	ldr	r2, [pc, #180]	; (8005604 <xPortStartScheduler+0x134>)
 800554e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	b2db      	uxtb	r3, r3
 8005558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800555a:	78fb      	ldrb	r3, [r7, #3]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005562:	2b80      	cmp	r3, #128	; 0x80
 8005564:	d0ef      	beq.n	8005546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005566:	4b27      	ldr	r3, [pc, #156]	; (8005604 <xPortStartScheduler+0x134>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f1c3 0307 	rsb	r3, r3, #7
 800556e:	2b04      	cmp	r3, #4
 8005570:	d00a      	beq.n	8005588 <xPortStartScheduler+0xb8>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	60bb      	str	r3, [r7, #8]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005588:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <xPortStartScheduler+0x134>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	4a1d      	ldr	r2, [pc, #116]	; (8005604 <xPortStartScheduler+0x134>)
 8005590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005592:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <xPortStartScheduler+0x134>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800559a:	4a1a      	ldr	r2, [pc, #104]	; (8005604 <xPortStartScheduler+0x134>)
 800559c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055a6:	4b18      	ldr	r3, [pc, #96]	; (8005608 <xPortStartScheduler+0x138>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a17      	ldr	r2, [pc, #92]	; (8005608 <xPortStartScheduler+0x138>)
 80055ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055b2:	4b15      	ldr	r3, [pc, #84]	; (8005608 <xPortStartScheduler+0x138>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a14      	ldr	r2, [pc, #80]	; (8005608 <xPortStartScheduler+0x138>)
 80055b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055be:	f000 f8dd 	bl	800577c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055c2:	4b12      	ldr	r3, [pc, #72]	; (800560c <xPortStartScheduler+0x13c>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055c8:	f000 f8fc 	bl	80057c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055cc:	4b10      	ldr	r3, [pc, #64]	; (8005610 <xPortStartScheduler+0x140>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a0f      	ldr	r2, [pc, #60]	; (8005610 <xPortStartScheduler+0x140>)
 80055d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055d8:	f7ff ff66 	bl	80054a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055dc:	f7fe ff6c 	bl	80044b8 <vTaskSwitchContext>
	prvTaskExitError();
 80055e0:	f7ff ff22 	bl	8005428 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	e000ed00 	.word	0xe000ed00
 80055f4:	410fc271 	.word	0x410fc271
 80055f8:	410fc270 	.word	0x410fc270
 80055fc:	e000e400 	.word	0xe000e400
 8005600:	20000f08 	.word	0x20000f08
 8005604:	20000f0c 	.word	0x20000f0c
 8005608:	e000ed20 	.word	0xe000ed20
 800560c:	2000000c 	.word	0x2000000c
 8005610:	e000ef34 	.word	0xe000ef34

08005614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	607b      	str	r3, [r7, #4]
}
 800562c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800562e:	4b0f      	ldr	r3, [pc, #60]	; (800566c <vPortEnterCritical+0x58>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3301      	adds	r3, #1
 8005634:	4a0d      	ldr	r2, [pc, #52]	; (800566c <vPortEnterCritical+0x58>)
 8005636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <vPortEnterCritical+0x58>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d10f      	bne.n	8005660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <vPortEnterCritical+0x5c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <vPortEnterCritical+0x4c>
	__asm volatile
 800564a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	603b      	str	r3, [r7, #0]
}
 800565c:	bf00      	nop
 800565e:	e7fe      	b.n	800565e <vPortEnterCritical+0x4a>
	}
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	2000000c 	.word	0x2000000c
 8005670:	e000ed04 	.word	0xe000ed04

08005674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800567a:	4b12      	ldr	r3, [pc, #72]	; (80056c4 <vPortExitCritical+0x50>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <vPortExitCritical+0x24>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	607b      	str	r3, [r7, #4]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005698:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <vPortExitCritical+0x50>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3b01      	subs	r3, #1
 800569e:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <vPortExitCritical+0x50>)
 80056a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056a2:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <vPortExitCritical+0x50>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d105      	bne.n	80056b6 <vPortExitCritical+0x42>
 80056aa:	2300      	movs	r3, #0
 80056ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	f383 8811 	msr	BASEPRI, r3
}
 80056b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	2000000c 	.word	0x2000000c
	...

080056d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056d0:	f3ef 8009 	mrs	r0, PSP
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	4b15      	ldr	r3, [pc, #84]	; (8005730 <pxCurrentTCBConst>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	f01e 0f10 	tst.w	lr, #16
 80056e0:	bf08      	it	eq
 80056e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ea:	6010      	str	r0, [r2, #0]
 80056ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056f4:	f380 8811 	msr	BASEPRI, r0
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f7fe feda 	bl	80044b8 <vTaskSwitchContext>
 8005704:	f04f 0000 	mov.w	r0, #0
 8005708:	f380 8811 	msr	BASEPRI, r0
 800570c:	bc09      	pop	{r0, r3}
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	6808      	ldr	r0, [r1, #0]
 8005712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005716:	f01e 0f10 	tst.w	lr, #16
 800571a:	bf08      	it	eq
 800571c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005720:	f380 8809 	msr	PSP, r0
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	f3af 8000 	nop.w

08005730 <pxCurrentTCBConst>:
 8005730:	200008dc 	.word	0x200008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop

08005738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
}
 8005750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005752:	f7fe fdf7 	bl	8004344 <xTaskIncrementTick>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <xPortSysTickHandler+0x40>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	2300      	movs	r3, #0
 8005766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f383 8811 	msr	BASEPRI, r3
}
 800576e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005770:	bf00      	nop
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	e000ed04 	.word	0xe000ed04

0800577c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <vPortSetupTimerInterrupt+0x34>)
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005786:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <vPortSetupTimerInterrupt+0x38>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800578c:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <vPortSetupTimerInterrupt+0x3c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <vPortSetupTimerInterrupt+0x40>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	099b      	lsrs	r3, r3, #6
 8005798:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <vPortSetupTimerInterrupt+0x44>)
 800579a:	3b01      	subs	r3, #1
 800579c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800579e:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <vPortSetupTimerInterrupt+0x34>)
 80057a0:	2207      	movs	r2, #7
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	e000e010 	.word	0xe000e010
 80057b4:	e000e018 	.word	0xe000e018
 80057b8:	20000000 	.word	0x20000000
 80057bc:	10624dd3 	.word	0x10624dd3
 80057c0:	e000e014 	.word	0xe000e014

080057c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80057d4 <vPortEnableVFP+0x10>
 80057c8:	6801      	ldr	r1, [r0, #0]
 80057ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057ce:	6001      	str	r1, [r0, #0]
 80057d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057d2:	bf00      	nop
 80057d4:	e000ed88 	.word	0xe000ed88

080057d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057de:	f3ef 8305 	mrs	r3, IPSR
 80057e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b0f      	cmp	r3, #15
 80057e8:	d914      	bls.n	8005814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057ea:	4a17      	ldr	r2, [pc, #92]	; (8005848 <vPortValidateInterruptPriority+0x70>)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057f4:	4b15      	ldr	r3, [pc, #84]	; (800584c <vPortValidateInterruptPriority+0x74>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	7afa      	ldrb	r2, [r7, #11]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d20a      	bcs.n	8005814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	607b      	str	r3, [r7, #4]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <vPortValidateInterruptPriority+0x78>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800581c:	4b0d      	ldr	r3, [pc, #52]	; (8005854 <vPortValidateInterruptPriority+0x7c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d90a      	bls.n	800583a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	603b      	str	r3, [r7, #0]
}
 8005836:	bf00      	nop
 8005838:	e7fe      	b.n	8005838 <vPortValidateInterruptPriority+0x60>
	}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	e000e3f0 	.word	0xe000e3f0
 800584c:	20000f08 	.word	0x20000f08
 8005850:	e000ed0c 	.word	0xe000ed0c
 8005854:	20000f0c 	.word	0x20000f0c

08005858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	; 0x28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005864:	f7fe fcb2 	bl	80041cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005868:	4b5b      	ldr	r3, [pc, #364]	; (80059d8 <pvPortMalloc+0x180>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005870:	f000 f920 	bl	8005ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005874:	4b59      	ldr	r3, [pc, #356]	; (80059dc <pvPortMalloc+0x184>)
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	f040 8093 	bne.w	80059a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01d      	beq.n	80058c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005888:	2208      	movs	r2, #8
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	2b00      	cmp	r3, #0
 8005898:	d014      	beq.n	80058c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f023 0307 	bic.w	r3, r3, #7
 80058a0:	3308      	adds	r3, #8
 80058a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <pvPortMalloc+0x6c>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	617b      	str	r3, [r7, #20]
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d06e      	beq.n	80059a8 <pvPortMalloc+0x150>
 80058ca:	4b45      	ldr	r3, [pc, #276]	; (80059e0 <pvPortMalloc+0x188>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d869      	bhi.n	80059a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058d4:	4b43      	ldr	r3, [pc, #268]	; (80059e4 <pvPortMalloc+0x18c>)
 80058d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058d8:	4b42      	ldr	r3, [pc, #264]	; (80059e4 <pvPortMalloc+0x18c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058de:	e004      	b.n	80058ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d903      	bls.n	80058fc <pvPortMalloc+0xa4>
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1f1      	bne.n	80058e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058fc:	4b36      	ldr	r3, [pc, #216]	; (80059d8 <pvPortMalloc+0x180>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005902:	429a      	cmp	r2, r3
 8005904:	d050      	beq.n	80059a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2208      	movs	r2, #8
 800590c:	4413      	add	r3, r2
 800590e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	1ad2      	subs	r2, r2, r3
 8005920:	2308      	movs	r3, #8
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	429a      	cmp	r2, r3
 8005926:	d91f      	bls.n	8005968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4413      	add	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <pvPortMalloc+0xf8>
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	613b      	str	r3, [r7, #16]
}
 800594c:	bf00      	nop
 800594e:	e7fe      	b.n	800594e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	1ad2      	subs	r2, r2, r3
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005962:	69b8      	ldr	r0, [r7, #24]
 8005964:	f000 f908 	bl	8005b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005968:	4b1d      	ldr	r3, [pc, #116]	; (80059e0 <pvPortMalloc+0x188>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	4a1b      	ldr	r2, [pc, #108]	; (80059e0 <pvPortMalloc+0x188>)
 8005974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005976:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <pvPortMalloc+0x188>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <pvPortMalloc+0x190>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d203      	bcs.n	800598a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005982:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <pvPortMalloc+0x188>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <pvPortMalloc+0x190>)
 8005988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	4b13      	ldr	r3, [pc, #76]	; (80059dc <pvPortMalloc+0x184>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	431a      	orrs	r2, r3
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800599e:	4b13      	ldr	r3, [pc, #76]	; (80059ec <pvPortMalloc+0x194>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3301      	adds	r3, #1
 80059a4:	4a11      	ldr	r2, [pc, #68]	; (80059ec <pvPortMalloc+0x194>)
 80059a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059a8:	f7fe fc1e 	bl	80041e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <pvPortMalloc+0x174>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60fb      	str	r3, [r7, #12]
}
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <pvPortMalloc+0x172>
	return pvReturn;
 80059cc:	69fb      	ldr	r3, [r7, #28]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3728      	adds	r7, #40	; 0x28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20004b18 	.word	0x20004b18
 80059dc:	20004b2c 	.word	0x20004b2c
 80059e0:	20004b1c 	.word	0x20004b1c
 80059e4:	20004b10 	.word	0x20004b10
 80059e8:	20004b20 	.word	0x20004b20
 80059ec:	20004b24 	.word	0x20004b24

080059f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d04d      	beq.n	8005a9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a02:	2308      	movs	r3, #8
 8005a04:	425b      	negs	r3, r3
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4413      	add	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	4b24      	ldr	r3, [pc, #144]	; (8005aa8 <vPortFree+0xb8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <vPortFree+0x44>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	60fb      	str	r3, [r7, #12]
}
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <vPortFree+0x62>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60bb      	str	r3, [r7, #8]
}
 8005a4e:	bf00      	nop
 8005a50:	e7fe      	b.n	8005a50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	4b14      	ldr	r3, [pc, #80]	; (8005aa8 <vPortFree+0xb8>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01e      	beq.n	8005a9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d11a      	bne.n	8005a9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <vPortFree+0xb8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	43db      	mvns	r3, r3
 8005a72:	401a      	ands	r2, r3
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a78:	f7fe fba8 	bl	80041cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <vPortFree+0xbc>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4413      	add	r3, r2
 8005a86:	4a09      	ldr	r2, [pc, #36]	; (8005aac <vPortFree+0xbc>)
 8005a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a8a:	6938      	ldr	r0, [r7, #16]
 8005a8c:	f000 f874 	bl	8005b78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a90:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <vPortFree+0xc0>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3301      	adds	r3, #1
 8005a96:	4a06      	ldr	r2, [pc, #24]	; (8005ab0 <vPortFree+0xc0>)
 8005a98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a9a:	f7fe fba5 	bl	80041e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a9e:	bf00      	nop
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20004b2c 	.word	0x20004b2c
 8005aac:	20004b1c 	.word	0x20004b1c
 8005ab0:	20004b28 	.word	0x20004b28

08005ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005aba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005abe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ac0:	4b27      	ldr	r3, [pc, #156]	; (8005b60 <prvHeapInit+0xac>)
 8005ac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00c      	beq.n	8005ae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3307      	adds	r3, #7
 8005ad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0307 	bic.w	r3, r3, #7
 8005ada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	4a1f      	ldr	r2, [pc, #124]	; (8005b60 <prvHeapInit+0xac>)
 8005ae4:	4413      	add	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005aec:	4a1d      	ldr	r2, [pc, #116]	; (8005b64 <prvHeapInit+0xb0>)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005af2:	4b1c      	ldr	r3, [pc, #112]	; (8005b64 <prvHeapInit+0xb0>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4413      	add	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b00:	2208      	movs	r2, #8
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0307 	bic.w	r3, r3, #7
 8005b0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a15      	ldr	r2, [pc, #84]	; (8005b68 <prvHeapInit+0xb4>)
 8005b14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b16:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <prvHeapInit+0xb4>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b1e:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <prvHeapInit+0xb4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b34:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <prvHeapInit+0xb4>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <prvHeapInit+0xb8>)
 8005b42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <prvHeapInit+0xbc>)
 8005b4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b4c:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <prvHeapInit+0xc0>)
 8005b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b52:	601a      	str	r2, [r3, #0]
}
 8005b54:	bf00      	nop
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	20000f10 	.word	0x20000f10
 8005b64:	20004b10 	.word	0x20004b10
 8005b68:	20004b18 	.word	0x20004b18
 8005b6c:	20004b20 	.word	0x20004b20
 8005b70:	20004b1c 	.word	0x20004b1c
 8005b74:	20004b2c 	.word	0x20004b2c

08005b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b80:	4b28      	ldr	r3, [pc, #160]	; (8005c24 <prvInsertBlockIntoFreeList+0xac>)
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	e002      	b.n	8005b8c <prvInsertBlockIntoFreeList+0x14>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d8f7      	bhi.n	8005b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d108      	bne.n	8005bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	441a      	add	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	441a      	add	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d118      	bne.n	8005c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b15      	ldr	r3, [pc, #84]	; (8005c28 <prvInsertBlockIntoFreeList+0xb0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d00d      	beq.n	8005bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	441a      	add	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	e008      	b.n	8005c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bf6:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <prvInsertBlockIntoFreeList+0xb0>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e003      	b.n	8005c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d002      	beq.n	8005c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20004b10 	.word	0x20004b10
 8005c28:	20004b18 	.word	0x20004b18

08005c2c <__libc_init_array>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4d0d      	ldr	r5, [pc, #52]	; (8005c64 <__libc_init_array+0x38>)
 8005c30:	4c0d      	ldr	r4, [pc, #52]	; (8005c68 <__libc_init_array+0x3c>)
 8005c32:	1b64      	subs	r4, r4, r5
 8005c34:	10a4      	asrs	r4, r4, #2
 8005c36:	2600      	movs	r6, #0
 8005c38:	42a6      	cmp	r6, r4
 8005c3a:	d109      	bne.n	8005c50 <__libc_init_array+0x24>
 8005c3c:	4d0b      	ldr	r5, [pc, #44]	; (8005c6c <__libc_init_array+0x40>)
 8005c3e:	4c0c      	ldr	r4, [pc, #48]	; (8005c70 <__libc_init_array+0x44>)
 8005c40:	f000 f8f2 	bl	8005e28 <_init>
 8005c44:	1b64      	subs	r4, r4, r5
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	2600      	movs	r6, #0
 8005c4a:	42a6      	cmp	r6, r4
 8005c4c:	d105      	bne.n	8005c5a <__libc_init_array+0x2e>
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c54:	4798      	blx	r3
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7ee      	b.n	8005c38 <__libc_init_array+0xc>
 8005c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c5e:	4798      	blx	r3
 8005c60:	3601      	adds	r6, #1
 8005c62:	e7f2      	b.n	8005c4a <__libc_init_array+0x1e>
 8005c64:	08005f14 	.word	0x08005f14
 8005c68:	08005f14 	.word	0x08005f14
 8005c6c:	08005f14 	.word	0x08005f14
 8005c70:	08005f18 	.word	0x08005f18

08005c74 <__retarget_lock_acquire_recursive>:
 8005c74:	4770      	bx	lr

08005c76 <__retarget_lock_release_recursive>:
 8005c76:	4770      	bx	lr

08005c78 <memcpy>:
 8005c78:	440a      	add	r2, r1
 8005c7a:	4291      	cmp	r1, r2
 8005c7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c80:	d100      	bne.n	8005c84 <memcpy+0xc>
 8005c82:	4770      	bx	lr
 8005c84:	b510      	push	{r4, lr}
 8005c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c8e:	4291      	cmp	r1, r2
 8005c90:	d1f9      	bne.n	8005c86 <memcpy+0xe>
 8005c92:	bd10      	pop	{r4, pc}

08005c94 <memset>:
 8005c94:	4402      	add	r2, r0
 8005c96:	4603      	mov	r3, r0
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d100      	bne.n	8005c9e <memset+0xa>
 8005c9c:	4770      	bx	lr
 8005c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005ca2:	e7f9      	b.n	8005c98 <memset+0x4>

08005ca4 <cleanup_glue>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	6809      	ldr	r1, [r1, #0]
 8005caa:	4605      	mov	r5, r0
 8005cac:	b109      	cbz	r1, 8005cb2 <cleanup_glue+0xe>
 8005cae:	f7ff fff9 	bl	8005ca4 <cleanup_glue>
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cba:	f000 b869 	b.w	8005d90 <_free_r>
	...

08005cc0 <_reclaim_reent>:
 8005cc0:	4b2c      	ldr	r3, [pc, #176]	; (8005d74 <_reclaim_reent+0xb4>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4283      	cmp	r3, r0
 8005cc6:	b570      	push	{r4, r5, r6, lr}
 8005cc8:	4604      	mov	r4, r0
 8005cca:	d051      	beq.n	8005d70 <_reclaim_reent+0xb0>
 8005ccc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cce:	b143      	cbz	r3, 8005ce2 <_reclaim_reent+0x22>
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d14a      	bne.n	8005d6c <_reclaim_reent+0xac>
 8005cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cd8:	6819      	ldr	r1, [r3, #0]
 8005cda:	b111      	cbz	r1, 8005ce2 <_reclaim_reent+0x22>
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f000 f857 	bl	8005d90 <_free_r>
 8005ce2:	6961      	ldr	r1, [r4, #20]
 8005ce4:	b111      	cbz	r1, 8005cec <_reclaim_reent+0x2c>
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f000 f852 	bl	8005d90 <_free_r>
 8005cec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005cee:	b111      	cbz	r1, 8005cf6 <_reclaim_reent+0x36>
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f000 f84d 	bl	8005d90 <_free_r>
 8005cf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005cf8:	b111      	cbz	r1, 8005d00 <_reclaim_reent+0x40>
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f000 f848 	bl	8005d90 <_free_r>
 8005d00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005d02:	b111      	cbz	r1, 8005d0a <_reclaim_reent+0x4a>
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 f843 	bl	8005d90 <_free_r>
 8005d0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d0c:	b111      	cbz	r1, 8005d14 <_reclaim_reent+0x54>
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f000 f83e 	bl	8005d90 <_free_r>
 8005d14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005d16:	b111      	cbz	r1, 8005d1e <_reclaim_reent+0x5e>
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 f839 	bl	8005d90 <_free_r>
 8005d1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005d20:	b111      	cbz	r1, 8005d28 <_reclaim_reent+0x68>
 8005d22:	4620      	mov	r0, r4
 8005d24:	f000 f834 	bl	8005d90 <_free_r>
 8005d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d2a:	b111      	cbz	r1, 8005d32 <_reclaim_reent+0x72>
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f000 f82f 	bl	8005d90 <_free_r>
 8005d32:	69a3      	ldr	r3, [r4, #24]
 8005d34:	b1e3      	cbz	r3, 8005d70 <_reclaim_reent+0xb0>
 8005d36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d38:	4620      	mov	r0, r4
 8005d3a:	4798      	blx	r3
 8005d3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005d3e:	b1b9      	cbz	r1, 8005d70 <_reclaim_reent+0xb0>
 8005d40:	4620      	mov	r0, r4
 8005d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d46:	f7ff bfad 	b.w	8005ca4 <cleanup_glue>
 8005d4a:	5949      	ldr	r1, [r1, r5]
 8005d4c:	b941      	cbnz	r1, 8005d60 <_reclaim_reent+0xa0>
 8005d4e:	3504      	adds	r5, #4
 8005d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d52:	2d80      	cmp	r5, #128	; 0x80
 8005d54:	68d9      	ldr	r1, [r3, #12]
 8005d56:	d1f8      	bne.n	8005d4a <_reclaim_reent+0x8a>
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 f819 	bl	8005d90 <_free_r>
 8005d5e:	e7ba      	b.n	8005cd6 <_reclaim_reent+0x16>
 8005d60:	680e      	ldr	r6, [r1, #0]
 8005d62:	4620      	mov	r0, r4
 8005d64:	f000 f814 	bl	8005d90 <_free_r>
 8005d68:	4631      	mov	r1, r6
 8005d6a:	e7ef      	b.n	8005d4c <_reclaim_reent+0x8c>
 8005d6c:	2500      	movs	r5, #0
 8005d6e:	e7ef      	b.n	8005d50 <_reclaim_reent+0x90>
 8005d70:	bd70      	pop	{r4, r5, r6, pc}
 8005d72:	bf00      	nop
 8005d74:	20000010 	.word	0x20000010

08005d78 <__malloc_lock>:
 8005d78:	4801      	ldr	r0, [pc, #4]	; (8005d80 <__malloc_lock+0x8>)
 8005d7a:	f7ff bf7b 	b.w	8005c74 <__retarget_lock_acquire_recursive>
 8005d7e:	bf00      	nop
 8005d80:	20004b30 	.word	0x20004b30

08005d84 <__malloc_unlock>:
 8005d84:	4801      	ldr	r0, [pc, #4]	; (8005d8c <__malloc_unlock+0x8>)
 8005d86:	f7ff bf76 	b.w	8005c76 <__retarget_lock_release_recursive>
 8005d8a:	bf00      	nop
 8005d8c:	20004b30 	.word	0x20004b30

08005d90 <_free_r>:
 8005d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d92:	2900      	cmp	r1, #0
 8005d94:	d044      	beq.n	8005e20 <_free_r+0x90>
 8005d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d9a:	9001      	str	r0, [sp, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005da2:	bfb8      	it	lt
 8005da4:	18e4      	addlt	r4, r4, r3
 8005da6:	f7ff ffe7 	bl	8005d78 <__malloc_lock>
 8005daa:	4a1e      	ldr	r2, [pc, #120]	; (8005e24 <_free_r+0x94>)
 8005dac:	9801      	ldr	r0, [sp, #4]
 8005dae:	6813      	ldr	r3, [r2, #0]
 8005db0:	b933      	cbnz	r3, 8005dc0 <_free_r+0x30>
 8005db2:	6063      	str	r3, [r4, #4]
 8005db4:	6014      	str	r4, [r2, #0]
 8005db6:	b003      	add	sp, #12
 8005db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dbc:	f7ff bfe2 	b.w	8005d84 <__malloc_unlock>
 8005dc0:	42a3      	cmp	r3, r4
 8005dc2:	d908      	bls.n	8005dd6 <_free_r+0x46>
 8005dc4:	6825      	ldr	r5, [r4, #0]
 8005dc6:	1961      	adds	r1, r4, r5
 8005dc8:	428b      	cmp	r3, r1
 8005dca:	bf01      	itttt	eq
 8005dcc:	6819      	ldreq	r1, [r3, #0]
 8005dce:	685b      	ldreq	r3, [r3, #4]
 8005dd0:	1949      	addeq	r1, r1, r5
 8005dd2:	6021      	streq	r1, [r4, #0]
 8005dd4:	e7ed      	b.n	8005db2 <_free_r+0x22>
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	b10b      	cbz	r3, 8005de0 <_free_r+0x50>
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	d9fa      	bls.n	8005dd6 <_free_r+0x46>
 8005de0:	6811      	ldr	r1, [r2, #0]
 8005de2:	1855      	adds	r5, r2, r1
 8005de4:	42a5      	cmp	r5, r4
 8005de6:	d10b      	bne.n	8005e00 <_free_r+0x70>
 8005de8:	6824      	ldr	r4, [r4, #0]
 8005dea:	4421      	add	r1, r4
 8005dec:	1854      	adds	r4, r2, r1
 8005dee:	42a3      	cmp	r3, r4
 8005df0:	6011      	str	r1, [r2, #0]
 8005df2:	d1e0      	bne.n	8005db6 <_free_r+0x26>
 8005df4:	681c      	ldr	r4, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	6053      	str	r3, [r2, #4]
 8005dfa:	4421      	add	r1, r4
 8005dfc:	6011      	str	r1, [r2, #0]
 8005dfe:	e7da      	b.n	8005db6 <_free_r+0x26>
 8005e00:	d902      	bls.n	8005e08 <_free_r+0x78>
 8005e02:	230c      	movs	r3, #12
 8005e04:	6003      	str	r3, [r0, #0]
 8005e06:	e7d6      	b.n	8005db6 <_free_r+0x26>
 8005e08:	6825      	ldr	r5, [r4, #0]
 8005e0a:	1961      	adds	r1, r4, r5
 8005e0c:	428b      	cmp	r3, r1
 8005e0e:	bf04      	itt	eq
 8005e10:	6819      	ldreq	r1, [r3, #0]
 8005e12:	685b      	ldreq	r3, [r3, #4]
 8005e14:	6063      	str	r3, [r4, #4]
 8005e16:	bf04      	itt	eq
 8005e18:	1949      	addeq	r1, r1, r5
 8005e1a:	6021      	streq	r1, [r4, #0]
 8005e1c:	6054      	str	r4, [r2, #4]
 8005e1e:	e7ca      	b.n	8005db6 <_free_r+0x26>
 8005e20:	b003      	add	sp, #12
 8005e22:	bd30      	pop	{r4, r5, pc}
 8005e24:	20004b34 	.word	0x20004b34

08005e28 <_init>:
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2a:	bf00      	nop
 8005e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2e:	bc08      	pop	{r3}
 8005e30:	469e      	mov	lr, r3
 8005e32:	4770      	bx	lr

08005e34 <_fini>:
 8005e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e36:	bf00      	nop
 8005e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3a:	bc08      	pop	{r3}
 8005e3c:	469e      	mov	lr, r3
 8005e3e:	4770      	bx	lr
