
043_FreeRTOS_Run_Time_STATS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08007528  08007528  00017528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007670  08007670  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007678  08007678  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800767c  0800767c  0001767c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004d70  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004de4  20004de4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bed6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000385b  00000000  00000000  0003bf7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  0003f7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e0  00000000  00000000  00040e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000041f3  00000000  00000000  000422e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018dc1  00000000  00000000  000464d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2236  00000000  00000000  0005f294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001414ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062c4  00000000  00000000  0014151c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007510 	.word	0x08007510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007510 	.word	0x08007510

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vSetupTimerForRunTimeStats>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vSetupTimerForRunTimeStats()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim13);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <vSetupTimerForRunTimeStats+0x10>)
 800058a:	f002 f8a1 	bl	80026d0 <HAL_TIM_Base_Start_IT>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000d8 	.word	0x200000d8

08000598 <prvStatsTask>:
static void prvStatsTask(void *pvParameters)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionTime = xTaskGetTickCount();
 80005a0:	f004 fcd4 	bl	8004f4c <xTaskGetTickCount>
 80005a4:	4603      	mov	r3, r0
 80005a6:	60bb      	str	r3, [r7, #8]
	static signed char cStringBuffer[ 512 ];
	const TickType_t xBlockPeriod = pdMS_TO_TICKS( 5000 );
 80005a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80005ac:	617b      	str	r3, [r7, #20]
	const char *buf = "\nTask\t\tAbs\t\t\t%%\n";
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <prvStatsTask+0x74>)
 80005b0:	613b      	str	r3, [r7, #16]
	const char *dash = "------------------------------------------\r\n";
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <prvStatsTask+0x78>)
 80005b4:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		vTaskDelayUntil( &xLastExecutionTime, xBlockPeriod );
 80005b6:	f107 0308 	add.w	r3, r7, #8
 80005ba:	6979      	ldr	r1, [r7, #20]
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 fa8f 	bl	8004ae0 <vTaskDelayUntil>
		vTaskGetRunTimeStats( cStringBuffer );
 80005c2:	4814      	ldr	r0, [pc, #80]	; (8000614 <prvStatsTask+0x7c>)
 80005c4:	f005 fa36 	bl	8005a34 <vTaskGetRunTimeStats>
		HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80005c8:	6938      	ldr	r0, [r7, #16]
 80005ca:	f7ff fe01 	bl	80001d0 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	6939      	ldr	r1, [r7, #16]
 80005d8:	480f      	ldr	r0, [pc, #60]	; (8000618 <prvStatsTask+0x80>)
 80005da:	f002 fb1a 	bl	8002c12 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)dash, strlen(dash), HAL_MAX_DELAY);
 80005de:	68f8      	ldr	r0, [r7, #12]
 80005e0:	f7ff fdf6 	bl	80001d0 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	68f9      	ldr	r1, [r7, #12]
 80005ee:	480a      	ldr	r0, [pc, #40]	; (8000618 <prvStatsTask+0x80>)
 80005f0:	f002 fb0f 	bl	8002c12 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)cStringBuffer, strlen(cStringBuffer), HAL_MAX_DELAY);
 80005f4:	4807      	ldr	r0, [pc, #28]	; (8000614 <prvStatsTask+0x7c>)
 80005f6:	f7ff fdeb 	bl	80001d0 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	4904      	ldr	r1, [pc, #16]	; (8000614 <prvStatsTask+0x7c>)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <prvStatsTask+0x80>)
 8000606:	f002 fb04 	bl	8002c12 <HAL_UART_Transmit>
		vTaskDelayUntil( &xLastExecutionTime, xBlockPeriod );
 800060a:	e7d4      	b.n	80005b6 <prvStatsTask+0x1e>
 800060c:	08007528 	.word	0x08007528
 8000610:	0800753c 	.word	0x0800753c
 8000614:	20000168 	.word	0x20000168
 8000618:	20000120 	.word	0x20000120

0800061c <LedTask>:
	}
}
void LedTask(void *pvParameters)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <LedTask+0x1c>)
 800062a:	f001 faf8 	bl	8001c1e <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 800062e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000632:	f004 fad3 	bl	8004bdc <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000636:	e7f5      	b.n	8000624 <LedTask+0x8>
 8000638:	40020c00 	.word	0x40020c00

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fbe7 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f829 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f92f 	bl	80008ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064e:	f000 f903 	bl	8000858 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000652:	f000 f88d 	bl	8000770 <MX_ADC1_Init>
  MX_TIM13_Init();
 8000656:	f000 f8dd 	bl	8000814 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(prvStatsTask, "Stat Task", 2000, NULL, 1, NULL);
 800065a:	2300      	movs	r3, #0
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	2301      	movs	r3, #1
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000668:	4908      	ldr	r1, [pc, #32]	; (800068c <main+0x50>)
 800066a:	4809      	ldr	r0, [pc, #36]	; (8000690 <main+0x54>)
 800066c:	f004 f8d9 	bl	8004822 <xTaskCreate>
  xTaskCreate(LedTask, "Led Task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000670:	2300      	movs	r3, #0
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2301      	movs	r3, #1
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2300      	movs	r3, #0
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	4905      	ldr	r1, [pc, #20]	; (8000694 <main+0x58>)
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <main+0x5c>)
 8000680:	f004 f8cf 	bl	8004822 <xTaskCreate>
  vTaskStartScheduler();
 8000684:	f004 fb44 	bl	8004d10 <vTaskStartScheduler>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000688:	e7fe      	b.n	8000688 <main+0x4c>
 800068a:	bf00      	nop
 800068c:	0800756c 	.word	0x0800756c
 8000690:	08000599 	.word	0x08000599
 8000694:	08007578 	.word	0x08007578
 8000698:	0800061d 	.word	0x0800061d

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f006 fa58 	bl	8006b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a27      	ldr	r2, [pc, #156]	; (8000768 <SystemClock_Config+0xcc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b25      	ldr	r3, [pc, #148]	; (8000768 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <SystemClock_Config+0xd0>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000710:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000714:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800071a:	2307      	movs	r3, #7
 800071c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	4618      	mov	r0, r3
 8000724:	f001 faba 	bl	8001c9c <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800072e:	f000 f947 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2105      	movs	r1, #5
 8000750:	4618      	mov	r0, r3
 8000752:	f001 fd1b 	bl	800218c <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800075c:	f000 f930 	bl	80009c0 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3750      	adds	r7, #80	; 0x50
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <MX_ADC1_Init+0x98>)
 8000784:	4a21      	ldr	r2, [pc, #132]	; (800080c <MX_ADC1_Init+0x9c>)
 8000786:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_ADC1_Init+0x98>)
 800078a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800078e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_ADC1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_ADC1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_ADC1_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_ADC1_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_ADC1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_ADC1_Init+0x98>)
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MX_ADC1_Init+0xa0>)
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_ADC1_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_ADC1_Init+0x98>)
 80007be:	2201      	movs	r2, #1
 80007c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_ADC1_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_ADC1_Init+0x98>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <MX_ADC1_Init+0x98>)
 80007d2:	f000 fb61 	bl	8000e98 <HAL_ADC_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007dc:	f000 f8f0 	bl	80009c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007e8:	2307      	movs	r3, #7
 80007ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_ADC1_Init+0x98>)
 80007f2:	f000 fcc3 	bl	800117c <HAL_ADC_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007fc:	f000 f8e0 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000090 	.word	0x20000090
 800080c:	40012000 	.word	0x40012000
 8000810:	0f000001 	.word	0x0f000001

08000814 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MX_TIM13_Init+0x3c>)
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <MX_TIM13_Init+0x40>)
 800081c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_TIM13_Init+0x3c>)
 8000820:	2253      	movs	r2, #83	; 0x53
 8000822:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_TIM13_Init+0x3c>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10-1;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_TIM13_Init+0x3c>)
 800082c:	2209      	movs	r2, #9
 800082e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_TIM13_Init+0x3c>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_TIM13_Init+0x3c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_TIM13_Init+0x3c>)
 800083e:	f001 fef7 	bl	8002630 <HAL_TIM_Base_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 8000848:	f000 f8ba 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000d8 	.word	0x200000d8
 8000854:	40001c00 	.word	0x40001c00

08000858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <MX_USART2_UART_Init+0x50>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000890:	f002 f972 	bl	8002b78 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800089a:	f000 f891 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000120 	.word	0x20000120
 80008a8:	40004400 	.word	0x40004400

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_GPIO_Init+0xc8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a2a      	ldr	r2, [pc, #168]	; (8000974 <MX_GPIO_Init+0xc8>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_GPIO_Init+0xc8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <MX_GPIO_Init+0xc8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <MX_GPIO_Init+0xc8>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_GPIO_Init+0xc8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_GPIO_Init+0xc8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <MX_GPIO_Init+0xc8>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_GPIO_Init+0xc8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800091c:	4816      	ldr	r0, [pc, #88]	; (8000978 <MX_GPIO_Init+0xcc>)
 800091e:	f001 f965 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000922:	2301      	movs	r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800092a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_GPIO_Init+0xd0>)
 8000938:	f000 ffbc 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800093c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4619      	mov	r1, r3
 8000954:	4808      	ldr	r0, [pc, #32]	; (8000978 <MX_GPIO_Init+0xcc>)
 8000956:	f000 ffad 	bl	80018b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2105      	movs	r1, #5
 800095e:	2006      	movs	r0, #6
 8000960:	f000 feec 	bl	800173c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000964:	2006      	movs	r0, #6
 8000966:	f000 ff05 	bl	8001774 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096a:	bf00      	nop
 800096c:	3720      	adds	r7, #32
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40020c00 	.word	0x40020c00
 800097c:	40020000 	.word	0x40020000

08000980 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d101      	bne.n	8000996 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000992:	f000 fa61 	bl	8000e58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM13)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d104      	bne.n	80009aa <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
	  ulOverflowCount++;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009a8:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40002000 	.word	0x40002000
 80009b8:	40001c00 	.word	0x40001c00
 80009bc:	20000164 	.word	0x20000164

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <Error_Handler+0x8>
	...

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_MspInit+0x54>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <HAL_MspInit+0x54>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_MspInit+0x54>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_MspInit+0x54>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_MspInit+0x54>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_MspInit+0x54>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	210f      	movs	r1, #15
 8000a0e:	f06f 0001 	mvn.w	r0, #1
 8000a12:	f000 fe93 	bl	800173c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <HAL_ADC_MspInit+0x8c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d12f      	bne.n	8000aa6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_ADC_MspInit+0x90>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <HAL_ADC_MspInit+0x90>)
 8000a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_ADC_MspInit+0x90>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_ADC_MspInit+0x90>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <HAL_ADC_MspInit+0x90>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_ADC_MspInit+0x90>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a82:	2303      	movs	r3, #3
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <HAL_ADC_MspInit+0x94>)
 8000a92:	f000 ff0f 	bl	80018b4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2105      	movs	r1, #5
 8000a9a:	2012      	movs	r0, #18
 8000a9c:	f000 fe4e 	bl	800173c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000aa0:	2012      	movs	r0, #18
 8000aa2:	f000 fe67 	bl	8001774 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40012000 	.word	0x40012000
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d115      	bne.n	8000afa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_TIM_Base_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <HAL_TIM_Base_MspInit+0x4c>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_TIM_Base_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2105      	movs	r1, #5
 8000aee:	202c      	movs	r0, #44	; 0x2c
 8000af0:	f000 fe24 	bl	800173c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000af4:	202c      	movs	r0, #44	; 0x2c
 8000af6:	f000 fe3d 	bl	8001774 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40001c00 	.word	0x40001c00
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <HAL_UART_MspInit+0x94>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d133      	bne.n	8000b96 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <HAL_UART_MspInit+0x98>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a1b      	ldr	r2, [pc, #108]	; (8000ba4 <HAL_UART_MspInit+0x98>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_UART_MspInit+0x98>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_UART_MspInit+0x98>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <HAL_UART_MspInit+0x98>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_UART_MspInit+0x98>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b66:	230c      	movs	r3, #12
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b76:	2307      	movs	r3, #7
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <HAL_UART_MspInit+0x9c>)
 8000b82:	f000 fe97 	bl	80018b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2105      	movs	r1, #5
 8000b8a:	2026      	movs	r0, #38	; 0x26
 8000b8c:	f000 fdd6 	bl	800173c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b90:	2026      	movs	r0, #38	; 0x26
 8000b92:	f000 fdef 	bl	8001774 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000

08000bac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	; 0x38
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <HAL_InitTick+0xe4>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	4a32      	ldr	r2, [pc, #200]	; (8000c90 <HAL_InitTick+0xe4>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6413      	str	r3, [r2, #64]	; 0x40
 8000bcc:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <HAL_InitTick+0xe4>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd8:	f107 0210 	add.w	r2, r7, #16
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fcf2 	bl	80025cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000be8:	6a3b      	ldr	r3, [r7, #32]
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d103      	bne.n	8000bfa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bf2:	f001 fcc3 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 8000bf6:	6378      	str	r0, [r7, #52]	; 0x34
 8000bf8:	e004      	b.n	8000c04 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bfa:	f001 fcbf 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c06:	4a23      	ldr	r2, [pc, #140]	; (8000c94 <HAL_InitTick+0xe8>)
 8000c08:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0c:	0c9b      	lsrs	r3, r3, #18
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <HAL_InitTick+0xec>)
 8000c14:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <HAL_InitTick+0xf0>)
 8000c16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000c18:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <HAL_InitTick+0xec>)
 8000c1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c1e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000c20:	4a1d      	ldr	r2, [pc, #116]	; (8000c98 <HAL_InitTick+0xec>)
 8000c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c24:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_InitTick+0xec>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <HAL_InitTick+0xec>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_InitTick+0xec>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000c38:	4817      	ldr	r0, [pc, #92]	; (8000c98 <HAL_InitTick+0xec>)
 8000c3a:	f001 fcf9 	bl	8002630 <HAL_TIM_Base_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d11b      	bne.n	8000c84 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000c4c:	4812      	ldr	r0, [pc, #72]	; (8000c98 <HAL_InitTick+0xec>)
 8000c4e:	f001 fd3f 	bl	80026d0 <HAL_TIM_Base_Start_IT>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d111      	bne.n	8000c84 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000c60:	202d      	movs	r0, #45	; 0x2d
 8000c62:	f000 fd87 	bl	8001774 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d808      	bhi.n	8000c7e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	202d      	movs	r0, #45	; 0x2d
 8000c72:	f000 fd63 	bl	800173c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_InitTick+0xf4>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	e002      	b.n	8000c84 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3738      	adds	r7, #56	; 0x38
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40023800 	.word	0x40023800
 8000c94:	431bde83 	.word	0x431bde83
 8000c98:	20000368 	.word	0x20000368
 8000c9c:	40002000 	.word	0x40002000
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 ffbd 	bl	8001c54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <ADC_IRQHandler+0x10>)
 8000ce6:	f000 f91a 	bl	8000f1e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000090 	.word	0x20000090

08000cf4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <USART2_IRQHandler+0x10>)
 8000cfa:	f002 f81d 	bl	8002d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000120 	.word	0x20000120

08000d08 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000d0e:	f001 fd4f 	bl	80027b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000d8 	.word	0x200000d8

08000d1c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000d22:	f001 fd45 	bl	80027b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000368 	.word	0x20000368

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f005 fec4 	bl	8006aec <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20020000 	.word	0x20020000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	200003b0 	.word	0x200003b0
 8000d98:	20004de8 	.word	0x20004de8

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dea:	f7ff ffd7 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f005 fe83 	bl	8006af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fc23 	bl	800063c <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e04:	08007680 	.word	0x08007680
  ldr r2, =_sbss
 8000e08:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e0c:	20004de4 	.word	0x20004de4

08000e10 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <CAN1_RX0_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 fc72 	bl	8001726 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	200f      	movs	r0, #15
 8000e44:	f7ff feb2 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fdc0 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	200003b4 	.word	0x200003b4

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200003b4 	.word	0x200003b4

08000e98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e033      	b.n	8000f16 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d109      	bne.n	8000eca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff fdb4 	bl	8000a24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 0310 	and.w	r3, r3, #16
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d118      	bne.n	8000f08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ede:	f023 0302 	bic.w	r3, r3, #2
 8000ee2:	f043 0202 	orr.w	r2, r3, #2
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 fa68 	bl	80013c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f023 0303 	bic.w	r3, r3, #3
 8000efe:	f043 0201 	orr.w	r2, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	641a      	str	r2, [r3, #64]	; 0x40
 8000f06:	e001      	b.n	8000f0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	f003 0320 	and.w	r3, r3, #32
 8000f4c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d049      	beq.n	8000fe8 <HAL_ADC_IRQHandler+0xca>
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d046      	beq.n	8000fe8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d105      	bne.n	8000f72 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d12b      	bne.n	8000fd8 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d127      	bne.n	8000fd8 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d119      	bne.n	8000fd8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0220 	bic.w	r2, r2, #32
 8000fb2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d105      	bne.n	8000fd8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f043 0201 	orr.w	r2, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f8b0 	bl	800113e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f06f 0212 	mvn.w	r2, #18
 8000fe6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d057      	beq.n	80010ae <HAL_ADC_IRQHandler+0x190>
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d054      	beq.n	80010ae <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 0310 	and.w	r3, r3, #16
 800100c:	2b00      	cmp	r3, #0
 800100e:	d105      	bne.n	800101c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d139      	bne.n	800109e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001030:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001042:	2b00      	cmp	r3, #0
 8001044:	d12b      	bne.n	800109e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001050:	2b00      	cmp	r3, #0
 8001052:	d124      	bne.n	800109e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800105e:	2b00      	cmp	r3, #0
 8001060:	d11d      	bne.n	800109e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001066:	2b00      	cmp	r3, #0
 8001068:	d119      	bne.n	800109e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001078:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 fa8a 	bl	80015b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f06f 020c 	mvn.w	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010bc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d017      	beq.n	80010f4 <HAL_ADC_IRQHandler+0x1d6>
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d014      	beq.n	80010f4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d10d      	bne.n	80010f4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f834 	bl	8001152 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f06f 0201 	mvn.w	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0320 	and.w	r3, r3, #32
 80010fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001102:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d015      	beq.n	8001136 <HAL_ADC_IRQHandler+0x218>
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d012      	beq.n	8001136 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	f043 0202 	orr.w	r2, r3, #2
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f06f 0220 	mvn.w	r2, #32
 8001124:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f81d 	bl	8001166 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f06f 0220 	mvn.w	r2, #32
 8001134:	601a      	str	r2, [r3, #0]
  }
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_ADC_ConfigChannel+0x1c>
 8001194:	2302      	movs	r3, #2
 8001196:	e105      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x228>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b09      	cmp	r3, #9
 80011a6:	d925      	bls.n	80011f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68d9      	ldr	r1, [r3, #12]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	3b1e      	subs	r3, #30
 80011be:	2207      	movs	r2, #7
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43da      	mvns	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	400a      	ands	r2, r1
 80011cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68d9      	ldr	r1, [r3, #12]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	4603      	mov	r3, r0
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4403      	add	r3, r0
 80011e6:	3b1e      	subs	r3, #30
 80011e8:	409a      	lsls	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	e022      	b.n	800123a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6919      	ldr	r1, [r3, #16]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	2207      	movs	r2, #7
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	400a      	ands	r2, r1
 8001216:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6919      	ldr	r1, [r3, #16]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	4603      	mov	r3, r0
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4403      	add	r3, r0
 8001230:	409a      	lsls	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b06      	cmp	r3, #6
 8001240:	d824      	bhi.n	800128c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	3b05      	subs	r3, #5
 8001254:	221f      	movs	r2, #31
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	400a      	ands	r2, r1
 8001262:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3b05      	subs	r3, #5
 800127e:	fa00 f203 	lsl.w	r2, r0, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
 800128a:	e04c      	b.n	8001326 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b0c      	cmp	r3, #12
 8001292:	d824      	bhi.n	80012de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	3b23      	subs	r3, #35	; 0x23
 80012a6:	221f      	movs	r2, #31
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43da      	mvns	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	400a      	ands	r2, r1
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	3b23      	subs	r3, #35	; 0x23
 80012d0:	fa00 f203 	lsl.w	r2, r0, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	631a      	str	r2, [r3, #48]	; 0x30
 80012dc:	e023      	b.n	8001326 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	3b41      	subs	r3, #65	; 0x41
 80012f0:	221f      	movs	r2, #31
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	400a      	ands	r2, r1
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	b29b      	uxth	r3, r3
 800130c:	4618      	mov	r0, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	3b41      	subs	r3, #65	; 0x41
 800131a:	fa00 f203 	lsl.w	r2, r0, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001326:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <HAL_ADC_ConfigChannel+0x234>)
 8001328:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <HAL_ADC_ConfigChannel+0x238>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d109      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x1cc>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b12      	cmp	r3, #18
 800133a:	d105      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <HAL_ADC_ConfigChannel+0x238>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d123      	bne.n	800139a <HAL_ADC_ConfigChannel+0x21e>
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b10      	cmp	r3, #16
 8001358:	d003      	beq.n	8001362 <HAL_ADC_ConfigChannel+0x1e6>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b11      	cmp	r3, #17
 8001360:	d11b      	bne.n	800139a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b10      	cmp	r3, #16
 8001374:	d111      	bne.n	800139a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_ADC_ConfigChannel+0x23c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <HAL_ADC_ConfigChannel+0x240>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	0c9a      	lsrs	r2, r3, #18
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800138c:	e002      	b.n	8001394 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	3b01      	subs	r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f9      	bne.n	800138e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40012300 	.word	0x40012300
 80013b4:	40012000 	.word	0x40012000
 80013b8:	20000000 	.word	0x20000000
 80013bc:	431bde83 	.word	0x431bde83

080013c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013c8:	4b79      	ldr	r3, [pc, #484]	; (80015b0 <ADC_Init+0x1f0>)
 80013ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6859      	ldr	r1, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	021a      	lsls	r2, r3, #8
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001418:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6859      	ldr	r1, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800143a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6899      	ldr	r1, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	4a58      	ldr	r2, [pc, #352]	; (80015b4 <ADC_Init+0x1f4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d022      	beq.n	800149e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001466:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6899      	ldr	r1, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6899      	ldr	r1, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	e00f      	b.n	80014be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0202 	bic.w	r2, r2, #2
 80014cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6899      	ldr	r1, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7e1b      	ldrb	r3, [r3, #24]
 80014d8:	005a      	lsls	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d01b      	beq.n	8001524 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800150a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6859      	ldr	r1, [r3, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	3b01      	subs	r3, #1
 8001518:	035a      	lsls	r2, r3, #13
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	e007      	b.n	8001534 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001532:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	3b01      	subs	r3, #1
 8001550:	051a      	lsls	r2, r3, #20
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001568:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6899      	ldr	r1, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001576:	025a      	lsls	r2, r3, #9
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800158e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6899      	ldr	r1, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	029a      	lsls	r2, r3, #10
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	609a      	str	r2, [r3, #8]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40012300 	.word	0x40012300
 80015b4:	0f000001 	.word	0x0f000001

080015b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4907      	ldr	r1, [pc, #28]	; (8001668 <__NVIC_EnableIRQ+0x38>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ff4c 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174e:	f7ff ff61 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001752:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	6978      	ldr	r0, [r7, #20]
 800175a:	f7ff ffb1 	bl	80016c0 <NVIC_EncodePriority>
 800175e:	4602      	mov	r2, r0
 8001760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff80 	bl	800166c <__NVIC_SetPriority>
}
 800176c:	bf00      	nop
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff54 	bl	8001630 <__NVIC_EnableIRQ>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800179e:	f7ff fb6f 	bl	8000e80 <HAL_GetTick>
 80017a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d008      	beq.n	80017c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e052      	b.n	8001868 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0216 	bic.w	r2, r2, #22
 80017d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <HAL_DMA_Abort+0x62>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0208 	bic.w	r2, r2, #8
 8001800:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001812:	e013      	b.n	800183c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001814:	f7ff fb34 	bl	8000e80 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b05      	cmp	r3, #5
 8001820:	d90c      	bls.n	800183c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2220      	movs	r2, #32
 8001826:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2203      	movs	r2, #3
 800182c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e015      	b.n	8001868 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1e4      	bne.n	8001814 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184e:	223f      	movs	r2, #63	; 0x3f
 8001850:	409a      	lsls	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d004      	beq.n	800188e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00c      	b.n	80018a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2205      	movs	r2, #5
 8001892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0201 	bic.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	e16b      	b.n	8001ba8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018d0:	2201      	movs	r2, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f040 815a 	bne.w	8001ba2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d005      	beq.n	8001906 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001902:	2b02      	cmp	r3, #2
 8001904:	d130      	bne.n	8001968 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800193c:	2201      	movs	r2, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 0201 	and.w	r2, r3, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b03      	cmp	r3, #3
 8001972:	d017      	beq.n	80019a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d123      	bne.n	80019f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	08da      	lsrs	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3208      	adds	r2, #8
 80019b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	220f      	movs	r2, #15
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	08da      	lsrs	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3208      	adds	r2, #8
 80019f2:	69b9      	ldr	r1, [r7, #24]
 80019f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0203 	and.w	r2, r3, #3
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80b4 	beq.w	8001ba2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b60      	ldr	r3, [pc, #384]	; (8001bc0 <HAL_GPIO_Init+0x30c>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	4a5f      	ldr	r2, [pc, #380]	; (8001bc0 <HAL_GPIO_Init+0x30c>)
 8001a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	4b5d      	ldr	r3, [pc, #372]	; (8001bc0 <HAL_GPIO_Init+0x30c>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a56:	4a5b      	ldr	r2, [pc, #364]	; (8001bc4 <HAL_GPIO_Init+0x310>)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_GPIO_Init+0x314>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d02b      	beq.n	8001ada <HAL_GPIO_Init+0x226>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a51      	ldr	r2, [pc, #324]	; (8001bcc <HAL_GPIO_Init+0x318>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d025      	beq.n	8001ad6 <HAL_GPIO_Init+0x222>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a50      	ldr	r2, [pc, #320]	; (8001bd0 <HAL_GPIO_Init+0x31c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01f      	beq.n	8001ad2 <HAL_GPIO_Init+0x21e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4f      	ldr	r2, [pc, #316]	; (8001bd4 <HAL_GPIO_Init+0x320>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d019      	beq.n	8001ace <HAL_GPIO_Init+0x21a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4e      	ldr	r2, [pc, #312]	; (8001bd8 <HAL_GPIO_Init+0x324>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0x216>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4d      	ldr	r2, [pc, #308]	; (8001bdc <HAL_GPIO_Init+0x328>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_GPIO_Init+0x212>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4c      	ldr	r2, [pc, #304]	; (8001be0 <HAL_GPIO_Init+0x32c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d007      	beq.n	8001ac2 <HAL_GPIO_Init+0x20e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4b      	ldr	r2, [pc, #300]	; (8001be4 <HAL_GPIO_Init+0x330>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d101      	bne.n	8001abe <HAL_GPIO_Init+0x20a>
 8001aba:	2307      	movs	r3, #7
 8001abc:	e00e      	b.n	8001adc <HAL_GPIO_Init+0x228>
 8001abe:	2308      	movs	r3, #8
 8001ac0:	e00c      	b.n	8001adc <HAL_GPIO_Init+0x228>
 8001ac2:	2306      	movs	r3, #6
 8001ac4:	e00a      	b.n	8001adc <HAL_GPIO_Init+0x228>
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	e008      	b.n	8001adc <HAL_GPIO_Init+0x228>
 8001aca:	2304      	movs	r3, #4
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x228>
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e004      	b.n	8001adc <HAL_GPIO_Init+0x228>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e002      	b.n	8001adc <HAL_GPIO_Init+0x228>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_GPIO_Init+0x228>
 8001ada:	2300      	movs	r3, #0
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	f002 0203 	and.w	r2, r2, #3
 8001ae2:	0092      	lsls	r2, r2, #2
 8001ae4:	4093      	lsls	r3, r2
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aec:	4935      	ldr	r1, [pc, #212]	; (8001bc4 <HAL_GPIO_Init+0x310>)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	3302      	adds	r3, #2
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afa:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1e:	4a32      	ldr	r2, [pc, #200]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b24:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b48:	4a27      	ldr	r2, [pc, #156]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b72:	4a1d      	ldr	r2, [pc, #116]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b9c:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	2b0f      	cmp	r3, #15
 8001bac:	f67f ae90 	bls.w	80018d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40013800 	.word	0x40013800
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	40020400 	.word	0x40020400
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020c00 	.word	0x40020c00
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40021400 	.word	0x40021400
 8001be0:	40021800 	.word	0x40021800
 8001be4:	40021c00 	.word	0x40021c00
 8001be8:	40013c00 	.word	0x40013c00

08001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bfc:	787b      	ldrb	r3, [r7, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c08:	e003      	b.n	8001c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	041a      	lsls	r2, r3, #16
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	619a      	str	r2, [r3, #24]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b085      	sub	sp, #20
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	460b      	mov	r3, r1
 8001c28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c30:	887a      	ldrh	r2, [r7, #2]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4013      	ands	r3, r2
 8001c36:	041a      	lsls	r2, r3, #16
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	400b      	ands	r3, r1
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f806 	bl	8001c84 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40013c00 	.word	0x40013c00

08001c84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e267      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d075      	beq.n	8001da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cba:	4b88      	ldr	r3, [pc, #544]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc6:	4b85      	ldr	r3, [pc, #532]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d112      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd2:	4b82      	ldr	r3, [pc, #520]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cde:	d10b      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	4b7e      	ldr	r3, [pc, #504]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d05b      	beq.n	8001da4 <HAL_RCC_OscConfig+0x108>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d157      	bne.n	8001da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e242      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d00:	d106      	bne.n	8001d10 <HAL_RCC_OscConfig+0x74>
 8001d02:	4b76      	ldr	r3, [pc, #472]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a75      	ldr	r2, [pc, #468]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e01d      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x98>
 8001d1a:	4b70      	ldr	r3, [pc, #448]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6f      	ldr	r2, [pc, #444]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b6d      	ldr	r3, [pc, #436]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6c      	ldr	r2, [pc, #432]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d34:	4b69      	ldr	r3, [pc, #420]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a68      	ldr	r2, [pc, #416]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b66      	ldr	r3, [pc, #408]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a65      	ldr	r2, [pc, #404]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff f894 	bl	8000e80 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff f890 	bl	8000e80 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e207      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b5b      	ldr	r3, [pc, #364]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0xc0>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f880 	bl	8000e80 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff f87c 	bl	8000e80 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1f3      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	4b51      	ldr	r3, [pc, #324]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0xe8>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d063      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001db2:	4b4a      	ldr	r3, [pc, #296]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dbe:	4b47      	ldr	r3, [pc, #284]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d11c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dca:	4b44      	ldr	r3, [pc, #272]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	4b41      	ldr	r3, [pc, #260]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e1c7      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4937      	ldr	r1, [pc, #220]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	e03a      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0c:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <HAL_RCC_OscConfig+0x244>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff f835 	bl	8000e80 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff f831 	bl	8000e80 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1a8      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b28      	ldr	r3, [pc, #160]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4925      	ldr	r1, [pc, #148]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_RCC_OscConfig+0x244>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff f814 	bl	8000e80 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e5c:	f7ff f810 	bl	8000e80 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e187      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d036      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <HAL_RCC_OscConfig+0x248>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7fe fff4 	bl	8000e80 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7fe fff0 	bl	8000e80 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e167      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_OscConfig+0x240>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x200>
 8001eba:	e01b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_RCC_OscConfig+0x248>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7fe ffdd 	bl	8000e80 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	e00e      	b.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eca:	f7fe ffd9 	bl	8000e80 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d907      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e150      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	42470000 	.word	0x42470000
 8001ee4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee8:	4b88      	ldr	r3, [pc, #544]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1ea      	bne.n	8001eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 8097 	beq.w	8002030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f06:	4b81      	ldr	r3, [pc, #516]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10f      	bne.n	8001f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	4b7d      	ldr	r3, [pc, #500]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	4a7c      	ldr	r2, [pc, #496]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f20:	6413      	str	r3, [r2, #64]	; 0x40
 8001f22:	4b7a      	ldr	r3, [pc, #488]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b77      	ldr	r3, [pc, #476]	; (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d118      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3e:	4b74      	ldr	r3, [pc, #464]	; (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a73      	ldr	r2, [pc, #460]	; (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7fe ff99 	bl	8000e80 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7fe ff95 	bl	8000e80 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e10c      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b6a      	ldr	r3, [pc, #424]	; (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x2ea>
 8001f78:	4b64      	ldr	r3, [pc, #400]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7c:	4a63      	ldr	r2, [pc, #396]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6713      	str	r3, [r2, #112]	; 0x70
 8001f84:	e01c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x324>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x30c>
 8001f8e:	4b5f      	ldr	r3, [pc, #380]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f92:	4a5e      	ldr	r2, [pc, #376]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9a:	4b5c      	ldr	r3, [pc, #368]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	4a5b      	ldr	r2, [pc, #364]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x324>
 8001fa8:	4b58      	ldr	r3, [pc, #352]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fac:	4a57      	ldr	r2, [pc, #348]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb4:	4b55      	ldr	r3, [pc, #340]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	4a54      	ldr	r2, [pc, #336]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001fba:	f023 0304 	bic.w	r3, r3, #4
 8001fbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d015      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7fe ff5a 	bl	8000e80 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ff56 	bl	8000e80 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e0cb      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe6:	4b49      	ldr	r3, [pc, #292]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0ee      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x334>
 8001ff2:	e014      	b.n	800201e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff4:	f7fe ff44 	bl	8000e80 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7fe ff40 	bl	8000e80 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e0b5      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002012:	4b3e      	ldr	r3, [pc, #248]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ee      	bne.n	8001ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800201e:	7dfb      	ldrb	r3, [r7, #23]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4b39      	ldr	r3, [pc, #228]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	4a38      	ldr	r2, [pc, #224]	; (800210c <HAL_RCC_OscConfig+0x470>)
 800202a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a1 	beq.w	800217c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800203a:	4b34      	ldr	r3, [pc, #208]	; (800210c <HAL_RCC_OscConfig+0x470>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d05c      	beq.n	8002100 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d141      	bne.n	80020d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b31      	ldr	r3, [pc, #196]	; (8002114 <HAL_RCC_OscConfig+0x478>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7fe ff14 	bl	8000e80 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205c:	f7fe ff10 	bl	8000e80 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e087      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206e:	4b27      	ldr	r3, [pc, #156]	; (800210c <HAL_RCC_OscConfig+0x470>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	019b      	lsls	r3, r3, #6
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	3b01      	subs	r3, #1
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	491b      	ldr	r1, [pc, #108]	; (800210c <HAL_RCC_OscConfig+0x470>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_RCC_OscConfig+0x478>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7fe fee9 	bl	8000e80 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b2:	f7fe fee5 	bl	8000e80 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e05c      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_RCC_OscConfig+0x470>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x416>
 80020d0:	e054      	b.n	800217c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <HAL_RCC_OscConfig+0x478>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe fed2 	bl	8000e80 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e0:	f7fe fece 	bl	8000e80 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e045      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_RCC_OscConfig+0x470>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x444>
 80020fe:	e03d      	b.n	800217c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d107      	bne.n	8002118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e038      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
 800210c:	40023800 	.word	0x40023800
 8002110:	40007000 	.word	0x40007000
 8002114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCC_OscConfig+0x4ec>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d028      	beq.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d121      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d11a      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002148:	4013      	ands	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800214e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002150:	4293      	cmp	r3, r2
 8002152:	d111      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	085b      	lsrs	r3, r3, #1
 8002160:	3b01      	subs	r3, #1
 8002162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d107      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800

0800218c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0cc      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b68      	ldr	r3, [pc, #416]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d90c      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b65      	ldr	r3, [pc, #404]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b63      	ldr	r3, [pc, #396]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e0:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a58      	ldr	r2, [pc, #352]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f8:	4b53      	ldr	r3, [pc, #332]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a52      	ldr	r2, [pc, #328]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002204:	4b50      	ldr	r3, [pc, #320]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	494d      	ldr	r1, [pc, #308]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d044      	beq.n	80022ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d119      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e07f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d003      	beq.n	800224a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002246:	2b03      	cmp	r3, #3
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224a:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e06f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e067      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226a:	4b37      	ldr	r3, [pc, #220]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f023 0203 	bic.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4934      	ldr	r1, [pc, #208]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	4313      	orrs	r3, r2
 800227a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800227c:	f7fe fe00 	bl	8000e80 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	e00a      	b.n	800229a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7fe fdfc 	bl	8000e80 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e04f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 020c 	and.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d1eb      	bne.n	8002284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d20c      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b22      	ldr	r3, [pc, #136]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e032      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4916      	ldr	r1, [pc, #88]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	490e      	ldr	r1, [pc, #56]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002312:	f000 f821 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002316:	4602      	mov	r2, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	490a      	ldr	r1, [pc, #40]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a09      	ldr	r2, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fc3a 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023c00 	.word	0x40023c00
 8002348:	40023800 	.word	0x40023800
 800234c:	080075c4 	.word	0x080075c4
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800235c:	b094      	sub	sp, #80	; 0x50
 800235e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	647b      	str	r3, [r7, #68]	; 0x44
 8002364:	2300      	movs	r3, #0
 8002366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002368:	2300      	movs	r3, #0
 800236a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002370:	4b79      	ldr	r3, [pc, #484]	; (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b08      	cmp	r3, #8
 800237a:	d00d      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x40>
 800237c:	2b08      	cmp	r3, #8
 800237e:	f200 80e1 	bhi.w	8002544 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x34>
 8002386:	2b04      	cmp	r3, #4
 8002388:	d003      	beq.n	8002392 <HAL_RCC_GetSysClockFreq+0x3a>
 800238a:	e0db      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800238c:	4b73      	ldr	r3, [pc, #460]	; (800255c <HAL_RCC_GetSysClockFreq+0x204>)
 800238e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002390:	e0db      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002392:	4b73      	ldr	r3, [pc, #460]	; (8002560 <HAL_RCC_GetSysClockFreq+0x208>)
 8002394:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002396:	e0d8      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002398:	4b6f      	ldr	r3, [pc, #444]	; (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023a2:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d063      	beq.n	8002476 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ae:	4b6a      	ldr	r3, [pc, #424]	; (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	099b      	lsrs	r3, r3, #6
 80023b4:	2200      	movs	r2, #0
 80023b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80023b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
 80023c2:	2300      	movs	r3, #0
 80023c4:	637b      	str	r3, [r7, #52]	; 0x34
 80023c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023ca:	4622      	mov	r2, r4
 80023cc:	462b      	mov	r3, r5
 80023ce:	f04f 0000 	mov.w	r0, #0
 80023d2:	f04f 0100 	mov.w	r1, #0
 80023d6:	0159      	lsls	r1, r3, #5
 80023d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023dc:	0150      	lsls	r0, r2, #5
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4621      	mov	r1, r4
 80023e4:	1a51      	subs	r1, r2, r1
 80023e6:	6139      	str	r1, [r7, #16]
 80023e8:	4629      	mov	r1, r5
 80023ea:	eb63 0301 	sbc.w	r3, r3, r1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023fc:	4659      	mov	r1, fp
 80023fe:	018b      	lsls	r3, r1, #6
 8002400:	4651      	mov	r1, sl
 8002402:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002406:	4651      	mov	r1, sl
 8002408:	018a      	lsls	r2, r1, #6
 800240a:	4651      	mov	r1, sl
 800240c:	ebb2 0801 	subs.w	r8, r2, r1
 8002410:	4659      	mov	r1, fp
 8002412:	eb63 0901 	sbc.w	r9, r3, r1
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800242a:	4690      	mov	r8, r2
 800242c:	4699      	mov	r9, r3
 800242e:	4623      	mov	r3, r4
 8002430:	eb18 0303 	adds.w	r3, r8, r3
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	462b      	mov	r3, r5
 8002438:	eb49 0303 	adc.w	r3, r9, r3
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800244a:	4629      	mov	r1, r5
 800244c:	024b      	lsls	r3, r1, #9
 800244e:	4621      	mov	r1, r4
 8002450:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002454:	4621      	mov	r1, r4
 8002456:	024a      	lsls	r2, r1, #9
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800245e:	2200      	movs	r2, #0
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
 8002462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002464:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002468:	f7fd ff0a 	bl	8000280 <__aeabi_uldivmod>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4613      	mov	r3, r2
 8002472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002474:	e058      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002476:	4b38      	ldr	r3, [pc, #224]	; (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	099b      	lsrs	r3, r3, #6
 800247c:	2200      	movs	r2, #0
 800247e:	4618      	mov	r0, r3
 8002480:	4611      	mov	r1, r2
 8002482:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002486:	623b      	str	r3, [r7, #32]
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
 800248c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002490:	4642      	mov	r2, r8
 8002492:	464b      	mov	r3, r9
 8002494:	f04f 0000 	mov.w	r0, #0
 8002498:	f04f 0100 	mov.w	r1, #0
 800249c:	0159      	lsls	r1, r3, #5
 800249e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a2:	0150      	lsls	r0, r2, #5
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4641      	mov	r1, r8
 80024aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80024ae:	4649      	mov	r1, r9
 80024b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024c8:	ebb2 040a 	subs.w	r4, r2, sl
 80024cc:	eb63 050b 	sbc.w	r5, r3, fp
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	00eb      	lsls	r3, r5, #3
 80024da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024de:	00e2      	lsls	r2, r4, #3
 80024e0:	4614      	mov	r4, r2
 80024e2:	461d      	mov	r5, r3
 80024e4:	4643      	mov	r3, r8
 80024e6:	18e3      	adds	r3, r4, r3
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	464b      	mov	r3, r9
 80024ec:	eb45 0303 	adc.w	r3, r5, r3
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024fe:	4629      	mov	r1, r5
 8002500:	028b      	lsls	r3, r1, #10
 8002502:	4621      	mov	r1, r4
 8002504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002508:	4621      	mov	r1, r4
 800250a:	028a      	lsls	r2, r1, #10
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002512:	2200      	movs	r2, #0
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	61fa      	str	r2, [r7, #28]
 8002518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800251c:	f7fd feb0 	bl	8000280 <__aeabi_uldivmod>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4613      	mov	r3, r2
 8002526:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	3301      	adds	r3, #1
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002538:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800253a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002542:	e002      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_RCC_GetSysClockFreq+0x204>)
 8002546:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800254c:	4618      	mov	r0, r3
 800254e:	3750      	adds	r7, #80	; 0x50
 8002550:	46bd      	mov	sp, r7
 8002552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	00f42400 	.word	0x00f42400
 8002560:	007a1200 	.word	0x007a1200

08002564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <HAL_RCC_GetHCLKFreq+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000000 	.word	0x20000000

0800257c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002580:	f7ff fff0 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	0a9b      	lsrs	r3, r3, #10
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4903      	ldr	r1, [pc, #12]	; (80025a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	080075d4 	.word	0x080075d4

080025a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025a8:	f7ff ffdc 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	0b5b      	lsrs	r3, r3, #13
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4903      	ldr	r1, [pc, #12]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	080075d4 	.word	0x080075d4

080025cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	220f      	movs	r2, #15
 80025da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_RCC_GetClockConfig+0x5c>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0203 	and.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_RCC_GetClockConfig+0x5c>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_RCC_GetClockConfig+0x5c>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_GetClockConfig+0x5c>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	08db      	lsrs	r3, r3, #3
 8002606:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <HAL_RCC_GetClockConfig+0x60>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0207 	and.w	r2, r3, #7
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	601a      	str	r2, [r3, #0]
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800
 800262c:	40023c00 	.word	0x40023c00

08002630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e041      	b.n	80026c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe fa30 	bl	8000abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3304      	adds	r3, #4
 800266c:	4619      	mov	r1, r3
 800266e:	4610      	mov	r0, r2
 8002670:	f000 f9ce 	bl	8002a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d001      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e04e      	b.n	8002786 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a23      	ldr	r2, [pc, #140]	; (8002794 <HAL_TIM_Base_Start_IT+0xc4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d022      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002712:	d01d      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <HAL_TIM_Base_Start_IT+0xc8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d018      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1e      	ldr	r2, [pc, #120]	; (800279c <HAL_TIM_Base_Start_IT+0xcc>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d013      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1c      	ldr	r2, [pc, #112]	; (80027a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00e      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x80>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a18      	ldr	r2, [pc, #96]	; (80027ac <HAL_TIM_Base_Start_IT+0xdc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d111      	bne.n	8002774 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b06      	cmp	r3, #6
 8002760:	d010      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002772:	e007      	b.n	8002784 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40010000 	.word	0x40010000
 8002798:	40000400 	.word	0x40000400
 800279c:	40000800 	.word	0x40000800
 80027a0:	40000c00 	.word	0x40000c00
 80027a4:	40010400 	.word	0x40010400
 80027a8:	40014000 	.word	0x40014000
 80027ac:	40001800 	.word	0x40001800

080027b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d122      	bne.n	800280c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d11b      	bne.n	800280c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0202 	mvn.w	r2, #2
 80027dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f8ee 	bl	80029d4 <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8e0 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f8f1 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b04      	cmp	r3, #4
 8002818:	d122      	bne.n	8002860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b04      	cmp	r3, #4
 8002826:	d11b      	bne.n	8002860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0204 	mvn.w	r2, #4
 8002830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f8c4 	bl	80029d4 <HAL_TIM_IC_CaptureCallback>
 800284c:	e005      	b.n	800285a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f8b6 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f8c7 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b08      	cmp	r3, #8
 800286c:	d122      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b08      	cmp	r3, #8
 800287a:	d11b      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0208 	mvn.w	r2, #8
 8002884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2204      	movs	r2, #4
 800288a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f89a 	bl	80029d4 <HAL_TIM_IC_CaptureCallback>
 80028a0:	e005      	b.n	80028ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f88c 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f89d 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d122      	bne.n	8002908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d11b      	bne.n	8002908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0210 	mvn.w	r2, #16
 80028d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2208      	movs	r2, #8
 80028de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f870 	bl	80029d4 <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f862 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f873 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d10e      	bne.n	8002934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d107      	bne.n	8002934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0201 	mvn.w	r2, #1
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe f826 	bl	8000980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	2b80      	cmp	r3, #128	; 0x80
 8002940:	d10e      	bne.n	8002960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d107      	bne.n	8002960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f902 	bl	8002b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b40      	cmp	r3, #64	; 0x40
 800296c:	d10e      	bne.n	800298c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	d107      	bne.n	800298c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f838 	bl	80029fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b20      	cmp	r3, #32
 8002998:	d10e      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d107      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0220 	mvn.w	r2, #32
 80029b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8cc 	bl	8002b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a40      	ldr	r2, [pc, #256]	; (8002b24 <TIM_Base_SetConfig+0x114>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d013      	beq.n	8002a50 <TIM_Base_SetConfig+0x40>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2e:	d00f      	beq.n	8002a50 <TIM_Base_SetConfig+0x40>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a3d      	ldr	r2, [pc, #244]	; (8002b28 <TIM_Base_SetConfig+0x118>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00b      	beq.n	8002a50 <TIM_Base_SetConfig+0x40>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a3c      	ldr	r2, [pc, #240]	; (8002b2c <TIM_Base_SetConfig+0x11c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d007      	beq.n	8002a50 <TIM_Base_SetConfig+0x40>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a3b      	ldr	r2, [pc, #236]	; (8002b30 <TIM_Base_SetConfig+0x120>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d003      	beq.n	8002a50 <TIM_Base_SetConfig+0x40>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a3a      	ldr	r2, [pc, #232]	; (8002b34 <TIM_Base_SetConfig+0x124>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d108      	bne.n	8002a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a2f      	ldr	r2, [pc, #188]	; (8002b24 <TIM_Base_SetConfig+0x114>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d02b      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d027      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a2c      	ldr	r2, [pc, #176]	; (8002b28 <TIM_Base_SetConfig+0x118>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d023      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a2b      	ldr	r2, [pc, #172]	; (8002b2c <TIM_Base_SetConfig+0x11c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01f      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a2a      	ldr	r2, [pc, #168]	; (8002b30 <TIM_Base_SetConfig+0x120>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01b      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <TIM_Base_SetConfig+0x124>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d017      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a28      	ldr	r2, [pc, #160]	; (8002b38 <TIM_Base_SetConfig+0x128>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <TIM_Base_SetConfig+0x12c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00f      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <TIM_Base_SetConfig+0x130>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00b      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a25      	ldr	r2, [pc, #148]	; (8002b44 <TIM_Base_SetConfig+0x134>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <TIM_Base_SetConfig+0x138>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a23      	ldr	r2, [pc, #140]	; (8002b4c <TIM_Base_SetConfig+0x13c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d108      	bne.n	8002ad4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <TIM_Base_SetConfig+0x114>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d003      	beq.n	8002b08 <TIM_Base_SetConfig+0xf8>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a0c      	ldr	r2, [pc, #48]	; (8002b34 <TIM_Base_SetConfig+0x124>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d103      	bne.n	8002b10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	615a      	str	r2, [r3, #20]
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800
 8002b30:	40000c00 	.word	0x40000c00
 8002b34:	40010400 	.word	0x40010400
 8002b38:	40014000 	.word	0x40014000
 8002b3c:	40014400 	.word	0x40014400
 8002b40:	40014800 	.word	0x40014800
 8002b44:	40001800 	.word	0x40001800
 8002b48:	40001c00 	.word	0x40001c00
 8002b4c:	40002000 	.word	0x40002000

08002b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e03f      	b.n	8002c0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fd ffb4 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	; 0x24
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fd7b 	bl	80036b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002be0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b08a      	sub	sp, #40	; 0x28
 8002c16:	af02      	add	r7, sp, #8
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d17c      	bne.n	8002d2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_UART_Transmit+0x2c>
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e075      	b.n	8002d2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_UART_Transmit+0x3e>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e06e      	b.n	8002d2e <HAL_UART_Transmit+0x11c>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2221      	movs	r2, #33	; 0x21
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c66:	f7fe f90b 	bl	8000e80 <HAL_GetTick>
 8002c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	88fa      	ldrh	r2, [r7, #6]
 8002c70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	88fa      	ldrh	r2, [r7, #6]
 8002c76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c80:	d108      	bne.n	8002c94 <HAL_UART_Transmit+0x82>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d104      	bne.n	8002c94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	e003      	b.n	8002c9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ca4:	e02a      	b.n	8002cfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2200      	movs	r2, #0
 8002cae:	2180      	movs	r1, #128	; 0x80
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 faf9 	bl	80032a8 <UART_WaitOnFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e036      	b.n	8002d2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10b      	bne.n	8002cde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	3302      	adds	r3, #2
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	e007      	b.n	8002cee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	3301      	adds	r3, #1
 8002cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1cf      	bne.n	8002ca6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2140      	movs	r1, #64	; 0x40
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fac9 	bl	80032a8 <UART_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e006      	b.n	8002d2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e000      	b.n	8002d2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
  }
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b0ba      	sub	sp, #232	; 0xe8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10f      	bne.n	8002d9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <HAL_UART_IRQHandler+0x66>
 8002d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fbd3 	bl	8003542 <UART_Receive_IT>
      return;
 8002d9c:	e256      	b.n	800324c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80de 	beq.w	8002f64 <HAL_UART_IRQHandler+0x22c>
 8002da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d106      	bne.n	8002dc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80d1 	beq.w	8002f64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_UART_IRQHandler+0xae>
 8002dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_UART_IRQHandler+0xd2>
 8002df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f043 0202 	orr.w	r2, r3, #2
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00b      	beq.n	8002e2e <HAL_UART_IRQHandler+0xf6>
 8002e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f043 0204 	orr.w	r2, r3, #4
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d011      	beq.n	8002e5e <HAL_UART_IRQHandler+0x126>
 8002e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f043 0208 	orr.w	r2, r3, #8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 81ed 	beq.w	8003242 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_UART_IRQHandler+0x14e>
 8002e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fb5e 	bl	8003542 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d103      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x17a>
 8002eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d04f      	beq.n	8002f52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fa66 	bl	8003384 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d141      	bne.n	8002f4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3314      	adds	r3, #20
 8002ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ed4:	e853 3f00 	ldrex	r3, [r3]
 8002ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3314      	adds	r3, #20
 8002eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f02:	e841 2300 	strex	r3, r2, [r1]
 8002f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1d9      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d013      	beq.n	8002f42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	4a7d      	ldr	r2, [pc, #500]	; (8003114 <HAL_UART_IRQHandler+0x3dc>)
 8002f20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe fca2 	bl	8001870 <HAL_DMA_Abort_IT>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d016      	beq.n	8002f60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	e00e      	b.n	8002f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f99a 	bl	800327c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f48:	e00a      	b.n	8002f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f996 	bl	800327c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f50:	e006      	b.n	8002f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f992 	bl	800327c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f5e:	e170      	b.n	8003242 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	bf00      	nop
    return;
 8002f62:	e16e      	b.n	8003242 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	f040 814a 	bne.w	8003202 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8143 	beq.w	8003202 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 813c 	beq.w	8003202 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b40      	cmp	r3, #64	; 0x40
 8002fac:	f040 80b4 	bne.w	8003118 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8140 	beq.w	8003246 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	f080 8139 	bcs.w	8003246 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe6:	f000 8088 	beq.w	80030fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ff8:	e853 3f00 	ldrex	r3, [r3]
 8002ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003008:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003016:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800301a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003022:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800302e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1d9      	bne.n	8002fea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3314      	adds	r3, #20
 800303c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003040:	e853 3f00 	ldrex	r3, [r3]
 8003044:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3314      	adds	r3, #20
 8003056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800305a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800305e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003062:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800306c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e1      	bne.n	8003036 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3314      	adds	r3, #20
 8003078:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800307c:	e853 3f00 	ldrex	r3, [r3]
 8003080:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3314      	adds	r3, #20
 8003092:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003096:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003098:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800309c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e3      	bne.n	8003072 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c2:	e853 3f00 	ldrex	r3, [r3]
 80030c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ca:	f023 0310 	bic.w	r3, r3, #16
 80030ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	330c      	adds	r3, #12
 80030d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80030de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030e4:	e841 2300 	strex	r3, r2, [r1]
 80030e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e3      	bne.n	80030b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fe fb4b 	bl	8001790 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003102:	b29b      	uxth	r3, r3
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	b29b      	uxth	r3, r3
 8003108:	4619      	mov	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f8c0 	bl	8003290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003110:	e099      	b.n	8003246 <HAL_UART_IRQHandler+0x50e>
 8003112:	bf00      	nop
 8003114:	0800344b 	.word	0x0800344b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003120:	b29b      	uxth	r3, r3
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 808b 	beq.w	800324a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8086 	beq.w	800324a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	330c      	adds	r3, #12
 8003144:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003154:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003162:	647a      	str	r2, [r7, #68]	; 0x44
 8003164:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e3      	bne.n	800313e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3314      	adds	r3, #20
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	623b      	str	r3, [r7, #32]
   return(result);
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3314      	adds	r3, #20
 8003196:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800319a:	633a      	str	r2, [r7, #48]	; 0x30
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e3      	bne.n	8003176 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	330c      	adds	r3, #12
 80031c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	e853 3f00 	ldrex	r3, [r3]
 80031ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0310 	bic.w	r3, r3, #16
 80031d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	330c      	adds	r3, #12
 80031dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031e0:	61fa      	str	r2, [r7, #28]
 80031e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e4:	69b9      	ldr	r1, [r7, #24]
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	e841 2300 	strex	r3, r2, [r1]
 80031ec:	617b      	str	r3, [r7, #20]
   return(result);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e3      	bne.n	80031bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031f8:	4619      	mov	r1, r3
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f848 	bl	8003290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003200:	e023      	b.n	800324a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_UART_IRQHandler+0x4ea>
 800320e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f929 	bl	8003472 <UART_Transmit_IT>
    return;
 8003220:	e014      	b.n	800324c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00e      	beq.n	800324c <HAL_UART_IRQHandler+0x514>
 800322e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f969 	bl	8003512 <UART_EndTransmit_IT>
    return;
 8003240:	e004      	b.n	800324c <HAL_UART_IRQHandler+0x514>
    return;
 8003242:	bf00      	nop
 8003244:	e002      	b.n	800324c <HAL_UART_IRQHandler+0x514>
      return;
 8003246:	bf00      	nop
 8003248:	e000      	b.n	800324c <HAL_UART_IRQHandler+0x514>
      return;
 800324a:	bf00      	nop
  }
}
 800324c:	37e8      	adds	r7, #232	; 0xe8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop

08003254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b090      	sub	sp, #64	; 0x40
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b8:	e050      	b.n	800335c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d04c      	beq.n	800335c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032c8:	f7fd fdda 	bl	8000e80 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d241      	bcs.n	800335c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	330c      	adds	r3, #12
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	e853 3f00 	ldrex	r3, [r3]
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032f8:	637a      	str	r2, [r7, #52]	; 0x34
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003300:	e841 2300 	strex	r3, r2, [r1]
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e5      	bne.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3314      	adds	r3, #20
 8003312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	e853 3f00 	ldrex	r3, [r3]
 800331a:	613b      	str	r3, [r7, #16]
   return(result);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	63bb      	str	r3, [r7, #56]	; 0x38
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3314      	adds	r3, #20
 800332a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800332c:	623a      	str	r2, [r7, #32]
 800332e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003330:	69f9      	ldr	r1, [r7, #28]
 8003332:	6a3a      	ldr	r2, [r7, #32]
 8003334:	e841 2300 	strex	r3, r2, [r1]
 8003338:	61bb      	str	r3, [r7, #24]
   return(result);
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1e5      	bne.n	800330c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e00f      	b.n	800337c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4013      	ands	r3, r2
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	429a      	cmp	r2, r3
 8003378:	d09f      	beq.n	80032ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3740      	adds	r7, #64	; 0x40
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003384:	b480      	push	{r7}
 8003386:	b095      	sub	sp, #84	; 0x54
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003396:	e853 3f00 	ldrex	r3, [r3]
 800339a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033ac:	643a      	str	r2, [r7, #64]	; 0x40
 80033ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033b4:	e841 2300 	strex	r3, r2, [r1]
 80033b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e5      	bne.n	800338c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3314      	adds	r3, #20
 80033c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	e853 3f00 	ldrex	r3, [r3]
 80033ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3314      	adds	r3, #20
 80033de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e5      	bne.n	80033c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d119      	bne.n	8003430 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	60bb      	str	r3, [r7, #8]
   return(result);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f023 0310 	bic.w	r3, r3, #16
 8003412:	647b      	str	r3, [r7, #68]	; 0x44
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800341c:	61ba      	str	r2, [r7, #24]
 800341e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6979      	ldr	r1, [r7, #20]
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	613b      	str	r3, [r7, #16]
   return(result);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e5      	bne.n	80033fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800343e:	bf00      	nop
 8003440:	3754      	adds	r7, #84	; 0x54
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff ff09 	bl	800327c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b21      	cmp	r3, #33	; 0x21
 8003484:	d13e      	bne.n	8003504 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348e:	d114      	bne.n	80034ba <UART_Transmit_IT+0x48>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d110      	bne.n	80034ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	1c9a      	adds	r2, r3, #2
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	621a      	str	r2, [r3, #32]
 80034b8:	e008      	b.n	80034cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	1c59      	adds	r1, r3, #1
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6211      	str	r1, [r2, #32]
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4619      	mov	r1, r3
 80034da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10f      	bne.n	8003500 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003528:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fe8e 	bl	8003254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b08c      	sub	sp, #48	; 0x30
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b22      	cmp	r3, #34	; 0x22
 8003554:	f040 80ab 	bne.w	80036ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003560:	d117      	bne.n	8003592 <UART_Receive_IT+0x50>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d113      	bne.n	8003592 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	b29b      	uxth	r3, r3
 800357c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003580:	b29a      	uxth	r2, r3
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	1c9a      	adds	r2, r3, #2
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28
 8003590:	e026      	b.n	80035e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003598:	2300      	movs	r3, #0
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a4:	d007      	beq.n	80035b6 <UART_Receive_IT+0x74>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <UART_Receive_IT+0x82>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e008      	b.n	80035d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	4619      	mov	r1, r3
 80035ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d15a      	bne.n	80036aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0220 	bic.w	r2, r2, #32
 8003602:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	2b01      	cmp	r3, #1
 8003632:	d135      	bne.n	80036a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	613b      	str	r3, [r7, #16]
   return(result);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f023 0310 	bic.w	r3, r3, #16
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	330c      	adds	r3, #12
 8003658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365a:	623a      	str	r2, [r7, #32]
 800365c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365e:	69f9      	ldr	r1, [r7, #28]
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	61bb      	str	r3, [r7, #24]
   return(result);
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e5      	bne.n	800363a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b10      	cmp	r3, #16
 800367a:	d10a      	bne.n	8003692 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fdf9 	bl	8003290 <HAL_UARTEx_RxEventCallback>
 800369e:	e002      	b.n	80036a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff fde1 	bl	8003268 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e002      	b.n	80036b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3730      	adds	r7, #48	; 0x30
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036bc:	b0c0      	sub	sp, #256	; 0x100
 80036be:	af00      	add	r7, sp, #0
 80036c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	68d9      	ldr	r1, [r3, #12]
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	ea40 0301 	orr.w	r3, r0, r1
 80036e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003710:	f021 010c 	bic.w	r1, r1, #12
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800371e:	430b      	orrs	r3, r1
 8003720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003732:	6999      	ldr	r1, [r3, #24]
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	ea40 0301 	orr.w	r3, r0, r1
 800373e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b8f      	ldr	r3, [pc, #572]	; (8003984 <UART_SetConfig+0x2cc>)
 8003748:	429a      	cmp	r2, r3
 800374a:	d005      	beq.n	8003758 <UART_SetConfig+0xa0>
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4b8d      	ldr	r3, [pc, #564]	; (8003988 <UART_SetConfig+0x2d0>)
 8003754:	429a      	cmp	r2, r3
 8003756:	d104      	bne.n	8003762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003758:	f7fe ff24 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 800375c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003760:	e003      	b.n	800376a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003762:	f7fe ff0b 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 8003766:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003774:	f040 810c 	bne.w	8003990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800377c:	2200      	movs	r2, #0
 800377e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003782:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800378a:	4622      	mov	r2, r4
 800378c:	462b      	mov	r3, r5
 800378e:	1891      	adds	r1, r2, r2
 8003790:	65b9      	str	r1, [r7, #88]	; 0x58
 8003792:	415b      	adcs	r3, r3
 8003794:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800379a:	4621      	mov	r1, r4
 800379c:	eb12 0801 	adds.w	r8, r2, r1
 80037a0:	4629      	mov	r1, r5
 80037a2:	eb43 0901 	adc.w	r9, r3, r1
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ba:	4690      	mov	r8, r2
 80037bc:	4699      	mov	r9, r3
 80037be:	4623      	mov	r3, r4
 80037c0:	eb18 0303 	adds.w	r3, r8, r3
 80037c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037c8:	462b      	mov	r3, r5
 80037ca:	eb49 0303 	adc.w	r3, r9, r3
 80037ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037e6:	460b      	mov	r3, r1
 80037e8:	18db      	adds	r3, r3, r3
 80037ea:	653b      	str	r3, [r7, #80]	; 0x50
 80037ec:	4613      	mov	r3, r2
 80037ee:	eb42 0303 	adc.w	r3, r2, r3
 80037f2:	657b      	str	r3, [r7, #84]	; 0x54
 80037f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037fc:	f7fc fd40 	bl	8000280 <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4b61      	ldr	r3, [pc, #388]	; (800398c <UART_SetConfig+0x2d4>)
 8003806:	fba3 2302 	umull	r2, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	011c      	lsls	r4, r3, #4
 800380e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003812:	2200      	movs	r2, #0
 8003814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003818:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800381c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003820:	4642      	mov	r2, r8
 8003822:	464b      	mov	r3, r9
 8003824:	1891      	adds	r1, r2, r2
 8003826:	64b9      	str	r1, [r7, #72]	; 0x48
 8003828:	415b      	adcs	r3, r3
 800382a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800382c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003830:	4641      	mov	r1, r8
 8003832:	eb12 0a01 	adds.w	sl, r2, r1
 8003836:	4649      	mov	r1, r9
 8003838:	eb43 0b01 	adc.w	fp, r3, r1
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800384c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003850:	4692      	mov	sl, r2
 8003852:	469b      	mov	fp, r3
 8003854:	4643      	mov	r3, r8
 8003856:	eb1a 0303 	adds.w	r3, sl, r3
 800385a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800385e:	464b      	mov	r3, r9
 8003860:	eb4b 0303 	adc.w	r3, fp, r3
 8003864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003874:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800387c:	460b      	mov	r3, r1
 800387e:	18db      	adds	r3, r3, r3
 8003880:	643b      	str	r3, [r7, #64]	; 0x40
 8003882:	4613      	mov	r3, r2
 8003884:	eb42 0303 	adc.w	r3, r2, r3
 8003888:	647b      	str	r3, [r7, #68]	; 0x44
 800388a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800388e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003892:	f7fc fcf5 	bl	8000280 <__aeabi_uldivmod>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4611      	mov	r1, r2
 800389c:	4b3b      	ldr	r3, [pc, #236]	; (800398c <UART_SetConfig+0x2d4>)
 800389e:	fba3 2301 	umull	r2, r3, r3, r1
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2264      	movs	r2, #100	; 0x64
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	1acb      	subs	r3, r1, r3
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038b2:	4b36      	ldr	r3, [pc, #216]	; (800398c <UART_SetConfig+0x2d4>)
 80038b4:	fba3 2302 	umull	r2, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038c0:	441c      	add	r4, r3
 80038c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038d4:	4642      	mov	r2, r8
 80038d6:	464b      	mov	r3, r9
 80038d8:	1891      	adds	r1, r2, r2
 80038da:	63b9      	str	r1, [r7, #56]	; 0x38
 80038dc:	415b      	adcs	r3, r3
 80038de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038e4:	4641      	mov	r1, r8
 80038e6:	1851      	adds	r1, r2, r1
 80038e8:	6339      	str	r1, [r7, #48]	; 0x30
 80038ea:	4649      	mov	r1, r9
 80038ec:	414b      	adcs	r3, r1
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038fc:	4659      	mov	r1, fp
 80038fe:	00cb      	lsls	r3, r1, #3
 8003900:	4651      	mov	r1, sl
 8003902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003906:	4651      	mov	r1, sl
 8003908:	00ca      	lsls	r2, r1, #3
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	4603      	mov	r3, r0
 8003910:	4642      	mov	r2, r8
 8003912:	189b      	adds	r3, r3, r2
 8003914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003918:	464b      	mov	r3, r9
 800391a:	460a      	mov	r2, r1
 800391c:	eb42 0303 	adc.w	r3, r2, r3
 8003920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003930:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003938:	460b      	mov	r3, r1
 800393a:	18db      	adds	r3, r3, r3
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
 800393e:	4613      	mov	r3, r2
 8003940:	eb42 0303 	adc.w	r3, r2, r3
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800394a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800394e:	f7fc fc97 	bl	8000280 <__aeabi_uldivmod>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <UART_SetConfig+0x2d4>)
 8003958:	fba3 1302 	umull	r1, r3, r3, r2
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	2164      	movs	r1, #100	; 0x64
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	3332      	adds	r3, #50	; 0x32
 800396a:	4a08      	ldr	r2, [pc, #32]	; (800398c <UART_SetConfig+0x2d4>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	f003 0207 	and.w	r2, r3, #7
 8003976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4422      	add	r2, r4
 800397e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003980:	e105      	b.n	8003b8e <UART_SetConfig+0x4d6>
 8003982:	bf00      	nop
 8003984:	40011000 	.word	0x40011000
 8003988:	40011400 	.word	0x40011400
 800398c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003994:	2200      	movs	r2, #0
 8003996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800399a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800399e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039a2:	4642      	mov	r2, r8
 80039a4:	464b      	mov	r3, r9
 80039a6:	1891      	adds	r1, r2, r2
 80039a8:	6239      	str	r1, [r7, #32]
 80039aa:	415b      	adcs	r3, r3
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
 80039ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039b2:	4641      	mov	r1, r8
 80039b4:	1854      	adds	r4, r2, r1
 80039b6:	4649      	mov	r1, r9
 80039b8:	eb43 0501 	adc.w	r5, r3, r1
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	00eb      	lsls	r3, r5, #3
 80039c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ca:	00e2      	lsls	r2, r4, #3
 80039cc:	4614      	mov	r4, r2
 80039ce:	461d      	mov	r5, r3
 80039d0:	4643      	mov	r3, r8
 80039d2:	18e3      	adds	r3, r4, r3
 80039d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039d8:	464b      	mov	r3, r9
 80039da:	eb45 0303 	adc.w	r3, r5, r3
 80039de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039fe:	4629      	mov	r1, r5
 8003a00:	008b      	lsls	r3, r1, #2
 8003a02:	4621      	mov	r1, r4
 8003a04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a08:	4621      	mov	r1, r4
 8003a0a:	008a      	lsls	r2, r1, #2
 8003a0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a10:	f7fc fc36 	bl	8000280 <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4b60      	ldr	r3, [pc, #384]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	011c      	lsls	r4, r3, #4
 8003a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a34:	4642      	mov	r2, r8
 8003a36:	464b      	mov	r3, r9
 8003a38:	1891      	adds	r1, r2, r2
 8003a3a:	61b9      	str	r1, [r7, #24]
 8003a3c:	415b      	adcs	r3, r3
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a44:	4641      	mov	r1, r8
 8003a46:	1851      	adds	r1, r2, r1
 8003a48:	6139      	str	r1, [r7, #16]
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	414b      	adcs	r3, r1
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a5c:	4659      	mov	r1, fp
 8003a5e:	00cb      	lsls	r3, r1, #3
 8003a60:	4651      	mov	r1, sl
 8003a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a66:	4651      	mov	r1, sl
 8003a68:	00ca      	lsls	r2, r1, #3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4642      	mov	r2, r8
 8003a72:	189b      	adds	r3, r3, r2
 8003a74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a78:	464b      	mov	r3, r9
 8003a7a:	460a      	mov	r2, r1
 8003a7c:	eb42 0303 	adc.w	r3, r2, r3
 8003a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	008b      	lsls	r3, r1, #2
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa6:	4641      	mov	r1, r8
 8003aa8:	008a      	lsls	r2, r1, #2
 8003aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003aae:	f7fc fbe7 	bl	8000280 <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	2164      	movs	r1, #100	; 0x64
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	3332      	adds	r3, #50	; 0x32
 8003aca:	4a34      	ldr	r2, [pc, #208]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad6:	441c      	add	r4, r3
 8003ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003adc:	2200      	movs	r2, #0
 8003ade:	673b      	str	r3, [r7, #112]	; 0x70
 8003ae0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ae2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ae6:	4642      	mov	r2, r8
 8003ae8:	464b      	mov	r3, r9
 8003aea:	1891      	adds	r1, r2, r2
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	415b      	adcs	r3, r3
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003af6:	4641      	mov	r1, r8
 8003af8:	1851      	adds	r1, r2, r1
 8003afa:	6039      	str	r1, [r7, #0]
 8003afc:	4649      	mov	r1, r9
 8003afe:	414b      	adcs	r3, r1
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b0e:	4659      	mov	r1, fp
 8003b10:	00cb      	lsls	r3, r1, #3
 8003b12:	4651      	mov	r1, sl
 8003b14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b18:	4651      	mov	r1, sl
 8003b1a:	00ca      	lsls	r2, r1, #3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4603      	mov	r3, r0
 8003b22:	4642      	mov	r2, r8
 8003b24:	189b      	adds	r3, r3, r2
 8003b26:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b28:	464b      	mov	r3, r9
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	eb42 0303 	adc.w	r3, r2, r3
 8003b30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b3c:	667a      	str	r2, [r7, #100]	; 0x64
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	008b      	lsls	r3, r1, #2
 8003b4e:	4641      	mov	r1, r8
 8003b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b54:	4641      	mov	r1, r8
 8003b56:	008a      	lsls	r2, r1, #2
 8003b58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b5c:	f7fc fb90 	bl	8000280 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003b66:	fba3 1302 	umull	r1, r3, r3, r2
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2164      	movs	r1, #100	; 0x64
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	3332      	adds	r3, #50	; 0x32
 8003b78:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	f003 020f 	and.w	r2, r3, #15
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4422      	add	r2, r4
 8003b8c:	609a      	str	r2, [r3, #8]
}
 8003b8e:	bf00      	nop
 8003b90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9a:	bf00      	nop
 8003b9c:	51eb851f 	.word	0x51eb851f

08003ba0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <SysTick_Handler+0x1c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ba8:	f001 fe92 	bl	80058d0 <xTaskGetSchedulerState>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d001      	beq.n	8003bb6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003bb2:	f002 fd21 	bl	80065f8 <xPortSysTickHandler>
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	e000e010 	.word	0xe000e010

08003bc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a07      	ldr	r2, [pc, #28]	; (8003bec <vApplicationGetIdleTaskMemory+0x2c>)
 8003bd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4a06      	ldr	r2, [pc, #24]	; (8003bf0 <vApplicationGetIdleTaskMemory+0x30>)
 8003bd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2280      	movs	r2, #128	; 0x80
 8003bdc:	601a      	str	r2, [r3, #0]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	200003b8 	.word	0x200003b8
 8003bf0:	20000478 	.word	0x20000478

08003bf4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a07      	ldr	r2, [pc, #28]	; (8003c20 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4a06      	ldr	r2, [pc, #24]	; (8003c24 <vApplicationGetTimerTaskMemory+0x30>)
 8003c0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c12:	601a      	str	r2, [r3, #0]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	20000678 	.word	0x20000678
 8003c24:	20000738 	.word	0x20000738

08003c28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f103 0208 	add.w	r2, r3, #8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f103 0208 	add.w	r2, r3, #8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f103 0208 	add.w	r2, r3, #8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d103      	bne.n	8003cea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	e00c      	b.n	8003d04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3308      	adds	r3, #8
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e002      	b.n	8003cf8 <vListInsert+0x2e>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d2f6      	bcs.n	8003cf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	601a      	str	r2, [r3, #0]
}
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6892      	ldr	r2, [r2, #8]
 8003d52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6852      	ldr	r2, [r2, #4]
 8003d5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d103      	bne.n	8003d70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	1e5a      	subs	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003db6:	bf00      	nop
 8003db8:	e7fe      	b.n	8003db8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003dba:	f002 fb8b 	bl	80064d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc6:	68f9      	ldr	r1, [r7, #12]
 8003dc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	441a      	add	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	3b01      	subs	r3, #1
 8003dec:	68f9      	ldr	r1, [r7, #12]
 8003dee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003df0:	fb01 f303 	mul.w	r3, r1, r3
 8003df4:	441a      	add	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	22ff      	movs	r2, #255	; 0xff
 8003dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	22ff      	movs	r2, #255	; 0xff
 8003e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d114      	bne.n	8003e3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01a      	beq.n	8003e4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3310      	adds	r3, #16
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f001 fac1 	bl	80053a4 <xTaskRemoveFromEventList>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d012      	beq.n	8003e4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e28:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <xQueueGenericReset+0xcc>)
 8003e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	e009      	b.n	8003e4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3310      	adds	r3, #16
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fef2 	bl	8003c28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3324      	adds	r3, #36	; 0x24
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff feed 	bl	8003c28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e4e:	f002 fb71 	bl	8006534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e52:	2301      	movs	r3, #1
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	e000ed04 	.word	0xe000ed04

08003e60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08e      	sub	sp, #56	; 0x38
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10a      	bne.n	8003ea6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ea2:	bf00      	nop
 8003ea4:	e7fe      	b.n	8003ea4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <xQueueGenericCreateStatic+0x52>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <xQueueGenericCreateStatic+0x56>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <xQueueGenericCreateStatic+0x58>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	623b      	str	r3, [r7, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	e7fe      	b.n	8003ed0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d102      	bne.n	8003ede <xQueueGenericCreateStatic+0x7e>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <xQueueGenericCreateStatic+0x82>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <xQueueGenericCreateStatic+0x84>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	61fb      	str	r3, [r7, #28]
}
 8003efa:	bf00      	nop
 8003efc:	e7fe      	b.n	8003efc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003efe:	2350      	movs	r3, #80	; 0x50
 8003f00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b50      	cmp	r3, #80	; 0x50
 8003f06:	d00a      	beq.n	8003f1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	61bb      	str	r3, [r7, #24]
}
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00d      	beq.n	8003f46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f805 	bl	8003f50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3730      	adds	r7, #48	; 0x30
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e002      	b.n	8003f72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f7e:	2101      	movs	r1, #1
 8003f80:	69b8      	ldr	r0, [r7, #24]
 8003f82:	f7ff ff05 	bl	8003d90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08e      	sub	sp, #56	; 0x38
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <xQueueGenericSend+0x32>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d103      	bne.n	8003fd8 <xQueueGenericSend+0x40>
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <xQueueGenericSend+0x44>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <xQueueGenericSend+0x46>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <xQueueGenericSend+0x60>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ff4:	bf00      	nop
 8003ff6:	e7fe      	b.n	8003ff6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d103      	bne.n	8004006 <xQueueGenericSend+0x6e>
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <xQueueGenericSend+0x72>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <xQueueGenericSend+0x74>
 800400a:	2300      	movs	r3, #0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <xQueueGenericSend+0x8e>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	623b      	str	r3, [r7, #32]
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004026:	f001 fc53 	bl	80058d0 <xTaskGetSchedulerState>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d102      	bne.n	8004036 <xQueueGenericSend+0x9e>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <xQueueGenericSend+0xa2>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <xQueueGenericSend+0xa4>
 800403a:	2300      	movs	r3, #0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <xQueueGenericSend+0xbe>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	61fb      	str	r3, [r7, #28]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004056:	f002 fa3d 	bl	80064d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	429a      	cmp	r2, r3
 8004064:	d302      	bcc.n	800406c <xQueueGenericSend+0xd4>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d129      	bne.n	80040c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004072:	f000 fa0b 	bl	800448c <prvCopyDataToQueue>
 8004076:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	2b00      	cmp	r3, #0
 800407e:	d010      	beq.n	80040a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004082:	3324      	adds	r3, #36	; 0x24
 8004084:	4618      	mov	r0, r3
 8004086:	f001 f98d 	bl	80053a4 <xTaskRemoveFromEventList>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d013      	beq.n	80040b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004090:	4b3f      	ldr	r3, [pc, #252]	; (8004190 <xQueueGenericSend+0x1f8>)
 8004092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	e00a      	b.n	80040b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040a8:	4b39      	ldr	r3, [pc, #228]	; (8004190 <xQueueGenericSend+0x1f8>)
 80040aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040b8:	f002 fa3c 	bl	8006534 <vPortExitCritical>
				return pdPASS;
 80040bc:	2301      	movs	r3, #1
 80040be:	e063      	b.n	8004188 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d103      	bne.n	80040ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040c6:	f002 fa35 	bl	8006534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e05c      	b.n	8004188 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040d4:	f107 0314 	add.w	r3, r7, #20
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 f9c7 	bl	800546c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040de:	2301      	movs	r3, #1
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040e2:	f002 fa27 	bl	8006534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040e6:	f000 fe85 	bl	8004df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040ea:	f002 f9f3 	bl	80064d4 <vPortEnterCritical>
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d103      	bne.n	8004104 <xQueueGenericSend+0x16c>
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800410a:	b25b      	sxtb	r3, r3
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d103      	bne.n	800411a <xQueueGenericSend+0x182>
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800411a:	f002 fa0b 	bl	8006534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800411e:	1d3a      	adds	r2, r7, #4
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	4611      	mov	r1, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f001 f9b6 	bl	8005498 <xTaskCheckForTimeOut>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d124      	bne.n	800417c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004134:	f000 faa2 	bl	800467c <prvIsQueueFull>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d018      	beq.n	8004170 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	3310      	adds	r3, #16
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4611      	mov	r1, r2
 8004146:	4618      	mov	r0, r3
 8004148:	f001 f8dc 	bl	8005304 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800414c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800414e:	f000 fa2d 	bl	80045ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004152:	f000 fe5d 	bl	8004e10 <xTaskResumeAll>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	f47f af7c 	bne.w	8004056 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <xQueueGenericSend+0x1f8>)
 8004160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	e772      	b.n	8004056 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004172:	f000 fa1b 	bl	80045ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004176:	f000 fe4b 	bl	8004e10 <xTaskResumeAll>
 800417a:	e76c      	b.n	8004056 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800417c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800417e:	f000 fa15 	bl	80045ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004182:	f000 fe45 	bl	8004e10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004186:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004188:	4618      	mov	r0, r3
 800418a:	3738      	adds	r7, #56	; 0x38
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	e000ed04 	.word	0xe000ed04

08004194 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b090      	sub	sp, #64	; 0x40
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041be:	bf00      	nop
 80041c0:	e7fe      	b.n	80041c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d103      	bne.n	80041d0 <xQueueGenericSendFromISR+0x3c>
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <xQueueGenericSendFromISR+0x40>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <xQueueGenericSendFromISR+0x42>
 80041d4:	2300      	movs	r3, #0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041ec:	bf00      	nop
 80041ee:	e7fe      	b.n	80041ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d103      	bne.n	80041fe <xQueueGenericSendFromISR+0x6a>
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <xQueueGenericSendFromISR+0x6e>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <xQueueGenericSendFromISR+0x70>
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	623b      	str	r3, [r7, #32]
}
 800421a:	bf00      	nop
 800421c:	e7fe      	b.n	800421c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800421e:	f002 fa3b 	bl	8006698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004222:	f3ef 8211 	mrs	r2, BASEPRI
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	61fa      	str	r2, [r7, #28]
 8004238:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800423a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800423c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <xQueueGenericSendFromISR+0xbc>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d12f      	bne.n	80042b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004266:	f000 f911 	bl	800448c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800426a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004272:	d112      	bne.n	800429a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	2b00      	cmp	r3, #0
 800427a:	d016      	beq.n	80042aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800427c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427e:	3324      	adds	r3, #36	; 0x24
 8004280:	4618      	mov	r0, r3
 8004282:	f001 f88f 	bl	80053a4 <xTaskRemoveFromEventList>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00e      	beq.n	80042aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00b      	beq.n	80042aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	e007      	b.n	80042aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800429a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800429e:	3301      	adds	r3, #1
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	b25a      	sxtb	r2, r3
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80042aa:	2301      	movs	r3, #1
 80042ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80042ae:	e001      	b.n	80042b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3740      	adds	r7, #64	; 0x40
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08c      	sub	sp, #48	; 0x30
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042d8:	2300      	movs	r3, #0
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10a      	bne.n	80042fc <xQueueReceive+0x30>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	623b      	str	r3, [r7, #32]
}
 80042f8:	bf00      	nop
 80042fa:	e7fe      	b.n	80042fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d103      	bne.n	800430a <xQueueReceive+0x3e>
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <xQueueReceive+0x42>
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <xQueueReceive+0x44>
 800430e:	2300      	movs	r3, #0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <xQueueReceive+0x5e>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	61fb      	str	r3, [r7, #28]
}
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800432a:	f001 fad1 	bl	80058d0 <xTaskGetSchedulerState>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d102      	bne.n	800433a <xQueueReceive+0x6e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <xQueueReceive+0x72>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <xQueueReceive+0x74>
 800433e:	2300      	movs	r3, #0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <xQueueReceive+0x8e>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	61bb      	str	r3, [r7, #24]
}
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800435a:	f002 f8bb 	bl	80064d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01f      	beq.n	80043aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800436a:	68b9      	ldr	r1, [r7, #8]
 800436c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800436e:	f000 f8f7 	bl	8004560 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	1e5a      	subs	r2, r3, #1
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00f      	beq.n	80043a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	3310      	adds	r3, #16
 8004386:	4618      	mov	r0, r3
 8004388:	f001 f80c 	bl	80053a4 <xTaskRemoveFromEventList>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004392:	4b3d      	ldr	r3, [pc, #244]	; (8004488 <xQueueReceive+0x1bc>)
 8004394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043a2:	f002 f8c7 	bl	8006534 <vPortExitCritical>
				return pdPASS;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e069      	b.n	800447e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d103      	bne.n	80043b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043b0:	f002 f8c0 	bl	8006534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e062      	b.n	800447e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043be:	f107 0310 	add.w	r3, r7, #16
 80043c2:	4618      	mov	r0, r3
 80043c4:	f001 f852 	bl	800546c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043c8:	2301      	movs	r3, #1
 80043ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043cc:	f002 f8b2 	bl	8006534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043d0:	f000 fd10 	bl	8004df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043d4:	f002 f87e 	bl	80064d4 <vPortEnterCritical>
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043de:	b25b      	sxtb	r3, r3
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d103      	bne.n	80043ee <xQueueReceive+0x122>
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043f4:	b25b      	sxtb	r3, r3
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fa:	d103      	bne.n	8004404 <xQueueReceive+0x138>
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004404:	f002 f896 	bl	8006534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004408:	1d3a      	adds	r2, r7, #4
 800440a:	f107 0310 	add.w	r3, r7, #16
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f001 f841 	bl	8005498 <xTaskCheckForTimeOut>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d123      	bne.n	8004464 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800441c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800441e:	f000 f917 	bl	8004650 <prvIsQueueEmpty>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d017      	beq.n	8004458 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	3324      	adds	r3, #36	; 0x24
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	4611      	mov	r1, r2
 8004430:	4618      	mov	r0, r3
 8004432:	f000 ff67 	bl	8005304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004438:	f000 f8b8 	bl	80045ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800443c:	f000 fce8 	bl	8004e10 <xTaskResumeAll>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d189      	bne.n	800435a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <xQueueReceive+0x1bc>)
 8004448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	e780      	b.n	800435a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800445a:	f000 f8a7 	bl	80045ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800445e:	f000 fcd7 	bl	8004e10 <xTaskResumeAll>
 8004462:	e77a      	b.n	800435a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004466:	f000 f8a1 	bl	80045ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800446a:	f000 fcd1 	bl	8004e10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800446e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004470:	f000 f8ee 	bl	8004650 <prvIsQueueEmpty>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	f43f af6f 	beq.w	800435a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800447c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800447e:	4618      	mov	r0, r3
 8004480:	3730      	adds	r7, #48	; 0x30
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10d      	bne.n	80044c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d14d      	bne.n	800454e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 fa28 	bl	800590c <xTaskPriorityDisinherit>
 80044bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	e043      	b.n	800454e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d119      	bne.n	8004500 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6858      	ldr	r0, [r3, #4]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	461a      	mov	r2, r3
 80044d6:	68b9      	ldr	r1, [r7, #8]
 80044d8:	f002 fb34 	bl	8006b44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	441a      	add	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d32b      	bcc.n	800454e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	e026      	b.n	800454e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68d8      	ldr	r0, [r3, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	461a      	mov	r2, r3
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	f002 fb1a 	bl	8006b44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	425b      	negs	r3, r3
 800451a:	441a      	add	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d207      	bcs.n	800453c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	425b      	negs	r3, r3
 8004536:	441a      	add	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d105      	bne.n	800454e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	3b01      	subs	r3, #1
 800454c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004556:	697b      	ldr	r3, [r7, #20]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d018      	beq.n	80045a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	441a      	add	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	429a      	cmp	r2, r3
 800458a:	d303      	bcc.n	8004594 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68d9      	ldr	r1, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	461a      	mov	r2, r3
 800459e:	6838      	ldr	r0, [r7, #0]
 80045a0:	f002 fad0 	bl	8006b44 <memcpy>
	}
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045b4:	f001 ff8e 	bl	80064d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045c0:	e011      	b.n	80045e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d012      	beq.n	80045f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3324      	adds	r3, #36	; 0x24
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fee8 	bl	80053a4 <xTaskRemoveFromEventList>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80045da:	f000 ffbf 	bl	800555c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	dce9      	bgt.n	80045c2 <prvUnlockQueue+0x16>
 80045ee:	e000      	b.n	80045f2 <prvUnlockQueue+0x46>
					break;
 80045f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	22ff      	movs	r2, #255	; 0xff
 80045f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80045fa:	f001 ff9b 	bl	8006534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045fe:	f001 ff69 	bl	80064d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004608:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800460a:	e011      	b.n	8004630 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d012      	beq.n	800463a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3310      	adds	r3, #16
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fec3 	bl	80053a4 <xTaskRemoveFromEventList>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004624:	f000 ff9a 	bl	800555c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004628:	7bbb      	ldrb	r3, [r7, #14]
 800462a:	3b01      	subs	r3, #1
 800462c:	b2db      	uxtb	r3, r3
 800462e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004634:	2b00      	cmp	r3, #0
 8004636:	dce9      	bgt.n	800460c <prvUnlockQueue+0x60>
 8004638:	e000      	b.n	800463c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800463a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	22ff      	movs	r2, #255	; 0xff
 8004640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004644:	f001 ff76 	bl	8006534 <vPortExitCritical>
}
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004658:	f001 ff3c 	bl	80064d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004664:	2301      	movs	r3, #1
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e001      	b.n	800466e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800466e:	f001 ff61 	bl	8006534 <vPortExitCritical>

	return xReturn;
 8004672:	68fb      	ldr	r3, [r7, #12]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004684:	f001 ff26 	bl	80064d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004690:	429a      	cmp	r2, r3
 8004692:	d102      	bne.n	800469a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004694:	2301      	movs	r3, #1
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	e001      	b.n	800469e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800469e:	f001 ff49 	bl	8006534 <vPortExitCritical>

	return xReturn;
 80046a2:	68fb      	ldr	r3, [r7, #12]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	e014      	b.n	80046e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046bc:	4a0f      	ldr	r2, [pc, #60]	; (80046fc <vQueueAddToRegistry+0x50>)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10b      	bne.n	80046e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046c8:	490c      	ldr	r1, [pc, #48]	; (80046fc <vQueueAddToRegistry+0x50>)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046d2:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <vQueueAddToRegistry+0x50>)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80046de:	e006      	b.n	80046ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3301      	adds	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b07      	cmp	r3, #7
 80046ea:	d9e7      	bls.n	80046bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20000b38 	.word	0x20000b38

08004700 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004710:	f001 fee0 	bl	80064d4 <vPortEnterCritical>
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800471a:	b25b      	sxtb	r3, r3
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d103      	bne.n	800472a <vQueueWaitForMessageRestricted+0x2a>
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004730:	b25b      	sxtb	r3, r3
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004736:	d103      	bne.n	8004740 <vQueueWaitForMessageRestricted+0x40>
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004740:	f001 fef8 	bl	8006534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	3324      	adds	r3, #36	; 0x24
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fdf9 	bl	800534c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800475a:	6978      	ldr	r0, [r7, #20]
 800475c:	f7ff ff26 	bl	80045ac <prvUnlockQueue>
	}
 8004760:	bf00      	nop
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08e      	sub	sp, #56	; 0x38
 800476c:	af04      	add	r7, sp, #16
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <xTaskCreateStatic+0x2a>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	623b      	str	r3, [r7, #32]
}
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <xTaskCreateStatic+0x46>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	61fb      	str	r3, [r7, #28]
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047ae:	23c0      	movs	r3, #192	; 0xc0
 80047b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2bc0      	cmp	r3, #192	; 0xc0
 80047b6:	d00a      	beq.n	80047ce <xTaskCreateStatic+0x66>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	61bb      	str	r3, [r7, #24]
}
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80047ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01e      	beq.n	8004814 <xTaskCreateStatic+0xac>
 80047d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01b      	beq.n	8004814 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047ee:	2300      	movs	r3, #0
 80047f0:	9303      	str	r3, [sp, #12]
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	9302      	str	r3, [sp, #8]
 80047f6:	f107 0314 	add.w	r3, r7, #20
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 f850 	bl	80048ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800480c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800480e:	f000 f8f7 	bl	8004a00 <prvAddNewTaskToReadyList>
 8004812:	e001      	b.n	8004818 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004818:	697b      	ldr	r3, [r7, #20]
	}
 800481a:	4618      	mov	r0, r3
 800481c:	3728      	adds	r7, #40	; 0x28
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004822:	b580      	push	{r7, lr}
 8004824:	b08c      	sub	sp, #48	; 0x30
 8004826:	af04      	add	r7, sp, #16
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4618      	mov	r0, r3
 8004838:	f001 ff6e 	bl	8006718 <pvPortMalloc>
 800483c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00e      	beq.n	8004862 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004844:	20c0      	movs	r0, #192	; 0xc0
 8004846:	f001 ff67 	bl	8006718 <pvPortMalloc>
 800484a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
 8004858:	e005      	b.n	8004866 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800485a:	6978      	ldr	r0, [r7, #20]
 800485c:	f002 f828 	bl	80068b0 <vPortFree>
 8004860:	e001      	b.n	8004866 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d017      	beq.n	800489c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004874:	88fa      	ldrh	r2, [r7, #6]
 8004876:	2300      	movs	r3, #0
 8004878:	9303      	str	r3, [sp, #12]
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	9302      	str	r3, [sp, #8]
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	9301      	str	r3, [sp, #4]
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f80e 	bl	80048ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004890:	69f8      	ldr	r0, [r7, #28]
 8004892:	f000 f8b5 	bl	8004a00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004896:	2301      	movs	r3, #1
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	e002      	b.n	80048a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800489c:	f04f 33ff 	mov.w	r3, #4294967295
 80048a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048a2:	69bb      	ldr	r3, [r7, #24]
	}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	461a      	mov	r2, r3
 80048c4:	21a5      	movs	r1, #165	; 0xa5
 80048c6:	f002 f94b 	bl	8006b60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048d4:	3b01      	subs	r3, #1
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f023 0307 	bic.w	r3, r3, #7
 80048e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <prvInitialiseNewTask+0x58>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	617b      	str	r3, [r7, #20]
}
 8004900:	bf00      	nop
 8004902:	e7fe      	b.n	8004902 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d01f      	beq.n	800494a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	e012      	b.n	8004936 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	7819      	ldrb	r1, [r3, #0]
 8004918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	3334      	adds	r3, #52	; 0x34
 8004920:	460a      	mov	r2, r1
 8004922:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d006      	beq.n	800493e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	3301      	adds	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	2b0f      	cmp	r3, #15
 800493a:	d9e9      	bls.n	8004910 <prvInitialiseNewTask+0x64>
 800493c:	e000      	b.n	8004940 <prvInitialiseNewTask+0x94>
			{
				break;
 800493e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004948:	e003      	b.n	8004952 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	2b37      	cmp	r3, #55	; 0x37
 8004956:	d901      	bls.n	800495c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004958:	2337      	movs	r3, #55	; 0x37
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004960:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004966:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	2200      	movs	r2, #0
 800496c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	3304      	adds	r3, #4
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff f978 	bl	8003c68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497a:	3318      	adds	r3, #24
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff f973 	bl	8003c68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004986:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004996:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	2200      	movs	r2, #0
 800499c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	3358      	adds	r3, #88	; 0x58
 80049b2:	2260      	movs	r2, #96	; 0x60
 80049b4:	2100      	movs	r1, #0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f002 f8d2 	bl	8006b60 <memset>
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <prvInitialiseNewTask+0x148>)
 80049c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	4a0c      	ldr	r2, [pc, #48]	; (80049f8 <prvInitialiseNewTask+0x14c>)
 80049c6:	661a      	str	r2, [r3, #96]	; 0x60
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	4a0c      	ldr	r2, [pc, #48]	; (80049fc <prvInitialiseNewTask+0x150>)
 80049cc:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	68f9      	ldr	r1, [r7, #12]
 80049d2:	69b8      	ldr	r0, [r7, #24]
 80049d4:	f001 fc54 	bl	8006280 <pxPortInitialiseStack>
 80049d8:	4602      	mov	r2, r0
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ea:	bf00      	nop
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	080075fc 	.word	0x080075fc
 80049f8:	0800761c 	.word	0x0800761c
 80049fc:	080075dc 	.word	0x080075dc

08004a00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a08:	f001 fd64 	bl	80064d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a0c:	4b2d      	ldr	r3, [pc, #180]	; (8004ac4 <prvAddNewTaskToReadyList+0xc4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3301      	adds	r3, #1
 8004a12:	4a2c      	ldr	r2, [pc, #176]	; (8004ac4 <prvAddNewTaskToReadyList+0xc4>)
 8004a14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a16:	4b2c      	ldr	r3, [pc, #176]	; (8004ac8 <prvAddNewTaskToReadyList+0xc8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a1e:	4a2a      	ldr	r2, [pc, #168]	; (8004ac8 <prvAddNewTaskToReadyList+0xc8>)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a24:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <prvAddNewTaskToReadyList+0xc4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d110      	bne.n	8004a4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a2c:	f000 fdba 	bl	80055a4 <prvInitialiseTaskLists>
 8004a30:	e00d      	b.n	8004a4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a32:	4b26      	ldr	r3, [pc, #152]	; (8004acc <prvAddNewTaskToReadyList+0xcc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a3a:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <prvAddNewTaskToReadyList+0xc8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d802      	bhi.n	8004a4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a48:	4a1f      	ldr	r2, [pc, #124]	; (8004ac8 <prvAddNewTaskToReadyList+0xc8>)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a4e:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <prvAddNewTaskToReadyList+0xd0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3301      	adds	r3, #1
 8004a54:	4a1e      	ldr	r2, [pc, #120]	; (8004ad0 <prvAddNewTaskToReadyList+0xd0>)
 8004a56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a58:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <prvAddNewTaskToReadyList+0xd0>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a64:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <prvAddNewTaskToReadyList+0xd4>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d903      	bls.n	8004a74 <prvAddNewTaskToReadyList+0x74>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <prvAddNewTaskToReadyList+0xd4>)
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <prvAddNewTaskToReadyList+0xd8>)
 8004a82:	441a      	add	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f7ff f8f9 	bl	8003c82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a90:	f001 fd50 	bl	8006534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <prvAddNewTaskToReadyList+0xcc>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00e      	beq.n	8004aba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <prvAddNewTaskToReadyList+0xc8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d207      	bcs.n	8004aba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <prvAddNewTaskToReadyList+0xdc>)
 8004aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	2000104c 	.word	0x2000104c
 8004ac8:	20000b78 	.word	0x20000b78
 8004acc:	20001058 	.word	0x20001058
 8004ad0:	20001068 	.word	0x20001068
 8004ad4:	20001054 	.word	0x20001054
 8004ad8:	20000b7c 	.word	0x20000b7c
 8004adc:	e000ed04 	.word	0xe000ed04

08004ae0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08a      	sub	sp, #40	; 0x28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004aea:	2300      	movs	r3, #0
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <vTaskDelayUntil+0x2a>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	617b      	str	r3, [r7, #20]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <vTaskDelayUntil+0x46>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	613b      	str	r3, [r7, #16]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004b26:	4b2a      	ldr	r3, [pc, #168]	; (8004bd0 <vTaskDelayUntil+0xf0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <vTaskDelayUntil+0x64>
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	60fb      	str	r3, [r7, #12]
}
 8004b40:	bf00      	nop
 8004b42:	e7fe      	b.n	8004b42 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004b44:	f000 f956 	bl	8004df4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004b48:	4b22      	ldr	r3, [pc, #136]	; (8004bd4 <vTaskDelayUntil+0xf4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	4413      	add	r3, r2
 8004b56:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6a3a      	ldr	r2, [r7, #32]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d20b      	bcs.n	8004b7a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d211      	bcs.n	8004b90 <vTaskDelayUntil+0xb0>
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d90d      	bls.n	8004b90 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004b74:	2301      	movs	r3, #1
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
 8004b78:	e00a      	b.n	8004b90 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d303      	bcc.n	8004b8c <vTaskDelayUntil+0xac>
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d901      	bls.n	8004b90 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d006      	beq.n	8004baa <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 ffc9 	bl	8005b3c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004baa:	f000 f931 	bl	8004e10 <xTaskResumeAll>
 8004bae:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d107      	bne.n	8004bc6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004bb6:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <vTaskDelayUntil+0xf8>)
 8004bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bc6:	bf00      	nop
 8004bc8:	3728      	adds	r7, #40	; 0x28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20001074 	.word	0x20001074
 8004bd4:	20001050 	.word	0x20001050
 8004bd8:	e000ed04 	.word	0xe000ed04

08004bdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d017      	beq.n	8004c1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bee:	4b13      	ldr	r3, [pc, #76]	; (8004c3c <vTaskDelay+0x60>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <vTaskDelay+0x30>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	60bb      	str	r3, [r7, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	e7fe      	b.n	8004c0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c0c:	f000 f8f2 	bl	8004df4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c10:	2100      	movs	r1, #0
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 ff92 	bl	8005b3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c18:	f000 f8fa 	bl	8004e10 <xTaskResumeAll>
 8004c1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d107      	bne.n	8004c34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <vTaskDelay+0x64>)
 8004c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20001074 	.word	0x20001074
 8004c40:	e000ed04 	.word	0xe000ed04

08004c44 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <eTaskGetState+0x28>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	60bb      	str	r3, [r7, #8]
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8004c6c:	4b23      	ldr	r3, [pc, #140]	; (8004cfc <eTaskGetState+0xb8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d102      	bne.n	8004c7c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004c76:	2300      	movs	r3, #0
 8004c78:	77fb      	strb	r3, [r7, #31]
 8004c7a:	e03a      	b.n	8004cf2 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8004c7c:	f001 fc2a 	bl	80064d4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004c86:	4b1e      	ldr	r3, [pc, #120]	; (8004d00 <eTaskGetState+0xbc>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <eTaskGetState+0xc0>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004c92:	f001 fc4f 	bl	8006534 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d003      	beq.n	8004ca6 <eTaskGetState+0x62>
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d102      	bne.n	8004cac <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e022      	b.n	8004cf2 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <eTaskGetState+0xc4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d112      	bne.n	8004cda <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d102      	bne.n	8004cce <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e011      	b.n	8004cf2 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	77fb      	strb	r3, [r7, #31]
 8004cd2:	e00e      	b.n	8004cf2 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e00b      	b.n	8004cf2 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	4a0b      	ldr	r2, [pc, #44]	; (8004d0c <eTaskGetState+0xc8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d002      	beq.n	8004ce8 <eTaskGetState+0xa4>
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d102      	bne.n	8004cee <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8004ce8:	2304      	movs	r3, #4
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e001      	b.n	8004cf2 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004cf2:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3720      	adds	r7, #32
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20000b78 	.word	0x20000b78
 8004d00:	20001004 	.word	0x20001004
 8004d04:	20001008 	.word	0x20001008
 8004d08:	20001038 	.word	0x20001038
 8004d0c:	20001020 	.word	0x20001020

08004d10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	; 0x28
 8004d14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d1e:	463a      	mov	r2, r7
 8004d20:	1d39      	adds	r1, r7, #4
 8004d22:	f107 0308 	add.w	r3, r7, #8
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe ff4a 	bl	8003bc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d2c:	6839      	ldr	r1, [r7, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	9202      	str	r2, [sp, #8]
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	2300      	movs	r3, #0
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	460a      	mov	r2, r1
 8004d3e:	4925      	ldr	r1, [pc, #148]	; (8004dd4 <vTaskStartScheduler+0xc4>)
 8004d40:	4825      	ldr	r0, [pc, #148]	; (8004dd8 <vTaskStartScheduler+0xc8>)
 8004d42:	f7ff fd11 	bl	8004768 <xTaskCreateStatic>
 8004d46:	4603      	mov	r3, r0
 8004d48:	4a24      	ldr	r2, [pc, #144]	; (8004ddc <vTaskStartScheduler+0xcc>)
 8004d4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d4c:	4b23      	ldr	r3, [pc, #140]	; (8004ddc <vTaskStartScheduler+0xcc>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d54:	2301      	movs	r3, #1
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	e001      	b.n	8004d5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d102      	bne.n	8004d6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d64:	f000 ff3e 	bl	8005be4 <xTimerCreateTimerTask>
 8004d68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d11d      	bne.n	8004dac <vTaskStartScheduler+0x9c>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	613b      	str	r3, [r7, #16]
}
 8004d82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d84:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <vTaskStartScheduler+0xd0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3358      	adds	r3, #88	; 0x58
 8004d8a:	4a16      	ldr	r2, [pc, #88]	; (8004de4 <vTaskStartScheduler+0xd4>)
 8004d8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d8e:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <vTaskStartScheduler+0xd8>)
 8004d90:	f04f 32ff 	mov.w	r2, #4294967295
 8004d94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <vTaskStartScheduler+0xdc>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d9c:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <vTaskStartScheduler+0xe0>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004da2:	f7fb fbef 	bl	8000584 <vSetupTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004da6:	f001 faf3 	bl	8006390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004daa:	e00e      	b.n	8004dca <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d10a      	bne.n	8004dca <vTaskStartScheduler+0xba>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	60fb      	str	r3, [r7, #12]
}
 8004dc6:	bf00      	nop
 8004dc8:	e7fe      	b.n	8004dc8 <vTaskStartScheduler+0xb8>
}
 8004dca:	bf00      	nop
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	08007584 	.word	0x08007584
 8004dd8:	08005575 	.word	0x08005575
 8004ddc:	20001070 	.word	0x20001070
 8004de0:	20000b78 	.word	0x20000b78
 8004de4:	20000010 	.word	0x20000010
 8004de8:	2000106c 	.word	0x2000106c
 8004dec:	20001058 	.word	0x20001058
 8004df0:	20001050 	.word	0x20001050

08004df4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004df8:	4b04      	ldr	r3, [pc, #16]	; (8004e0c <vTaskSuspendAll+0x18>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	4a03      	ldr	r2, [pc, #12]	; (8004e0c <vTaskSuspendAll+0x18>)
 8004e00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e02:	bf00      	nop
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	20001074 	.word	0x20001074

08004e10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e1e:	4b42      	ldr	r3, [pc, #264]	; (8004f28 <xTaskResumeAll+0x118>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <xTaskResumeAll+0x2c>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	603b      	str	r3, [r7, #0]
}
 8004e38:	bf00      	nop
 8004e3a:	e7fe      	b.n	8004e3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e3c:	f001 fb4a 	bl	80064d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e40:	4b39      	ldr	r3, [pc, #228]	; (8004f28 <xTaskResumeAll+0x118>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	4a38      	ldr	r2, [pc, #224]	; (8004f28 <xTaskResumeAll+0x118>)
 8004e48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e4a:	4b37      	ldr	r3, [pc, #220]	; (8004f28 <xTaskResumeAll+0x118>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d162      	bne.n	8004f18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e52:	4b36      	ldr	r3, [pc, #216]	; (8004f2c <xTaskResumeAll+0x11c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d05e      	beq.n	8004f18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e5a:	e02f      	b.n	8004ebc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e5c:	4b34      	ldr	r3, [pc, #208]	; (8004f30 <xTaskResumeAll+0x120>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3318      	adds	r3, #24
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fe ff67 	bl	8003d3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fe ff62 	bl	8003d3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7c:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <xTaskResumeAll+0x124>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d903      	bls.n	8004e8c <xTaskResumeAll+0x7c>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	4a2a      	ldr	r2, [pc, #168]	; (8004f34 <xTaskResumeAll+0x124>)
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4a27      	ldr	r2, [pc, #156]	; (8004f38 <xTaskResumeAll+0x128>)
 8004e9a:	441a      	add	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	f7fe feed 	bl	8003c82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eac:	4b23      	ldr	r3, [pc, #140]	; (8004f3c <xTaskResumeAll+0x12c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004eb6:	4b22      	ldr	r3, [pc, #136]	; (8004f40 <xTaskResumeAll+0x130>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ebc:	4b1c      	ldr	r3, [pc, #112]	; (8004f30 <xTaskResumeAll+0x120>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1cb      	bne.n	8004e5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004eca:	f000 fce1 	bl	8005890 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ece:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <xTaskResumeAll+0x134>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d010      	beq.n	8004efc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004eda:	f000 f8d7 	bl	800508c <xTaskIncrementTick>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ee4:	4b16      	ldr	r3, [pc, #88]	; (8004f40 <xTaskResumeAll+0x130>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f1      	bne.n	8004eda <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <xTaskResumeAll+0x134>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <xTaskResumeAll+0x130>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d009      	beq.n	8004f18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f04:	2301      	movs	r3, #1
 8004f06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f08:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <xTaskResumeAll+0x138>)
 8004f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f18:	f001 fb0c 	bl	8006534 <vPortExitCritical>

	return xAlreadyYielded;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20001074 	.word	0x20001074
 8004f2c:	2000104c 	.word	0x2000104c
 8004f30:	2000100c 	.word	0x2000100c
 8004f34:	20001054 	.word	0x20001054
 8004f38:	20000b7c 	.word	0x20000b7c
 8004f3c:	20000b78 	.word	0x20000b78
 8004f40:	20001060 	.word	0x20001060
 8004f44:	2000105c 	.word	0x2000105c
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <xTaskGetTickCount+0x1c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f58:	687b      	ldr	r3, [r7, #4]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20001050 	.word	0x20001050

08004f6c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	2338      	movs	r3, #56	; 0x38
 8004f7e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8004f80:	f7ff ff38 	bl	8004df4 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8004f84:	4b3a      	ldr	r3, [pc, #232]	; (8005070 <uxTaskGetSystemState+0x104>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d369      	bcc.n	8005062 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4613      	mov	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	1898      	adds	r0, r3, r2
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4a31      	ldr	r2, [pc, #196]	; (8005074 <uxTaskGetSystemState+0x108>)
 8004fb0:	4413      	add	r3, r2
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	f000 fbc9 	bl	800574c <prvListTasksWithinSingleList>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e2      	bne.n	8004f8e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	4a27      	ldr	r2, [pc, #156]	; (8005078 <uxTaskGetSystemState+0x10c>)
 8004fda:	6811      	ldr	r1, [r2, #0]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fbb4 	bl	800574c <prvListTasksWithinSingleList>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	4413      	add	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	4a1f      	ldr	r2, [pc, #124]	; (800507c <uxTaskGetSystemState+0x110>)
 8004ffe:	6811      	ldr	r1, [r2, #0]
 8005000:	2202      	movs	r2, #2
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fba2 	bl	800574c <prvListTasksWithinSingleList>
 8005008:	4602      	mov	r2, r0
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	4413      	add	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4613      	mov	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	461a      	mov	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	2204      	movs	r2, #4
 8005022:	4917      	ldr	r1, [pc, #92]	; (8005080 <uxTaskGetSystemState+0x114>)
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fb91 	bl	800574c <prvListTasksWithinSingleList>
 800502a:	4602      	mov	r2, r0
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	4413      	add	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4613      	mov	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	461a      	mov	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	2203      	movs	r2, #3
 8005044:	490f      	ldr	r1, [pc, #60]	; (8005084 <uxTaskGetSystemState+0x118>)
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fb80 	bl	800574c <prvListTasksWithinSingleList>
 800504c:	4602      	mov	r2, r0
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	4413      	add	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <uxTaskGetSystemState+0x11c>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8005062:	f7ff fed5 	bl	8004e10 <xTaskResumeAll>

		return uxTask;
 8005066:	697b      	ldr	r3, [r7, #20]
	}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	2000104c 	.word	0x2000104c
 8005074:	20000b7c 	.word	0x20000b7c
 8005078:	20001004 	.word	0x20001004
 800507c:	20001008 	.word	0x20001008
 8005080:	20001020 	.word	0x20001020
 8005084:	20001038 	.word	0x20001038
 8005088:	20000164 	.word	0x20000164

0800508c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005096:	4b4f      	ldr	r3, [pc, #316]	; (80051d4 <xTaskIncrementTick+0x148>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f040 808f 	bne.w	80051be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050a0:	4b4d      	ldr	r3, [pc, #308]	; (80051d8 <xTaskIncrementTick+0x14c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3301      	adds	r3, #1
 80050a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050a8:	4a4b      	ldr	r2, [pc, #300]	; (80051d8 <xTaskIncrementTick+0x14c>)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d120      	bne.n	80050f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80050b4:	4b49      	ldr	r3, [pc, #292]	; (80051dc <xTaskIncrementTick+0x150>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	603b      	str	r3, [r7, #0]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <xTaskIncrementTick+0x46>
 80050d4:	4b41      	ldr	r3, [pc, #260]	; (80051dc <xTaskIncrementTick+0x150>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	4b41      	ldr	r3, [pc, #260]	; (80051e0 <xTaskIncrementTick+0x154>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a3f      	ldr	r2, [pc, #252]	; (80051dc <xTaskIncrementTick+0x150>)
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	4a3f      	ldr	r2, [pc, #252]	; (80051e0 <xTaskIncrementTick+0x154>)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	4b3e      	ldr	r3, [pc, #248]	; (80051e4 <xTaskIncrementTick+0x158>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3301      	adds	r3, #1
 80050ee:	4a3d      	ldr	r2, [pc, #244]	; (80051e4 <xTaskIncrementTick+0x158>)
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	f000 fbcd 	bl	8005890 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050f6:	4b3c      	ldr	r3, [pc, #240]	; (80051e8 <xTaskIncrementTick+0x15c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d349      	bcc.n	8005194 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005100:	4b36      	ldr	r3, [pc, #216]	; (80051dc <xTaskIncrementTick+0x150>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800510a:	4b37      	ldr	r3, [pc, #220]	; (80051e8 <xTaskIncrementTick+0x15c>)
 800510c:	f04f 32ff 	mov.w	r2, #4294967295
 8005110:	601a      	str	r2, [r3, #0]
					break;
 8005112:	e03f      	b.n	8005194 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005114:	4b31      	ldr	r3, [pc, #196]	; (80051dc <xTaskIncrementTick+0x150>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	429a      	cmp	r2, r3
 800512a:	d203      	bcs.n	8005134 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800512c:	4a2e      	ldr	r2, [pc, #184]	; (80051e8 <xTaskIncrementTick+0x15c>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005132:	e02f      	b.n	8005194 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	3304      	adds	r3, #4
 8005138:	4618      	mov	r0, r3
 800513a:	f7fe fdff 	bl	8003d3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	3318      	adds	r3, #24
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe fdf6 	bl	8003d3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005154:	4b25      	ldr	r3, [pc, #148]	; (80051ec <xTaskIncrementTick+0x160>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	429a      	cmp	r2, r3
 800515a:	d903      	bls.n	8005164 <xTaskIncrementTick+0xd8>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4a22      	ldr	r2, [pc, #136]	; (80051ec <xTaskIncrementTick+0x160>)
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4a1f      	ldr	r2, [pc, #124]	; (80051f0 <xTaskIncrementTick+0x164>)
 8005172:	441a      	add	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	3304      	adds	r3, #4
 8005178:	4619      	mov	r1, r3
 800517a:	4610      	mov	r0, r2
 800517c:	f7fe fd81 	bl	8003c82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005184:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <xTaskIncrementTick+0x168>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	429a      	cmp	r2, r3
 800518c:	d3b8      	bcc.n	8005100 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800518e:	2301      	movs	r3, #1
 8005190:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005192:	e7b5      	b.n	8005100 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005194:	4b17      	ldr	r3, [pc, #92]	; (80051f4 <xTaskIncrementTick+0x168>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519a:	4915      	ldr	r1, [pc, #84]	; (80051f0 <xTaskIncrementTick+0x164>)
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d901      	bls.n	80051b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80051ac:	2301      	movs	r3, #1
 80051ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80051b0:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <xTaskIncrementTick+0x16c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80051b8:	2301      	movs	r3, #1
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e004      	b.n	80051c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80051be:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <xTaskIncrementTick+0x170>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3301      	adds	r3, #1
 80051c4:	4a0d      	ldr	r2, [pc, #52]	; (80051fc <xTaskIncrementTick+0x170>)
 80051c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051c8:	697b      	ldr	r3, [r7, #20]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20001074 	.word	0x20001074
 80051d8:	20001050 	.word	0x20001050
 80051dc:	20001004 	.word	0x20001004
 80051e0:	20001008 	.word	0x20001008
 80051e4:	20001064 	.word	0x20001064
 80051e8:	2000106c 	.word	0x2000106c
 80051ec:	20001054 	.word	0x20001054
 80051f0:	20000b7c 	.word	0x20000b7c
 80051f4:	20000b78 	.word	0x20000b78
 80051f8:	20001060 	.word	0x20001060
 80051fc:	2000105c 	.word	0x2000105c

08005200 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005206:	4b36      	ldr	r3, [pc, #216]	; (80052e0 <vTaskSwitchContext+0xe0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800520e:	4b35      	ldr	r3, [pc, #212]	; (80052e4 <vTaskSwitchContext+0xe4>)
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005214:	e05e      	b.n	80052d4 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8005216:	4b33      	ldr	r3, [pc, #204]	; (80052e4 <vTaskSwitchContext+0xe4>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
 800521c:	4b32      	ldr	r3, [pc, #200]	; (80052e8 <vTaskSwitchContext+0xe8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a32      	ldr	r2, [pc, #200]	; (80052ec <vTaskSwitchContext+0xec>)
 8005222:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005224:	4b31      	ldr	r3, [pc, #196]	; (80052ec <vTaskSwitchContext+0xec>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b31      	ldr	r3, [pc, #196]	; (80052f0 <vTaskSwitchContext+0xf0>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d909      	bls.n	8005244 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005230:	4b30      	ldr	r3, [pc, #192]	; (80052f4 <vTaskSwitchContext+0xf4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005236:	4a2d      	ldr	r2, [pc, #180]	; (80052ec <vTaskSwitchContext+0xec>)
 8005238:	6810      	ldr	r0, [r2, #0]
 800523a:	4a2d      	ldr	r2, [pc, #180]	; (80052f0 <vTaskSwitchContext+0xf0>)
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	1a82      	subs	r2, r0, r2
 8005240:	440a      	add	r2, r1
 8005242:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8005244:	4b29      	ldr	r3, [pc, #164]	; (80052ec <vTaskSwitchContext+0xec>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a29      	ldr	r2, [pc, #164]	; (80052f0 <vTaskSwitchContext+0xf0>)
 800524a:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800524c:	4b2a      	ldr	r3, [pc, #168]	; (80052f8 <vTaskSwitchContext+0xf8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e010      	b.n	8005276 <vTaskSwitchContext+0x76>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10a      	bne.n	8005270 <vTaskSwitchContext+0x70>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	607b      	str	r3, [r7, #4]
}
 800526c:	bf00      	nop
 800526e:	e7fe      	b.n	800526e <vTaskSwitchContext+0x6e>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3b01      	subs	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	4921      	ldr	r1, [pc, #132]	; (80052fc <vTaskSwitchContext+0xfc>)
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0e4      	beq.n	8005254 <vTaskSwitchContext+0x54>
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4a19      	ldr	r2, [pc, #100]	; (80052fc <vTaskSwitchContext+0xfc>)
 8005296:	4413      	add	r3, r2
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	605a      	str	r2, [r3, #4]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	3308      	adds	r3, #8
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d104      	bne.n	80052ba <vTaskSwitchContext+0xba>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	4a0c      	ldr	r2, [pc, #48]	; (80052f4 <vTaskSwitchContext+0xf4>)
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	4a0c      	ldr	r2, [pc, #48]	; (80052f8 <vTaskSwitchContext+0xf8>)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052ca:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <vTaskSwitchContext+0xf4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3358      	adds	r3, #88	; 0x58
 80052d0:	4a0b      	ldr	r2, [pc, #44]	; (8005300 <vTaskSwitchContext+0x100>)
 80052d2:	6013      	str	r3, [r2, #0]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	20001074 	.word	0x20001074
 80052e4:	20001060 	.word	0x20001060
 80052e8:	20000164 	.word	0x20000164
 80052ec:	2000107c 	.word	0x2000107c
 80052f0:	20001078 	.word	0x20001078
 80052f4:	20000b78 	.word	0x20000b78
 80052f8:	20001054 	.word	0x20001054
 80052fc:	20000b7c 	.word	0x20000b7c
 8005300:	20000010 	.word	0x20000010

08005304 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	60fb      	str	r3, [r7, #12]
}
 8005326:	bf00      	nop
 8005328:	e7fe      	b.n	8005328 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800532a:	4b07      	ldr	r3, [pc, #28]	; (8005348 <vTaskPlaceOnEventList+0x44>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3318      	adds	r3, #24
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fe fcc9 	bl	8003cca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005338:	2101      	movs	r1, #1
 800533a:	6838      	ldr	r0, [r7, #0]
 800533c:	f000 fbfe 	bl	8005b3c <prvAddCurrentTaskToDelayedList>
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20000b78 	.word	0x20000b78

0800534c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10a      	bne.n	8005374 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	617b      	str	r3, [r7, #20]
}
 8005370:	bf00      	nop
 8005372:	e7fe      	b.n	8005372 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3318      	adds	r3, #24
 800537a:	4619      	mov	r1, r3
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7fe fc80 	bl	8003c82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005388:	f04f 33ff 	mov.w	r3, #4294967295
 800538c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	68b8      	ldr	r0, [r7, #8]
 8005392:	f000 fbd3 	bl	8005b3c <prvAddCurrentTaskToDelayedList>
	}
 8005396:	bf00      	nop
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000b78 	.word	0x20000b78

080053a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	60fb      	str	r3, [r7, #12]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	3318      	adds	r3, #24
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fe fcb1 	bl	8003d3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053da:	4b1e      	ldr	r3, [pc, #120]	; (8005454 <xTaskRemoveFromEventList+0xb0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d11d      	bne.n	800541e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	3304      	adds	r3, #4
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe fca8 	bl	8003d3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f0:	4b19      	ldr	r3, [pc, #100]	; (8005458 <xTaskRemoveFromEventList+0xb4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d903      	bls.n	8005400 <xTaskRemoveFromEventList+0x5c>
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	4a16      	ldr	r2, [pc, #88]	; (8005458 <xTaskRemoveFromEventList+0xb4>)
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4a13      	ldr	r2, [pc, #76]	; (800545c <xTaskRemoveFromEventList+0xb8>)
 800540e:	441a      	add	r2, r3
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	3304      	adds	r3, #4
 8005414:	4619      	mov	r1, r3
 8005416:	4610      	mov	r0, r2
 8005418:	f7fe fc33 	bl	8003c82 <vListInsertEnd>
 800541c:	e005      	b.n	800542a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	3318      	adds	r3, #24
 8005422:	4619      	mov	r1, r3
 8005424:	480e      	ldr	r0, [pc, #56]	; (8005460 <xTaskRemoveFromEventList+0xbc>)
 8005426:	f7fe fc2c 	bl	8003c82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542e:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <xTaskRemoveFromEventList+0xc0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	429a      	cmp	r2, r3
 8005436:	d905      	bls.n	8005444 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800543c:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <xTaskRemoveFromEventList+0xc4>)
 800543e:	2201      	movs	r2, #1
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e001      	b.n	8005448 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005448:	697b      	ldr	r3, [r7, #20]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20001074 	.word	0x20001074
 8005458:	20001054 	.word	0x20001054
 800545c:	20000b7c 	.word	0x20000b7c
 8005460:	2000100c 	.word	0x2000100c
 8005464:	20000b78 	.word	0x20000b78
 8005468:	20001060 	.word	0x20001060

0800546c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005474:	4b06      	ldr	r3, [pc, #24]	; (8005490 <vTaskInternalSetTimeOutState+0x24>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <vTaskInternalSetTimeOutState+0x28>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	605a      	str	r2, [r3, #4]
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20001064 	.word	0x20001064
 8005494:	20001050 	.word	0x20001050

08005498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	613b      	str	r3, [r7, #16]
}
 80054ba:	bf00      	nop
 80054bc:	e7fe      	b.n	80054bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	60fb      	str	r3, [r7, #12]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054da:	f000 fffb 	bl	80064d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054de:	4b1d      	ldr	r3, [pc, #116]	; (8005554 <xTaskCheckForTimeOut+0xbc>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f6:	d102      	bne.n	80054fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]
 80054fc:	e023      	b.n	8005546 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <xTaskCheckForTimeOut+0xc0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d007      	beq.n	800551a <xTaskCheckForTimeOut+0x82>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	429a      	cmp	r2, r3
 8005512:	d302      	bcc.n	800551a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e015      	b.n	8005546 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	429a      	cmp	r2, r3
 8005522:	d20b      	bcs.n	800553c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	1ad2      	subs	r2, r2, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff ff9b 	bl	800546c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	e004      	b.n	8005546 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005542:	2301      	movs	r3, #1
 8005544:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005546:	f000 fff5 	bl	8006534 <vPortExitCritical>

	return xReturn;
 800554a:	69fb      	ldr	r3, [r7, #28]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3720      	adds	r7, #32
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20001050 	.word	0x20001050
 8005558:	20001064 	.word	0x20001064

0800555c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005560:	4b03      	ldr	r3, [pc, #12]	; (8005570 <vTaskMissedYield+0x14>)
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]
}
 8005566:	bf00      	nop
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20001060 	.word	0x20001060

08005574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800557c:	f000 f852 	bl	8005624 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005580:	4b06      	ldr	r3, [pc, #24]	; (800559c <prvIdleTask+0x28>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d9f9      	bls.n	800557c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005588:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <prvIdleTask+0x2c>)
 800558a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005598:	e7f0      	b.n	800557c <prvIdleTask+0x8>
 800559a:	bf00      	nop
 800559c:	20000b7c 	.word	0x20000b7c
 80055a0:	e000ed04 	.word	0xe000ed04

080055a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055aa:	2300      	movs	r3, #0
 80055ac:	607b      	str	r3, [r7, #4]
 80055ae:	e00c      	b.n	80055ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4a12      	ldr	r2, [pc, #72]	; (8005604 <prvInitialiseTaskLists+0x60>)
 80055bc:	4413      	add	r3, r2
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fb32 	bl	8003c28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3301      	adds	r3, #1
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b37      	cmp	r3, #55	; 0x37
 80055ce:	d9ef      	bls.n	80055b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055d0:	480d      	ldr	r0, [pc, #52]	; (8005608 <prvInitialiseTaskLists+0x64>)
 80055d2:	f7fe fb29 	bl	8003c28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055d6:	480d      	ldr	r0, [pc, #52]	; (800560c <prvInitialiseTaskLists+0x68>)
 80055d8:	f7fe fb26 	bl	8003c28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055dc:	480c      	ldr	r0, [pc, #48]	; (8005610 <prvInitialiseTaskLists+0x6c>)
 80055de:	f7fe fb23 	bl	8003c28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055e2:	480c      	ldr	r0, [pc, #48]	; (8005614 <prvInitialiseTaskLists+0x70>)
 80055e4:	f7fe fb20 	bl	8003c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055e8:	480b      	ldr	r0, [pc, #44]	; (8005618 <prvInitialiseTaskLists+0x74>)
 80055ea:	f7fe fb1d 	bl	8003c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <prvInitialiseTaskLists+0x78>)
 80055f0:	4a05      	ldr	r2, [pc, #20]	; (8005608 <prvInitialiseTaskLists+0x64>)
 80055f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <prvInitialiseTaskLists+0x7c>)
 80055f6:	4a05      	ldr	r2, [pc, #20]	; (800560c <prvInitialiseTaskLists+0x68>)
 80055f8:	601a      	str	r2, [r3, #0]
}
 80055fa:	bf00      	nop
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000b7c 	.word	0x20000b7c
 8005608:	20000fdc 	.word	0x20000fdc
 800560c:	20000ff0 	.word	0x20000ff0
 8005610:	2000100c 	.word	0x2000100c
 8005614:	20001020 	.word	0x20001020
 8005618:	20001038 	.word	0x20001038
 800561c:	20001004 	.word	0x20001004
 8005620:	20001008 	.word	0x20001008

08005624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800562a:	e019      	b.n	8005660 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800562c:	f000 ff52 	bl	80064d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005630:	4b10      	ldr	r3, [pc, #64]	; (8005674 <prvCheckTasksWaitingTermination+0x50>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3304      	adds	r3, #4
 800563c:	4618      	mov	r0, r3
 800563e:	f7fe fb7d 	bl	8003d3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005642:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <prvCheckTasksWaitingTermination+0x54>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3b01      	subs	r3, #1
 8005648:	4a0b      	ldr	r2, [pc, #44]	; (8005678 <prvCheckTasksWaitingTermination+0x54>)
 800564a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <prvCheckTasksWaitingTermination+0x58>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3b01      	subs	r3, #1
 8005652:	4a0a      	ldr	r2, [pc, #40]	; (800567c <prvCheckTasksWaitingTermination+0x58>)
 8005654:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005656:	f000 ff6d 	bl	8006534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f8e4 	bl	8005828 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <prvCheckTasksWaitingTermination+0x58>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e1      	bne.n	800562c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20001020 	.word	0x20001020
 8005678:	2000104c 	.word	0x2000104c
 800567c:	20001034 	.word	0x20001034

08005680 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <vTaskGetInfo+0x1a>
 8005694:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <vTaskGetInfo+0xc8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	e000      	b.n	800569c <vTaskGetInfo+0x1c>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	2b05      	cmp	r3, #5
 80056da:	d01a      	beq.n	8005712 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 80056dc:	4b1a      	ldr	r3, [pc, #104]	; (8005748 <vTaskGetInfo+0xc8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d103      	bne.n	80056ee <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2200      	movs	r2, #0
 80056ea:	731a      	strb	r2, [r3, #12]
 80056ec:	e018      	b.n	8005720 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	78fa      	ldrb	r2, [r7, #3]
 80056f2:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d112      	bne.n	8005720 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 80056fa:	f7ff fb7b 	bl	8004df4 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2202      	movs	r2, #2
 800570a:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800570c:	f7ff fb80 	bl	8004e10 <xTaskResumeAll>
 8005710:	e006      	b.n	8005720 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8005712:	6978      	ldr	r0, [r7, #20]
 8005714:	f7ff fa96 	bl	8004c44 <eTaskGetState>
 8005718:	4603      	mov	r3, r0
 800571a:	461a      	mov	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d009      	beq.n	800573a <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f860 	bl	80057f0 <prvTaskCheckFreeStackSpace>
 8005730:	4603      	mov	r3, r0
 8005732:	461a      	mov	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8005738:	e002      	b.n	8005740 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2200      	movs	r2, #0
 800573e:	841a      	strh	r2, [r3, #32]
	}
 8005740:	bf00      	nop
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20000b78 	.word	0x20000b78

0800574c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	; 0x28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4613      	mov	r3, r2
 8005758:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d03f      	beq.n	80057e6 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	623b      	str	r3, [r7, #32]
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	605a      	str	r2, [r3, #4]
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	3308      	adds	r3, #8
 800577c:	429a      	cmp	r2, r3
 800577e:	d104      	bne.n	800578a <prvListTasksWithinSingleList+0x3e>
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	605a      	str	r2, [r3, #4]
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	605a      	str	r2, [r3, #4]
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	3308      	adds	r3, #8
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d104      	bne.n	80057b6 <prvListTasksWithinSingleList+0x6a>
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	605a      	str	r2, [r3, #4]
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80057be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c0:	4613      	mov	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	461a      	mov	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1899      	adds	r1, r3, r2
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	2201      	movs	r2, #1
 80057d2:	6978      	ldr	r0, [r7, #20]
 80057d4:	f7ff ff54 	bl	8005680 <vTaskGetInfo>
				uxTask++;
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	3301      	adds	r3, #1
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d1d5      	bne.n	8005792 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3728      	adds	r7, #40	; 0x28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80057fc:	e005      	b.n	800580a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3301      	adds	r3, #1
 8005802:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2ba5      	cmp	r3, #165	; 0xa5
 8005810:	d0f5      	beq.n	80057fe <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	089b      	lsrs	r3, r3, #2
 8005816:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	b29b      	uxth	r3, r3
	}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3358      	adds	r3, #88	; 0x58
 8005834:	4618      	mov	r0, r3
 8005836:	f001 fa3d 	bl	8006cb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005840:	2b00      	cmp	r3, #0
 8005842:	d108      	bne.n	8005856 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	4618      	mov	r0, r3
 800584a:	f001 f831 	bl	80068b0 <vPortFree>
				vPortFree( pxTCB );
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 f82e 	bl	80068b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005854:	e018      	b.n	8005888 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800585c:	2b01      	cmp	r3, #1
 800585e:	d103      	bne.n	8005868 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 f825 	bl	80068b0 <vPortFree>
	}
 8005866:	e00f      	b.n	8005888 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800586e:	2b02      	cmp	r3, #2
 8005870:	d00a      	beq.n	8005888 <prvDeleteTCB+0x60>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	60fb      	str	r3, [r7, #12]
}
 8005884:	bf00      	nop
 8005886:	e7fe      	b.n	8005886 <prvDeleteTCB+0x5e>
	}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005896:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <prvResetNextTaskUnblockTime+0x38>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058a0:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <prvResetNextTaskUnblockTime+0x3c>)
 80058a2:	f04f 32ff 	mov.w	r2, #4294967295
 80058a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058a8:	e008      	b.n	80058bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058aa:	4b07      	ldr	r3, [pc, #28]	; (80058c8 <prvResetNextTaskUnblockTime+0x38>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4a04      	ldr	r2, [pc, #16]	; (80058cc <prvResetNextTaskUnblockTime+0x3c>)
 80058ba:	6013      	str	r3, [r2, #0]
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	20001004 	.word	0x20001004
 80058cc:	2000106c 	.word	0x2000106c

080058d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058d6:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <xTaskGetSchedulerState+0x34>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058de:	2301      	movs	r3, #1
 80058e0:	607b      	str	r3, [r7, #4]
 80058e2:	e008      	b.n	80058f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058e4:	4b08      	ldr	r3, [pc, #32]	; (8005908 <xTaskGetSchedulerState+0x38>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058ec:	2302      	movs	r3, #2
 80058ee:	607b      	str	r3, [r7, #4]
 80058f0:	e001      	b.n	80058f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058f2:	2300      	movs	r3, #0
 80058f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058f6:	687b      	ldr	r3, [r7, #4]
	}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	20001058 	.word	0x20001058
 8005908:	20001074 	.word	0x20001074

0800590c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d056      	beq.n	80059d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005922:	4b2e      	ldr	r3, [pc, #184]	; (80059dc <xTaskPriorityDisinherit+0xd0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	429a      	cmp	r2, r3
 800592a:	d00a      	beq.n	8005942 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60fb      	str	r3, [r7, #12]
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	60bb      	str	r3, [r7, #8]
}
 800595c:	bf00      	nop
 800595e:	e7fe      	b.n	800595e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005964:	1e5a      	subs	r2, r3, #1
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005972:	429a      	cmp	r2, r3
 8005974:	d02c      	beq.n	80059d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800597a:	2b00      	cmp	r3, #0
 800597c:	d128      	bne.n	80059d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	3304      	adds	r3, #4
 8005982:	4618      	mov	r0, r3
 8005984:	f7fe f9da 	bl	8003d3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a0:	4b0f      	ldr	r3, [pc, #60]	; (80059e0 <xTaskPriorityDisinherit+0xd4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d903      	bls.n	80059b0 <xTaskPriorityDisinherit+0xa4>
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	4a0c      	ldr	r2, [pc, #48]	; (80059e0 <xTaskPriorityDisinherit+0xd4>)
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <xTaskPriorityDisinherit+0xd8>)
 80059be:	441a      	add	r2, r3
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f7fe f95b 	bl	8003c82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059cc:	2301      	movs	r3, #1
 80059ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059d0:	697b      	ldr	r3, [r7, #20]
	}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000b78 	.word	0x20000b78
 80059e0:	20001054 	.word	0x20001054
 80059e4:	20000b7c 	.word	0x20000b7c

080059e8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 f9e9 	bl	8006dcc <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fa fbe8 	bl	80001d0 <strlen>
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	e007      	b.n	8005a14 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3301      	adds	r3, #1
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b0e      	cmp	r3, #14
 8005a18:	d9f4      	bls.n	8005a04 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4413      	add	r3, r2
	}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8005a42:	4b3a      	ldr	r3, [pc, #232]	; (8005b2c <vTaskGetRunTimeStats+0xf8>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8005a48:	4b38      	ldr	r3, [pc, #224]	; (8005b2c <vTaskGetRunTimeStats+0xf8>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fe5f 	bl	8006718 <pvPortMalloc>
 8005a5a:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d05f      	beq.n	8005b22 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8005a62:	f107 030c 	add.w	r3, r7, #12
 8005a66:	461a      	mov	r2, r3
 8005a68:	69b9      	ldr	r1, [r7, #24]
 8005a6a:	6978      	ldr	r0, [r7, #20]
 8005a6c:	f7ff fa7e 	bl	8004f6c <uxTaskGetSystemState>
 8005a70:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4a2e      	ldr	r2, [pc, #184]	; (8005b30 <vTaskGetRunTimeStats+0xfc>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d04b      	beq.n	8005b1c <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	e044      	b.n	8005b14 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	461a      	mov	r2, r3
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	699a      	ldr	r2, [r3, #24]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa2:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	4413      	add	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	461a      	mov	r2, r3
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff ff95 	bl	80059e8 <prvWriteNameToBuffer>
 8005abe:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00e      	beq.n	8005ae4 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4916      	ldr	r1, [pc, #88]	; (8005b34 <vTaskGetRunTimeStats+0x100>)
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f001 f955 	bl	8006d8c <siprintf>
 8005ae2:	e00d      	b.n	8005b00 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	461a      	mov	r2, r3
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	4413      	add	r3, r2
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	461a      	mov	r2, r3
 8005af8:	490f      	ldr	r1, [pc, #60]	; (8005b38 <vTaskGetRunTimeStats+0x104>)
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f001 f946 	bl	8006d8c <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7fa fb65 	bl	80001d0 <strlen>
 8005b06:	4602      	mov	r2, r0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	3301      	adds	r3, #1
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d3b6      	bcc.n	8005a8a <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8005b1c:	6978      	ldr	r0, [r7, #20]
 8005b1e:	f000 fec7 	bl	80068b0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b22:	bf00      	nop
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	2000104c 	.word	0x2000104c
 8005b30:	51eb851f 	.word	0x51eb851f
 8005b34:	0800759c 	.word	0x0800759c
 8005b38:	080075a8 	.word	0x080075a8

08005b3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b46:	4b21      	ldr	r3, [pc, #132]	; (8005bcc <prvAddCurrentTaskToDelayedList+0x90>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b4c:	4b20      	ldr	r3, [pc, #128]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3304      	adds	r3, #4
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe f8f2 	bl	8003d3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d10a      	bne.n	8005b76 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b66:	4b1a      	ldr	r3, [pc, #104]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4819      	ldr	r0, [pc, #100]	; (8005bd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b70:	f7fe f887 	bl	8003c82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b74:	e026      	b.n	8005bc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b7e:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d209      	bcs.n	8005ba2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b8e:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f7fe f895 	bl	8003cca <vListInsert>
}
 8005ba0:	e010      	b.n	8005bc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ba2:	4b0e      	ldr	r3, [pc, #56]	; (8005bdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f7fe f88b 	bl	8003cca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d202      	bcs.n	8005bc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bbe:	4a08      	ldr	r2, [pc, #32]	; (8005be0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	6013      	str	r3, [r2, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20001050 	.word	0x20001050
 8005bd0:	20000b78 	.word	0x20000b78
 8005bd4:	20001038 	.word	0x20001038
 8005bd8:	20001008 	.word	0x20001008
 8005bdc:	20001004 	.word	0x20001004
 8005be0:	2000106c 	.word	0x2000106c

08005be4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005bee:	f000 fb07 	bl	8006200 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005bf2:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <xTimerCreateTimerTask+0x80>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d021      	beq.n	8005c3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c02:	1d3a      	adds	r2, r7, #4
 8005c04:	f107 0108 	add.w	r1, r7, #8
 8005c08:	f107 030c 	add.w	r3, r7, #12
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fd fff1 	bl	8003bf4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	9202      	str	r2, [sp, #8]
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	2300      	movs	r3, #0
 8005c22:	460a      	mov	r2, r1
 8005c24:	4910      	ldr	r1, [pc, #64]	; (8005c68 <xTimerCreateTimerTask+0x84>)
 8005c26:	4811      	ldr	r0, [pc, #68]	; (8005c6c <xTimerCreateTimerTask+0x88>)
 8005c28:	f7fe fd9e 	bl	8004768 <xTaskCreateStatic>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	4a10      	ldr	r2, [pc, #64]	; (8005c70 <xTimerCreateTimerTask+0x8c>)
 8005c30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c32:	4b0f      	ldr	r3, [pc, #60]	; (8005c70 <xTimerCreateTimerTask+0x8c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	613b      	str	r3, [r7, #16]
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c5a:	697b      	ldr	r3, [r7, #20]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	200010b0 	.word	0x200010b0
 8005c68:	080075b4 	.word	0x080075b4
 8005c6c:	08005da9 	.word	0x08005da9
 8005c70:	200010b4 	.word	0x200010b4

08005c74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08a      	sub	sp, #40	; 0x28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	623b      	str	r3, [r7, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ca2:	4b1a      	ldr	r3, [pc, #104]	; (8005d0c <xTimerGenericCommand+0x98>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d02a      	beq.n	8005d00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b05      	cmp	r3, #5
 8005cba:	dc18      	bgt.n	8005cee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cbc:	f7ff fe08 	bl	80058d0 <xTaskGetSchedulerState>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d109      	bne.n	8005cda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cc6:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <xTimerGenericCommand+0x98>)
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	f107 0110 	add.w	r1, r7, #16
 8005cce:	2300      	movs	r3, #0
 8005cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd2:	f7fe f961 	bl	8003f98 <xQueueGenericSend>
 8005cd6:	6278      	str	r0, [r7, #36]	; 0x24
 8005cd8:	e012      	b.n	8005d00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cda:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <xTimerGenericCommand+0x98>)
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	f107 0110 	add.w	r1, r7, #16
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f7fe f957 	bl	8003f98 <xQueueGenericSend>
 8005cea:	6278      	str	r0, [r7, #36]	; 0x24
 8005cec:	e008      	b.n	8005d00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005cee:	4b07      	ldr	r3, [pc, #28]	; (8005d0c <xTimerGenericCommand+0x98>)
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	f107 0110 	add.w	r1, r7, #16
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	f7fe fa4b 	bl	8004194 <xQueueGenericSendFromISR>
 8005cfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3728      	adds	r7, #40	; 0x28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	200010b0 	.word	0x200010b0

08005d10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d1a:	4b22      	ldr	r3, [pc, #136]	; (8005da4 <prvProcessExpiredTimer+0x94>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fe f807 	bl	8003d3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d022      	beq.n	8005d82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	699a      	ldr	r2, [r3, #24]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	18d1      	adds	r1, r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	6978      	ldr	r0, [r7, #20]
 8005d4a:	f000 f8d1 	bl	8005ef0 <prvInsertTimerInActiveList>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01f      	beq.n	8005d94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d54:	2300      	movs	r3, #0
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	6978      	ldr	r0, [r7, #20]
 8005d60:	f7ff ff88 	bl	8005c74 <xTimerGenericCommand>
 8005d64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d113      	bne.n	8005d94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	60fb      	str	r3, [r7, #12]
}
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	6978      	ldr	r0, [r7, #20]
 8005d9a:	4798      	blx	r3
}
 8005d9c:	bf00      	nop
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	200010a8 	.word	0x200010a8

08005da8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005db0:	f107 0308 	add.w	r3, r7, #8
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 f857 	bl	8005e68 <prvGetNextExpireTime>
 8005dba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f803 	bl	8005dcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005dc6:	f000 f8d5 	bl	8005f74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dca:	e7f1      	b.n	8005db0 <prvTimerTask+0x8>

08005dcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005dd6:	f7ff f80d 	bl	8004df4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005dda:	f107 0308 	add.w	r3, r7, #8
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 f866 	bl	8005eb0 <prvSampleTimeNow>
 8005de4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d130      	bne.n	8005e4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <prvProcessTimerOrBlockTask+0x3c>
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d806      	bhi.n	8005e08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005dfa:	f7ff f809 	bl	8004e10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005dfe:	68f9      	ldr	r1, [r7, #12]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff ff85 	bl	8005d10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e06:	e024      	b.n	8005e52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d008      	beq.n	8005e20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e0e:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <prvProcessTimerOrBlockTask+0x90>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <prvProcessTimerOrBlockTask+0x50>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e000      	b.n	8005e1e <prvProcessTimerOrBlockTask+0x52>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e20:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <prvProcessTimerOrBlockTask+0x94>)
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	f7fe fc67 	bl	8004700 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e32:	f7fe ffed 	bl	8004e10 <xTaskResumeAll>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e3c:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <prvProcessTimerOrBlockTask+0x98>)
 8005e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	f3bf 8f6f 	isb	sy
}
 8005e4c:	e001      	b.n	8005e52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e4e:	f7fe ffdf 	bl	8004e10 <xTaskResumeAll>
}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	200010ac 	.word	0x200010ac
 8005e60:	200010b0 	.word	0x200010b0
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e70:	4b0e      	ldr	r3, [pc, #56]	; (8005eac <prvGetNextExpireTime+0x44>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <prvGetNextExpireTime+0x16>
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	e000      	b.n	8005e80 <prvGetNextExpireTime+0x18>
 8005e7e:	2200      	movs	r2, #0
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d105      	bne.n	8005e98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e8c:	4b07      	ldr	r3, [pc, #28]	; (8005eac <prvGetNextExpireTime+0x44>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	e001      	b.n	8005e9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	200010a8 	.word	0x200010a8

08005eb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005eb8:	f7ff f848 	bl	8004f4c <xTaskGetTickCount>
 8005ebc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <prvSampleTimeNow+0x3c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d205      	bcs.n	8005ed4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ec8:	f000 f936 	bl	8006138 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e002      	b.n	8005eda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005eda:	4a04      	ldr	r2, [pc, #16]	; (8005eec <prvSampleTimeNow+0x3c>)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	200010b8 	.word	0x200010b8

08005ef0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d812      	bhi.n	8005f3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	1ad2      	subs	r2, r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d302      	bcc.n	8005f2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	617b      	str	r3, [r7, #20]
 8005f28:	e01b      	b.n	8005f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f2a:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <prvInsertTimerInActiveList+0x7c>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f7fd fec8 	bl	8003cca <vListInsert>
 8005f3a:	e012      	b.n	8005f62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d206      	bcs.n	8005f52 <prvInsertTimerInActiveList+0x62>
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d302      	bcc.n	8005f52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e007      	b.n	8005f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f52:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <prvInsertTimerInActiveList+0x80>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f7fd feb4 	bl	8003cca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f62:	697b      	ldr	r3, [r7, #20]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	200010ac 	.word	0x200010ac
 8005f70:	200010a8 	.word	0x200010a8

08005f74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08e      	sub	sp, #56	; 0x38
 8005f78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f7a:	e0ca      	b.n	8006112 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	da18      	bge.n	8005fb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f82:	1d3b      	adds	r3, r7, #4
 8005f84:	3304      	adds	r3, #4
 8005f86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	61fb      	str	r3, [r7, #28]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005faa:	6850      	ldr	r0, [r2, #4]
 8005fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fae:	6892      	ldr	r2, [r2, #8]
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f2c0 80aa 	blt.w	8006110 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d004      	beq.n	8005fd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fd feb5 	bl	8003d3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fd2:	463b      	mov	r3, r7
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff ff6b 	bl	8005eb0 <prvSampleTimeNow>
 8005fda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b09      	cmp	r3, #9
 8005fe0:	f200 8097 	bhi.w	8006112 <prvProcessReceivedCommands+0x19e>
 8005fe4:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <prvProcessReceivedCommands+0x78>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08006015 	.word	0x08006015
 8005ff0:	08006015 	.word	0x08006015
 8005ff4:	08006015 	.word	0x08006015
 8005ff8:	08006089 	.word	0x08006089
 8005ffc:	0800609d 	.word	0x0800609d
 8006000:	080060e7 	.word	0x080060e7
 8006004:	08006015 	.word	0x08006015
 8006008:	08006015 	.word	0x08006015
 800600c:	08006089 	.word	0x08006089
 8006010:	0800609d 	.word	0x0800609d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	b2da      	uxtb	r2, r3
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	18d1      	adds	r1, r2, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006034:	f7ff ff5c 	bl	8005ef0 <prvInsertTimerInActiveList>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d069      	beq.n	8006112 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006044:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	d05e      	beq.n	8006112 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	441a      	add	r2, r3
 800605c:	2300      	movs	r3, #0
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2300      	movs	r3, #0
 8006062:	2100      	movs	r1, #0
 8006064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006066:	f7ff fe05 	bl	8005c74 <xTimerGenericCommand>
 800606a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d14f      	bne.n	8006112 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	61bb      	str	r3, [r7, #24]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800608e:	f023 0301 	bic.w	r3, r3, #1
 8006092:	b2da      	uxtb	r2, r3
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800609a:	e03a      	b.n	8006112 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060a2:	f043 0301 	orr.w	r3, r3, #1
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	617b      	str	r3, [r7, #20]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	18d1      	adds	r1, r2, r3
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e0:	f7ff ff06 	bl	8005ef0 <prvInsertTimerInActiveList>
					break;
 80060e4:	e015      	b.n	8006112 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d103      	bne.n	80060fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80060f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f6:	f000 fbdb 	bl	80068b0 <vPortFree>
 80060fa:	e00a      	b.n	8006112 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006102:	f023 0301 	bic.w	r3, r3, #1
 8006106:	b2da      	uxtb	r2, r3
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800610e:	e000      	b.n	8006112 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006110:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006112:	4b08      	ldr	r3, [pc, #32]	; (8006134 <prvProcessReceivedCommands+0x1c0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	1d39      	adds	r1, r7, #4
 8006118:	2200      	movs	r2, #0
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe f8d6 	bl	80042cc <xQueueReceive>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	f47f af2a 	bne.w	8005f7c <prvProcessReceivedCommands+0x8>
	}
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	3730      	adds	r7, #48	; 0x30
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	200010b0 	.word	0x200010b0

08006138 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800613e:	e048      	b.n	80061d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006140:	4b2d      	ldr	r3, [pc, #180]	; (80061f8 <prvSwitchTimerLists+0xc0>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800614a:	4b2b      	ldr	r3, [pc, #172]	; (80061f8 <prvSwitchTimerLists+0xc0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3304      	adds	r3, #4
 8006158:	4618      	mov	r0, r3
 800615a:	f7fd fdef 	bl	8003d3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d02e      	beq.n	80061d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4413      	add	r3, r2
 800617c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	429a      	cmp	r2, r3
 8006184:	d90e      	bls.n	80061a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006192:	4b19      	ldr	r3, [pc, #100]	; (80061f8 <prvSwitchTimerLists+0xc0>)
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3304      	adds	r3, #4
 800619a:	4619      	mov	r1, r3
 800619c:	4610      	mov	r0, r2
 800619e:	f7fd fd94 	bl	8003cca <vListInsert>
 80061a2:	e016      	b.n	80061d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061a4:	2300      	movs	r3, #0
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	2300      	movs	r3, #0
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	2100      	movs	r1, #0
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff fd60 	bl	8005c74 <xTimerGenericCommand>
 80061b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	603b      	str	r3, [r7, #0]
}
 80061ce:	bf00      	nop
 80061d0:	e7fe      	b.n	80061d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061d2:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <prvSwitchTimerLists+0xc0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1b1      	bne.n	8006140 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <prvSwitchTimerLists+0xc0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80061e2:	4b06      	ldr	r3, [pc, #24]	; (80061fc <prvSwitchTimerLists+0xc4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a04      	ldr	r2, [pc, #16]	; (80061f8 <prvSwitchTimerLists+0xc0>)
 80061e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061ea:	4a04      	ldr	r2, [pc, #16]	; (80061fc <prvSwitchTimerLists+0xc4>)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	6013      	str	r3, [r2, #0]
}
 80061f0:	bf00      	nop
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	200010a8 	.word	0x200010a8
 80061fc:	200010ac 	.word	0x200010ac

08006200 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006206:	f000 f965 	bl	80064d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800620a:	4b15      	ldr	r3, [pc, #84]	; (8006260 <prvCheckForValidListAndQueue+0x60>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d120      	bne.n	8006254 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006212:	4814      	ldr	r0, [pc, #80]	; (8006264 <prvCheckForValidListAndQueue+0x64>)
 8006214:	f7fd fd08 	bl	8003c28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006218:	4813      	ldr	r0, [pc, #76]	; (8006268 <prvCheckForValidListAndQueue+0x68>)
 800621a:	f7fd fd05 	bl	8003c28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800621e:	4b13      	ldr	r3, [pc, #76]	; (800626c <prvCheckForValidListAndQueue+0x6c>)
 8006220:	4a10      	ldr	r2, [pc, #64]	; (8006264 <prvCheckForValidListAndQueue+0x64>)
 8006222:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006224:	4b12      	ldr	r3, [pc, #72]	; (8006270 <prvCheckForValidListAndQueue+0x70>)
 8006226:	4a10      	ldr	r2, [pc, #64]	; (8006268 <prvCheckForValidListAndQueue+0x68>)
 8006228:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800622a:	2300      	movs	r3, #0
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	4b11      	ldr	r3, [pc, #68]	; (8006274 <prvCheckForValidListAndQueue+0x74>)
 8006230:	4a11      	ldr	r2, [pc, #68]	; (8006278 <prvCheckForValidListAndQueue+0x78>)
 8006232:	2110      	movs	r1, #16
 8006234:	200a      	movs	r0, #10
 8006236:	f7fd fe13 	bl	8003e60 <xQueueGenericCreateStatic>
 800623a:	4603      	mov	r3, r0
 800623c:	4a08      	ldr	r2, [pc, #32]	; (8006260 <prvCheckForValidListAndQueue+0x60>)
 800623e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006240:	4b07      	ldr	r3, [pc, #28]	; (8006260 <prvCheckForValidListAndQueue+0x60>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <prvCheckForValidListAndQueue+0x60>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	490b      	ldr	r1, [pc, #44]	; (800627c <prvCheckForValidListAndQueue+0x7c>)
 800624e:	4618      	mov	r0, r3
 8006250:	f7fe fa2c 	bl	80046ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006254:	f000 f96e 	bl	8006534 <vPortExitCritical>
}
 8006258:	bf00      	nop
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	200010b0 	.word	0x200010b0
 8006264:	20001080 	.word	0x20001080
 8006268:	20001094 	.word	0x20001094
 800626c:	200010a8 	.word	0x200010a8
 8006270:	200010ac 	.word	0x200010ac
 8006274:	2000115c 	.word	0x2000115c
 8006278:	200010bc 	.word	0x200010bc
 800627c:	080075bc 	.word	0x080075bc

08006280 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3b04      	subs	r3, #4
 8006290:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3b04      	subs	r3, #4
 800629e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f023 0201 	bic.w	r2, r3, #1
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3b04      	subs	r3, #4
 80062ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062b0:	4a0c      	ldr	r2, [pc, #48]	; (80062e4 <pxPortInitialiseStack+0x64>)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3b14      	subs	r3, #20
 80062ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3b04      	subs	r3, #4
 80062c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f06f 0202 	mvn.w	r2, #2
 80062ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3b20      	subs	r3, #32
 80062d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062d6:	68fb      	ldr	r3, [r7, #12]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	080062e9 	.word	0x080062e9

080062e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062f2:	4b12      	ldr	r3, [pc, #72]	; (800633c <prvTaskExitError+0x54>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fa:	d00a      	beq.n	8006312 <prvTaskExitError+0x2a>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	60fb      	str	r3, [r7, #12]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <prvTaskExitError+0x28>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	60bb      	str	r3, [r7, #8]
}
 8006324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006326:	bf00      	nop
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0fc      	beq.n	8006328 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	2000000c 	.word	0x2000000c

08006340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006340:	4b07      	ldr	r3, [pc, #28]	; (8006360 <pxCurrentTCBConst2>)
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	6808      	ldr	r0, [r1, #0]
 8006346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634a:	f380 8809 	msr	PSP, r0
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f04f 0000 	mov.w	r0, #0
 8006356:	f380 8811 	msr	BASEPRI, r0
 800635a:	4770      	bx	lr
 800635c:	f3af 8000 	nop.w

08006360 <pxCurrentTCBConst2>:
 8006360:	20000b78 	.word	0x20000b78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop

08006368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006368:	4808      	ldr	r0, [pc, #32]	; (800638c <prvPortStartFirstTask+0x24>)
 800636a:	6800      	ldr	r0, [r0, #0]
 800636c:	6800      	ldr	r0, [r0, #0]
 800636e:	f380 8808 	msr	MSP, r0
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f380 8814 	msr	CONTROL, r0
 800637a:	b662      	cpsie	i
 800637c:	b661      	cpsie	f
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	df00      	svc	0
 8006388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800638a:	bf00      	nop
 800638c:	e000ed08 	.word	0xe000ed08

08006390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006396:	4b46      	ldr	r3, [pc, #280]	; (80064b0 <xPortStartScheduler+0x120>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a46      	ldr	r2, [pc, #280]	; (80064b4 <xPortStartScheduler+0x124>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d10a      	bne.n	80063b6 <xPortStartScheduler+0x26>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	613b      	str	r3, [r7, #16]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063b6:	4b3e      	ldr	r3, [pc, #248]	; (80064b0 <xPortStartScheduler+0x120>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a3f      	ldr	r2, [pc, #252]	; (80064b8 <xPortStartScheduler+0x128>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d10a      	bne.n	80063d6 <xPortStartScheduler+0x46>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	60fb      	str	r3, [r7, #12]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063d6:	4b39      	ldr	r3, [pc, #228]	; (80064bc <xPortStartScheduler+0x12c>)
 80063d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	22ff      	movs	r2, #255	; 0xff
 80063e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	4b31      	ldr	r3, [pc, #196]	; (80064c0 <xPortStartScheduler+0x130>)
 80063fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063fe:	4b31      	ldr	r3, [pc, #196]	; (80064c4 <xPortStartScheduler+0x134>)
 8006400:	2207      	movs	r2, #7
 8006402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006404:	e009      	b.n	800641a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006406:	4b2f      	ldr	r3, [pc, #188]	; (80064c4 <xPortStartScheduler+0x134>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3b01      	subs	r3, #1
 800640c:	4a2d      	ldr	r2, [pc, #180]	; (80064c4 <xPortStartScheduler+0x134>)
 800640e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b80      	cmp	r3, #128	; 0x80
 8006424:	d0ef      	beq.n	8006406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006426:	4b27      	ldr	r3, [pc, #156]	; (80064c4 <xPortStartScheduler+0x134>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f1c3 0307 	rsb	r3, r3, #7
 800642e:	2b04      	cmp	r3, #4
 8006430:	d00a      	beq.n	8006448 <xPortStartScheduler+0xb8>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60bb      	str	r3, [r7, #8]
}
 8006444:	bf00      	nop
 8006446:	e7fe      	b.n	8006446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006448:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <xPortStartScheduler+0x134>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	4a1d      	ldr	r2, [pc, #116]	; (80064c4 <xPortStartScheduler+0x134>)
 8006450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006452:	4b1c      	ldr	r3, [pc, #112]	; (80064c4 <xPortStartScheduler+0x134>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800645a:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <xPortStartScheduler+0x134>)
 800645c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006466:	4b18      	ldr	r3, [pc, #96]	; (80064c8 <xPortStartScheduler+0x138>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a17      	ldr	r2, [pc, #92]	; (80064c8 <xPortStartScheduler+0x138>)
 800646c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <xPortStartScheduler+0x138>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a14      	ldr	r2, [pc, #80]	; (80064c8 <xPortStartScheduler+0x138>)
 8006478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800647c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800647e:	f000 f8dd 	bl	800663c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006482:	4b12      	ldr	r3, [pc, #72]	; (80064cc <xPortStartScheduler+0x13c>)
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006488:	f000 f8fc 	bl	8006684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800648c:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <xPortStartScheduler+0x140>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a0f      	ldr	r2, [pc, #60]	; (80064d0 <xPortStartScheduler+0x140>)
 8006492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006498:	f7ff ff66 	bl	8006368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800649c:	f7fe feb0 	bl	8005200 <vTaskSwitchContext>
	prvTaskExitError();
 80064a0:	f7ff ff22 	bl	80062e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	e000ed00 	.word	0xe000ed00
 80064b4:	410fc271 	.word	0x410fc271
 80064b8:	410fc270 	.word	0x410fc270
 80064bc:	e000e400 	.word	0xe000e400
 80064c0:	200011ac 	.word	0x200011ac
 80064c4:	200011b0 	.word	0x200011b0
 80064c8:	e000ed20 	.word	0xe000ed20
 80064cc:	2000000c 	.word	0x2000000c
 80064d0:	e000ef34 	.word	0xe000ef34

080064d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	607b      	str	r3, [r7, #4]
}
 80064ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064ee:	4b0f      	ldr	r3, [pc, #60]	; (800652c <vPortEnterCritical+0x58>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3301      	adds	r3, #1
 80064f4:	4a0d      	ldr	r2, [pc, #52]	; (800652c <vPortEnterCritical+0x58>)
 80064f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064f8:	4b0c      	ldr	r3, [pc, #48]	; (800652c <vPortEnterCritical+0x58>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d10f      	bne.n	8006520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <vPortEnterCritical+0x5c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <vPortEnterCritical+0x4c>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	603b      	str	r3, [r7, #0]
}
 800651c:	bf00      	nop
 800651e:	e7fe      	b.n	800651e <vPortEnterCritical+0x4a>
	}
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	2000000c 	.word	0x2000000c
 8006530:	e000ed04 	.word	0xe000ed04

08006534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800653a:	4b12      	ldr	r3, [pc, #72]	; (8006584 <vPortExitCritical+0x50>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <vPortExitCritical+0x24>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	607b      	str	r3, [r7, #4]
}
 8006554:	bf00      	nop
 8006556:	e7fe      	b.n	8006556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006558:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <vPortExitCritical+0x50>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3b01      	subs	r3, #1
 800655e:	4a09      	ldr	r2, [pc, #36]	; (8006584 <vPortExitCritical+0x50>)
 8006560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006562:	4b08      	ldr	r3, [pc, #32]	; (8006584 <vPortExitCritical+0x50>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d105      	bne.n	8006576 <vPortExitCritical+0x42>
 800656a:	2300      	movs	r3, #0
 800656c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	f383 8811 	msr	BASEPRI, r3
}
 8006574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	2000000c 	.word	0x2000000c
	...

08006590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006590:	f3ef 8009 	mrs	r0, PSP
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <pxCurrentTCBConst>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	f01e 0f10 	tst.w	lr, #16
 80065a0:	bf08      	it	eq
 80065a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065aa:	6010      	str	r0, [r2, #0]
 80065ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065b4:	f380 8811 	msr	BASEPRI, r0
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f7fe fe1e 	bl	8005200 <vTaskSwitchContext>
 80065c4:	f04f 0000 	mov.w	r0, #0
 80065c8:	f380 8811 	msr	BASEPRI, r0
 80065cc:	bc09      	pop	{r0, r3}
 80065ce:	6819      	ldr	r1, [r3, #0]
 80065d0:	6808      	ldr	r0, [r1, #0]
 80065d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d6:	f01e 0f10 	tst.w	lr, #16
 80065da:	bf08      	it	eq
 80065dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065e0:	f380 8809 	msr	PSP, r0
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	f3af 8000 	nop.w

080065f0 <pxCurrentTCBConst>:
 80065f0:	20000b78 	.word	0x20000b78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop

080065f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	607b      	str	r3, [r7, #4]
}
 8006610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006612:	f7fe fd3b 	bl	800508c <xTaskIncrementTick>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800661c:	4b06      	ldr	r3, [pc, #24]	; (8006638 <xPortSysTickHandler+0x40>)
 800661e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	2300      	movs	r3, #0
 8006626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f383 8811 	msr	BASEPRI, r3
}
 800662e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006630:	bf00      	nop
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <vPortSetupTimerInterrupt+0x34>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006646:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <vPortSetupTimerInterrupt+0x38>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800664c:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <vPortSetupTimerInterrupt+0x3c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a0a      	ldr	r2, [pc, #40]	; (800667c <vPortSetupTimerInterrupt+0x40>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	099b      	lsrs	r3, r3, #6
 8006658:	4a09      	ldr	r2, [pc, #36]	; (8006680 <vPortSetupTimerInterrupt+0x44>)
 800665a:	3b01      	subs	r3, #1
 800665c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800665e:	4b04      	ldr	r3, [pc, #16]	; (8006670 <vPortSetupTimerInterrupt+0x34>)
 8006660:	2207      	movs	r2, #7
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	e000e010 	.word	0xe000e010
 8006674:	e000e018 	.word	0xe000e018
 8006678:	20000000 	.word	0x20000000
 800667c:	10624dd3 	.word	0x10624dd3
 8006680:	e000e014 	.word	0xe000e014

08006684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006694 <vPortEnableVFP+0x10>
 8006688:	6801      	ldr	r1, [r0, #0]
 800668a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800668e:	6001      	str	r1, [r0, #0]
 8006690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006692:	bf00      	nop
 8006694:	e000ed88 	.word	0xe000ed88

08006698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800669e:	f3ef 8305 	mrs	r3, IPSR
 80066a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b0f      	cmp	r3, #15
 80066a8:	d914      	bls.n	80066d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066aa:	4a17      	ldr	r2, [pc, #92]	; (8006708 <vPortValidateInterruptPriority+0x70>)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4413      	add	r3, r2
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066b4:	4b15      	ldr	r3, [pc, #84]	; (800670c <vPortValidateInterruptPriority+0x74>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	7afa      	ldrb	r2, [r7, #11]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d20a      	bcs.n	80066d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	607b      	str	r3, [r7, #4]
}
 80066d0:	bf00      	nop
 80066d2:	e7fe      	b.n	80066d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066d4:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <vPortValidateInterruptPriority+0x78>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066dc:	4b0d      	ldr	r3, [pc, #52]	; (8006714 <vPortValidateInterruptPriority+0x7c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d90a      	bls.n	80066fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	603b      	str	r3, [r7, #0]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <vPortValidateInterruptPriority+0x60>
	}
 80066fa:	bf00      	nop
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	e000e3f0 	.word	0xe000e3f0
 800670c:	200011ac 	.word	0x200011ac
 8006710:	e000ed0c 	.word	0xe000ed0c
 8006714:	200011b0 	.word	0x200011b0

08006718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08a      	sub	sp, #40	; 0x28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006720:	2300      	movs	r3, #0
 8006722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006724:	f7fe fb66 	bl	8004df4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006728:	4b5b      	ldr	r3, [pc, #364]	; (8006898 <pvPortMalloc+0x180>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006730:	f000 f920 	bl	8006974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006734:	4b59      	ldr	r3, [pc, #356]	; (800689c <pvPortMalloc+0x184>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	f040 8093 	bne.w	8006868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01d      	beq.n	8006784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006748:	2208      	movs	r2, #8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4413      	add	r3, r2
 800674e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	2b00      	cmp	r3, #0
 8006758:	d014      	beq.n	8006784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f023 0307 	bic.w	r3, r3, #7
 8006760:	3308      	adds	r3, #8
 8006762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <pvPortMalloc+0x6c>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	617b      	str	r3, [r7, #20]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d06e      	beq.n	8006868 <pvPortMalloc+0x150>
 800678a:	4b45      	ldr	r3, [pc, #276]	; (80068a0 <pvPortMalloc+0x188>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	429a      	cmp	r2, r3
 8006792:	d869      	bhi.n	8006868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006794:	4b43      	ldr	r3, [pc, #268]	; (80068a4 <pvPortMalloc+0x18c>)
 8006796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006798:	4b42      	ldr	r3, [pc, #264]	; (80068a4 <pvPortMalloc+0x18c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800679e:	e004      	b.n	80067aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d903      	bls.n	80067bc <pvPortMalloc+0xa4>
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1f1      	bne.n	80067a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067bc:	4b36      	ldr	r3, [pc, #216]	; (8006898 <pvPortMalloc+0x180>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d050      	beq.n	8006868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2208      	movs	r2, #8
 80067cc:	4413      	add	r3, r2
 80067ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	2308      	movs	r3, #8
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d91f      	bls.n	8006828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4413      	add	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <pvPortMalloc+0xf8>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	613b      	str	r3, [r7, #16]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	1ad2      	subs	r2, r2, r3
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006822:	69b8      	ldr	r0, [r7, #24]
 8006824:	f000 f908 	bl	8006a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006828:	4b1d      	ldr	r3, [pc, #116]	; (80068a0 <pvPortMalloc+0x188>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	4a1b      	ldr	r2, [pc, #108]	; (80068a0 <pvPortMalloc+0x188>)
 8006834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006836:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <pvPortMalloc+0x188>)
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <pvPortMalloc+0x190>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d203      	bcs.n	800684a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006842:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <pvPortMalloc+0x188>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <pvPortMalloc+0x190>)
 8006848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	4b13      	ldr	r3, [pc, #76]	; (800689c <pvPortMalloc+0x184>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	431a      	orrs	r2, r3
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800685e:	4b13      	ldr	r3, [pc, #76]	; (80068ac <pvPortMalloc+0x194>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3301      	adds	r3, #1
 8006864:	4a11      	ldr	r2, [pc, #68]	; (80068ac <pvPortMalloc+0x194>)
 8006866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006868:	f7fe fad2 	bl	8004e10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <pvPortMalloc+0x174>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	60fb      	str	r3, [r7, #12]
}
 8006888:	bf00      	nop
 800688a:	e7fe      	b.n	800688a <pvPortMalloc+0x172>
	return pvReturn;
 800688c:	69fb      	ldr	r3, [r7, #28]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3728      	adds	r7, #40	; 0x28
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20004dbc 	.word	0x20004dbc
 800689c:	20004dd0 	.word	0x20004dd0
 80068a0:	20004dc0 	.word	0x20004dc0
 80068a4:	20004db4 	.word	0x20004db4
 80068a8:	20004dc4 	.word	0x20004dc4
 80068ac:	20004dc8 	.word	0x20004dc8

080068b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d04d      	beq.n	800695e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068c2:	2308      	movs	r3, #8
 80068c4:	425b      	negs	r3, r3
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4413      	add	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	4b24      	ldr	r3, [pc, #144]	; (8006968 <vPortFree+0xb8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4013      	ands	r3, r2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <vPortFree+0x44>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	60fb      	str	r3, [r7, #12]
}
 80068f0:	bf00      	nop
 80068f2:	e7fe      	b.n	80068f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00a      	beq.n	8006912 <vPortFree+0x62>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	60bb      	str	r3, [r7, #8]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	4b14      	ldr	r3, [pc, #80]	; (8006968 <vPortFree+0xb8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4013      	ands	r3, r2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01e      	beq.n	800695e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d11a      	bne.n	800695e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	4b0e      	ldr	r3, [pc, #56]	; (8006968 <vPortFree+0xb8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	43db      	mvns	r3, r3
 8006932:	401a      	ands	r2, r3
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006938:	f7fe fa5c 	bl	8004df4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	4b0a      	ldr	r3, [pc, #40]	; (800696c <vPortFree+0xbc>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4413      	add	r3, r2
 8006946:	4a09      	ldr	r2, [pc, #36]	; (800696c <vPortFree+0xbc>)
 8006948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800694a:	6938      	ldr	r0, [r7, #16]
 800694c:	f000 f874 	bl	8006a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006950:	4b07      	ldr	r3, [pc, #28]	; (8006970 <vPortFree+0xc0>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a06      	ldr	r2, [pc, #24]	; (8006970 <vPortFree+0xc0>)
 8006958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800695a:	f7fe fa59 	bl	8004e10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800695e:	bf00      	nop
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20004dd0 	.word	0x20004dd0
 800696c:	20004dc0 	.word	0x20004dc0
 8006970:	20004dcc 	.word	0x20004dcc

08006974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800697a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800697e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006980:	4b27      	ldr	r3, [pc, #156]	; (8006a20 <prvHeapInit+0xac>)
 8006982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00c      	beq.n	80069a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3307      	adds	r3, #7
 8006992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0307 	bic.w	r3, r3, #7
 800699a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <prvHeapInit+0xac>)
 80069a4:	4413      	add	r3, r2
 80069a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069ac:	4a1d      	ldr	r2, [pc, #116]	; (8006a24 <prvHeapInit+0xb0>)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069b2:	4b1c      	ldr	r3, [pc, #112]	; (8006a24 <prvHeapInit+0xb0>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	4413      	add	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069c0:	2208      	movs	r2, #8
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0307 	bic.w	r3, r3, #7
 80069ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4a15      	ldr	r2, [pc, #84]	; (8006a28 <prvHeapInit+0xb4>)
 80069d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069d6:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <prvHeapInit+0xb4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2200      	movs	r2, #0
 80069dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069de:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <prvHeapInit+0xb4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	1ad2      	subs	r2, r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069f4:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <prvHeapInit+0xb4>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	4a0a      	ldr	r2, [pc, #40]	; (8006a2c <prvHeapInit+0xb8>)
 8006a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4a09      	ldr	r2, [pc, #36]	; (8006a30 <prvHeapInit+0xbc>)
 8006a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a0c:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <prvHeapInit+0xc0>)
 8006a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a12:	601a      	str	r2, [r3, #0]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	200011b4 	.word	0x200011b4
 8006a24:	20004db4 	.word	0x20004db4
 8006a28:	20004dbc 	.word	0x20004dbc
 8006a2c:	20004dc4 	.word	0x20004dc4
 8006a30:	20004dc0 	.word	0x20004dc0
 8006a34:	20004dd0 	.word	0x20004dd0

08006a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a40:	4b28      	ldr	r3, [pc, #160]	; (8006ae4 <prvInsertBlockIntoFreeList+0xac>)
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e002      	b.n	8006a4c <prvInsertBlockIntoFreeList+0x14>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d8f7      	bhi.n	8006a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	4413      	add	r3, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d108      	bne.n	8006a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	441a      	add	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	441a      	add	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d118      	bne.n	8006ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b15      	ldr	r3, [pc, #84]	; (8006ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d00d      	beq.n	8006ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	441a      	add	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	e008      	b.n	8006ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ab6:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	e003      	b.n	8006ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d002      	beq.n	8006ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20004db4 	.word	0x20004db4
 8006ae8:	20004dbc 	.word	0x20004dbc

08006aec <__errno>:
 8006aec:	4b01      	ldr	r3, [pc, #4]	; (8006af4 <__errno+0x8>)
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000010 	.word	0x20000010

08006af8 <__libc_init_array>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	4d0d      	ldr	r5, [pc, #52]	; (8006b30 <__libc_init_array+0x38>)
 8006afc:	4c0d      	ldr	r4, [pc, #52]	; (8006b34 <__libc_init_array+0x3c>)
 8006afe:	1b64      	subs	r4, r4, r5
 8006b00:	10a4      	asrs	r4, r4, #2
 8006b02:	2600      	movs	r6, #0
 8006b04:	42a6      	cmp	r6, r4
 8006b06:	d109      	bne.n	8006b1c <__libc_init_array+0x24>
 8006b08:	4d0b      	ldr	r5, [pc, #44]	; (8006b38 <__libc_init_array+0x40>)
 8006b0a:	4c0c      	ldr	r4, [pc, #48]	; (8006b3c <__libc_init_array+0x44>)
 8006b0c:	f000 fd00 	bl	8007510 <_init>
 8006b10:	1b64      	subs	r4, r4, r5
 8006b12:	10a4      	asrs	r4, r4, #2
 8006b14:	2600      	movs	r6, #0
 8006b16:	42a6      	cmp	r6, r4
 8006b18:	d105      	bne.n	8006b26 <__libc_init_array+0x2e>
 8006b1a:	bd70      	pop	{r4, r5, r6, pc}
 8006b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b20:	4798      	blx	r3
 8006b22:	3601      	adds	r6, #1
 8006b24:	e7ee      	b.n	8006b04 <__libc_init_array+0xc>
 8006b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b2a:	4798      	blx	r3
 8006b2c:	3601      	adds	r6, #1
 8006b2e:	e7f2      	b.n	8006b16 <__libc_init_array+0x1e>
 8006b30:	08007678 	.word	0x08007678
 8006b34:	08007678 	.word	0x08007678
 8006b38:	08007678 	.word	0x08007678
 8006b3c:	0800767c 	.word	0x0800767c

08006b40 <__retarget_lock_acquire_recursive>:
 8006b40:	4770      	bx	lr

08006b42 <__retarget_lock_release_recursive>:
 8006b42:	4770      	bx	lr

08006b44 <memcpy>:
 8006b44:	440a      	add	r2, r1
 8006b46:	4291      	cmp	r1, r2
 8006b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b4c:	d100      	bne.n	8006b50 <memcpy+0xc>
 8006b4e:	4770      	bx	lr
 8006b50:	b510      	push	{r4, lr}
 8006b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b5a:	4291      	cmp	r1, r2
 8006b5c:	d1f9      	bne.n	8006b52 <memcpy+0xe>
 8006b5e:	bd10      	pop	{r4, pc}

08006b60 <memset>:
 8006b60:	4402      	add	r2, r0
 8006b62:	4603      	mov	r3, r0
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d100      	bne.n	8006b6a <memset+0xa>
 8006b68:	4770      	bx	lr
 8006b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b6e:	e7f9      	b.n	8006b64 <memset+0x4>

08006b70 <sbrk_aligned>:
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	4e0e      	ldr	r6, [pc, #56]	; (8006bac <sbrk_aligned+0x3c>)
 8006b74:	460c      	mov	r4, r1
 8006b76:	6831      	ldr	r1, [r6, #0]
 8006b78:	4605      	mov	r5, r0
 8006b7a:	b911      	cbnz	r1, 8006b82 <sbrk_aligned+0x12>
 8006b7c:	f000 f8f6 	bl	8006d6c <_sbrk_r>
 8006b80:	6030      	str	r0, [r6, #0]
 8006b82:	4621      	mov	r1, r4
 8006b84:	4628      	mov	r0, r5
 8006b86:	f000 f8f1 	bl	8006d6c <_sbrk_r>
 8006b8a:	1c43      	adds	r3, r0, #1
 8006b8c:	d00a      	beq.n	8006ba4 <sbrk_aligned+0x34>
 8006b8e:	1cc4      	adds	r4, r0, #3
 8006b90:	f024 0403 	bic.w	r4, r4, #3
 8006b94:	42a0      	cmp	r0, r4
 8006b96:	d007      	beq.n	8006ba8 <sbrk_aligned+0x38>
 8006b98:	1a21      	subs	r1, r4, r0
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f000 f8e6 	bl	8006d6c <_sbrk_r>
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d101      	bne.n	8006ba8 <sbrk_aligned+0x38>
 8006ba4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ba8:	4620      	mov	r0, r4
 8006baa:	bd70      	pop	{r4, r5, r6, pc}
 8006bac:	20004ddc 	.word	0x20004ddc

08006bb0 <_malloc_r>:
 8006bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb4:	1ccd      	adds	r5, r1, #3
 8006bb6:	f025 0503 	bic.w	r5, r5, #3
 8006bba:	3508      	adds	r5, #8
 8006bbc:	2d0c      	cmp	r5, #12
 8006bbe:	bf38      	it	cc
 8006bc0:	250c      	movcc	r5, #12
 8006bc2:	2d00      	cmp	r5, #0
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	db01      	blt.n	8006bcc <_malloc_r+0x1c>
 8006bc8:	42a9      	cmp	r1, r5
 8006bca:	d905      	bls.n	8006bd8 <_malloc_r+0x28>
 8006bcc:	230c      	movs	r3, #12
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	2600      	movs	r6, #0
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd8:	4e2e      	ldr	r6, [pc, #184]	; (8006c94 <_malloc_r+0xe4>)
 8006bda:	f000 f8ff 	bl	8006ddc <__malloc_lock>
 8006bde:	6833      	ldr	r3, [r6, #0]
 8006be0:	461c      	mov	r4, r3
 8006be2:	bb34      	cbnz	r4, 8006c32 <_malloc_r+0x82>
 8006be4:	4629      	mov	r1, r5
 8006be6:	4638      	mov	r0, r7
 8006be8:	f7ff ffc2 	bl	8006b70 <sbrk_aligned>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	4604      	mov	r4, r0
 8006bf0:	d14d      	bne.n	8006c8e <_malloc_r+0xde>
 8006bf2:	6834      	ldr	r4, [r6, #0]
 8006bf4:	4626      	mov	r6, r4
 8006bf6:	2e00      	cmp	r6, #0
 8006bf8:	d140      	bne.n	8006c7c <_malloc_r+0xcc>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4638      	mov	r0, r7
 8006c00:	eb04 0803 	add.w	r8, r4, r3
 8006c04:	f000 f8b2 	bl	8006d6c <_sbrk_r>
 8006c08:	4580      	cmp	r8, r0
 8006c0a:	d13a      	bne.n	8006c82 <_malloc_r+0xd2>
 8006c0c:	6821      	ldr	r1, [r4, #0]
 8006c0e:	3503      	adds	r5, #3
 8006c10:	1a6d      	subs	r5, r5, r1
 8006c12:	f025 0503 	bic.w	r5, r5, #3
 8006c16:	3508      	adds	r5, #8
 8006c18:	2d0c      	cmp	r5, #12
 8006c1a:	bf38      	it	cc
 8006c1c:	250c      	movcc	r5, #12
 8006c1e:	4629      	mov	r1, r5
 8006c20:	4638      	mov	r0, r7
 8006c22:	f7ff ffa5 	bl	8006b70 <sbrk_aligned>
 8006c26:	3001      	adds	r0, #1
 8006c28:	d02b      	beq.n	8006c82 <_malloc_r+0xd2>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	442b      	add	r3, r5
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	e00e      	b.n	8006c50 <_malloc_r+0xa0>
 8006c32:	6822      	ldr	r2, [r4, #0]
 8006c34:	1b52      	subs	r2, r2, r5
 8006c36:	d41e      	bmi.n	8006c76 <_malloc_r+0xc6>
 8006c38:	2a0b      	cmp	r2, #11
 8006c3a:	d916      	bls.n	8006c6a <_malloc_r+0xba>
 8006c3c:	1961      	adds	r1, r4, r5
 8006c3e:	42a3      	cmp	r3, r4
 8006c40:	6025      	str	r5, [r4, #0]
 8006c42:	bf18      	it	ne
 8006c44:	6059      	strne	r1, [r3, #4]
 8006c46:	6863      	ldr	r3, [r4, #4]
 8006c48:	bf08      	it	eq
 8006c4a:	6031      	streq	r1, [r6, #0]
 8006c4c:	5162      	str	r2, [r4, r5]
 8006c4e:	604b      	str	r3, [r1, #4]
 8006c50:	4638      	mov	r0, r7
 8006c52:	f104 060b 	add.w	r6, r4, #11
 8006c56:	f000 f8c7 	bl	8006de8 <__malloc_unlock>
 8006c5a:	f026 0607 	bic.w	r6, r6, #7
 8006c5e:	1d23      	adds	r3, r4, #4
 8006c60:	1af2      	subs	r2, r6, r3
 8006c62:	d0b6      	beq.n	8006bd2 <_malloc_r+0x22>
 8006c64:	1b9b      	subs	r3, r3, r6
 8006c66:	50a3      	str	r3, [r4, r2]
 8006c68:	e7b3      	b.n	8006bd2 <_malloc_r+0x22>
 8006c6a:	6862      	ldr	r2, [r4, #4]
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	bf0c      	ite	eq
 8006c70:	6032      	streq	r2, [r6, #0]
 8006c72:	605a      	strne	r2, [r3, #4]
 8006c74:	e7ec      	b.n	8006c50 <_malloc_r+0xa0>
 8006c76:	4623      	mov	r3, r4
 8006c78:	6864      	ldr	r4, [r4, #4]
 8006c7a:	e7b2      	b.n	8006be2 <_malloc_r+0x32>
 8006c7c:	4634      	mov	r4, r6
 8006c7e:	6876      	ldr	r6, [r6, #4]
 8006c80:	e7b9      	b.n	8006bf6 <_malloc_r+0x46>
 8006c82:	230c      	movs	r3, #12
 8006c84:	603b      	str	r3, [r7, #0]
 8006c86:	4638      	mov	r0, r7
 8006c88:	f000 f8ae 	bl	8006de8 <__malloc_unlock>
 8006c8c:	e7a1      	b.n	8006bd2 <_malloc_r+0x22>
 8006c8e:	6025      	str	r5, [r4, #0]
 8006c90:	e7de      	b.n	8006c50 <_malloc_r+0xa0>
 8006c92:	bf00      	nop
 8006c94:	20004dd8 	.word	0x20004dd8

08006c98 <cleanup_glue>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	6809      	ldr	r1, [r1, #0]
 8006c9e:	4605      	mov	r5, r0
 8006ca0:	b109      	cbz	r1, 8006ca6 <cleanup_glue+0xe>
 8006ca2:	f7ff fff9 	bl	8006c98 <cleanup_glue>
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4628      	mov	r0, r5
 8006caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cae:	f000 b8a1 	b.w	8006df4 <_free_r>
	...

08006cb4 <_reclaim_reent>:
 8006cb4:	4b2c      	ldr	r3, [pc, #176]	; (8006d68 <_reclaim_reent+0xb4>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4283      	cmp	r3, r0
 8006cba:	b570      	push	{r4, r5, r6, lr}
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	d051      	beq.n	8006d64 <_reclaim_reent+0xb0>
 8006cc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006cc2:	b143      	cbz	r3, 8006cd6 <_reclaim_reent+0x22>
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d14a      	bne.n	8006d60 <_reclaim_reent+0xac>
 8006cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ccc:	6819      	ldr	r1, [r3, #0]
 8006cce:	b111      	cbz	r1, 8006cd6 <_reclaim_reent+0x22>
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f000 f88f 	bl	8006df4 <_free_r>
 8006cd6:	6961      	ldr	r1, [r4, #20]
 8006cd8:	b111      	cbz	r1, 8006ce0 <_reclaim_reent+0x2c>
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 f88a 	bl	8006df4 <_free_r>
 8006ce0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ce2:	b111      	cbz	r1, 8006cea <_reclaim_reent+0x36>
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f000 f885 	bl	8006df4 <_free_r>
 8006cea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006cec:	b111      	cbz	r1, 8006cf4 <_reclaim_reent+0x40>
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f000 f880 	bl	8006df4 <_free_r>
 8006cf4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006cf6:	b111      	cbz	r1, 8006cfe <_reclaim_reent+0x4a>
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 f87b 	bl	8006df4 <_free_r>
 8006cfe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006d00:	b111      	cbz	r1, 8006d08 <_reclaim_reent+0x54>
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 f876 	bl	8006df4 <_free_r>
 8006d08:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006d0a:	b111      	cbz	r1, 8006d12 <_reclaim_reent+0x5e>
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 f871 	bl	8006df4 <_free_r>
 8006d12:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006d14:	b111      	cbz	r1, 8006d1c <_reclaim_reent+0x68>
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 f86c 	bl	8006df4 <_free_r>
 8006d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d1e:	b111      	cbz	r1, 8006d26 <_reclaim_reent+0x72>
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 f867 	bl	8006df4 <_free_r>
 8006d26:	69a3      	ldr	r3, [r4, #24]
 8006d28:	b1e3      	cbz	r3, 8006d64 <_reclaim_reent+0xb0>
 8006d2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	4798      	blx	r3
 8006d30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d32:	b1b9      	cbz	r1, 8006d64 <_reclaim_reent+0xb0>
 8006d34:	4620      	mov	r0, r4
 8006d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d3a:	f7ff bfad 	b.w	8006c98 <cleanup_glue>
 8006d3e:	5949      	ldr	r1, [r1, r5]
 8006d40:	b941      	cbnz	r1, 8006d54 <_reclaim_reent+0xa0>
 8006d42:	3504      	adds	r5, #4
 8006d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d46:	2d80      	cmp	r5, #128	; 0x80
 8006d48:	68d9      	ldr	r1, [r3, #12]
 8006d4a:	d1f8      	bne.n	8006d3e <_reclaim_reent+0x8a>
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f000 f851 	bl	8006df4 <_free_r>
 8006d52:	e7ba      	b.n	8006cca <_reclaim_reent+0x16>
 8006d54:	680e      	ldr	r6, [r1, #0]
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 f84c 	bl	8006df4 <_free_r>
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	e7ef      	b.n	8006d40 <_reclaim_reent+0x8c>
 8006d60:	2500      	movs	r5, #0
 8006d62:	e7ef      	b.n	8006d44 <_reclaim_reent+0x90>
 8006d64:	bd70      	pop	{r4, r5, r6, pc}
 8006d66:	bf00      	nop
 8006d68:	20000010 	.word	0x20000010

08006d6c <_sbrk_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d06      	ldr	r5, [pc, #24]	; (8006d88 <_sbrk_r+0x1c>)
 8006d70:	2300      	movs	r3, #0
 8006d72:	4604      	mov	r4, r0
 8006d74:	4608      	mov	r0, r1
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	f7f9 ffda 	bl	8000d30 <_sbrk>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_sbrk_r+0x1a>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_sbrk_r+0x1a>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	20004de0 	.word	0x20004de0

08006d8c <siprintf>:
 8006d8c:	b40e      	push	{r1, r2, r3}
 8006d8e:	b500      	push	{lr}
 8006d90:	b09c      	sub	sp, #112	; 0x70
 8006d92:	ab1d      	add	r3, sp, #116	; 0x74
 8006d94:	9002      	str	r0, [sp, #8]
 8006d96:	9006      	str	r0, [sp, #24]
 8006d98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d9c:	4809      	ldr	r0, [pc, #36]	; (8006dc4 <siprintf+0x38>)
 8006d9e:	9107      	str	r1, [sp, #28]
 8006da0:	9104      	str	r1, [sp, #16]
 8006da2:	4909      	ldr	r1, [pc, #36]	; (8006dc8 <siprintf+0x3c>)
 8006da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006da8:	9105      	str	r1, [sp, #20]
 8006daa:	6800      	ldr	r0, [r0, #0]
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	a902      	add	r1, sp, #8
 8006db0:	f000 f8c8 	bl	8006f44 <_svfiprintf_r>
 8006db4:	9b02      	ldr	r3, [sp, #8]
 8006db6:	2200      	movs	r2, #0
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	b01c      	add	sp, #112	; 0x70
 8006dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dc0:	b003      	add	sp, #12
 8006dc2:	4770      	bx	lr
 8006dc4:	20000010 	.word	0x20000010
 8006dc8:	ffff0208 	.word	0xffff0208

08006dcc <strcpy>:
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dd2:	f803 2b01 	strb.w	r2, [r3], #1
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	d1f9      	bne.n	8006dce <strcpy+0x2>
 8006dda:	4770      	bx	lr

08006ddc <__malloc_lock>:
 8006ddc:	4801      	ldr	r0, [pc, #4]	; (8006de4 <__malloc_lock+0x8>)
 8006dde:	f7ff beaf 	b.w	8006b40 <__retarget_lock_acquire_recursive>
 8006de2:	bf00      	nop
 8006de4:	20004dd4 	.word	0x20004dd4

08006de8 <__malloc_unlock>:
 8006de8:	4801      	ldr	r0, [pc, #4]	; (8006df0 <__malloc_unlock+0x8>)
 8006dea:	f7ff beaa 	b.w	8006b42 <__retarget_lock_release_recursive>
 8006dee:	bf00      	nop
 8006df0:	20004dd4 	.word	0x20004dd4

08006df4 <_free_r>:
 8006df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006df6:	2900      	cmp	r1, #0
 8006df8:	d044      	beq.n	8006e84 <_free_r+0x90>
 8006dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dfe:	9001      	str	r0, [sp, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f1a1 0404 	sub.w	r4, r1, #4
 8006e06:	bfb8      	it	lt
 8006e08:	18e4      	addlt	r4, r4, r3
 8006e0a:	f7ff ffe7 	bl	8006ddc <__malloc_lock>
 8006e0e:	4a1e      	ldr	r2, [pc, #120]	; (8006e88 <_free_r+0x94>)
 8006e10:	9801      	ldr	r0, [sp, #4]
 8006e12:	6813      	ldr	r3, [r2, #0]
 8006e14:	b933      	cbnz	r3, 8006e24 <_free_r+0x30>
 8006e16:	6063      	str	r3, [r4, #4]
 8006e18:	6014      	str	r4, [r2, #0]
 8006e1a:	b003      	add	sp, #12
 8006e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e20:	f7ff bfe2 	b.w	8006de8 <__malloc_unlock>
 8006e24:	42a3      	cmp	r3, r4
 8006e26:	d908      	bls.n	8006e3a <_free_r+0x46>
 8006e28:	6825      	ldr	r5, [r4, #0]
 8006e2a:	1961      	adds	r1, r4, r5
 8006e2c:	428b      	cmp	r3, r1
 8006e2e:	bf01      	itttt	eq
 8006e30:	6819      	ldreq	r1, [r3, #0]
 8006e32:	685b      	ldreq	r3, [r3, #4]
 8006e34:	1949      	addeq	r1, r1, r5
 8006e36:	6021      	streq	r1, [r4, #0]
 8006e38:	e7ed      	b.n	8006e16 <_free_r+0x22>
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	b10b      	cbz	r3, 8006e44 <_free_r+0x50>
 8006e40:	42a3      	cmp	r3, r4
 8006e42:	d9fa      	bls.n	8006e3a <_free_r+0x46>
 8006e44:	6811      	ldr	r1, [r2, #0]
 8006e46:	1855      	adds	r5, r2, r1
 8006e48:	42a5      	cmp	r5, r4
 8006e4a:	d10b      	bne.n	8006e64 <_free_r+0x70>
 8006e4c:	6824      	ldr	r4, [r4, #0]
 8006e4e:	4421      	add	r1, r4
 8006e50:	1854      	adds	r4, r2, r1
 8006e52:	42a3      	cmp	r3, r4
 8006e54:	6011      	str	r1, [r2, #0]
 8006e56:	d1e0      	bne.n	8006e1a <_free_r+0x26>
 8006e58:	681c      	ldr	r4, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	6053      	str	r3, [r2, #4]
 8006e5e:	4421      	add	r1, r4
 8006e60:	6011      	str	r1, [r2, #0]
 8006e62:	e7da      	b.n	8006e1a <_free_r+0x26>
 8006e64:	d902      	bls.n	8006e6c <_free_r+0x78>
 8006e66:	230c      	movs	r3, #12
 8006e68:	6003      	str	r3, [r0, #0]
 8006e6a:	e7d6      	b.n	8006e1a <_free_r+0x26>
 8006e6c:	6825      	ldr	r5, [r4, #0]
 8006e6e:	1961      	adds	r1, r4, r5
 8006e70:	428b      	cmp	r3, r1
 8006e72:	bf04      	itt	eq
 8006e74:	6819      	ldreq	r1, [r3, #0]
 8006e76:	685b      	ldreq	r3, [r3, #4]
 8006e78:	6063      	str	r3, [r4, #4]
 8006e7a:	bf04      	itt	eq
 8006e7c:	1949      	addeq	r1, r1, r5
 8006e7e:	6021      	streq	r1, [r4, #0]
 8006e80:	6054      	str	r4, [r2, #4]
 8006e82:	e7ca      	b.n	8006e1a <_free_r+0x26>
 8006e84:	b003      	add	sp, #12
 8006e86:	bd30      	pop	{r4, r5, pc}
 8006e88:	20004dd8 	.word	0x20004dd8

08006e8c <__ssputs_r>:
 8006e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e90:	688e      	ldr	r6, [r1, #8]
 8006e92:	429e      	cmp	r6, r3
 8006e94:	4682      	mov	sl, r0
 8006e96:	460c      	mov	r4, r1
 8006e98:	4690      	mov	r8, r2
 8006e9a:	461f      	mov	r7, r3
 8006e9c:	d838      	bhi.n	8006f10 <__ssputs_r+0x84>
 8006e9e:	898a      	ldrh	r2, [r1, #12]
 8006ea0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ea4:	d032      	beq.n	8006f0c <__ssputs_r+0x80>
 8006ea6:	6825      	ldr	r5, [r4, #0]
 8006ea8:	6909      	ldr	r1, [r1, #16]
 8006eaa:	eba5 0901 	sub.w	r9, r5, r1
 8006eae:	6965      	ldr	r5, [r4, #20]
 8006eb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006eb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006eb8:	3301      	adds	r3, #1
 8006eba:	444b      	add	r3, r9
 8006ebc:	106d      	asrs	r5, r5, #1
 8006ebe:	429d      	cmp	r5, r3
 8006ec0:	bf38      	it	cc
 8006ec2:	461d      	movcc	r5, r3
 8006ec4:	0553      	lsls	r3, r2, #21
 8006ec6:	d531      	bpl.n	8006f2c <__ssputs_r+0xa0>
 8006ec8:	4629      	mov	r1, r5
 8006eca:	f7ff fe71 	bl	8006bb0 <_malloc_r>
 8006ece:	4606      	mov	r6, r0
 8006ed0:	b950      	cbnz	r0, 8006ee8 <__ssputs_r+0x5c>
 8006ed2:	230c      	movs	r3, #12
 8006ed4:	f8ca 3000 	str.w	r3, [sl]
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ede:	81a3      	strh	r3, [r4, #12]
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee8:	6921      	ldr	r1, [r4, #16]
 8006eea:	464a      	mov	r2, r9
 8006eec:	f7ff fe2a 	bl	8006b44 <memcpy>
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efa:	81a3      	strh	r3, [r4, #12]
 8006efc:	6126      	str	r6, [r4, #16]
 8006efe:	6165      	str	r5, [r4, #20]
 8006f00:	444e      	add	r6, r9
 8006f02:	eba5 0509 	sub.w	r5, r5, r9
 8006f06:	6026      	str	r6, [r4, #0]
 8006f08:	60a5      	str	r5, [r4, #8]
 8006f0a:	463e      	mov	r6, r7
 8006f0c:	42be      	cmp	r6, r7
 8006f0e:	d900      	bls.n	8006f12 <__ssputs_r+0x86>
 8006f10:	463e      	mov	r6, r7
 8006f12:	6820      	ldr	r0, [r4, #0]
 8006f14:	4632      	mov	r2, r6
 8006f16:	4641      	mov	r1, r8
 8006f18:	f000 faa8 	bl	800746c <memmove>
 8006f1c:	68a3      	ldr	r3, [r4, #8]
 8006f1e:	1b9b      	subs	r3, r3, r6
 8006f20:	60a3      	str	r3, [r4, #8]
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	4433      	add	r3, r6
 8006f26:	6023      	str	r3, [r4, #0]
 8006f28:	2000      	movs	r0, #0
 8006f2a:	e7db      	b.n	8006ee4 <__ssputs_r+0x58>
 8006f2c:	462a      	mov	r2, r5
 8006f2e:	f000 fab7 	bl	80074a0 <_realloc_r>
 8006f32:	4606      	mov	r6, r0
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d1e1      	bne.n	8006efc <__ssputs_r+0x70>
 8006f38:	6921      	ldr	r1, [r4, #16]
 8006f3a:	4650      	mov	r0, sl
 8006f3c:	f7ff ff5a 	bl	8006df4 <_free_r>
 8006f40:	e7c7      	b.n	8006ed2 <__ssputs_r+0x46>
	...

08006f44 <_svfiprintf_r>:
 8006f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f48:	4698      	mov	r8, r3
 8006f4a:	898b      	ldrh	r3, [r1, #12]
 8006f4c:	061b      	lsls	r3, r3, #24
 8006f4e:	b09d      	sub	sp, #116	; 0x74
 8006f50:	4607      	mov	r7, r0
 8006f52:	460d      	mov	r5, r1
 8006f54:	4614      	mov	r4, r2
 8006f56:	d50e      	bpl.n	8006f76 <_svfiprintf_r+0x32>
 8006f58:	690b      	ldr	r3, [r1, #16]
 8006f5a:	b963      	cbnz	r3, 8006f76 <_svfiprintf_r+0x32>
 8006f5c:	2140      	movs	r1, #64	; 0x40
 8006f5e:	f7ff fe27 	bl	8006bb0 <_malloc_r>
 8006f62:	6028      	str	r0, [r5, #0]
 8006f64:	6128      	str	r0, [r5, #16]
 8006f66:	b920      	cbnz	r0, 8006f72 <_svfiprintf_r+0x2e>
 8006f68:	230c      	movs	r3, #12
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	e0d1      	b.n	8007116 <_svfiprintf_r+0x1d2>
 8006f72:	2340      	movs	r3, #64	; 0x40
 8006f74:	616b      	str	r3, [r5, #20]
 8006f76:	2300      	movs	r3, #0
 8006f78:	9309      	str	r3, [sp, #36]	; 0x24
 8006f7a:	2320      	movs	r3, #32
 8006f7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f80:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f84:	2330      	movs	r3, #48	; 0x30
 8006f86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007130 <_svfiprintf_r+0x1ec>
 8006f8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f8e:	f04f 0901 	mov.w	r9, #1
 8006f92:	4623      	mov	r3, r4
 8006f94:	469a      	mov	sl, r3
 8006f96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f9a:	b10a      	cbz	r2, 8006fa0 <_svfiprintf_r+0x5c>
 8006f9c:	2a25      	cmp	r2, #37	; 0x25
 8006f9e:	d1f9      	bne.n	8006f94 <_svfiprintf_r+0x50>
 8006fa0:	ebba 0b04 	subs.w	fp, sl, r4
 8006fa4:	d00b      	beq.n	8006fbe <_svfiprintf_r+0x7a>
 8006fa6:	465b      	mov	r3, fp
 8006fa8:	4622      	mov	r2, r4
 8006faa:	4629      	mov	r1, r5
 8006fac:	4638      	mov	r0, r7
 8006fae:	f7ff ff6d 	bl	8006e8c <__ssputs_r>
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	f000 80aa 	beq.w	800710c <_svfiprintf_r+0x1c8>
 8006fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fba:	445a      	add	r2, fp
 8006fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8006fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 80a2 	beq.w	800710c <_svfiprintf_r+0x1c8>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	f04f 32ff 	mov.w	r2, #4294967295
 8006fce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fd2:	f10a 0a01 	add.w	sl, sl, #1
 8006fd6:	9304      	str	r3, [sp, #16]
 8006fd8:	9307      	str	r3, [sp, #28]
 8006fda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fde:	931a      	str	r3, [sp, #104]	; 0x68
 8006fe0:	4654      	mov	r4, sl
 8006fe2:	2205      	movs	r2, #5
 8006fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fe8:	4851      	ldr	r0, [pc, #324]	; (8007130 <_svfiprintf_r+0x1ec>)
 8006fea:	f7f9 f8f9 	bl	80001e0 <memchr>
 8006fee:	9a04      	ldr	r2, [sp, #16]
 8006ff0:	b9d8      	cbnz	r0, 800702a <_svfiprintf_r+0xe6>
 8006ff2:	06d0      	lsls	r0, r2, #27
 8006ff4:	bf44      	itt	mi
 8006ff6:	2320      	movmi	r3, #32
 8006ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ffc:	0711      	lsls	r1, r2, #28
 8006ffe:	bf44      	itt	mi
 8007000:	232b      	movmi	r3, #43	; 0x2b
 8007002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007006:	f89a 3000 	ldrb.w	r3, [sl]
 800700a:	2b2a      	cmp	r3, #42	; 0x2a
 800700c:	d015      	beq.n	800703a <_svfiprintf_r+0xf6>
 800700e:	9a07      	ldr	r2, [sp, #28]
 8007010:	4654      	mov	r4, sl
 8007012:	2000      	movs	r0, #0
 8007014:	f04f 0c0a 	mov.w	ip, #10
 8007018:	4621      	mov	r1, r4
 800701a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800701e:	3b30      	subs	r3, #48	; 0x30
 8007020:	2b09      	cmp	r3, #9
 8007022:	d94e      	bls.n	80070c2 <_svfiprintf_r+0x17e>
 8007024:	b1b0      	cbz	r0, 8007054 <_svfiprintf_r+0x110>
 8007026:	9207      	str	r2, [sp, #28]
 8007028:	e014      	b.n	8007054 <_svfiprintf_r+0x110>
 800702a:	eba0 0308 	sub.w	r3, r0, r8
 800702e:	fa09 f303 	lsl.w	r3, r9, r3
 8007032:	4313      	orrs	r3, r2
 8007034:	9304      	str	r3, [sp, #16]
 8007036:	46a2      	mov	sl, r4
 8007038:	e7d2      	b.n	8006fe0 <_svfiprintf_r+0x9c>
 800703a:	9b03      	ldr	r3, [sp, #12]
 800703c:	1d19      	adds	r1, r3, #4
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	9103      	str	r1, [sp, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	bfbb      	ittet	lt
 8007046:	425b      	neglt	r3, r3
 8007048:	f042 0202 	orrlt.w	r2, r2, #2
 800704c:	9307      	strge	r3, [sp, #28]
 800704e:	9307      	strlt	r3, [sp, #28]
 8007050:	bfb8      	it	lt
 8007052:	9204      	strlt	r2, [sp, #16]
 8007054:	7823      	ldrb	r3, [r4, #0]
 8007056:	2b2e      	cmp	r3, #46	; 0x2e
 8007058:	d10c      	bne.n	8007074 <_svfiprintf_r+0x130>
 800705a:	7863      	ldrb	r3, [r4, #1]
 800705c:	2b2a      	cmp	r3, #42	; 0x2a
 800705e:	d135      	bne.n	80070cc <_svfiprintf_r+0x188>
 8007060:	9b03      	ldr	r3, [sp, #12]
 8007062:	1d1a      	adds	r2, r3, #4
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	9203      	str	r2, [sp, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	bfb8      	it	lt
 800706c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007070:	3402      	adds	r4, #2
 8007072:	9305      	str	r3, [sp, #20]
 8007074:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007140 <_svfiprintf_r+0x1fc>
 8007078:	7821      	ldrb	r1, [r4, #0]
 800707a:	2203      	movs	r2, #3
 800707c:	4650      	mov	r0, sl
 800707e:	f7f9 f8af 	bl	80001e0 <memchr>
 8007082:	b140      	cbz	r0, 8007096 <_svfiprintf_r+0x152>
 8007084:	2340      	movs	r3, #64	; 0x40
 8007086:	eba0 000a 	sub.w	r0, r0, sl
 800708a:	fa03 f000 	lsl.w	r0, r3, r0
 800708e:	9b04      	ldr	r3, [sp, #16]
 8007090:	4303      	orrs	r3, r0
 8007092:	3401      	adds	r4, #1
 8007094:	9304      	str	r3, [sp, #16]
 8007096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800709a:	4826      	ldr	r0, [pc, #152]	; (8007134 <_svfiprintf_r+0x1f0>)
 800709c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070a0:	2206      	movs	r2, #6
 80070a2:	f7f9 f89d 	bl	80001e0 <memchr>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d038      	beq.n	800711c <_svfiprintf_r+0x1d8>
 80070aa:	4b23      	ldr	r3, [pc, #140]	; (8007138 <_svfiprintf_r+0x1f4>)
 80070ac:	bb1b      	cbnz	r3, 80070f6 <_svfiprintf_r+0x1b2>
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	3307      	adds	r3, #7
 80070b2:	f023 0307 	bic.w	r3, r3, #7
 80070b6:	3308      	adds	r3, #8
 80070b8:	9303      	str	r3, [sp, #12]
 80070ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070bc:	4433      	add	r3, r6
 80070be:	9309      	str	r3, [sp, #36]	; 0x24
 80070c0:	e767      	b.n	8006f92 <_svfiprintf_r+0x4e>
 80070c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80070c6:	460c      	mov	r4, r1
 80070c8:	2001      	movs	r0, #1
 80070ca:	e7a5      	b.n	8007018 <_svfiprintf_r+0xd4>
 80070cc:	2300      	movs	r3, #0
 80070ce:	3401      	adds	r4, #1
 80070d0:	9305      	str	r3, [sp, #20]
 80070d2:	4619      	mov	r1, r3
 80070d4:	f04f 0c0a 	mov.w	ip, #10
 80070d8:	4620      	mov	r0, r4
 80070da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070de:	3a30      	subs	r2, #48	; 0x30
 80070e0:	2a09      	cmp	r2, #9
 80070e2:	d903      	bls.n	80070ec <_svfiprintf_r+0x1a8>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0c5      	beq.n	8007074 <_svfiprintf_r+0x130>
 80070e8:	9105      	str	r1, [sp, #20]
 80070ea:	e7c3      	b.n	8007074 <_svfiprintf_r+0x130>
 80070ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80070f0:	4604      	mov	r4, r0
 80070f2:	2301      	movs	r3, #1
 80070f4:	e7f0      	b.n	80070d8 <_svfiprintf_r+0x194>
 80070f6:	ab03      	add	r3, sp, #12
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	462a      	mov	r2, r5
 80070fc:	4b0f      	ldr	r3, [pc, #60]	; (800713c <_svfiprintf_r+0x1f8>)
 80070fe:	a904      	add	r1, sp, #16
 8007100:	4638      	mov	r0, r7
 8007102:	f3af 8000 	nop.w
 8007106:	1c42      	adds	r2, r0, #1
 8007108:	4606      	mov	r6, r0
 800710a:	d1d6      	bne.n	80070ba <_svfiprintf_r+0x176>
 800710c:	89ab      	ldrh	r3, [r5, #12]
 800710e:	065b      	lsls	r3, r3, #25
 8007110:	f53f af2c 	bmi.w	8006f6c <_svfiprintf_r+0x28>
 8007114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007116:	b01d      	add	sp, #116	; 0x74
 8007118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800711c:	ab03      	add	r3, sp, #12
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	462a      	mov	r2, r5
 8007122:	4b06      	ldr	r3, [pc, #24]	; (800713c <_svfiprintf_r+0x1f8>)
 8007124:	a904      	add	r1, sp, #16
 8007126:	4638      	mov	r0, r7
 8007128:	f000 f87a 	bl	8007220 <_printf_i>
 800712c:	e7eb      	b.n	8007106 <_svfiprintf_r+0x1c2>
 800712e:	bf00      	nop
 8007130:	0800763c 	.word	0x0800763c
 8007134:	08007646 	.word	0x08007646
 8007138:	00000000 	.word	0x00000000
 800713c:	08006e8d 	.word	0x08006e8d
 8007140:	08007642 	.word	0x08007642

08007144 <_printf_common>:
 8007144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	4616      	mov	r6, r2
 800714a:	4699      	mov	r9, r3
 800714c:	688a      	ldr	r2, [r1, #8]
 800714e:	690b      	ldr	r3, [r1, #16]
 8007150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007154:	4293      	cmp	r3, r2
 8007156:	bfb8      	it	lt
 8007158:	4613      	movlt	r3, r2
 800715a:	6033      	str	r3, [r6, #0]
 800715c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007160:	4607      	mov	r7, r0
 8007162:	460c      	mov	r4, r1
 8007164:	b10a      	cbz	r2, 800716a <_printf_common+0x26>
 8007166:	3301      	adds	r3, #1
 8007168:	6033      	str	r3, [r6, #0]
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	0699      	lsls	r1, r3, #26
 800716e:	bf42      	ittt	mi
 8007170:	6833      	ldrmi	r3, [r6, #0]
 8007172:	3302      	addmi	r3, #2
 8007174:	6033      	strmi	r3, [r6, #0]
 8007176:	6825      	ldr	r5, [r4, #0]
 8007178:	f015 0506 	ands.w	r5, r5, #6
 800717c:	d106      	bne.n	800718c <_printf_common+0x48>
 800717e:	f104 0a19 	add.w	sl, r4, #25
 8007182:	68e3      	ldr	r3, [r4, #12]
 8007184:	6832      	ldr	r2, [r6, #0]
 8007186:	1a9b      	subs	r3, r3, r2
 8007188:	42ab      	cmp	r3, r5
 800718a:	dc26      	bgt.n	80071da <_printf_common+0x96>
 800718c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007190:	1e13      	subs	r3, r2, #0
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	bf18      	it	ne
 8007196:	2301      	movne	r3, #1
 8007198:	0692      	lsls	r2, r2, #26
 800719a:	d42b      	bmi.n	80071f4 <_printf_common+0xb0>
 800719c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071a0:	4649      	mov	r1, r9
 80071a2:	4638      	mov	r0, r7
 80071a4:	47c0      	blx	r8
 80071a6:	3001      	adds	r0, #1
 80071a8:	d01e      	beq.n	80071e8 <_printf_common+0xa4>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	68e5      	ldr	r5, [r4, #12]
 80071ae:	6832      	ldr	r2, [r6, #0]
 80071b0:	f003 0306 	and.w	r3, r3, #6
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	bf08      	it	eq
 80071b8:	1aad      	subeq	r5, r5, r2
 80071ba:	68a3      	ldr	r3, [r4, #8]
 80071bc:	6922      	ldr	r2, [r4, #16]
 80071be:	bf0c      	ite	eq
 80071c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071c4:	2500      	movne	r5, #0
 80071c6:	4293      	cmp	r3, r2
 80071c8:	bfc4      	itt	gt
 80071ca:	1a9b      	subgt	r3, r3, r2
 80071cc:	18ed      	addgt	r5, r5, r3
 80071ce:	2600      	movs	r6, #0
 80071d0:	341a      	adds	r4, #26
 80071d2:	42b5      	cmp	r5, r6
 80071d4:	d11a      	bne.n	800720c <_printf_common+0xc8>
 80071d6:	2000      	movs	r0, #0
 80071d8:	e008      	b.n	80071ec <_printf_common+0xa8>
 80071da:	2301      	movs	r3, #1
 80071dc:	4652      	mov	r2, sl
 80071de:	4649      	mov	r1, r9
 80071e0:	4638      	mov	r0, r7
 80071e2:	47c0      	blx	r8
 80071e4:	3001      	adds	r0, #1
 80071e6:	d103      	bne.n	80071f0 <_printf_common+0xac>
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f0:	3501      	adds	r5, #1
 80071f2:	e7c6      	b.n	8007182 <_printf_common+0x3e>
 80071f4:	18e1      	adds	r1, r4, r3
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	2030      	movs	r0, #48	; 0x30
 80071fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071fe:	4422      	add	r2, r4
 8007200:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007204:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007208:	3302      	adds	r3, #2
 800720a:	e7c7      	b.n	800719c <_printf_common+0x58>
 800720c:	2301      	movs	r3, #1
 800720e:	4622      	mov	r2, r4
 8007210:	4649      	mov	r1, r9
 8007212:	4638      	mov	r0, r7
 8007214:	47c0      	blx	r8
 8007216:	3001      	adds	r0, #1
 8007218:	d0e6      	beq.n	80071e8 <_printf_common+0xa4>
 800721a:	3601      	adds	r6, #1
 800721c:	e7d9      	b.n	80071d2 <_printf_common+0x8e>
	...

08007220 <_printf_i>:
 8007220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007224:	7e0f      	ldrb	r7, [r1, #24]
 8007226:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007228:	2f78      	cmp	r7, #120	; 0x78
 800722a:	4691      	mov	r9, r2
 800722c:	4680      	mov	r8, r0
 800722e:	460c      	mov	r4, r1
 8007230:	469a      	mov	sl, r3
 8007232:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007236:	d807      	bhi.n	8007248 <_printf_i+0x28>
 8007238:	2f62      	cmp	r7, #98	; 0x62
 800723a:	d80a      	bhi.n	8007252 <_printf_i+0x32>
 800723c:	2f00      	cmp	r7, #0
 800723e:	f000 80d8 	beq.w	80073f2 <_printf_i+0x1d2>
 8007242:	2f58      	cmp	r7, #88	; 0x58
 8007244:	f000 80a3 	beq.w	800738e <_printf_i+0x16e>
 8007248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800724c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007250:	e03a      	b.n	80072c8 <_printf_i+0xa8>
 8007252:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007256:	2b15      	cmp	r3, #21
 8007258:	d8f6      	bhi.n	8007248 <_printf_i+0x28>
 800725a:	a101      	add	r1, pc, #4	; (adr r1, 8007260 <_printf_i+0x40>)
 800725c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007260:	080072b9 	.word	0x080072b9
 8007264:	080072cd 	.word	0x080072cd
 8007268:	08007249 	.word	0x08007249
 800726c:	08007249 	.word	0x08007249
 8007270:	08007249 	.word	0x08007249
 8007274:	08007249 	.word	0x08007249
 8007278:	080072cd 	.word	0x080072cd
 800727c:	08007249 	.word	0x08007249
 8007280:	08007249 	.word	0x08007249
 8007284:	08007249 	.word	0x08007249
 8007288:	08007249 	.word	0x08007249
 800728c:	080073d9 	.word	0x080073d9
 8007290:	080072fd 	.word	0x080072fd
 8007294:	080073bb 	.word	0x080073bb
 8007298:	08007249 	.word	0x08007249
 800729c:	08007249 	.word	0x08007249
 80072a0:	080073fb 	.word	0x080073fb
 80072a4:	08007249 	.word	0x08007249
 80072a8:	080072fd 	.word	0x080072fd
 80072ac:	08007249 	.word	0x08007249
 80072b0:	08007249 	.word	0x08007249
 80072b4:	080073c3 	.word	0x080073c3
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	1d1a      	adds	r2, r3, #4
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	602a      	str	r2, [r5, #0]
 80072c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0a3      	b.n	8007414 <_printf_i+0x1f4>
 80072cc:	6820      	ldr	r0, [r4, #0]
 80072ce:	6829      	ldr	r1, [r5, #0]
 80072d0:	0606      	lsls	r6, r0, #24
 80072d2:	f101 0304 	add.w	r3, r1, #4
 80072d6:	d50a      	bpl.n	80072ee <_printf_i+0xce>
 80072d8:	680e      	ldr	r6, [r1, #0]
 80072da:	602b      	str	r3, [r5, #0]
 80072dc:	2e00      	cmp	r6, #0
 80072de:	da03      	bge.n	80072e8 <_printf_i+0xc8>
 80072e0:	232d      	movs	r3, #45	; 0x2d
 80072e2:	4276      	negs	r6, r6
 80072e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072e8:	485e      	ldr	r0, [pc, #376]	; (8007464 <_printf_i+0x244>)
 80072ea:	230a      	movs	r3, #10
 80072ec:	e019      	b.n	8007322 <_printf_i+0x102>
 80072ee:	680e      	ldr	r6, [r1, #0]
 80072f0:	602b      	str	r3, [r5, #0]
 80072f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072f6:	bf18      	it	ne
 80072f8:	b236      	sxthne	r6, r6
 80072fa:	e7ef      	b.n	80072dc <_printf_i+0xbc>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	6820      	ldr	r0, [r4, #0]
 8007300:	1d19      	adds	r1, r3, #4
 8007302:	6029      	str	r1, [r5, #0]
 8007304:	0601      	lsls	r1, r0, #24
 8007306:	d501      	bpl.n	800730c <_printf_i+0xec>
 8007308:	681e      	ldr	r6, [r3, #0]
 800730a:	e002      	b.n	8007312 <_printf_i+0xf2>
 800730c:	0646      	lsls	r6, r0, #25
 800730e:	d5fb      	bpl.n	8007308 <_printf_i+0xe8>
 8007310:	881e      	ldrh	r6, [r3, #0]
 8007312:	4854      	ldr	r0, [pc, #336]	; (8007464 <_printf_i+0x244>)
 8007314:	2f6f      	cmp	r7, #111	; 0x6f
 8007316:	bf0c      	ite	eq
 8007318:	2308      	moveq	r3, #8
 800731a:	230a      	movne	r3, #10
 800731c:	2100      	movs	r1, #0
 800731e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007322:	6865      	ldr	r5, [r4, #4]
 8007324:	60a5      	str	r5, [r4, #8]
 8007326:	2d00      	cmp	r5, #0
 8007328:	bfa2      	ittt	ge
 800732a:	6821      	ldrge	r1, [r4, #0]
 800732c:	f021 0104 	bicge.w	r1, r1, #4
 8007330:	6021      	strge	r1, [r4, #0]
 8007332:	b90e      	cbnz	r6, 8007338 <_printf_i+0x118>
 8007334:	2d00      	cmp	r5, #0
 8007336:	d04d      	beq.n	80073d4 <_printf_i+0x1b4>
 8007338:	4615      	mov	r5, r2
 800733a:	fbb6 f1f3 	udiv	r1, r6, r3
 800733e:	fb03 6711 	mls	r7, r3, r1, r6
 8007342:	5dc7      	ldrb	r7, [r0, r7]
 8007344:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007348:	4637      	mov	r7, r6
 800734a:	42bb      	cmp	r3, r7
 800734c:	460e      	mov	r6, r1
 800734e:	d9f4      	bls.n	800733a <_printf_i+0x11a>
 8007350:	2b08      	cmp	r3, #8
 8007352:	d10b      	bne.n	800736c <_printf_i+0x14c>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	07de      	lsls	r6, r3, #31
 8007358:	d508      	bpl.n	800736c <_printf_i+0x14c>
 800735a:	6923      	ldr	r3, [r4, #16]
 800735c:	6861      	ldr	r1, [r4, #4]
 800735e:	4299      	cmp	r1, r3
 8007360:	bfde      	ittt	le
 8007362:	2330      	movle	r3, #48	; 0x30
 8007364:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007368:	f105 35ff 	addle.w	r5, r5, #4294967295
 800736c:	1b52      	subs	r2, r2, r5
 800736e:	6122      	str	r2, [r4, #16]
 8007370:	f8cd a000 	str.w	sl, [sp]
 8007374:	464b      	mov	r3, r9
 8007376:	aa03      	add	r2, sp, #12
 8007378:	4621      	mov	r1, r4
 800737a:	4640      	mov	r0, r8
 800737c:	f7ff fee2 	bl	8007144 <_printf_common>
 8007380:	3001      	adds	r0, #1
 8007382:	d14c      	bne.n	800741e <_printf_i+0x1fe>
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	b004      	add	sp, #16
 800738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738e:	4835      	ldr	r0, [pc, #212]	; (8007464 <_printf_i+0x244>)
 8007390:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007394:	6829      	ldr	r1, [r5, #0]
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	f851 6b04 	ldr.w	r6, [r1], #4
 800739c:	6029      	str	r1, [r5, #0]
 800739e:	061d      	lsls	r5, r3, #24
 80073a0:	d514      	bpl.n	80073cc <_printf_i+0x1ac>
 80073a2:	07df      	lsls	r7, r3, #31
 80073a4:	bf44      	itt	mi
 80073a6:	f043 0320 	orrmi.w	r3, r3, #32
 80073aa:	6023      	strmi	r3, [r4, #0]
 80073ac:	b91e      	cbnz	r6, 80073b6 <_printf_i+0x196>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	f023 0320 	bic.w	r3, r3, #32
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	2310      	movs	r3, #16
 80073b8:	e7b0      	b.n	800731c <_printf_i+0xfc>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	f043 0320 	orr.w	r3, r3, #32
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	2378      	movs	r3, #120	; 0x78
 80073c4:	4828      	ldr	r0, [pc, #160]	; (8007468 <_printf_i+0x248>)
 80073c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073ca:	e7e3      	b.n	8007394 <_printf_i+0x174>
 80073cc:	0659      	lsls	r1, r3, #25
 80073ce:	bf48      	it	mi
 80073d0:	b2b6      	uxthmi	r6, r6
 80073d2:	e7e6      	b.n	80073a2 <_printf_i+0x182>
 80073d4:	4615      	mov	r5, r2
 80073d6:	e7bb      	b.n	8007350 <_printf_i+0x130>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	6826      	ldr	r6, [r4, #0]
 80073dc:	6961      	ldr	r1, [r4, #20]
 80073de:	1d18      	adds	r0, r3, #4
 80073e0:	6028      	str	r0, [r5, #0]
 80073e2:	0635      	lsls	r5, r6, #24
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	d501      	bpl.n	80073ec <_printf_i+0x1cc>
 80073e8:	6019      	str	r1, [r3, #0]
 80073ea:	e002      	b.n	80073f2 <_printf_i+0x1d2>
 80073ec:	0670      	lsls	r0, r6, #25
 80073ee:	d5fb      	bpl.n	80073e8 <_printf_i+0x1c8>
 80073f0:	8019      	strh	r1, [r3, #0]
 80073f2:	2300      	movs	r3, #0
 80073f4:	6123      	str	r3, [r4, #16]
 80073f6:	4615      	mov	r5, r2
 80073f8:	e7ba      	b.n	8007370 <_printf_i+0x150>
 80073fa:	682b      	ldr	r3, [r5, #0]
 80073fc:	1d1a      	adds	r2, r3, #4
 80073fe:	602a      	str	r2, [r5, #0]
 8007400:	681d      	ldr	r5, [r3, #0]
 8007402:	6862      	ldr	r2, [r4, #4]
 8007404:	2100      	movs	r1, #0
 8007406:	4628      	mov	r0, r5
 8007408:	f7f8 feea 	bl	80001e0 <memchr>
 800740c:	b108      	cbz	r0, 8007412 <_printf_i+0x1f2>
 800740e:	1b40      	subs	r0, r0, r5
 8007410:	6060      	str	r0, [r4, #4]
 8007412:	6863      	ldr	r3, [r4, #4]
 8007414:	6123      	str	r3, [r4, #16]
 8007416:	2300      	movs	r3, #0
 8007418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800741c:	e7a8      	b.n	8007370 <_printf_i+0x150>
 800741e:	6923      	ldr	r3, [r4, #16]
 8007420:	462a      	mov	r2, r5
 8007422:	4649      	mov	r1, r9
 8007424:	4640      	mov	r0, r8
 8007426:	47d0      	blx	sl
 8007428:	3001      	adds	r0, #1
 800742a:	d0ab      	beq.n	8007384 <_printf_i+0x164>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	079b      	lsls	r3, r3, #30
 8007430:	d413      	bmi.n	800745a <_printf_i+0x23a>
 8007432:	68e0      	ldr	r0, [r4, #12]
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	4298      	cmp	r0, r3
 8007438:	bfb8      	it	lt
 800743a:	4618      	movlt	r0, r3
 800743c:	e7a4      	b.n	8007388 <_printf_i+0x168>
 800743e:	2301      	movs	r3, #1
 8007440:	4632      	mov	r2, r6
 8007442:	4649      	mov	r1, r9
 8007444:	4640      	mov	r0, r8
 8007446:	47d0      	blx	sl
 8007448:	3001      	adds	r0, #1
 800744a:	d09b      	beq.n	8007384 <_printf_i+0x164>
 800744c:	3501      	adds	r5, #1
 800744e:	68e3      	ldr	r3, [r4, #12]
 8007450:	9903      	ldr	r1, [sp, #12]
 8007452:	1a5b      	subs	r3, r3, r1
 8007454:	42ab      	cmp	r3, r5
 8007456:	dcf2      	bgt.n	800743e <_printf_i+0x21e>
 8007458:	e7eb      	b.n	8007432 <_printf_i+0x212>
 800745a:	2500      	movs	r5, #0
 800745c:	f104 0619 	add.w	r6, r4, #25
 8007460:	e7f5      	b.n	800744e <_printf_i+0x22e>
 8007462:	bf00      	nop
 8007464:	0800764d 	.word	0x0800764d
 8007468:	0800765e 	.word	0x0800765e

0800746c <memmove>:
 800746c:	4288      	cmp	r0, r1
 800746e:	b510      	push	{r4, lr}
 8007470:	eb01 0402 	add.w	r4, r1, r2
 8007474:	d902      	bls.n	800747c <memmove+0x10>
 8007476:	4284      	cmp	r4, r0
 8007478:	4623      	mov	r3, r4
 800747a:	d807      	bhi.n	800748c <memmove+0x20>
 800747c:	1e43      	subs	r3, r0, #1
 800747e:	42a1      	cmp	r1, r4
 8007480:	d008      	beq.n	8007494 <memmove+0x28>
 8007482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800748a:	e7f8      	b.n	800747e <memmove+0x12>
 800748c:	4402      	add	r2, r0
 800748e:	4601      	mov	r1, r0
 8007490:	428a      	cmp	r2, r1
 8007492:	d100      	bne.n	8007496 <memmove+0x2a>
 8007494:	bd10      	pop	{r4, pc}
 8007496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800749a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800749e:	e7f7      	b.n	8007490 <memmove+0x24>

080074a0 <_realloc_r>:
 80074a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a4:	4680      	mov	r8, r0
 80074a6:	4614      	mov	r4, r2
 80074a8:	460e      	mov	r6, r1
 80074aa:	b921      	cbnz	r1, 80074b6 <_realloc_r+0x16>
 80074ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074b0:	4611      	mov	r1, r2
 80074b2:	f7ff bb7d 	b.w	8006bb0 <_malloc_r>
 80074b6:	b92a      	cbnz	r2, 80074c4 <_realloc_r+0x24>
 80074b8:	f7ff fc9c 	bl	8006df4 <_free_r>
 80074bc:	4625      	mov	r5, r4
 80074be:	4628      	mov	r0, r5
 80074c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c4:	f000 f81b 	bl	80074fe <_malloc_usable_size_r>
 80074c8:	4284      	cmp	r4, r0
 80074ca:	4607      	mov	r7, r0
 80074cc:	d802      	bhi.n	80074d4 <_realloc_r+0x34>
 80074ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074d2:	d812      	bhi.n	80074fa <_realloc_r+0x5a>
 80074d4:	4621      	mov	r1, r4
 80074d6:	4640      	mov	r0, r8
 80074d8:	f7ff fb6a 	bl	8006bb0 <_malloc_r>
 80074dc:	4605      	mov	r5, r0
 80074de:	2800      	cmp	r0, #0
 80074e0:	d0ed      	beq.n	80074be <_realloc_r+0x1e>
 80074e2:	42bc      	cmp	r4, r7
 80074e4:	4622      	mov	r2, r4
 80074e6:	4631      	mov	r1, r6
 80074e8:	bf28      	it	cs
 80074ea:	463a      	movcs	r2, r7
 80074ec:	f7ff fb2a 	bl	8006b44 <memcpy>
 80074f0:	4631      	mov	r1, r6
 80074f2:	4640      	mov	r0, r8
 80074f4:	f7ff fc7e 	bl	8006df4 <_free_r>
 80074f8:	e7e1      	b.n	80074be <_realloc_r+0x1e>
 80074fa:	4635      	mov	r5, r6
 80074fc:	e7df      	b.n	80074be <_realloc_r+0x1e>

080074fe <_malloc_usable_size_r>:
 80074fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007502:	1f18      	subs	r0, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	bfbc      	itt	lt
 8007508:	580b      	ldrlt	r3, [r1, r0]
 800750a:	18c0      	addlt	r0, r0, r3
 800750c:	4770      	bx	lr
	...

08007510 <_init>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	bf00      	nop
 8007514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007516:	bc08      	pop	{r3}
 8007518:	469e      	mov	lr, r3
 800751a:	4770      	bx	lr

0800751c <_fini>:
 800751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751e:	bf00      	nop
 8007520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007522:	bc08      	pop	{r3}
 8007524:	469e      	mov	lr, r3
 8007526:	4770      	bx	lr
