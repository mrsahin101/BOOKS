
018_FreeRTOS_Queue_Pointers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000639c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800652c  0800652c  0001652c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c4  080065c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065cc  080065cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065cc  080065cc  000165cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065d0  080065d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080065d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004a14  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a88  20004a88  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000180bf  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000324a  00000000  00000000  00038163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  0003b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001350  00000000  00000000  0003c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003d92  00000000  00000000  0003db78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000164dd  00000000  00000000  0004190a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d520c  00000000  00000000  00057de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012cff3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a48  00000000  00000000  0012d044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006514 	.word	0x08006514

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006514 	.word	0x08006514

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vStringSendingTask>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* A task that obtains a buffer, writes a string to the buffer, then sends the address of the
buffer to the queue created in Listing 52. */
void vStringSendingTask(void *pvParameters)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	char *pcStringToSend;
	const size_t xMaxStringLength = 50;
 800058c:	2332      	movs	r3, #50	; 0x32
 800058e:	613b      	str	r3, [r7, #16]
	BaseType_t xStringNumber = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
	for(;;)
	{
		/* Obtain a buffer that is at least xMaxStringLength characters big. The implementation
		 of prvGetBuffer() is not shown – it might obtain the buffer from a pool of pre-allocated
		 buffers, or just allocate the buffer dynamically. */
		pcStringToSend = (char *)pvPortMalloc(xMaxStringLength);
 8000594:	6938      	ldr	r0, [r7, #16]
 8000596:	f005 f91f 	bl	80057d8 <pvPortMalloc>
 800059a:	4603      	mov	r3, r0
 800059c:	60fb      	str	r3, [r7, #12]
		/* Write a string into the buffer. */
		snprintf(pcStringToSend, xMaxStringLength, "String number %ld\r\n", xStringNumber);
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <vStringSendingTask+0x40>)
 80005a4:	6939      	ldr	r1, [r7, #16]
 80005a6:	f005 fb41 	bl	8005c2c <sniprintf>

		/* Increment the counter so the string is different on each iteration of this task. */
		xStringNumber++;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	3301      	adds	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
		/* Send the address of the buffer to the queue that was created in Listing 52. The
		 address of the buffer is stored in the pcStringToSend variable.*/
		//HAL_UART_Transmit(&huart2, (uint8_t *)pcStringToSend, strlen(pcStringToSend), HAL_MAX_DELAY);
		xQueueSend(xPointerQueue, &pcStringToSend, portMAX_DELAY);
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <vStringSendingTask+0x44>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	f107 010c 	add.w	r1, r7, #12
 80005b8:	2300      	movs	r3, #0
 80005ba:	f04f 32ff 	mov.w	r2, #4294967295
 80005be:	f003 f821 	bl	8003604 <xQueueGenericSend>
		pcStringToSend = (char *)pvPortMalloc(xMaxStringLength);
 80005c2:	e7e7      	b.n	8000594 <vStringSendingTask+0x10>
 80005c4:	0800652c 	.word	0x0800652c
 80005c8:	200000d4 	.word	0x200000d4

080005cc <vStringReceivingTask>:
	}
}
/* A task that receives the address of a buffer from the queue created in Listing 52, and
written to in Listing 53. The buffer contains a string, which is printed out. */
void vStringReceivingTask(void *pvParameters)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	char *pcReceivedString;

	for(;;)
	{
		/* Receive the address of a buffer. */
		xQueueReceive(xPointerQueue, &pcReceivedString, portMAX_DELAY);
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <vStringReceivingTask+0x40>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f107 010c 	add.w	r1, r7, #12
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 f9db 	bl	800399c <xQueueReceive>

		/* The buffer holds a string, print it out. */
		HAL_UART_Transmit(&huart2, (uint8_t *)pcReceivedString, strlen(pcReceivedString), HAL_MAX_DELAY);
 80005e6:	68fc      	ldr	r4, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fdf0 	bl	80001d0 <strlen>
 80005f0:	4603      	mov	r3, r0
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	4621      	mov	r1, r4
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <vStringReceivingTask+0x44>)
 80005fc:	f001 fe03 	bl	8002206 <HAL_UART_Transmit>

		/* The buffer is not required anymore - release it so it can be freed, or re-used */
		vPortFree(pcReceivedString);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4618      	mov	r0, r3
 8000604:	f005 f9b4 	bl	8005970 <vPortFree>
		xQueueReceive(xPointerQueue, &pcReceivedString, portMAX_DELAY);
 8000608:	e7e4      	b.n	80005d4 <vStringReceivingTask+0x8>
 800060a:	bf00      	nop
 800060c:	200000d4 	.word	0x200000d4
 8000610:	20000090 	.word	0x20000090

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fac3 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f82f 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8c1 	bl	80007a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000626:	f000 f895 	bl	8000754 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Create a queue that can hold a maximum of 5 pointers, in this case character pointers. */
  xPointerQueue = xQueueCreate(5, sizeof(char *));
 800062a:	2200      	movs	r2, #0
 800062c:	2104      	movs	r1, #4
 800062e:	2005      	movs	r0, #5
 8000630:	f002 ff88 	bl	8003544 <xQueueGenericCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a0d      	ldr	r2, [pc, #52]	; (800066c <main+0x58>)
 8000638:	6013      	str	r3, [r2, #0]
  xTaskCreate(vStringSendingTask, "Sending Task", 1000, NULL, 1, NULL);
 800063a:	2300      	movs	r3, #0
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2301      	movs	r3, #1
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000648:	4909      	ldr	r1, [pc, #36]	; (8000670 <main+0x5c>)
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <main+0x60>)
 800064c:	f003 fcb8 	bl	8003fc0 <xTaskCreate>
  xTaskCreate(vStringReceivingTask,"Receiving Task", 1000, NULL, 2, NULL);
 8000650:	2300      	movs	r3, #0
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2302      	movs	r3, #2
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800065e:	4906      	ldr	r1, [pc, #24]	; (8000678 <main+0x64>)
 8000660:	4806      	ldr	r0, [pc, #24]	; (800067c <main+0x68>)
 8000662:	f003 fcad 	bl	8003fc0 <xTaskCreate>
  vTaskStartScheduler();
 8000666:	f003 fdef 	bl	8004248 <vTaskStartScheduler>

  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066a:	e7fe      	b.n	800066a <main+0x56>
 800066c:	200000d4 	.word	0x200000d4
 8000670:	08006540 	.word	0x08006540
 8000674:	08000585 	.word	0x08000585
 8000678:	08006550 	.word	0x08006550
 800067c:	080005cd 	.word	0x080005cd

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	; 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f005 fac4 	bl	8005c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a27      	ldr	r2, [pc, #156]	; (800074c <SystemClock_Config+0xcc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <SystemClock_Config+0xd0>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fdb8 	bl	800127c <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000712:	f000 f8ad 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000722:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2105      	movs	r1, #5
 8000734:	4618      	mov	r0, r3
 8000736:	f001 f819 	bl	800176c <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000740:	f000 f896 	bl	8000870 <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3750      	adds	r7, #80	; 0x50
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART2_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800078c:	f001 fcee 	bl	800216c <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f86b 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000090 	.word	0x20000090
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a18      	ldr	r2, [pc, #96]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a11      	ldr	r2, [pc, #68]	; (8000844 <MX_GPIO_Init+0x9c>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_GPIO_Init+0x9c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <MX_GPIO_Init+0xa0>)
 800081a:	f000 fd15 	bl	8001248 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800081e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_GPIO_Init+0xa0>)
 8000838:	f000 fb6a 	bl	8000f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40020c00 	.word	0x40020c00

0800084c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d101      	bne.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085e:	f000 f9c3 	bl	8000be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40002000 	.word	0x40002000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_MspInit+0x54>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <HAL_MspInit+0x54>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x54>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_MspInit+0x54>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <HAL_MspInit+0x54>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_MspInit+0x54>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	210f      	movs	r1, #15
 80008be:	f06f 0001 	mvn.w	r0, #1
 80008c2:	f000 fa69 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a1d      	ldr	r2, [pc, #116]	; (8000968 <HAL_UART_MspInit+0x94>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d133      	bne.n	800095e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <HAL_UART_MspInit+0x98>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a1b      	ldr	r2, [pc, #108]	; (800096c <HAL_UART_MspInit+0x98>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <HAL_UART_MspInit+0x98>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_UART_MspInit+0x98>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a14      	ldr	r2, [pc, #80]	; (800096c <HAL_UART_MspInit+0x98>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_UART_MspInit+0x98>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800092e:	230c      	movs	r3, #12
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093e:	2307      	movs	r3, #7
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <HAL_UART_MspInit+0x9c>)
 800094a:	f000 fae1 	bl	8000f10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2105      	movs	r1, #5
 8000952:	2026      	movs	r0, #38	; 0x26
 8000954:	f000 fa20 	bl	8000d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000958:	2026      	movs	r0, #38	; 0x26
 800095a:	f000 fa39 	bl	8000dd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40004400 	.word	0x40004400
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000

08000974 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <HAL_InitTick+0xe4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <HAL_InitTick+0xe4>)
 800098e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <HAL_InitTick+0xe4>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a0:	f107 0210 	add.w	r2, r7, #16
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 f8fe 	bl	8001bac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d103      	bne.n	80009c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ba:	f001 f8cf 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 80009be:	6378      	str	r0, [r7, #52]	; 0x34
 80009c0:	e004      	b.n	80009cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009c2:	f001 f8cb 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 80009c6:	4603      	mov	r3, r0
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ce:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <HAL_InitTick+0xe8>)
 80009d0:	fba2 2303 	umull	r2, r3, r2, r3
 80009d4:	0c9b      	lsrs	r3, r3, #18
 80009d6:	3b01      	subs	r3, #1
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80009da:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <HAL_InitTick+0xec>)
 80009dc:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <HAL_InitTick+0xf0>)
 80009de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <HAL_InitTick+0xec>)
 80009e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80009e8:	4a1d      	ldr	r2, [pc, #116]	; (8000a60 <HAL_InitTick+0xec>)
 80009ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ec:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <HAL_InitTick+0xec>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <HAL_InitTick+0xec>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_InitTick+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a00:	4817      	ldr	r0, [pc, #92]	; (8000a60 <HAL_InitTick+0xec>)
 8000a02:	f001 f905 	bl	8001c10 <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d11b      	bne.n	8000a4c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000a14:	4812      	ldr	r0, [pc, #72]	; (8000a60 <HAL_InitTick+0xec>)
 8000a16:	f001 f955 	bl	8001cc4 <HAL_TIM_Base_Start_IT>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d111      	bne.n	8000a4c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a28:	202d      	movs	r0, #45	; 0x2d
 8000a2a:	f000 f9d1 	bl	8000dd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d808      	bhi.n	8000a46 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	202d      	movs	r0, #45	; 0x2d
 8000a3a:	f000 f9ad 	bl	8000d98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_InitTick+0xf4>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	e002      	b.n	8000a4c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3738      	adds	r7, #56	; 0x38
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	431bde83 	.word	0x431bde83
 8000a60:	200000d8 	.word	0x200000d8
 8000a64:	40002000 	.word	0x40002000
 8000a68:	20000004 	.word	0x20000004

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <USART2_IRQHandler+0x10>)
 8000a9e:	f001 fc45 	bl	800232c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000090 	.word	0x20000090

08000aac <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000ab2:	f001 f977 	bl	8001da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000d8 	.word	0x200000d8

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f005 f85c 	bl	8005bac <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20020000 	.word	0x20020000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	20000120 	.word	0x20000120
 8000b28:	20004a88 	.word	0x20004a88

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	; (8000b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b7a:	f7ff ffd7 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f005 f81b 	bl	8005bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fd47 	bl	8000614 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b94:	080065d4 	.word	0x080065d4
  ldr r2, =_sbss
 8000b98:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b9c:	20004a88 	.word	0x20004a88

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f8d8 	bl	8000d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f7ff fece 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fe50 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000124 	.word	0x20000124

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000124 	.word	0x20000124

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff4c 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000daa:	f7ff ff61 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000dae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	6978      	ldr	r0, [r7, #20]
 8000db6:	f7ff ffb1 	bl	8000d1c <NVIC_EncodePriority>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff80 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff54 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dfa:	f7ff ff09 	bl	8000c10 <HAL_GetTick>
 8000dfe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d008      	beq.n	8000e1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e052      	b.n	8000ec4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0216 	bic.w	r2, r2, #22
 8000e2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	695a      	ldr	r2, [r3, #20]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d103      	bne.n	8000e4e <HAL_DMA_Abort+0x62>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d007      	beq.n	8000e5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0208 	bic.w	r2, r2, #8
 8000e5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0201 	bic.w	r2, r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e6e:	e013      	b.n	8000e98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e70:	f7ff fece 	bl	8000c10 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b05      	cmp	r3, #5
 8000e7c:	d90c      	bls.n	8000e98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2220      	movs	r2, #32
 8000e82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2203      	movs	r2, #3
 8000e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e015      	b.n	8000ec4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1e4      	bne.n	8000e70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eaa:	223f      	movs	r2, #63	; 0x3f
 8000eac:	409a      	lsls	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d004      	beq.n	8000eea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00c      	b.n	8000f04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2205      	movs	r2, #5
 8000eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0201 	bic.w	r2, r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e16b      	b.n	8001204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 815a 	bne.w	80011fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d005      	beq.n	8000f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80b4 	beq.w	80011fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b60      	ldr	r3, [pc, #384]	; (800121c <HAL_GPIO_Init+0x30c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a5f      	ldr	r2, [pc, #380]	; (800121c <HAL_GPIO_Init+0x30c>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b5d      	ldr	r3, [pc, #372]	; (800121c <HAL_GPIO_Init+0x30c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a5b      	ldr	r2, [pc, #364]	; (8001220 <HAL_GPIO_Init+0x310>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a52      	ldr	r2, [pc, #328]	; (8001224 <HAL_GPIO_Init+0x314>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d02b      	beq.n	8001136 <HAL_GPIO_Init+0x226>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a51      	ldr	r2, [pc, #324]	; (8001228 <HAL_GPIO_Init+0x318>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d025      	beq.n	8001132 <HAL_GPIO_Init+0x222>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a50      	ldr	r2, [pc, #320]	; (800122c <HAL_GPIO_Init+0x31c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01f      	beq.n	800112e <HAL_GPIO_Init+0x21e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4f      	ldr	r2, [pc, #316]	; (8001230 <HAL_GPIO_Init+0x320>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x21a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4e      	ldr	r2, [pc, #312]	; (8001234 <HAL_GPIO_Init+0x324>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x216>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4d      	ldr	r2, [pc, #308]	; (8001238 <HAL_GPIO_Init+0x328>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x212>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4c      	ldr	r2, [pc, #304]	; (800123c <HAL_GPIO_Init+0x32c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x20e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4b      	ldr	r2, [pc, #300]	; (8001240 <HAL_GPIO_Init+0x330>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x20a>
 8001116:	2307      	movs	r3, #7
 8001118:	e00e      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111a:	2308      	movs	r3, #8
 800111c:	e00c      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111e:	2306      	movs	r3, #6
 8001120:	e00a      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001122:	2305      	movs	r3, #5
 8001124:	e008      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001126:	2304      	movs	r3, #4
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112a:	2303      	movs	r3, #3
 800112c:	e004      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112e:	2302      	movs	r3, #2
 8001130:	e002      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001136:	2300      	movs	r3, #0
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	f002 0203 	and.w	r2, r2, #3
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	4093      	lsls	r3, r2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001148:	4935      	ldr	r1, [pc, #212]	; (8001220 <HAL_GPIO_Init+0x310>)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <HAL_GPIO_Init+0x334>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117a:	4a32      	ldr	r2, [pc, #200]	; (8001244 <HAL_GPIO_Init+0x334>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001180:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_GPIO_Init+0x334>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ce:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3301      	adds	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	f67f ae90 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40013800 	.word	0x40013800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	40020800 	.word	0x40020800
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40021000 	.word	0x40021000
 8001238:	40021400 	.word	0x40021400
 800123c:	40021800 	.word	0x40021800
 8001240:	40021c00 	.word	0x40021c00
 8001244:	40013c00 	.word	0x40013c00

08001248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
 8001254:	4613      	mov	r3, r2
 8001256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001258:	787b      	ldrb	r3, [r7, #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001264:	e003      	b.n	800126e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	619a      	str	r2, [r3, #24]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e267      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d075      	beq.n	8001386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129a:	4b88      	ldr	r3, [pc, #544]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d00c      	beq.n	80012c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a6:	4b85      	ldr	r3, [pc, #532]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d112      	bne.n	80012d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	4b82      	ldr	r3, [pc, #520]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012be:	d10b      	bne.n	80012d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	4b7e      	ldr	r3, [pc, #504]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d05b      	beq.n	8001384 <HAL_RCC_OscConfig+0x108>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d157      	bne.n	8001384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e242      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e0:	d106      	bne.n	80012f0 <HAL_RCC_OscConfig+0x74>
 80012e2:	4b76      	ldr	r3, [pc, #472]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a75      	ldr	r2, [pc, #468]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80012e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e01d      	b.n	800132c <HAL_RCC_OscConfig+0xb0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x98>
 80012fa:	4b70      	ldr	r3, [pc, #448]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a6f      	ldr	r2, [pc, #444]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	4b6d      	ldr	r3, [pc, #436]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6c      	ldr	r2, [pc, #432]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e00b      	b.n	800132c <HAL_RCC_OscConfig+0xb0>
 8001314:	4b69      	ldr	r3, [pc, #420]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a68      	ldr	r2, [pc, #416]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 800131a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b66      	ldr	r3, [pc, #408]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a65      	ldr	r2, [pc, #404]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d013      	beq.n	800135c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fc6c 	bl	8000c10 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fc68 	bl	8000c10 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e207      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	4b5b      	ldr	r3, [pc, #364]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0xc0>
 800135a:	e014      	b.n	8001386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fc58 	bl	8000c10 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fc54 	bl	8000c10 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e1f3      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	4b51      	ldr	r3, [pc, #324]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0xe8>
 8001382:	e000      	b.n	8001386 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d063      	beq.n	800145a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001392:	4b4a      	ldr	r3, [pc, #296]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00b      	beq.n	80013b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139e:	4b47      	ldr	r3, [pc, #284]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d11c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b44      	ldr	r3, [pc, #272]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d116      	bne.n	80013e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	4b41      	ldr	r3, [pc, #260]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <HAL_RCC_OscConfig+0x152>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e1c7      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4937      	ldr	r1, [pc, #220]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	e03a      	b.n	800145a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ec:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <HAL_RCC_OscConfig+0x244>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f2:	f7ff fc0d 	bl	8000c10 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fa:	f7ff fc09 	bl	8000c10 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e1a8      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001418:	4b28      	ldr	r3, [pc, #160]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4925      	ldr	r1, [pc, #148]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001428:	4313      	orrs	r3, r2
 800142a:	600b      	str	r3, [r1, #0]
 800142c:	e015      	b.n	800145a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <HAL_RCC_OscConfig+0x244>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fbec 	bl	8000c10 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fbe8 	bl	8000c10 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e187      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d036      	beq.n	80014d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d016      	beq.n	800149c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_RCC_OscConfig+0x248>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001474:	f7ff fbcc 	bl	8000c10 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff fbc8 	bl	8000c10 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e167      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x200>
 800149a:	e01b      	b.n	80014d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_RCC_OscConfig+0x248>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fbb5 	bl	8000c10 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a8:	e00e      	b.n	80014c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff fbb1 	bl	8000c10 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d907      	bls.n	80014c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e150      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
 80014bc:	40023800 	.word	0x40023800
 80014c0:	42470000 	.word	0x42470000
 80014c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	4b88      	ldr	r3, [pc, #544]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80014ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1ea      	bne.n	80014aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8097 	beq.w	8001610 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4b81      	ldr	r3, [pc, #516]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10f      	bne.n	8001512 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b7d      	ldr	r3, [pc, #500]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a7c      	ldr	r2, [pc, #496]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b7a      	ldr	r3, [pc, #488]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150e:	2301      	movs	r3, #1
 8001510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001512:	4b77      	ldr	r3, [pc, #476]	; (80016f0 <HAL_RCC_OscConfig+0x474>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d118      	bne.n	8001550 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151e:	4b74      	ldr	r3, [pc, #464]	; (80016f0 <HAL_RCC_OscConfig+0x474>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a73      	ldr	r2, [pc, #460]	; (80016f0 <HAL_RCC_OscConfig+0x474>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152a:	f7ff fb71 	bl	8000c10 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001532:	f7ff fb6d 	bl	8000c10 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e10c      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	4b6a      	ldr	r3, [pc, #424]	; (80016f0 <HAL_RCC_OscConfig+0x474>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x2ea>
 8001558:	4b64      	ldr	r3, [pc, #400]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a63      	ldr	r2, [pc, #396]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
 8001564:	e01c      	b.n	80015a0 <HAL_RCC_OscConfig+0x324>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b05      	cmp	r3, #5
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x30c>
 800156e:	4b5f      	ldr	r3, [pc, #380]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a5e      	ldr	r2, [pc, #376]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
 800157a:	4b5c      	ldr	r3, [pc, #368]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	4a5b      	ldr	r2, [pc, #364]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6713      	str	r3, [r2, #112]	; 0x70
 8001586:	e00b      	b.n	80015a0 <HAL_RCC_OscConfig+0x324>
 8001588:	4b58      	ldr	r3, [pc, #352]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158c:	4a57      	ldr	r2, [pc, #348]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6713      	str	r3, [r2, #112]	; 0x70
 8001594:	4b55      	ldr	r3, [pc, #340]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	4a54      	ldr	r2, [pc, #336]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800159a:	f023 0304 	bic.w	r3, r3, #4
 800159e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d015      	beq.n	80015d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fb32 	bl	8000c10 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7ff fb2e 	bl	8000c10 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e0cb      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c6:	4b49      	ldr	r3, [pc, #292]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0ee      	beq.n	80015b0 <HAL_RCC_OscConfig+0x334>
 80015d2:	e014      	b.n	80015fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d4:	f7ff fb1c 	bl	8000c10 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015dc:	f7ff fb18 	bl	8000c10 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0b5      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f2:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1ee      	bne.n	80015dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d105      	bne.n	8001610 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	4a38      	ldr	r2, [pc, #224]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800160a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800160e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 80a1 	beq.w	800175c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b08      	cmp	r3, #8
 8001624:	d05c      	beq.n	80016e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d141      	bne.n	80016b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162e:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <HAL_RCC_OscConfig+0x478>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff faec 	bl	8000c10 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff fae8 	bl	8000c10 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e087      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164e:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69da      	ldr	r2, [r3, #28]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	019b      	lsls	r3, r3, #6
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	085b      	lsrs	r3, r3, #1
 8001672:	3b01      	subs	r3, #1
 8001674:	041b      	lsls	r3, r3, #16
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	061b      	lsls	r3, r3, #24
 800167e:	491b      	ldr	r1, [pc, #108]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x478>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fac1 	bl	8000c10 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff fabd 	bl	8000c10 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e05c      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x416>
 80016b0:	e054      	b.n	800175c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_RCC_OscConfig+0x478>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff faaa 	bl	8000c10 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff faa6 	bl	8000c10 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e045      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x444>
 80016de:	e03d      	b.n	800175c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e038      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40007000 	.word	0x40007000
 80016f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_RCC_OscConfig+0x4ec>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d028      	beq.n	8001758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d121      	bne.n	8001758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d11a      	bne.n	8001758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001728:	4013      	ands	r3, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800172e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001730:	4293      	cmp	r3, r2
 8001732:	d111      	bne.n	8001758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	085b      	lsrs	r3, r3, #1
 8001740:	3b01      	subs	r3, #1
 8001742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001744:	429a      	cmp	r2, r3
 8001746:	d107      	bne.n	8001758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800

0800176c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0cc      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d90c      	bls.n	80017a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b65      	ldr	r3, [pc, #404]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b63      	ldr	r3, [pc, #396]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0b8      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c0:	4b59      	ldr	r3, [pc, #356]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4a58      	ldr	r2, [pc, #352]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d8:	4b53      	ldr	r3, [pc, #332]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a52      	ldr	r2, [pc, #328]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e4:	4b50      	ldr	r3, [pc, #320]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	494d      	ldr	r1, [pc, #308]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d044      	beq.n	800188c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b47      	ldr	r3, [pc, #284]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d119      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e07f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d003      	beq.n	800182a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001826:	2b03      	cmp	r3, #3
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e06f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183a:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e067      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184a:	4b37      	ldr	r3, [pc, #220]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f023 0203 	bic.w	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4934      	ldr	r1, [pc, #208]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	4313      	orrs	r3, r2
 800185a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800185c:	f7ff f9d8 	bl	8000c10 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	e00a      	b.n	800187a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7ff f9d4 	bl	8000c10 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e04f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 020c 	and.w	r2, r3, #12
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	429a      	cmp	r2, r3
 800188a:	d1eb      	bne.n	8001864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d20c      	bcs.n	80018b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e032      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4916      	ldr	r1, [pc, #88]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	490e      	ldr	r1, [pc, #56]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f2:	f000 f821 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f6:	4602      	mov	r2, r0
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	490a      	ldr	r1, [pc, #40]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	5ccb      	ldrb	r3, [r1, r3]
 8001906:	fa22 f303 	lsr.w	r3, r2, r3
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1c8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f82e 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00
 8001928:	40023800 	.word	0x40023800
 800192c:	08006578 	.word	0x08006578
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004

08001938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800193c:	b094      	sub	sp, #80	; 0x50
 800193e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	647b      	str	r3, [r7, #68]	; 0x44
 8001944:	2300      	movs	r3, #0
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001948:	2300      	movs	r3, #0
 800194a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001950:	4b79      	ldr	r3, [pc, #484]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b08      	cmp	r3, #8
 800195a:	d00d      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x40>
 800195c:	2b08      	cmp	r3, #8
 800195e:	f200 80e1 	bhi.w	8001b24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x34>
 8001966:	2b04      	cmp	r3, #4
 8001968:	d003      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x3a>
 800196a:	e0db      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b73      	ldr	r3, [pc, #460]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x204>)
 800196e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001970:	e0db      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001972:	4b73      	ldr	r3, [pc, #460]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x208>)
 8001974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001976:	e0d8      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001978:	4b6f      	ldr	r3, [pc, #444]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001982:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d063      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198e:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	099b      	lsrs	r3, r3, #6
 8001994:	2200      	movs	r2, #0
 8001996:	63bb      	str	r3, [r7, #56]	; 0x38
 8001998:	63fa      	str	r2, [r7, #60]	; 0x3c
 800199a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800199c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
 80019a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019aa:	4622      	mov	r2, r4
 80019ac:	462b      	mov	r3, r5
 80019ae:	f04f 0000 	mov.w	r0, #0
 80019b2:	f04f 0100 	mov.w	r1, #0
 80019b6:	0159      	lsls	r1, r3, #5
 80019b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019bc:	0150      	lsls	r0, r2, #5
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4621      	mov	r1, r4
 80019c4:	1a51      	subs	r1, r2, r1
 80019c6:	6139      	str	r1, [r7, #16]
 80019c8:	4629      	mov	r1, r5
 80019ca:	eb63 0301 	sbc.w	r3, r3, r1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019dc:	4659      	mov	r1, fp
 80019de:	018b      	lsls	r3, r1, #6
 80019e0:	4651      	mov	r1, sl
 80019e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019e6:	4651      	mov	r1, sl
 80019e8:	018a      	lsls	r2, r1, #6
 80019ea:	4651      	mov	r1, sl
 80019ec:	ebb2 0801 	subs.w	r8, r2, r1
 80019f0:	4659      	mov	r1, fp
 80019f2:	eb63 0901 	sbc.w	r9, r3, r1
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a0a:	4690      	mov	r8, r2
 8001a0c:	4699      	mov	r9, r3
 8001a0e:	4623      	mov	r3, r4
 8001a10:	eb18 0303 	adds.w	r3, r8, r3
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	462b      	mov	r3, r5
 8001a18:	eb49 0303 	adc.w	r3, r9, r3
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	024b      	lsls	r3, r1, #9
 8001a2e:	4621      	mov	r1, r4
 8001a30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a34:	4621      	mov	r1, r4
 8001a36:	024a      	lsls	r2, r1, #9
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a3e:	2200      	movs	r2, #0
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a48:	f7fe fc1a 	bl	8000280 <__aeabi_uldivmod>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4613      	mov	r3, r2
 8001a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a54:	e058      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a56:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	099b      	lsrs	r3, r3, #6
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	4611      	mov	r1, r2
 8001a62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a66:	623b      	str	r3, [r7, #32]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a70:	4642      	mov	r2, r8
 8001a72:	464b      	mov	r3, r9
 8001a74:	f04f 0000 	mov.w	r0, #0
 8001a78:	f04f 0100 	mov.w	r1, #0
 8001a7c:	0159      	lsls	r1, r3, #5
 8001a7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a82:	0150      	lsls	r0, r2, #5
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4641      	mov	r1, r8
 8001a8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a8e:	4649      	mov	r1, r9
 8001a90:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aa8:	ebb2 040a 	subs.w	r4, r2, sl
 8001aac:	eb63 050b 	sbc.w	r5, r3, fp
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	00eb      	lsls	r3, r5, #3
 8001aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001abe:	00e2      	lsls	r2, r4, #3
 8001ac0:	4614      	mov	r4, r2
 8001ac2:	461d      	mov	r5, r3
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	18e3      	adds	r3, r4, r3
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	464b      	mov	r3, r9
 8001acc:	eb45 0303 	adc.w	r3, r5, r3
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ade:	4629      	mov	r1, r5
 8001ae0:	028b      	lsls	r3, r1, #10
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae8:	4621      	mov	r1, r4
 8001aea:	028a      	lsls	r2, r1, #10
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af2:	2200      	movs	r2, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	61fa      	str	r2, [r7, #28]
 8001af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001afc:	f7fe fbc0 	bl	8000280 <__aeabi_uldivmod>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4613      	mov	r3, r2
 8001b06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	3301      	adds	r3, #1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b22:	e002      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3750      	adds	r7, #80	; 0x50
 8001b30:	46bd      	mov	sp, r7
 8001b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	00f42400 	.word	0x00f42400
 8001b40:	007a1200 	.word	0x007a1200

08001b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000000 	.word	0x20000000

08001b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b60:	f7ff fff0 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0a9b      	lsrs	r3, r3, #10
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	08006588 	.word	0x08006588

08001b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b88:	f7ff ffdc 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	0b5b      	lsrs	r3, r3, #13
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4903      	ldr	r1, [pc, #12]	; (8001ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	08006588 	.word	0x08006588

08001bac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	220f      	movs	r2, #15
 8001bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0203 	and.w	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <HAL_RCC_GetClockConfig+0x60>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0207 	and.w	r2, r3, #7
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	601a      	str	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40023c00 	.word	0x40023c00

08001c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e041      	b.n	8001ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f839 	bl	8001cae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f000 f9d8 	bl	8002004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d001      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e04e      	b.n	8001d7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d022      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d06:	d01d      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <HAL_TIM_Base_Start_IT+0xc8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d018      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00e      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_TIM_Base_Start_IT+0xd8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d004      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d111      	bne.n	8001d68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d010      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d66:	e007      	b.n	8001d78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40000800 	.word	0x40000800
 8001d94:	40000c00 	.word	0x40000c00
 8001d98:	40010400 	.word	0x40010400
 8001d9c:	40014000 	.word	0x40014000
 8001da0:	40001800 	.word	0x40001800

08001da4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0202 	mvn.w	r2, #2
 8001dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8ee 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8e0 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8f1 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d122      	bne.n	8001e54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0204 	mvn.w	r2, #4
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8c4 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8b6 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f8c7 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0208 	mvn.w	r2, #8
 8001e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f89a 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f88c 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f89d 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d122      	bne.n	8001efc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d11b      	bne.n	8001efc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0210 	mvn.w	r2, #16
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f870 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f862 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f873 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0201 	mvn.w	r2, #1
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fc92 	bl	800084c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	2b80      	cmp	r3, #128	; 0x80
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f902 	bl	8002158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b40      	cmp	r3, #64	; 0x40
 8001f60:	d10e      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6c:	2b40      	cmp	r3, #64	; 0x40
 8001f6e:	d107      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f838 	bl	8001ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	d10e      	bne.n	8001fac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d107      	bne.n	8001fac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0220 	mvn.w	r2, #32
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8cc 	bl	8002144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a40      	ldr	r2, [pc, #256]	; (8002118 <TIM_Base_SetConfig+0x114>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002022:	d00f      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3d      	ldr	r2, [pc, #244]	; (800211c <TIM_Base_SetConfig+0x118>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00b      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3c      	ldr	r2, [pc, #240]	; (8002120 <TIM_Base_SetConfig+0x11c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3b      	ldr	r2, [pc, #236]	; (8002124 <TIM_Base_SetConfig+0x120>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d003      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3a      	ldr	r2, [pc, #232]	; (8002128 <TIM_Base_SetConfig+0x124>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2f      	ldr	r2, [pc, #188]	; (8002118 <TIM_Base_SetConfig+0x114>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d02b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d027      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2c      	ldr	r2, [pc, #176]	; (800211c <TIM_Base_SetConfig+0x118>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d023      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <TIM_Base_SetConfig+0x11c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01f      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <TIM_Base_SetConfig+0x120>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a29      	ldr	r2, [pc, #164]	; (8002128 <TIM_Base_SetConfig+0x124>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d017      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a28      	ldr	r2, [pc, #160]	; (800212c <TIM_Base_SetConfig+0x128>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a27      	ldr	r2, [pc, #156]	; (8002130 <TIM_Base_SetConfig+0x12c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00f      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a26      	ldr	r2, [pc, #152]	; (8002134 <TIM_Base_SetConfig+0x130>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a25      	ldr	r2, [pc, #148]	; (8002138 <TIM_Base_SetConfig+0x134>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a24      	ldr	r2, [pc, #144]	; (800213c <TIM_Base_SetConfig+0x138>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d003      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <TIM_Base_SetConfig+0x13c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d108      	bne.n	80020c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <TIM_Base_SetConfig+0x114>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d003      	beq.n	80020fc <TIM_Base_SetConfig+0xf8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <TIM_Base_SetConfig+0x124>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d103      	bne.n	8002104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	615a      	str	r2, [r3, #20]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40010400 	.word	0x40010400
 800212c:	40014000 	.word	0x40014000
 8002130:	40014400 	.word	0x40014400
 8002134:	40014800 	.word	0x40014800
 8002138:	40001800 	.word	0x40001800
 800213c:	40001c00 	.word	0x40001c00
 8002140:	40002000 	.word	0x40002000

08002144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e03f      	b.n	80021fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fb9e 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fd7b 	bl	8002cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b08a      	sub	sp, #40	; 0x28
 800220a:	af02      	add	r7, sp, #8
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b20      	cmp	r3, #32
 8002224:	d17c      	bne.n	8002320 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <HAL_UART_Transmit+0x2c>
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e075      	b.n	8002322 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_UART_Transmit+0x3e>
 8002240:	2302      	movs	r3, #2
 8002242:	e06e      	b.n	8002322 <HAL_UART_Transmit+0x11c>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2221      	movs	r2, #33	; 0x21
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800225a:	f7fe fcd9 	bl	8000c10 <HAL_GetTick>
 800225e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	88fa      	ldrh	r2, [r7, #6]
 800226a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002274:	d108      	bne.n	8002288 <HAL_UART_Transmit+0x82>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d104      	bne.n	8002288 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	e003      	b.n	8002290 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002298:	e02a      	b.n	80022f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 faf9 	bl	800289c <UART_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e036      	b.n	8002322 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10b      	bne.n	80022d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	3302      	adds	r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	e007      	b.n	80022e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	3301      	adds	r3, #1
 80022e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1cf      	bne.n	800229a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2200      	movs	r2, #0
 8002302:	2140      	movs	r1, #64	; 0x40
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fac9 	bl	800289c <UART_WaitOnFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e006      	b.n	8002322 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	e000      	b.n	8002322 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002320:	2302      	movs	r3, #2
  }
}
 8002322:	4618      	mov	r0, r3
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b0ba      	sub	sp, #232	; 0xe8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800235e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800236a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10f      	bne.n	8002392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_UART_IRQHandler+0x66>
 800237e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fbd3 	bl	8002b36 <UART_Receive_IT>
      return;
 8002390:	e256      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80de 	beq.w	8002558 <HAL_UART_IRQHandler+0x22c>
 800239c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80d1 	beq.w	8002558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_UART_IRQHandler+0xae>
 80023c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_UART_IRQHandler+0xd2>
 80023e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_UART_IRQHandler+0xf6>
 800240a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f043 0204 	orr.w	r2, r3, #4
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d011      	beq.n	8002452 <HAL_UART_IRQHandler+0x126>
 800242e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800243a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f043 0208 	orr.w	r2, r3, #8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 81ed 	beq.w	8002836 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800245c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_UART_IRQHandler+0x14e>
 8002468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fb5e 	bl	8002b36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002484:	2b40      	cmp	r3, #64	; 0x40
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d103      	bne.n	80024a6 <HAL_UART_IRQHandler+0x17a>
 800249e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d04f      	beq.n	8002546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa66 	bl	8002978 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d141      	bne.n	800253e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3314      	adds	r3, #20
 80024c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024c8:	e853 3f00 	ldrex	r3, [r3]
 80024cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80024d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3314      	adds	r3, #20
 80024e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024f6:	e841 2300 	strex	r3, r2, [r1]
 80024fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80024fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1d9      	bne.n	80024ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	2b00      	cmp	r3, #0
 800250c:	d013      	beq.n	8002536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	4a7d      	ldr	r2, [pc, #500]	; (8002708 <HAL_UART_IRQHandler+0x3dc>)
 8002514:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fcd6 	bl	8000ecc <HAL_DMA_Abort_IT>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002530:	4610      	mov	r0, r2
 8002532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002534:	e00e      	b.n	8002554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f99a 	bl	8002870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800253c:	e00a      	b.n	8002554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f996 	bl	8002870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002544:	e006      	b.n	8002554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f992 	bl	8002870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002552:	e170      	b.n	8002836 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002554:	bf00      	nop
    return;
 8002556:	e16e      	b.n	8002836 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	2b01      	cmp	r3, #1
 800255e:	f040 814a 	bne.w	80027f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8143 	beq.w	80027f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 813c 	beq.w	80027f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259e:	2b40      	cmp	r3, #64	; 0x40
 80025a0:	f040 80b4 	bne.w	800270c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8140 	beq.w	800283a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025c2:	429a      	cmp	r2, r3
 80025c4:	f080 8139 	bcs.w	800283a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025da:	f000 8088 	beq.w	80026ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025ec:	e853 3f00 	ldrex	r3, [r3]
 80025f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80025f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800260a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800260e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800261a:	e841 2300 	strex	r3, r2, [r1]
 800261e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1d9      	bne.n	80025de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3314      	adds	r3, #20
 8002630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002634:	e853 3f00 	ldrex	r3, [r3]
 8002638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800263a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3314      	adds	r3, #20
 800264a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800264e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800265a:	e841 2300 	strex	r3, r2, [r1]
 800265e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1e1      	bne.n	800262a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3314      	adds	r3, #20
 800266c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800267c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3314      	adds	r3, #20
 8002686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800268a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800268c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e3      	bne.n	8002666 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	330c      	adds	r3, #12
 80026b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b6:	e853 3f00 	ldrex	r3, [r3]
 80026ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026be:	f023 0310 	bic.w	r3, r3, #16
 80026c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	330c      	adds	r3, #12
 80026cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80026d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026d8:	e841 2300 	strex	r3, r2, [r1]
 80026dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e3      	bne.n	80026ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fb7f 	bl	8000dec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f8c0 	bl	8002884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002704:	e099      	b.n	800283a <HAL_UART_IRQHandler+0x50e>
 8002706:	bf00      	nop
 8002708:	08002a3f 	.word	0x08002a3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002714:	b29b      	uxth	r3, r3
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 808b 	beq.w	800283e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8086 	beq.w	800283e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	330c      	adds	r3, #12
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	e853 3f00 	ldrex	r3, [r3]
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002756:	647a      	str	r2, [r7, #68]	; 0x44
 8002758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800275c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800275e:	e841 2300 	strex	r3, r2, [r1]
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1e3      	bne.n	8002732 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3314      	adds	r3, #20
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	e853 3f00 	ldrex	r3, [r3]
 8002778:	623b      	str	r3, [r7, #32]
   return(result);
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3314      	adds	r3, #20
 800278a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800278e:	633a      	str	r2, [r7, #48]	; 0x30
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e3      	bne.n	800276a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	330c      	adds	r3, #12
 80027b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	e853 3f00 	ldrex	r3, [r3]
 80027be:	60fb      	str	r3, [r7, #12]
   return(result);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0310 	bic.w	r3, r3, #16
 80027c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027d4:	61fa      	str	r2, [r7, #28]
 80027d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d8:	69b9      	ldr	r1, [r7, #24]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	e841 2300 	strex	r3, r2, [r1]
 80027e0:	617b      	str	r3, [r7, #20]
   return(result);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1e3      	bne.n	80027b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f848 	bl	8002884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027f4:	e023      	b.n	800283e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_UART_IRQHandler+0x4ea>
 8002802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f929 	bl	8002a66 <UART_Transmit_IT>
    return;
 8002814:	e014      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00e      	beq.n	8002840 <HAL_UART_IRQHandler+0x514>
 8002822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f969 	bl	8002b06 <UART_EndTransmit_IT>
    return;
 8002834:	e004      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
    return;
 8002836:	bf00      	nop
 8002838:	e002      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
      return;
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
      return;
 800283e:	bf00      	nop
  }
}
 8002840:	37e8      	adds	r7, #232	; 0xe8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop

08002848 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b090      	sub	sp, #64	; 0x40
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ac:	e050      	b.n	8002950 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d04c      	beq.n	8002950 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d007      	beq.n	80028cc <UART_WaitOnFlagUntilTimeout+0x30>
 80028bc:	f7fe f9a8 	bl	8000c10 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d241      	bcs.n	8002950 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	330c      	adds	r3, #12
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	e853 3f00 	ldrex	r3, [r3]
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	330c      	adds	r3, #12
 80028ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028ec:	637a      	str	r2, [r7, #52]	; 0x34
 80028ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f4:	e841 2300 	strex	r3, r2, [r1]
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e5      	bne.n	80028cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3314      	adds	r3, #20
 8002906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	e853 3f00 	ldrex	r3, [r3]
 800290e:	613b      	str	r3, [r7, #16]
   return(result);
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	63bb      	str	r3, [r7, #56]	; 0x38
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3314      	adds	r3, #20
 800291e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002920:	623a      	str	r2, [r7, #32]
 8002922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002924:	69f9      	ldr	r1, [r7, #28]
 8002926:	6a3a      	ldr	r2, [r7, #32]
 8002928:	e841 2300 	strex	r3, r2, [r1]
 800292c:	61bb      	str	r3, [r7, #24]
   return(result);
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e5      	bne.n	8002900 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e00f      	b.n	8002970 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	429a      	cmp	r2, r3
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	429a      	cmp	r2, r3
 800296c:	d09f      	beq.n	80028ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3740      	adds	r7, #64	; 0x40
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002978:	b480      	push	{r7}
 800297a:	b095      	sub	sp, #84	; 0x54
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	330c      	adds	r3, #12
 8002986:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298a:	e853 3f00 	ldrex	r3, [r3]
 800298e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	330c      	adds	r3, #12
 800299e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029a0:	643a      	str	r2, [r7, #64]	; 0x40
 80029a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029a8:	e841 2300 	strex	r3, r2, [r1]
 80029ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e5      	bne.n	8002980 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3314      	adds	r3, #20
 80029ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	e853 3f00 	ldrex	r3, [r3]
 80029c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3314      	adds	r3, #20
 80029d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029dc:	e841 2300 	strex	r3, r2, [r1]
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e5      	bne.n	80029b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d119      	bne.n	8002a24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f023 0310 	bic.w	r3, r3, #16
 8002a06:	647b      	str	r3, [r7, #68]	; 0x44
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a10:	61ba      	str	r2, [r7, #24]
 8002a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	6979      	ldr	r1, [r7, #20]
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e5      	bne.n	80029f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a32:	bf00      	nop
 8002a34:	3754      	adds	r7, #84	; 0x54
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7ff ff09 	bl	8002870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b21      	cmp	r3, #33	; 0x21
 8002a78:	d13e      	bne.n	8002af8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a82:	d114      	bne.n	8002aae <UART_Transmit_IT+0x48>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d110      	bne.n	8002aae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	1c9a      	adds	r2, r3, #2
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	621a      	str	r2, [r3, #32]
 8002aac:	e008      	b.n	8002ac0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	1c59      	adds	r1, r3, #1
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6211      	str	r1, [r2, #32]
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4619      	mov	r1, r3
 8002ace:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10f      	bne.n	8002af4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e000      	b.n	8002afa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002af8:	2302      	movs	r3, #2
  }
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff fe8e 	bl	8002848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b08c      	sub	sp, #48	; 0x30
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b22      	cmp	r3, #34	; 0x22
 8002b48:	f040 80ab 	bne.w	8002ca2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b54:	d117      	bne.n	8002b86 <UART_Receive_IT+0x50>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d113      	bne.n	8002b86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	1c9a      	adds	r2, r3, #2
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
 8002b84:	e026      	b.n	8002bd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b98:	d007      	beq.n	8002baa <UART_Receive_IT+0x74>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10a      	bne.n	8002bb8 <UART_Receive_IT+0x82>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	e008      	b.n	8002bca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4619      	mov	r1, r3
 8002be2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d15a      	bne.n	8002c9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0220 	bic.w	r2, r2, #32
 8002bf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d135      	bne.n	8002c94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f023 0310 	bic.w	r3, r3, #16
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	330c      	adds	r3, #12
 8002c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4e:	623a      	str	r2, [r7, #32]
 8002c50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	69f9      	ldr	r1, [r7, #28]
 8002c54:	6a3a      	ldr	r2, [r7, #32]
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e5      	bne.n	8002c2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b10      	cmp	r3, #16
 8002c6e:	d10a      	bne.n	8002c86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff fdf9 	bl	8002884 <HAL_UARTEx_RxEventCallback>
 8002c92:	e002      	b.n	8002c9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff fde1 	bl	800285c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e002      	b.n	8002ca4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3730      	adds	r7, #48	; 0x30
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb0:	b0c0      	sub	sp, #256	; 0x100
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc8:	68d9      	ldr	r1, [r3, #12]
 8002cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	ea40 0301 	orr.w	r3, r0, r1
 8002cd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d04:	f021 010c 	bic.w	r1, r1, #12
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d12:	430b      	orrs	r3, r1
 8002d14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d26:	6999      	ldr	r1, [r3, #24]
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	ea40 0301 	orr.w	r3, r0, r1
 8002d32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4b8f      	ldr	r3, [pc, #572]	; (8002f78 <UART_SetConfig+0x2cc>)
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d005      	beq.n	8002d4c <UART_SetConfig+0xa0>
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	4b8d      	ldr	r3, [pc, #564]	; (8002f7c <UART_SetConfig+0x2d0>)
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d104      	bne.n	8002d56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d4c:	f7fe ff1a 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8002d50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d54:	e003      	b.n	8002d5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d56:	f7fe ff01 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 8002d5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d68:	f040 810c 	bne.w	8002f84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d70:	2200      	movs	r2, #0
 8002d72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d7e:	4622      	mov	r2, r4
 8002d80:	462b      	mov	r3, r5
 8002d82:	1891      	adds	r1, r2, r2
 8002d84:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d86:	415b      	adcs	r3, r3
 8002d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d8e:	4621      	mov	r1, r4
 8002d90:	eb12 0801 	adds.w	r8, r2, r1
 8002d94:	4629      	mov	r1, r5
 8002d96:	eb43 0901 	adc.w	r9, r3, r1
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dae:	4690      	mov	r8, r2
 8002db0:	4699      	mov	r9, r3
 8002db2:	4623      	mov	r3, r4
 8002db4:	eb18 0303 	adds.w	r3, r8, r3
 8002db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002dbc:	462b      	mov	r3, r5
 8002dbe:	eb49 0303 	adc.w	r3, r9, r3
 8002dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002dd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002dd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dda:	460b      	mov	r3, r1
 8002ddc:	18db      	adds	r3, r3, r3
 8002dde:	653b      	str	r3, [r7, #80]	; 0x50
 8002de0:	4613      	mov	r3, r2
 8002de2:	eb42 0303 	adc.w	r3, r2, r3
 8002de6:	657b      	str	r3, [r7, #84]	; 0x54
 8002de8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002dec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002df0:	f7fd fa46 	bl	8000280 <__aeabi_uldivmod>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4b61      	ldr	r3, [pc, #388]	; (8002f80 <UART_SetConfig+0x2d4>)
 8002dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	011c      	lsls	r4, r3, #4
 8002e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e06:	2200      	movs	r2, #0
 8002e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e14:	4642      	mov	r2, r8
 8002e16:	464b      	mov	r3, r9
 8002e18:	1891      	adds	r1, r2, r2
 8002e1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e1c:	415b      	adcs	r3, r3
 8002e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e24:	4641      	mov	r1, r8
 8002e26:	eb12 0a01 	adds.w	sl, r2, r1
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e44:	4692      	mov	sl, r2
 8002e46:	469b      	mov	fp, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e52:	464b      	mov	r3, r9
 8002e54:	eb4b 0303 	adc.w	r3, fp, r3
 8002e58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e70:	460b      	mov	r3, r1
 8002e72:	18db      	adds	r3, r3, r3
 8002e74:	643b      	str	r3, [r7, #64]	; 0x40
 8002e76:	4613      	mov	r3, r2
 8002e78:	eb42 0303 	adc.w	r3, r2, r3
 8002e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e86:	f7fd f9fb 	bl	8000280 <__aeabi_uldivmod>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <UART_SetConfig+0x2d4>)
 8002e92:	fba3 2301 	umull	r2, r3, r3, r1
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2264      	movs	r2, #100	; 0x64
 8002e9a:	fb02 f303 	mul.w	r3, r2, r3
 8002e9e:	1acb      	subs	r3, r1, r3
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ea6:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <UART_SetConfig+0x2d4>)
 8002ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eb4:	441c      	add	r4, r3
 8002eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ec0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ec4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ec8:	4642      	mov	r2, r8
 8002eca:	464b      	mov	r3, r9
 8002ecc:	1891      	adds	r1, r2, r2
 8002ece:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ed0:	415b      	adcs	r3, r3
 8002ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ed4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ed8:	4641      	mov	r1, r8
 8002eda:	1851      	adds	r1, r2, r1
 8002edc:	6339      	str	r1, [r7, #48]	; 0x30
 8002ede:	4649      	mov	r1, r9
 8002ee0:	414b      	adcs	r3, r1
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ef0:	4659      	mov	r1, fp
 8002ef2:	00cb      	lsls	r3, r1, #3
 8002ef4:	4651      	mov	r1, sl
 8002ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002efa:	4651      	mov	r1, sl
 8002efc:	00ca      	lsls	r2, r1, #3
 8002efe:	4610      	mov	r0, r2
 8002f00:	4619      	mov	r1, r3
 8002f02:	4603      	mov	r3, r0
 8002f04:	4642      	mov	r2, r8
 8002f06:	189b      	adds	r3, r3, r2
 8002f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f0c:	464b      	mov	r3, r9
 8002f0e:	460a      	mov	r2, r1
 8002f10:	eb42 0303 	adc.w	r3, r2, r3
 8002f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	18db      	adds	r3, r3, r3
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f32:	4613      	mov	r3, r2
 8002f34:	eb42 0303 	adc.w	r3, r2, r3
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f42:	f7fd f99d 	bl	8000280 <__aeabi_uldivmod>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <UART_SetConfig+0x2d4>)
 8002f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f50:	095b      	lsrs	r3, r3, #5
 8002f52:	2164      	movs	r1, #100	; 0x64
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	3332      	adds	r3, #50	; 0x32
 8002f5e:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <UART_SetConfig+0x2d4>)
 8002f60:	fba2 2303 	umull	r2, r3, r2, r3
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	f003 0207 	and.w	r2, r3, #7
 8002f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4422      	add	r2, r4
 8002f72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f74:	e105      	b.n	8003182 <UART_SetConfig+0x4d6>
 8002f76:	bf00      	nop
 8002f78:	40011000 	.word	0x40011000
 8002f7c:	40011400 	.word	0x40011400
 8002f80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f96:	4642      	mov	r2, r8
 8002f98:	464b      	mov	r3, r9
 8002f9a:	1891      	adds	r1, r2, r2
 8002f9c:	6239      	str	r1, [r7, #32]
 8002f9e:	415b      	adcs	r3, r3
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fa6:	4641      	mov	r1, r8
 8002fa8:	1854      	adds	r4, r2, r1
 8002faa:	4649      	mov	r1, r9
 8002fac:	eb43 0501 	adc.w	r5, r3, r1
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	00eb      	lsls	r3, r5, #3
 8002fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fbe:	00e2      	lsls	r2, r4, #3
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	461d      	mov	r5, r3
 8002fc4:	4643      	mov	r3, r8
 8002fc6:	18e3      	adds	r3, r4, r3
 8002fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fcc:	464b      	mov	r3, r9
 8002fce:	eb45 0303 	adc.w	r3, r5, r3
 8002fd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ff2:	4629      	mov	r1, r5
 8002ff4:	008b      	lsls	r3, r1, #2
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	008a      	lsls	r2, r1, #2
 8003000:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003004:	f7fd f93c 	bl	8000280 <__aeabi_uldivmod>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4b60      	ldr	r3, [pc, #384]	; (8003190 <UART_SetConfig+0x4e4>)
 800300e:	fba3 2302 	umull	r2, r3, r3, r2
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	011c      	lsls	r4, r3, #4
 8003016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800301a:	2200      	movs	r2, #0
 800301c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003020:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003024:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003028:	4642      	mov	r2, r8
 800302a:	464b      	mov	r3, r9
 800302c:	1891      	adds	r1, r2, r2
 800302e:	61b9      	str	r1, [r7, #24]
 8003030:	415b      	adcs	r3, r3
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003038:	4641      	mov	r1, r8
 800303a:	1851      	adds	r1, r2, r1
 800303c:	6139      	str	r1, [r7, #16]
 800303e:	4649      	mov	r1, r9
 8003040:	414b      	adcs	r3, r1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003050:	4659      	mov	r1, fp
 8003052:	00cb      	lsls	r3, r1, #3
 8003054:	4651      	mov	r1, sl
 8003056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800305a:	4651      	mov	r1, sl
 800305c:	00ca      	lsls	r2, r1, #3
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	4603      	mov	r3, r0
 8003064:	4642      	mov	r2, r8
 8003066:	189b      	adds	r3, r3, r2
 8003068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800306c:	464b      	mov	r3, r9
 800306e:	460a      	mov	r2, r1
 8003070:	eb42 0303 	adc.w	r3, r2, r3
 8003074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	67bb      	str	r3, [r7, #120]	; 0x78
 8003082:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003090:	4649      	mov	r1, r9
 8003092:	008b      	lsls	r3, r1, #2
 8003094:	4641      	mov	r1, r8
 8003096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800309a:	4641      	mov	r1, r8
 800309c:	008a      	lsls	r2, r1, #2
 800309e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030a2:	f7fd f8ed 	bl	8000280 <__aeabi_uldivmod>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4b39      	ldr	r3, [pc, #228]	; (8003190 <UART_SetConfig+0x4e4>)
 80030ac:	fba3 1302 	umull	r1, r3, r3, r2
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	2164      	movs	r1, #100	; 0x64
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	3332      	adds	r3, #50	; 0x32
 80030be:	4a34      	ldr	r2, [pc, #208]	; (8003190 <UART_SetConfig+0x4e4>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ca:	441c      	add	r4, r3
 80030cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d0:	2200      	movs	r2, #0
 80030d2:	673b      	str	r3, [r7, #112]	; 0x70
 80030d4:	677a      	str	r2, [r7, #116]	; 0x74
 80030d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80030da:	4642      	mov	r2, r8
 80030dc:	464b      	mov	r3, r9
 80030de:	1891      	adds	r1, r2, r2
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	415b      	adcs	r3, r3
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030ea:	4641      	mov	r1, r8
 80030ec:	1851      	adds	r1, r2, r1
 80030ee:	6039      	str	r1, [r7, #0]
 80030f0:	4649      	mov	r1, r9
 80030f2:	414b      	adcs	r3, r1
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003102:	4659      	mov	r1, fp
 8003104:	00cb      	lsls	r3, r1, #3
 8003106:	4651      	mov	r1, sl
 8003108:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800310c:	4651      	mov	r1, sl
 800310e:	00ca      	lsls	r2, r1, #3
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	4603      	mov	r3, r0
 8003116:	4642      	mov	r2, r8
 8003118:	189b      	adds	r3, r3, r2
 800311a:	66bb      	str	r3, [r7, #104]	; 0x68
 800311c:	464b      	mov	r3, r9
 800311e:	460a      	mov	r2, r1
 8003120:	eb42 0303 	adc.w	r3, r2, r3
 8003124:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	663b      	str	r3, [r7, #96]	; 0x60
 8003130:	667a      	str	r2, [r7, #100]	; 0x64
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800313e:	4649      	mov	r1, r9
 8003140:	008b      	lsls	r3, r1, #2
 8003142:	4641      	mov	r1, r8
 8003144:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003148:	4641      	mov	r1, r8
 800314a:	008a      	lsls	r2, r1, #2
 800314c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003150:	f7fd f896 	bl	8000280 <__aeabi_uldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <UART_SetConfig+0x4e4>)
 800315a:	fba3 1302 	umull	r1, r3, r3, r2
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	2164      	movs	r1, #100	; 0x64
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	3332      	adds	r3, #50	; 0x32
 800316c:	4a08      	ldr	r2, [pc, #32]	; (8003190 <UART_SetConfig+0x4e4>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	f003 020f 	and.w	r2, r3, #15
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4422      	add	r2, r4
 8003180:	609a      	str	r2, [r3, #8]
}
 8003182:	bf00      	nop
 8003184:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003188:	46bd      	mov	sp, r7
 800318a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318e:	bf00      	nop
 8003190:	51eb851f 	.word	0x51eb851f

08003194 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <SysTick_Handler+0x1c>)
 800319a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800319c:	f001 fc9c 	bl	8004ad8 <xTaskGetSchedulerState>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d001      	beq.n	80031aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80031a6:	f002 fa87 	bl	80056b8 <xPortSysTickHandler>
  }
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	e000e010 	.word	0xe000e010

080031b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80031c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4a06      	ldr	r2, [pc, #24]	; (80031e4 <vApplicationGetIdleTaskMemory+0x30>)
 80031ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	601a      	str	r2, [r3, #0]
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000128 	.word	0x20000128
 80031e4:	20000184 	.word	0x20000184

080031e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4a07      	ldr	r2, [pc, #28]	; (8003214 <vApplicationGetTimerTaskMemory+0x2c>)
 80031f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4a06      	ldr	r2, [pc, #24]	; (8003218 <vApplicationGetTimerTaskMemory+0x30>)
 80031fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003206:	601a      	str	r2, [r3, #0]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	20000384 	.word	0x20000384
 8003218:	200003e0 	.word	0x200003e0

0800321c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f103 0208 	add.w	r2, r3, #8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f103 0208 	add.w	r2, r3, #8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f103 0208 	add.w	r2, r3, #8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003276:	b480      	push	{r7}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	601a      	str	r2, [r3, #0]
}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d103      	bne.n	80032de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e00c      	b.n	80032f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3308      	adds	r3, #8
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e002      	b.n	80032ec <vListInsert+0x2e>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d2f6      	bcs.n	80032e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	601a      	str	r2, [r3, #0]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6892      	ldr	r2, [r2, #8]
 8003346:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6852      	ldr	r2, [r2, #4]
 8003350:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d103      	bne.n	8003364 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	1e5a      	subs	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10a      	bne.n	80033ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033aa:	bf00      	nop
 80033ac:	e7fe      	b.n	80033ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033ae:	f002 f8f1 	bl	8005594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	68f9      	ldr	r1, [r7, #12]
 80033bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	441a      	add	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	3b01      	subs	r3, #1
 80033e0:	68f9      	ldr	r1, [r7, #12]
 80033e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	441a      	add	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	22ff      	movs	r2, #255	; 0xff
 80033f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	22ff      	movs	r2, #255	; 0xff
 80033fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d114      	bne.n	800342e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01a      	beq.n	8003442 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3310      	adds	r3, #16
 8003410:	4618      	mov	r0, r3
 8003412:	f001 f9a3 	bl	800475c <xTaskRemoveFromEventList>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d012      	beq.n	8003442 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <xQueueGenericReset+0xcc>)
 800341e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	e009      	b.n	8003442 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	3310      	adds	r3, #16
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fef2 	bl	800321c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3324      	adds	r3, #36	; 0x24
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff feed 	bl	800321c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003442:	f002 f8d7 	bl	80055f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003446:	2301      	movs	r3, #1
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	e000ed04 	.word	0xe000ed04

08003454 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08e      	sub	sp, #56	; 0x38
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003496:	bf00      	nop
 8003498:	e7fe      	b.n	8003498 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <xQueueGenericCreateStatic+0x52>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <xQueueGenericCreateStatic+0x56>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <xQueueGenericCreateStatic+0x58>
 80034aa:	2300      	movs	r3, #0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	623b      	str	r3, [r7, #32]
}
 80034c2:	bf00      	nop
 80034c4:	e7fe      	b.n	80034c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <xQueueGenericCreateStatic+0x7e>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <xQueueGenericCreateStatic+0x82>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <xQueueGenericCreateStatic+0x84>
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	61fb      	str	r3, [r7, #28]
}
 80034ee:	bf00      	nop
 80034f0:	e7fe      	b.n	80034f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034f2:	2354      	movs	r3, #84	; 0x54
 80034f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b54      	cmp	r3, #84	; 0x54
 80034fa:	d00a      	beq.n	8003512 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	61bb      	str	r3, [r7, #24]
}
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003512:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00d      	beq.n	800353a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003526:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f83f 	bl	80035b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800353c:	4618      	mov	r0, r3
 800353e:	3730      	adds	r7, #48	; 0x30
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	613b      	str	r3, [r7, #16]
}
 800356a:	bf00      	nop
 800356c:	e7fe      	b.n	800356c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	3354      	adds	r3, #84	; 0x54
 800357c:	4618      	mov	r0, r3
 800357e:	f002 f92b 	bl	80057d8 <pvPortMalloc>
 8003582:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d011      	beq.n	80035ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	3354      	adds	r3, #84	; 0x54
 8003592:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800359c:	79fa      	ldrb	r2, [r7, #7]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f805 	bl	80035b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035ae:	69bb      	ldr	r3, [r7, #24]
	}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d103      	bne.n	80035d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	e002      	b.n	80035da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035e6:	2101      	movs	r1, #1
 80035e8:	69b8      	ldr	r0, [r7, #24]
 80035ea:	f7ff fecb 	bl	8003384 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2200      	movs	r2, #0
 80035fa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08e      	sub	sp, #56	; 0x38
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003612:	2300      	movs	r3, #0
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <xQueueGenericSend+0x32>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d103      	bne.n	8003644 <xQueueGenericSend+0x40>
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <xQueueGenericSend+0x44>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <xQueueGenericSend+0x46>
 8003648:	2300      	movs	r3, #0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <xQueueGenericSend+0x60>
	__asm volatile
 800364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	623b      	str	r3, [r7, #32]
}
 8003660:	bf00      	nop
 8003662:	e7fe      	b.n	8003662 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d103      	bne.n	8003672 <xQueueGenericSend+0x6e>
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <xQueueGenericSend+0x72>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <xQueueGenericSend+0x74>
 8003676:	2300      	movs	r3, #0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <xQueueGenericSend+0x8e>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	61fb      	str	r3, [r7, #28]
}
 800368e:	bf00      	nop
 8003690:	e7fe      	b.n	8003690 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003692:	f001 fa21 	bl	8004ad8 <xTaskGetSchedulerState>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <xQueueGenericSend+0x9e>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <xQueueGenericSend+0xa2>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <xQueueGenericSend+0xa4>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	61bb      	str	r3, [r7, #24]
}
 80036be:	bf00      	nop
 80036c0:	e7fe      	b.n	80036c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036c2:	f001 ff67 	bl	8005594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <xQueueGenericSend+0xd4>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d145      	bne.n	8003764 <xQueueGenericSend+0x160>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036e4:	f000 fa3a 	bl	8003b5c <prvCopyDataToQueue>
 80036e8:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d014      	beq.n	800371c <xQueueGenericSend+0x118>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d102      	bne.n	80036fe <xQueueGenericSend+0xfa>
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d12e      	bne.n	800375c <xQueueGenericSend+0x158>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80036fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003700:	f000 fba8 	bl	8003e54 <prvNotifyQueueSetContainer>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d028      	beq.n	800375c <xQueueGenericSend+0x158>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 800370a:	4b4a      	ldr	r3, [pc, #296]	; (8003834 <xQueueGenericSend+0x230>)
 800370c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	e01f      	b.n	800375c <xQueueGenericSend+0x158>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d010      	beq.n	8003746 <xQueueGenericSend+0x142>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	3324      	adds	r3, #36	; 0x24
 8003728:	4618      	mov	r0, r3
 800372a:	f001 f817 	bl	800475c <xTaskRemoveFromEventList>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <xQueueGenericSend+0x158>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8003734:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <xQueueGenericSend+0x230>)
 8003736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	e00a      	b.n	800375c <xQueueGenericSend+0x158>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8003746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <xQueueGenericSend+0x158>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 800374c:	4b39      	ldr	r3, [pc, #228]	; (8003834 <xQueueGenericSend+0x230>)
 800374e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800375c:	f001 ff4a 	bl	80055f4 <vPortExitCritical>
				return pdPASS;
 8003760:	2301      	movs	r3, #1
 8003762:	e063      	b.n	800382c <xQueueGenericSend+0x228>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <xQueueGenericSend+0x16e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800376a:	f001 ff43 	bl	80055f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800376e:	2300      	movs	r3, #0
 8003770:	e05c      	b.n	800382c <xQueueGenericSend+0x228>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <xQueueGenericSend+0x182>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003778:	f107 0310 	add.w	r3, r7, #16
 800377c:	4618      	mov	r0, r3
 800377e:	f001 f851 	bl	8004824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003782:	2301      	movs	r3, #1
 8003784:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003786:	f001 ff35 	bl	80055f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800378a:	f000 fdc3 	bl	8004314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800378e:	f001 ff01 	bl	8005594 <vPortEnterCritical>
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003798:	b25b      	sxtb	r3, r3
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d103      	bne.n	80037a8 <xQueueGenericSend+0x1a4>
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d103      	bne.n	80037be <xQueueGenericSend+0x1ba>
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037be:	f001 ff19 	bl	80055f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037c2:	1d3a      	adds	r2, r7, #4
 80037c4:	f107 0310 	add.w	r3, r7, #16
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 f840 	bl	8004850 <xTaskCheckForTimeOut>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d124      	bne.n	8003820 <xQueueGenericSend+0x21c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037d8:	f000 fac5 	bl	8003d66 <prvIsQueueFull>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d018      	beq.n	8003814 <xQueueGenericSend+0x210>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	3310      	adds	r3, #16
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 ff66 	bl	80046bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037f2:	f000 fa43 	bl	8003c7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037f6:	f000 fd9b 	bl	8004330 <xTaskResumeAll>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f47f af60 	bne.w	80036c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <xQueueGenericSend+0x230>)
 8003804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	e756      	b.n	80036c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003816:	f000 fa31 	bl	8003c7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800381a:	f000 fd89 	bl	8004330 <xTaskResumeAll>
 800381e:	e750      	b.n	80036c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003822:	f000 fa2b 	bl	8003c7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003826:	f000 fd83 	bl	8004330 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800382a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800382c:	4618      	mov	r0, r3
 800382e:	3738      	adds	r7, #56	; 0x38
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	e000ed04 	.word	0xe000ed04

08003838 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b090      	sub	sp, #64	; 0x40
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d103      	bne.n	8003874 <xQueueGenericSendFromISR+0x3c>
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <xQueueGenericSendFromISR+0x40>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <xQueueGenericSendFromISR+0x42>
 8003878:	2300      	movs	r3, #0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003890:	bf00      	nop
 8003892:	e7fe      	b.n	8003892 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d103      	bne.n	80038a2 <xQueueGenericSendFromISR+0x6a>
 800389a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <xQueueGenericSendFromISR+0x6e>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <xQueueGenericSendFromISR+0x70>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	623b      	str	r3, [r7, #32]
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038c2:	f001 ff49 	bl	8005758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038c6:	f3ef 8211 	mrs	r2, BASEPRI
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	61fa      	str	r2, [r7, #28]
 80038dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <xQueueGenericSendFromISR+0xbc>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d146      	bne.n	8003982 <xQueueGenericSendFromISR+0x14a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800390a:	f000 f927 	bl	8003b5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800390e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d129      	bne.n	800396c <xQueueGenericSendFromISR+0x134>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391c:	2b00      	cmp	r3, #0
 800391e:	d012      	beq.n	8003946 <xQueueGenericSendFromISR+0x10e>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d102      	bne.n	800392c <xQueueGenericSendFromISR+0xf4>
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d127      	bne.n	800397c <xQueueGenericSendFromISR+0x144>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800392c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800392e:	f000 fa91 	bl	8003e54 <prvNotifyQueueSetContainer>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d021      	beq.n	800397c <xQueueGenericSendFromISR+0x144>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01e      	beq.n	800397c <xQueueGenericSendFromISR+0x144>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e01a      	b.n	800397c <xQueueGenericSendFromISR+0x144>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2b00      	cmp	r3, #0
 800394c:	d016      	beq.n	800397c <xQueueGenericSendFromISR+0x144>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	3324      	adds	r3, #36	; 0x24
 8003952:	4618      	mov	r0, r3
 8003954:	f000 ff02 	bl	800475c <xTaskRemoveFromEventList>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00e      	beq.n	800397c <xQueueGenericSendFromISR+0x144>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <xQueueGenericSendFromISR+0x144>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e007      	b.n	800397c <xQueueGenericSendFromISR+0x144>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800396c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003970:	3301      	adds	r3, #1
 8003972:	b2db      	uxtb	r3, r3
 8003974:	b25a      	sxtb	r2, r3
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800397c:	2301      	movs	r3, #1
 800397e:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003980:	e001      	b.n	8003986 <xQueueGenericSendFromISR+0x14e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003982:	2300      	movs	r3, #0
 8003984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003988:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003990:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003994:	4618      	mov	r0, r3
 8003996:	3740      	adds	r7, #64	; 0x40
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08c      	sub	sp, #48	; 0x30
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10a      	bne.n	80039cc <xQueueReceive+0x30>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	623b      	str	r3, [r7, #32]
}
 80039c8:	bf00      	nop
 80039ca:	e7fe      	b.n	80039ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d103      	bne.n	80039da <xQueueReceive+0x3e>
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <xQueueReceive+0x42>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <xQueueReceive+0x44>
 80039de:	2300      	movs	r3, #0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <xQueueReceive+0x5e>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	61fb      	str	r3, [r7, #28]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039fa:	f001 f86d 	bl	8004ad8 <xTaskGetSchedulerState>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <xQueueReceive+0x6e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <xQueueReceive+0x72>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <xQueueReceive+0x74>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xQueueReceive+0x8e>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	61bb      	str	r3, [r7, #24]
}
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a2a:	f001 fdb3 	bl	8005594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d01f      	beq.n	8003a7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a3e:	f000 f8f7 	bl	8003c30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00f      	beq.n	8003a72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	3310      	adds	r3, #16
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fe80 	bl	800475c <xTaskRemoveFromEventList>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a62:	4b3d      	ldr	r3, [pc, #244]	; (8003b58 <xQueueReceive+0x1bc>)
 8003a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a72:	f001 fdbf 	bl	80055f4 <vPortExitCritical>
				return pdPASS;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e069      	b.n	8003b4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d103      	bne.n	8003a88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a80:	f001 fdb8 	bl	80055f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e062      	b.n	8003b4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a8e:	f107 0310 	add.w	r3, r7, #16
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fec6 	bl	8004824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a9c:	f001 fdaa 	bl	80055f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aa0:	f000 fc38 	bl	8004314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aa4:	f001 fd76 	bl	8005594 <vPortEnterCritical>
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aae:	b25b      	sxtb	r3, r3
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d103      	bne.n	8003abe <xQueueReceive+0x122>
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac4:	b25b      	sxtb	r3, r3
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aca:	d103      	bne.n	8003ad4 <xQueueReceive+0x138>
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ad4:	f001 fd8e 	bl	80055f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ad8:	1d3a      	adds	r2, r7, #4
 8003ada:	f107 0310 	add.w	r3, r7, #16
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 feb5 	bl	8004850 <xTaskCheckForTimeOut>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d123      	bne.n	8003b34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aee:	f000 f924 	bl	8003d3a <prvIsQueueEmpty>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d017      	beq.n	8003b28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	3324      	adds	r3, #36	; 0x24
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fddb 	bl	80046bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b08:	f000 f8b8 	bl	8003c7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b0c:	f000 fc10 	bl	8004330 <xTaskResumeAll>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d189      	bne.n	8003a2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <xQueueReceive+0x1bc>)
 8003b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	e780      	b.n	8003a2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b2a:	f000 f8a7 	bl	8003c7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b2e:	f000 fbff 	bl	8004330 <xTaskResumeAll>
 8003b32:	e77a      	b.n	8003a2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b36:	f000 f8a1 	bl	8003c7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b3a:	f000 fbf9 	bl	8004330 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b40:	f000 f8fb 	bl	8003d3a <prvIsQueueEmpty>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f43f af6f 	beq.w	8003a2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3730      	adds	r7, #48	; 0x30
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	e000ed04 	.word	0xe000ed04

08003b5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10d      	bne.n	8003b96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d14d      	bne.n	8003c1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 ffc4 	bl	8004b14 <xTaskPriorityDisinherit>
 8003b8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	e043      	b.n	8003c1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d119      	bne.n	8003bd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6858      	ldr	r0, [r3, #4]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	f002 f82a 	bl	8005c00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	441a      	add	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d32b      	bcc.n	8003c1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	e026      	b.n	8003c1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68d8      	ldr	r0, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	461a      	mov	r2, r3
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	f002 f810 	bl	8005c00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	425b      	negs	r3, r3
 8003bea:	441a      	add	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d207      	bcs.n	8003c0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	425b      	negs	r3, r3
 8003c06:	441a      	add	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d105      	bne.n	8003c1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c26:	697b      	ldr	r3, [r7, #20]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d018      	beq.n	8003c74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	441a      	add	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d303      	bcc.n	8003c64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68d9      	ldr	r1, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6838      	ldr	r0, [r7, #0]
 8003c70:	f001 ffc6 	bl	8005c00 <memcpy>
	}
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c84:	f001 fc86 	bl	8005594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c90:	e01e      	b.n	8003cd0 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f8da 	bl	8003e54 <prvNotifyQueueSetContainer>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d010      	beq.n	8003cc8 <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8003ca6:	f000 fe35 	bl	8004914 <vTaskMissedYield>
 8003caa:	e00d      	b.n	8003cc8 <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d012      	beq.n	8003cda <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3324      	adds	r3, #36	; 0x24
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fd4f 	bl	800475c <xTaskRemoveFromEventList>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8003cc4:	f000 fe26 	bl	8004914 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	dcdc      	bgt.n	8003c92 <prvUnlockQueue+0x16>
 8003cd8:	e000      	b.n	8003cdc <prvUnlockQueue+0x60>
						break;
 8003cda:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	22ff      	movs	r2, #255	; 0xff
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ce4:	f001 fc86 	bl	80055f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ce8:	f001 fc54 	bl	8005594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cf2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cf4:	e011      	b.n	8003d1a <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d012      	beq.n	8003d24 <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3310      	adds	r3, #16
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fd2a 	bl	800475c <xTaskRemoveFromEventList>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 8003d0e:	f000 fe01 	bl	8004914 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d12:	7bbb      	ldrb	r3, [r7, #14]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	dce9      	bgt.n	8003cf6 <prvUnlockQueue+0x7a>
 8003d22:	e000      	b.n	8003d26 <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 8003d24:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	22ff      	movs	r2, #255	; 0xff
 8003d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d2e:	f001 fc61 	bl	80055f4 <vPortExitCritical>
}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d42:	f001 fc27 	bl	8005594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	e001      	b.n	8003d58 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d58:	f001 fc4c 	bl	80055f4 <vPortExitCritical>

	return xReturn;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d6e:	f001 fc11 	bl	8005594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d102      	bne.n	8003d84 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	e001      	b.n	8003d88 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d88:	f001 fc34 	bl	80055f4 <vPortExitCritical>

	return xReturn;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	e014      	b.n	8003dd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003da8:	4a0f      	ldr	r2, [pc, #60]	; (8003de8 <vQueueAddToRegistry+0x50>)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10b      	bne.n	8003dcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003db4:	490c      	ldr	r1, [pc, #48]	; (8003de8 <vQueueAddToRegistry+0x50>)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <vQueueAddToRegistry+0x50>)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003dca:	e006      	b.n	8003dda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b07      	cmp	r3, #7
 8003dd6:	d9e7      	bls.n	8003da8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	200007e0 	.word	0x200007e0

08003dec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003dfc:	f001 fbca 	bl	8005594 <vPortEnterCritical>
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e06:	b25b      	sxtb	r3, r3
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d103      	bne.n	8003e16 <vQueueWaitForMessageRestricted+0x2a>
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d103      	bne.n	8003e2c <vQueueWaitForMessageRestricted+0x40>
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e2c:	f001 fbe2 	bl	80055f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d106      	bne.n	8003e46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	3324      	adds	r3, #36	; 0x24
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fc5f 	bl	8004704 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e46:	6978      	ldr	r0, [r7, #20]
 8003e48:	f7ff ff18 	bl	8003c7c <prvUnlockQueue>
	}
 8003e4c:	bf00      	nop
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e60:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <prvNotifyQueueSetContainer+0x2e>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	613b      	str	r3, [r7, #16]
}
 8003e7e:	bf00      	nop
 8003e80:	e7fe      	b.n	8003e80 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d30a      	bcc.n	8003ea4 <prvNotifyQueueSetContainer+0x50>
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	60fb      	str	r3, [r7, #12]
}
 8003ea0:	bf00      	nop
 8003ea2:	e7fe      	b.n	8003ea2 <prvNotifyQueueSetContainer+0x4e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d225      	bcs.n	8003efc <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eb6:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8003eb8:	1d3b      	adds	r3, r7, #4
 8003eba:	2200      	movs	r2, #0
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	69b8      	ldr	r0, [r7, #24]
 8003ec0:	f7ff fe4c 	bl	8003b5c <prvCopyDataToQueue>
 8003ec4:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8003ec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ece:	d10e      	bne.n	8003eee <prvNotifyQueueSetContainer+0x9a>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d011      	beq.n	8003efc <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	3324      	adds	r3, #36	; 0x24
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fc3d 	bl	800475c <xTaskRemoveFromEventList>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d009      	beq.n	8003efc <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	e006      	b.n	8003efc <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	b25a      	sxtb	r2, r3
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003efc:	69fb      	ldr	r3, [r7, #28]
	}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b08e      	sub	sp, #56	; 0x38
 8003f0a:	af04      	add	r7, sp, #16
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	623b      	str	r3, [r7, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <xTaskCreateStatic+0x46>
	__asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	61fb      	str	r3, [r7, #28]
}
 8003f48:	bf00      	nop
 8003f4a:	e7fe      	b.n	8003f4a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f4c:	235c      	movs	r3, #92	; 0x5c
 8003f4e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b5c      	cmp	r3, #92	; 0x5c
 8003f54:	d00a      	beq.n	8003f6c <xTaskCreateStatic+0x66>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	61bb      	str	r3, [r7, #24]
}
 8003f68:	bf00      	nop
 8003f6a:	e7fe      	b.n	8003f6a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01e      	beq.n	8003fb2 <xTaskCreateStatic+0xac>
 8003f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d01b      	beq.n	8003fb2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	9303      	str	r3, [sp, #12]
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	9302      	str	r3, [sp, #8]
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f850 	bl	800404a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fac:	f000 f8dc 	bl	8004168 <prvAddNewTaskToReadyList>
 8003fb0:	e001      	b.n	8003fb6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fb6:	697b      	ldr	r3, [r7, #20]
	}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3728      	adds	r7, #40	; 0x28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08c      	sub	sp, #48	; 0x30
 8003fc4:	af04      	add	r7, sp, #16
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 fbff 	bl	80057d8 <pvPortMalloc>
 8003fda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00e      	beq.n	8004000 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fe2:	205c      	movs	r0, #92	; 0x5c
 8003fe4:	f001 fbf8 	bl	80057d8 <pvPortMalloc>
 8003fe8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff6:	e005      	b.n	8004004 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ff8:	6978      	ldr	r0, [r7, #20]
 8003ffa:	f001 fcb9 	bl	8005970 <vPortFree>
 8003ffe:	e001      	b.n	8004004 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004000:	2300      	movs	r3, #0
 8004002:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d017      	beq.n	800403a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004012:	88fa      	ldrh	r2, [r7, #6]
 8004014:	2300      	movs	r3, #0
 8004016:	9303      	str	r3, [sp, #12]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	9302      	str	r3, [sp, #8]
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	9301      	str	r3, [sp, #4]
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f80e 	bl	800404a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800402e:	69f8      	ldr	r0, [r7, #28]
 8004030:	f000 f89a 	bl	8004168 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004034:	2301      	movs	r3, #1
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	e002      	b.n	8004040 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800403a:	f04f 33ff 	mov.w	r3, #4294967295
 800403e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004040:	69bb      	ldr	r3, [r7, #24]
	}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b088      	sub	sp, #32
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	461a      	mov	r2, r3
 8004062:	21a5      	movs	r1, #165	; 0xa5
 8004064:	f001 fdda 	bl	8005c1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004072:	3b01      	subs	r3, #1
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f023 0307 	bic.w	r3, r3, #7
 8004080:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <prvInitialiseNewTask+0x58>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	617b      	str	r3, [r7, #20]
}
 800409e:	bf00      	nop
 80040a0:	e7fe      	b.n	80040a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01f      	beq.n	80040e8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
 80040ac:	e012      	b.n	80040d4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	7819      	ldrb	r1, [r3, #0]
 80040b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	4413      	add	r3, r2
 80040bc:	3334      	adds	r3, #52	; 0x34
 80040be:	460a      	mov	r2, r1
 80040c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	4413      	add	r3, r2
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d006      	beq.n	80040dc <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3301      	adds	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b0f      	cmp	r3, #15
 80040d8:	d9e9      	bls.n	80040ae <prvInitialiseNewTask+0x64>
 80040da:	e000      	b.n	80040de <prvInitialiseNewTask+0x94>
			{
				break;
 80040dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040e6:	e003      	b.n	80040f0 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	2b37      	cmp	r3, #55	; 0x37
 80040f4:	d901      	bls.n	80040fa <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040f6:	2337      	movs	r3, #55	; 0x37
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004104:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	2200      	movs	r2, #0
 800410a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	3304      	adds	r3, #4
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff f8a3 	bl	800325c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	3318      	adds	r3, #24
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff f89e 	bl	800325c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004124:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004134:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	2200      	movs	r2, #0
 800413a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	68f9      	ldr	r1, [r7, #12]
 8004148:	69b8      	ldr	r0, [r7, #24]
 800414a:	f001 f8f3 	bl	8005334 <pxPortInitialiseStack>
 800414e:	4602      	mov	r2, r0
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004160:	bf00      	nop
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004170:	f001 fa10 	bl	8005594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004174:	4b2d      	ldr	r3, [pc, #180]	; (800422c <prvAddNewTaskToReadyList+0xc4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3301      	adds	r3, #1
 800417a:	4a2c      	ldr	r2, [pc, #176]	; (800422c <prvAddNewTaskToReadyList+0xc4>)
 800417c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800417e:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <prvAddNewTaskToReadyList+0xc8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004186:	4a2a      	ldr	r2, [pc, #168]	; (8004230 <prvAddNewTaskToReadyList+0xc8>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800418c:	4b27      	ldr	r3, [pc, #156]	; (800422c <prvAddNewTaskToReadyList+0xc4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d110      	bne.n	80041b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004194:	f000 fbe2 	bl	800495c <prvInitialiseTaskLists>
 8004198:	e00d      	b.n	80041b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800419a:	4b26      	ldr	r3, [pc, #152]	; (8004234 <prvAddNewTaskToReadyList+0xcc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041a2:	4b23      	ldr	r3, [pc, #140]	; (8004230 <prvAddNewTaskToReadyList+0xc8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d802      	bhi.n	80041b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041b0:	4a1f      	ldr	r2, [pc, #124]	; (8004230 <prvAddNewTaskToReadyList+0xc8>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041b6:	4b20      	ldr	r3, [pc, #128]	; (8004238 <prvAddNewTaskToReadyList+0xd0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3301      	adds	r3, #1
 80041bc:	4a1e      	ldr	r2, [pc, #120]	; (8004238 <prvAddNewTaskToReadyList+0xd0>)
 80041be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041c0:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <prvAddNewTaskToReadyList+0xd0>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <prvAddNewTaskToReadyList+0xd4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d903      	bls.n	80041dc <prvAddNewTaskToReadyList+0x74>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <prvAddNewTaskToReadyList+0xd4>)
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4a15      	ldr	r2, [pc, #84]	; (8004240 <prvAddNewTaskToReadyList+0xd8>)
 80041ea:	441a      	add	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3304      	adds	r3, #4
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f7ff f83f 	bl	8003276 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041f8:	f001 f9fc 	bl	80055f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041fc:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <prvAddNewTaskToReadyList+0xcc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <prvAddNewTaskToReadyList+0xc8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	429a      	cmp	r2, r3
 8004210:	d207      	bcs.n	8004222 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <prvAddNewTaskToReadyList+0xdc>)
 8004214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000cf4 	.word	0x20000cf4
 8004230:	20000820 	.word	0x20000820
 8004234:	20000d00 	.word	0x20000d00
 8004238:	20000d10 	.word	0x20000d10
 800423c:	20000cfc 	.word	0x20000cfc
 8004240:	20000824 	.word	0x20000824
 8004244:	e000ed04 	.word	0xe000ed04

08004248 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004256:	463a      	mov	r2, r7
 8004258:	1d39      	adds	r1, r7, #4
 800425a:	f107 0308 	add.w	r3, r7, #8
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe ffa8 	bl	80031b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004264:	6839      	ldr	r1, [r7, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	9202      	str	r2, [sp, #8]
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	2300      	movs	r3, #0
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	2300      	movs	r3, #0
 8004274:	460a      	mov	r2, r1
 8004276:	4921      	ldr	r1, [pc, #132]	; (80042fc <vTaskStartScheduler+0xb4>)
 8004278:	4821      	ldr	r0, [pc, #132]	; (8004300 <vTaskStartScheduler+0xb8>)
 800427a:	f7ff fe44 	bl	8003f06 <xTaskCreateStatic>
 800427e:	4603      	mov	r3, r0
 8004280:	4a20      	ldr	r2, [pc, #128]	; (8004304 <vTaskStartScheduler+0xbc>)
 8004282:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004284:	4b1f      	ldr	r3, [pc, #124]	; (8004304 <vTaskStartScheduler+0xbc>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800428c:	2301      	movs	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e001      	b.n	8004296 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d102      	bne.n	80042a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800429c:	f000 fcfc 	bl	8004c98 <xTimerCreateTimerTask>
 80042a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d116      	bne.n	80042d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	613b      	str	r3, [r7, #16]
}
 80042ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042bc:	4b12      	ldr	r3, [pc, #72]	; (8004308 <vTaskStartScheduler+0xc0>)
 80042be:	f04f 32ff 	mov.w	r2, #4294967295
 80042c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042c4:	4b11      	ldr	r3, [pc, #68]	; (800430c <vTaskStartScheduler+0xc4>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <vTaskStartScheduler+0xc8>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042d0:	f001 f8be 	bl	8005450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042d4:	e00e      	b.n	80042f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d10a      	bne.n	80042f4 <vTaskStartScheduler+0xac>
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	60fb      	str	r3, [r7, #12]
}
 80042f0:	bf00      	nop
 80042f2:	e7fe      	b.n	80042f2 <vTaskStartScheduler+0xaa>
}
 80042f4:	bf00      	nop
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	08006560 	.word	0x08006560
 8004300:	0800492d 	.word	0x0800492d
 8004304:	20000d18 	.word	0x20000d18
 8004308:	20000d14 	.word	0x20000d14
 800430c:	20000d00 	.word	0x20000d00
 8004310:	20000cf8 	.word	0x20000cf8

08004314 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <vTaskSuspendAll+0x18>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	4a03      	ldr	r2, [pc, #12]	; (800432c <vTaskSuspendAll+0x18>)
 8004320:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004322:	bf00      	nop
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	20000d1c 	.word	0x20000d1c

08004330 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800433e:	4b42      	ldr	r3, [pc, #264]	; (8004448 <xTaskResumeAll+0x118>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <xTaskResumeAll+0x2c>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	603b      	str	r3, [r7, #0]
}
 8004358:	bf00      	nop
 800435a:	e7fe      	b.n	800435a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800435c:	f001 f91a 	bl	8005594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004360:	4b39      	ldr	r3, [pc, #228]	; (8004448 <xTaskResumeAll+0x118>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3b01      	subs	r3, #1
 8004366:	4a38      	ldr	r2, [pc, #224]	; (8004448 <xTaskResumeAll+0x118>)
 8004368:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800436a:	4b37      	ldr	r3, [pc, #220]	; (8004448 <xTaskResumeAll+0x118>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d162      	bne.n	8004438 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004372:	4b36      	ldr	r3, [pc, #216]	; (800444c <xTaskResumeAll+0x11c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d05e      	beq.n	8004438 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800437a:	e02f      	b.n	80043dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800437c:	4b34      	ldr	r3, [pc, #208]	; (8004450 <xTaskResumeAll+0x120>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3318      	adds	r3, #24
 8004388:	4618      	mov	r0, r3
 800438a:	f7fe ffd1 	bl	8003330 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3304      	adds	r3, #4
 8004392:	4618      	mov	r0, r3
 8004394:	f7fe ffcc 	bl	8003330 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439c:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <xTaskResumeAll+0x124>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d903      	bls.n	80043ac <xTaskResumeAll+0x7c>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	4a2a      	ldr	r2, [pc, #168]	; (8004454 <xTaskResumeAll+0x124>)
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4a27      	ldr	r2, [pc, #156]	; (8004458 <xTaskResumeAll+0x128>)
 80043ba:	441a      	add	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3304      	adds	r3, #4
 80043c0:	4619      	mov	r1, r3
 80043c2:	4610      	mov	r0, r2
 80043c4:	f7fe ff57 	bl	8003276 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043cc:	4b23      	ldr	r3, [pc, #140]	; (800445c <xTaskResumeAll+0x12c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80043d6:	4b22      	ldr	r3, [pc, #136]	; (8004460 <xTaskResumeAll+0x130>)
 80043d8:	2201      	movs	r2, #1
 80043da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043dc:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <xTaskResumeAll+0x120>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1cb      	bne.n	800437c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043ea:	f000 fb55 	bl	8004a98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <xTaskResumeAll+0x134>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d010      	beq.n	800441c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043fa:	f000 f847 	bl	800448c <xTaskIncrementTick>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004404:	4b16      	ldr	r3, [pc, #88]	; (8004460 <xTaskResumeAll+0x130>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3b01      	subs	r3, #1
 800440e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f1      	bne.n	80043fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004416:	4b13      	ldr	r3, [pc, #76]	; (8004464 <xTaskResumeAll+0x134>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800441c:	4b10      	ldr	r3, [pc, #64]	; (8004460 <xTaskResumeAll+0x130>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004424:	2301      	movs	r3, #1
 8004426:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004428:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <xTaskResumeAll+0x138>)
 800442a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004438:	f001 f8dc 	bl	80055f4 <vPortExitCritical>

	return xAlreadyYielded;
 800443c:	68bb      	ldr	r3, [r7, #8]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000d1c 	.word	0x20000d1c
 800444c:	20000cf4 	.word	0x20000cf4
 8004450:	20000cb4 	.word	0x20000cb4
 8004454:	20000cfc 	.word	0x20000cfc
 8004458:	20000824 	.word	0x20000824
 800445c:	20000820 	.word	0x20000820
 8004460:	20000d08 	.word	0x20000d08
 8004464:	20000d04 	.word	0x20000d04
 8004468:	e000ed04 	.word	0xe000ed04

0800446c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004472:	4b05      	ldr	r3, [pc, #20]	; (8004488 <xTaskGetTickCount+0x1c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004478:	687b      	ldr	r3, [r7, #4]
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000cf8 	.word	0x20000cf8

0800448c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004496:	4b4f      	ldr	r3, [pc, #316]	; (80045d4 <xTaskIncrementTick+0x148>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f040 808f 	bne.w	80045be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044a0:	4b4d      	ldr	r3, [pc, #308]	; (80045d8 <xTaskIncrementTick+0x14c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044a8:	4a4b      	ldr	r2, [pc, #300]	; (80045d8 <xTaskIncrementTick+0x14c>)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d120      	bne.n	80044f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80044b4:	4b49      	ldr	r3, [pc, #292]	; (80045dc <xTaskIncrementTick+0x150>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	603b      	str	r3, [r7, #0]
}
 80044d0:	bf00      	nop
 80044d2:	e7fe      	b.n	80044d2 <xTaskIncrementTick+0x46>
 80044d4:	4b41      	ldr	r3, [pc, #260]	; (80045dc <xTaskIncrementTick+0x150>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	4b41      	ldr	r3, [pc, #260]	; (80045e0 <xTaskIncrementTick+0x154>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a3f      	ldr	r2, [pc, #252]	; (80045dc <xTaskIncrementTick+0x150>)
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4a3f      	ldr	r2, [pc, #252]	; (80045e0 <xTaskIncrementTick+0x154>)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	4b3e      	ldr	r3, [pc, #248]	; (80045e4 <xTaskIncrementTick+0x158>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	4a3d      	ldr	r2, [pc, #244]	; (80045e4 <xTaskIncrementTick+0x158>)
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	f000 fad1 	bl	8004a98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044f6:	4b3c      	ldr	r3, [pc, #240]	; (80045e8 <xTaskIncrementTick+0x15c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d349      	bcc.n	8004594 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004500:	4b36      	ldr	r3, [pc, #216]	; (80045dc <xTaskIncrementTick+0x150>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d104      	bne.n	8004514 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450a:	4b37      	ldr	r3, [pc, #220]	; (80045e8 <xTaskIncrementTick+0x15c>)
 800450c:	f04f 32ff 	mov.w	r2, #4294967295
 8004510:	601a      	str	r2, [r3, #0]
					break;
 8004512:	e03f      	b.n	8004594 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004514:	4b31      	ldr	r3, [pc, #196]	; (80045dc <xTaskIncrementTick+0x150>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	429a      	cmp	r2, r3
 800452a:	d203      	bcs.n	8004534 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800452c:	4a2e      	ldr	r2, [pc, #184]	; (80045e8 <xTaskIncrementTick+0x15c>)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004532:	e02f      	b.n	8004594 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	3304      	adds	r3, #4
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe fef9 	bl	8003330 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	2b00      	cmp	r3, #0
 8004544:	d004      	beq.n	8004550 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	3318      	adds	r3, #24
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe fef0 	bl	8003330 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004554:	4b25      	ldr	r3, [pc, #148]	; (80045ec <xTaskIncrementTick+0x160>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d903      	bls.n	8004564 <xTaskIncrementTick+0xd8>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	4a22      	ldr	r2, [pc, #136]	; (80045ec <xTaskIncrementTick+0x160>)
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4a1f      	ldr	r2, [pc, #124]	; (80045f0 <xTaskIncrementTick+0x164>)
 8004572:	441a      	add	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	3304      	adds	r3, #4
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f7fe fe7b 	bl	8003276 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <xTaskIncrementTick+0x168>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	429a      	cmp	r2, r3
 800458c:	d3b8      	bcc.n	8004500 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800458e:	2301      	movs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004592:	e7b5      	b.n	8004500 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004594:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <xTaskIncrementTick+0x168>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459a:	4915      	ldr	r1, [pc, #84]	; (80045f0 <xTaskIncrementTick+0x164>)
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d901      	bls.n	80045b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80045b0:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <xTaskIncrementTick+0x16c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80045b8:	2301      	movs	r3, #1
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e004      	b.n	80045c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <xTaskIncrementTick+0x170>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3301      	adds	r3, #1
 80045c4:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <xTaskIncrementTick+0x170>)
 80045c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80045c8:	697b      	ldr	r3, [r7, #20]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000d1c 	.word	0x20000d1c
 80045d8:	20000cf8 	.word	0x20000cf8
 80045dc:	20000cac 	.word	0x20000cac
 80045e0:	20000cb0 	.word	0x20000cb0
 80045e4:	20000d0c 	.word	0x20000d0c
 80045e8:	20000d14 	.word	0x20000d14
 80045ec:	20000cfc 	.word	0x20000cfc
 80045f0:	20000824 	.word	0x20000824
 80045f4:	20000820 	.word	0x20000820
 80045f8:	20000d08 	.word	0x20000d08
 80045fc:	20000d04 	.word	0x20000d04

08004600 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004606:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <vTaskSwitchContext+0xa8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800460e:	4b27      	ldr	r3, [pc, #156]	; (80046ac <vTaskSwitchContext+0xac>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004614:	e041      	b.n	800469a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004616:	4b25      	ldr	r3, [pc, #148]	; (80046ac <vTaskSwitchContext+0xac>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <vTaskSwitchContext+0xb0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	e010      	b.n	8004646 <vTaskSwitchContext+0x46>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <vTaskSwitchContext+0x40>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	607b      	str	r3, [r7, #4]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <vTaskSwitchContext+0x3e>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3b01      	subs	r3, #1
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	491b      	ldr	r1, [pc, #108]	; (80046b4 <vTaskSwitchContext+0xb4>)
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0e4      	beq.n	8004624 <vTaskSwitchContext+0x24>
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <vTaskSwitchContext+0xb4>)
 8004666:	4413      	add	r3, r2
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	3308      	adds	r3, #8
 800467c:	429a      	cmp	r2, r3
 800467e:	d104      	bne.n	800468a <vTaskSwitchContext+0x8a>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <vTaskSwitchContext+0xb8>)
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4a06      	ldr	r2, [pc, #24]	; (80046b0 <vTaskSwitchContext+0xb0>)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6013      	str	r3, [r2, #0]
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	20000d1c 	.word	0x20000d1c
 80046ac:	20000d08 	.word	0x20000d08
 80046b0:	20000cfc 	.word	0x20000cfc
 80046b4:	20000824 	.word	0x20000824
 80046b8:	20000820 	.word	0x20000820

080046bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	60fb      	str	r3, [r7, #12]
}
 80046de:	bf00      	nop
 80046e0:	e7fe      	b.n	80046e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046e2:	4b07      	ldr	r3, [pc, #28]	; (8004700 <vTaskPlaceOnEventList+0x44>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3318      	adds	r3, #24
 80046e8:	4619      	mov	r1, r3
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fe fde7 	bl	80032be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046f0:	2101      	movs	r1, #1
 80046f2:	6838      	ldr	r0, [r7, #0]
 80046f4:	f000 fa7c 	bl	8004bf0 <prvAddCurrentTaskToDelayedList>
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20000820 	.word	0x20000820

08004704 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10a      	bne.n	800472c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	617b      	str	r3, [r7, #20]
}
 8004728:	bf00      	nop
 800472a:	e7fe      	b.n	800472a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800472c:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <vTaskPlaceOnEventListRestricted+0x54>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3318      	adds	r3, #24
 8004732:	4619      	mov	r1, r3
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7fe fd9e 	bl	8003276 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004740:	f04f 33ff 	mov.w	r3, #4294967295
 8004744:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	68b8      	ldr	r0, [r7, #8]
 800474a:	f000 fa51 	bl	8004bf0 <prvAddCurrentTaskToDelayedList>
	}
 800474e:	bf00      	nop
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000820 	.word	0x20000820

0800475c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	60fb      	str	r3, [r7, #12]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	3318      	adds	r3, #24
 800478c:	4618      	mov	r0, r3
 800478e:	f7fe fdcf 	bl	8003330 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004792:	4b1e      	ldr	r3, [pc, #120]	; (800480c <xTaskRemoveFromEventList+0xb0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d11d      	bne.n	80047d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	3304      	adds	r3, #4
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe fdc6 	bl	8003330 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a8:	4b19      	ldr	r3, [pc, #100]	; (8004810 <xTaskRemoveFromEventList+0xb4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d903      	bls.n	80047b8 <xTaskRemoveFromEventList+0x5c>
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	4a16      	ldr	r2, [pc, #88]	; (8004810 <xTaskRemoveFromEventList+0xb4>)
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4a13      	ldr	r2, [pc, #76]	; (8004814 <xTaskRemoveFromEventList+0xb8>)
 80047c6:	441a      	add	r2, r3
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f7fe fd51 	bl	8003276 <vListInsertEnd>
 80047d4:	e005      	b.n	80047e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	3318      	adds	r3, #24
 80047da:	4619      	mov	r1, r3
 80047dc:	480e      	ldr	r0, [pc, #56]	; (8004818 <xTaskRemoveFromEventList+0xbc>)
 80047de:	f7fe fd4a 	bl	8003276 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	4b0d      	ldr	r3, [pc, #52]	; (800481c <xTaskRemoveFromEventList+0xc0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d905      	bls.n	80047fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047f4:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <xTaskRemoveFromEventList+0xc4>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	e001      	b.n	8004800 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004800:	697b      	ldr	r3, [r7, #20]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000d1c 	.word	0x20000d1c
 8004810:	20000cfc 	.word	0x20000cfc
 8004814:	20000824 	.word	0x20000824
 8004818:	20000cb4 	.word	0x20000cb4
 800481c:	20000820 	.word	0x20000820
 8004820:	20000d08 	.word	0x20000d08

08004824 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800482c:	4b06      	ldr	r3, [pc, #24]	; (8004848 <vTaskInternalSetTimeOutState+0x24>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <vTaskInternalSetTimeOutState+0x28>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	605a      	str	r2, [r3, #4]
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	20000d0c 	.word	0x20000d0c
 800484c:	20000cf8 	.word	0x20000cf8

08004850 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	613b      	str	r3, [r7, #16]
}
 8004872:	bf00      	nop
 8004874:	e7fe      	b.n	8004874 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	60fb      	str	r3, [r7, #12]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004892:	f000 fe7f 	bl	8005594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004896:	4b1d      	ldr	r3, [pc, #116]	; (800490c <xTaskCheckForTimeOut+0xbc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ae:	d102      	bne.n	80048b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	e023      	b.n	80048fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <xTaskCheckForTimeOut+0xc0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d007      	beq.n	80048d2 <xTaskCheckForTimeOut+0x82>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d302      	bcc.n	80048d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	e015      	b.n	80048fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d20b      	bcs.n	80048f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	1ad2      	subs	r2, r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff ff9b 	bl	8004824 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	e004      	b.n	80048fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048fa:	2301      	movs	r3, #1
 80048fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048fe:	f000 fe79 	bl	80055f4 <vPortExitCritical>

	return xReturn;
 8004902:	69fb      	ldr	r3, [r7, #28]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	20000cf8 	.word	0x20000cf8
 8004910:	20000d0c 	.word	0x20000d0c

08004914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <vTaskMissedYield+0x14>)
 800491a:	2201      	movs	r2, #1
 800491c:	601a      	str	r2, [r3, #0]
}
 800491e:	bf00      	nop
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	20000d08 	.word	0x20000d08

0800492c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004934:	f000 f852 	bl	80049dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004938:	4b06      	ldr	r3, [pc, #24]	; (8004954 <prvIdleTask+0x28>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d9f9      	bls.n	8004934 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <prvIdleTask+0x2c>)
 8004942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004950:	e7f0      	b.n	8004934 <prvIdleTask+0x8>
 8004952:	bf00      	nop
 8004954:	20000824 	.word	0x20000824
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004962:	2300      	movs	r3, #0
 8004964:	607b      	str	r3, [r7, #4]
 8004966:	e00c      	b.n	8004982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4a12      	ldr	r2, [pc, #72]	; (80049bc <prvInitialiseTaskLists+0x60>)
 8004974:	4413      	add	r3, r2
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fc50 	bl	800321c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3301      	adds	r3, #1
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b37      	cmp	r3, #55	; 0x37
 8004986:	d9ef      	bls.n	8004968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004988:	480d      	ldr	r0, [pc, #52]	; (80049c0 <prvInitialiseTaskLists+0x64>)
 800498a:	f7fe fc47 	bl	800321c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800498e:	480d      	ldr	r0, [pc, #52]	; (80049c4 <prvInitialiseTaskLists+0x68>)
 8004990:	f7fe fc44 	bl	800321c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004994:	480c      	ldr	r0, [pc, #48]	; (80049c8 <prvInitialiseTaskLists+0x6c>)
 8004996:	f7fe fc41 	bl	800321c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800499a:	480c      	ldr	r0, [pc, #48]	; (80049cc <prvInitialiseTaskLists+0x70>)
 800499c:	f7fe fc3e 	bl	800321c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049a0:	480b      	ldr	r0, [pc, #44]	; (80049d0 <prvInitialiseTaskLists+0x74>)
 80049a2:	f7fe fc3b 	bl	800321c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <prvInitialiseTaskLists+0x78>)
 80049a8:	4a05      	ldr	r2, [pc, #20]	; (80049c0 <prvInitialiseTaskLists+0x64>)
 80049aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <prvInitialiseTaskLists+0x7c>)
 80049ae:	4a05      	ldr	r2, [pc, #20]	; (80049c4 <prvInitialiseTaskLists+0x68>)
 80049b0:	601a      	str	r2, [r3, #0]
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000824 	.word	0x20000824
 80049c0:	20000c84 	.word	0x20000c84
 80049c4:	20000c98 	.word	0x20000c98
 80049c8:	20000cb4 	.word	0x20000cb4
 80049cc:	20000cc8 	.word	0x20000cc8
 80049d0:	20000ce0 	.word	0x20000ce0
 80049d4:	20000cac 	.word	0x20000cac
 80049d8:	20000cb0 	.word	0x20000cb0

080049dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049e2:	e019      	b.n	8004a18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049e4:	f000 fdd6 	bl	8005594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e8:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <prvCheckTasksWaitingTermination+0x50>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe fc9b 	bl	8003330 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049fa:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <prvCheckTasksWaitingTermination+0x54>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <prvCheckTasksWaitingTermination+0x54>)
 8004a02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <prvCheckTasksWaitingTermination+0x58>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <prvCheckTasksWaitingTermination+0x58>)
 8004a0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a0e:	f000 fdf1 	bl	80055f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f810 	bl	8004a38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <prvCheckTasksWaitingTermination+0x58>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e1      	bne.n	80049e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000cc8 	.word	0x20000cc8
 8004a30:	20000cf4 	.word	0x20000cf4
 8004a34:	20000cdc 	.word	0x20000cdc

08004a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d108      	bne.n	8004a5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 ff8e 	bl	8005970 <vPortFree>
				vPortFree( pxTCB );
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 ff8b 	bl	8005970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a5a:	e018      	b.n	8004a8e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d103      	bne.n	8004a6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 ff82 	bl	8005970 <vPortFree>
	}
 8004a6c:	e00f      	b.n	8004a8e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d00a      	beq.n	8004a8e <prvDeleteTCB+0x56>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	60fb      	str	r3, [r7, #12]
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <prvDeleteTCB+0x54>
	}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <prvResetNextTaskUnblockTime+0x38>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <prvResetNextTaskUnblockTime+0x3c>)
 8004aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004aae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ab0:	e008      	b.n	8004ac4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab2:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <prvResetNextTaskUnblockTime+0x38>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <prvResetNextTaskUnblockTime+0x3c>)
 8004ac2:	6013      	str	r3, [r2, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	20000cac 	.word	0x20000cac
 8004ad4:	20000d14 	.word	0x20000d14

08004ad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <xTaskGetSchedulerState+0x34>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	e008      	b.n	8004afe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aec:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <xTaskGetSchedulerState+0x38>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d102      	bne.n	8004afa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004af4:	2302      	movs	r3, #2
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	e001      	b.n	8004afe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004afa:	2300      	movs	r3, #0
 8004afc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004afe:	687b      	ldr	r3, [r7, #4]
	}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	20000d00 	.word	0x20000d00
 8004b10:	20000d1c 	.word	0x20000d1c

08004b14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b20:	2300      	movs	r3, #0
 8004b22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d056      	beq.n	8004bd8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b2a:	4b2e      	ldr	r3, [pc, #184]	; (8004be4 <xTaskPriorityDisinherit+0xd0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d00a      	beq.n	8004b4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	60fb      	str	r3, [r7, #12]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	60bb      	str	r3, [r7, #8]
}
 8004b64:	bf00      	nop
 8004b66:	e7fe      	b.n	8004b66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6c:	1e5a      	subs	r2, r3, #1
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d02c      	beq.n	8004bd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d128      	bne.n	8004bd8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe fbd0 	bl	8003330 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <xTaskPriorityDisinherit+0xd4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d903      	bls.n	8004bb8 <xTaskPriorityDisinherit+0xa4>
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	4a0c      	ldr	r2, [pc, #48]	; (8004be8 <xTaskPriorityDisinherit+0xd4>)
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4a09      	ldr	r2, [pc, #36]	; (8004bec <xTaskPriorityDisinherit+0xd8>)
 8004bc6:	441a      	add	r2, r3
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	f7fe fb51 	bl	8003276 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bd8:	697b      	ldr	r3, [r7, #20]
	}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000820 	.word	0x20000820
 8004be8:	20000cfc 	.word	0x20000cfc
 8004bec:	20000824 	.word	0x20000824

08004bf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bfa:	4b21      	ldr	r3, [pc, #132]	; (8004c80 <prvAddCurrentTaskToDelayedList+0x90>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c00:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe fb92 	bl	8003330 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d10a      	bne.n	8004c2a <prvAddCurrentTaskToDelayedList+0x3a>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c1a:	4b1a      	ldr	r3, [pc, #104]	; (8004c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	4619      	mov	r1, r3
 8004c22:	4819      	ldr	r0, [pc, #100]	; (8004c88 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c24:	f7fe fb27 	bl	8003276 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c28:	e026      	b.n	8004c78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c32:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d209      	bcs.n	8004c56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c42:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f7fe fb35 	bl	80032be <vListInsert>
}
 8004c54:	e010      	b.n	8004c78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c56:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3304      	adds	r3, #4
 8004c60:	4619      	mov	r1, r3
 8004c62:	4610      	mov	r0, r2
 8004c64:	f7fe fb2b 	bl	80032be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d202      	bcs.n	8004c78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c72:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6013      	str	r3, [r2, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000cf8 	.word	0x20000cf8
 8004c84:	20000820 	.word	0x20000820
 8004c88:	20000ce0 	.word	0x20000ce0
 8004c8c:	20000cb0 	.word	0x20000cb0
 8004c90:	20000cac 	.word	0x20000cac
 8004c94:	20000d14 	.word	0x20000d14

08004c98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08a      	sub	sp, #40	; 0x28
 8004c9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ca2:	f000 fb07 	bl	80052b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ca6:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <xTimerCreateTimerTask+0x80>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d021      	beq.n	8004cf2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004cb6:	1d3a      	adds	r2, r7, #4
 8004cb8:	f107 0108 	add.w	r1, r7, #8
 8004cbc:	f107 030c 	add.w	r3, r7, #12
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fe fa91 	bl	80031e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	9202      	str	r2, [sp, #8]
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	460a      	mov	r2, r1
 8004cd8:	4910      	ldr	r1, [pc, #64]	; (8004d1c <xTimerCreateTimerTask+0x84>)
 8004cda:	4811      	ldr	r0, [pc, #68]	; (8004d20 <xTimerCreateTimerTask+0x88>)
 8004cdc:	f7ff f913 	bl	8003f06 <xTaskCreateStatic>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4a10      	ldr	r2, [pc, #64]	; (8004d24 <xTimerCreateTimerTask+0x8c>)
 8004ce4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ce6:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <xTimerCreateTimerTask+0x8c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	613b      	str	r3, [r7, #16]
}
 8004d0a:	bf00      	nop
 8004d0c:	e7fe      	b.n	8004d0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d0e:	697b      	ldr	r3, [r7, #20]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000d50 	.word	0x20000d50
 8004d1c:	08006568 	.word	0x08006568
 8004d20:	08004e5d 	.word	0x08004e5d
 8004d24:	20000d54 	.word	0x20000d54

08004d28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08a      	sub	sp, #40	; 0x28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	623b      	str	r3, [r7, #32]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d56:	4b1a      	ldr	r3, [pc, #104]	; (8004dc0 <xTimerGenericCommand+0x98>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d02a      	beq.n	8004db4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b05      	cmp	r3, #5
 8004d6e:	dc18      	bgt.n	8004da2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d70:	f7ff feb2 	bl	8004ad8 <xTaskGetSchedulerState>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d109      	bne.n	8004d8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d7a:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <xTimerGenericCommand+0x98>)
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	f107 0110 	add.w	r1, r7, #16
 8004d82:	2300      	movs	r3, #0
 8004d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d86:	f7fe fc3d 	bl	8003604 <xQueueGenericSend>
 8004d8a:	6278      	str	r0, [r7, #36]	; 0x24
 8004d8c:	e012      	b.n	8004db4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <xTimerGenericCommand+0x98>)
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	f107 0110 	add.w	r1, r7, #16
 8004d96:	2300      	movs	r3, #0
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f7fe fc33 	bl	8003604 <xQueueGenericSend>
 8004d9e:	6278      	str	r0, [r7, #36]	; 0x24
 8004da0:	e008      	b.n	8004db4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004da2:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <xTimerGenericCommand+0x98>)
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	f107 0110 	add.w	r1, r7, #16
 8004daa:	2300      	movs	r3, #0
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	f7fe fd43 	bl	8003838 <xQueueGenericSendFromISR>
 8004db2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3728      	adds	r7, #40	; 0x28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000d50 	.word	0x20000d50

08004dc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dce:	4b22      	ldr	r3, [pc, #136]	; (8004e58 <prvProcessExpiredTimer+0x94>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fe faa7 	bl	8003330 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d022      	beq.n	8004e36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	699a      	ldr	r2, [r3, #24]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	18d1      	adds	r1, r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	6978      	ldr	r0, [r7, #20]
 8004dfe:	f000 f8d1 	bl	8004fa4 <prvInsertTimerInActiveList>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01f      	beq.n	8004e48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e08:	2300      	movs	r3, #0
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	2100      	movs	r1, #0
 8004e12:	6978      	ldr	r0, [r7, #20]
 8004e14:	f7ff ff88 	bl	8004d28 <xTimerGenericCommand>
 8004e18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d113      	bne.n	8004e48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	60fb      	str	r3, [r7, #12]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e3c:	f023 0301 	bic.w	r3, r3, #1
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	6978      	ldr	r0, [r7, #20]
 8004e4e:	4798      	blx	r3
}
 8004e50:	bf00      	nop
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000d48 	.word	0x20000d48

08004e5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e64:	f107 0308 	add.w	r3, r7, #8
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 f857 	bl	8004f1c <prvGetNextExpireTime>
 8004e6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4619      	mov	r1, r3
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f803 	bl	8004e80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e7a:	f000 f8d5 	bl	8005028 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e7e:	e7f1      	b.n	8004e64 <prvTimerTask+0x8>

08004e80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e8a:	f7ff fa43 	bl	8004314 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e8e:	f107 0308 	add.w	r3, r7, #8
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f866 	bl	8004f64 <prvSampleTimeNow>
 8004e98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d130      	bne.n	8004f02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10a      	bne.n	8004ebc <prvProcessTimerOrBlockTask+0x3c>
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d806      	bhi.n	8004ebc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004eae:	f7ff fa3f 	bl	8004330 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004eb2:	68f9      	ldr	r1, [r7, #12]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff ff85 	bl	8004dc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004eba:	e024      	b.n	8004f06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d008      	beq.n	8004ed4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ec2:	4b13      	ldr	r3, [pc, #76]	; (8004f10 <prvProcessTimerOrBlockTask+0x90>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <prvProcessTimerOrBlockTask+0x50>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <prvProcessTimerOrBlockTask+0x52>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <prvProcessTimerOrBlockTask+0x94>)
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f7fe ff83 	bl	8003dec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ee6:	f7ff fa23 	bl	8004330 <xTaskResumeAll>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ef0:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <prvProcessTimerOrBlockTask+0x98>)
 8004ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	f3bf 8f6f 	isb	sy
}
 8004f00:	e001      	b.n	8004f06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f02:	f7ff fa15 	bl	8004330 <xTaskResumeAll>
}
 8004f06:	bf00      	nop
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000d4c 	.word	0x20000d4c
 8004f14:	20000d50 	.word	0x20000d50
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f24:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <prvGetNextExpireTime+0x44>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <prvGetNextExpireTime+0x16>
 8004f2e:	2201      	movs	r2, #1
 8004f30:	e000      	b.n	8004f34 <prvGetNextExpireTime+0x18>
 8004f32:	2200      	movs	r2, #0
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d105      	bne.n	8004f4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <prvGetNextExpireTime+0x44>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e001      	b.n	8004f50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f50:	68fb      	ldr	r3, [r7, #12]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000d48 	.word	0x20000d48

08004f64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f6c:	f7ff fa7e 	bl	800446c <xTaskGetTickCount>
 8004f70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f72:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <prvSampleTimeNow+0x3c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d205      	bcs.n	8004f88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f7c:	f000 f936 	bl	80051ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e002      	b.n	8004f8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f8e:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <prvSampleTimeNow+0x3c>)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f94:	68fb      	ldr	r3, [r7, #12]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000d58 	.word	0x20000d58

08004fa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d812      	bhi.n	8004ff0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	1ad2      	subs	r2, r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d302      	bcc.n	8004fde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	e01b      	b.n	8005016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004fde:	4b10      	ldr	r3, [pc, #64]	; (8005020 <prvInsertTimerInActiveList+0x7c>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f7fe f968 	bl	80032be <vListInsert>
 8004fee:	e012      	b.n	8005016 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d206      	bcs.n	8005006 <prvInsertTimerInActiveList+0x62>
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d302      	bcc.n	8005006 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005000:	2301      	movs	r3, #1
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	e007      	b.n	8005016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005006:	4b07      	ldr	r3, [pc, #28]	; (8005024 <prvInsertTimerInActiveList+0x80>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3304      	adds	r3, #4
 800500e:	4619      	mov	r1, r3
 8005010:	4610      	mov	r0, r2
 8005012:	f7fe f954 	bl	80032be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005016:	697b      	ldr	r3, [r7, #20]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000d4c 	.word	0x20000d4c
 8005024:	20000d48 	.word	0x20000d48

08005028 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08e      	sub	sp, #56	; 0x38
 800502c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800502e:	e0ca      	b.n	80051c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	da18      	bge.n	8005068 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005036:	1d3b      	adds	r3, r7, #4
 8005038:	3304      	adds	r3, #4
 800503a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	61fb      	str	r3, [r7, #28]
}
 8005054:	bf00      	nop
 8005056:	e7fe      	b.n	8005056 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800505e:	6850      	ldr	r0, [r2, #4]
 8005060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005062:	6892      	ldr	r2, [r2, #8]
 8005064:	4611      	mov	r1, r2
 8005066:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	f2c0 80aa 	blt.w	80051c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	3304      	adds	r3, #4
 8005080:	4618      	mov	r0, r3
 8005082:	f7fe f955 	bl	8003330 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005086:	463b      	mov	r3, r7
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff ff6b 	bl	8004f64 <prvSampleTimeNow>
 800508e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b09      	cmp	r3, #9
 8005094:	f200 8097 	bhi.w	80051c6 <prvProcessReceivedCommands+0x19e>
 8005098:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <prvProcessReceivedCommands+0x78>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	080050c9 	.word	0x080050c9
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080050c9 	.word	0x080050c9
 80050ac:	0800513d 	.word	0x0800513d
 80050b0:	08005151 	.word	0x08005151
 80050b4:	0800519b 	.word	0x0800519b
 80050b8:	080050c9 	.word	0x080050c9
 80050bc:	080050c9 	.word	0x080050c9
 80050c0:	0800513d 	.word	0x0800513d
 80050c4:	08005151 	.word	0x08005151
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	18d1      	adds	r1, r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e8:	f7ff ff5c 	bl	8004fa4 <prvInsertTimerInActiveList>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d069      	beq.n	80051c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d05e      	beq.n	80051c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	441a      	add	r2, r3
 8005110:	2300      	movs	r3, #0
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	2300      	movs	r3, #0
 8005116:	2100      	movs	r1, #0
 8005118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800511a:	f7ff fe05 	bl	8004d28 <xTimerGenericCommand>
 800511e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d14f      	bne.n	80051c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	61bb      	str	r3, [r7, #24]
}
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	b2da      	uxtb	r2, r3
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800514e:	e03a      	b.n	80051c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	b2da      	uxtb	r2, r3
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	617b      	str	r3, [r7, #20]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	18d1      	adds	r1, r2, r3
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005194:	f7ff ff06 	bl	8004fa4 <prvInsertTimerInActiveList>
					break;
 8005198:	e015      	b.n	80051c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d103      	bne.n	80051b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80051a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051aa:	f000 fbe1 	bl	8005970 <vPortFree>
 80051ae:	e00a      	b.n	80051c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051c2:	e000      	b.n	80051c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80051c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051c6:	4b08      	ldr	r3, [pc, #32]	; (80051e8 <prvProcessReceivedCommands+0x1c0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	1d39      	adds	r1, r7, #4
 80051cc:	2200      	movs	r2, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe fbe4 	bl	800399c <xQueueReceive>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f47f af2a 	bne.w	8005030 <prvProcessReceivedCommands+0x8>
	}
}
 80051dc:	bf00      	nop
 80051de:	bf00      	nop
 80051e0:	3730      	adds	r7, #48	; 0x30
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000d50 	.word	0x20000d50

080051ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051f2:	e048      	b.n	8005286 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051f4:	4b2d      	ldr	r3, [pc, #180]	; (80052ac <prvSwitchTimerLists+0xc0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051fe:	4b2b      	ldr	r3, [pc, #172]	; (80052ac <prvSwitchTimerLists+0xc0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3304      	adds	r3, #4
 800520c:	4618      	mov	r0, r3
 800520e:	f7fe f88f 	bl	8003330 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d02e      	beq.n	8005286 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4413      	add	r3, r2
 8005230:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	429a      	cmp	r2, r3
 8005238:	d90e      	bls.n	8005258 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005246:	4b19      	ldr	r3, [pc, #100]	; (80052ac <prvSwitchTimerLists+0xc0>)
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3304      	adds	r3, #4
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f7fe f834 	bl	80032be <vListInsert>
 8005256:	e016      	b.n	8005286 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005258:	2300      	movs	r3, #0
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	2300      	movs	r3, #0
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	2100      	movs	r1, #0
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7ff fd60 	bl	8004d28 <xTimerGenericCommand>
 8005268:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	603b      	str	r3, [r7, #0]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <prvSwitchTimerLists+0xc0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1b1      	bne.n	80051f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005290:	4b06      	ldr	r3, [pc, #24]	; (80052ac <prvSwitchTimerLists+0xc0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <prvSwitchTimerLists+0xc4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a04      	ldr	r2, [pc, #16]	; (80052ac <prvSwitchTimerLists+0xc0>)
 800529c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800529e:	4a04      	ldr	r2, [pc, #16]	; (80052b0 <prvSwitchTimerLists+0xc4>)
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	6013      	str	r3, [r2, #0]
}
 80052a4:	bf00      	nop
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000d48 	.word	0x20000d48
 80052b0:	20000d4c 	.word	0x20000d4c

080052b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80052ba:	f000 f96b 	bl	8005594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80052be:	4b15      	ldr	r3, [pc, #84]	; (8005314 <prvCheckForValidListAndQueue+0x60>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d120      	bne.n	8005308 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80052c6:	4814      	ldr	r0, [pc, #80]	; (8005318 <prvCheckForValidListAndQueue+0x64>)
 80052c8:	f7fd ffa8 	bl	800321c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80052cc:	4813      	ldr	r0, [pc, #76]	; (800531c <prvCheckForValidListAndQueue+0x68>)
 80052ce:	f7fd ffa5 	bl	800321c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80052d2:	4b13      	ldr	r3, [pc, #76]	; (8005320 <prvCheckForValidListAndQueue+0x6c>)
 80052d4:	4a10      	ldr	r2, [pc, #64]	; (8005318 <prvCheckForValidListAndQueue+0x64>)
 80052d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80052d8:	4b12      	ldr	r3, [pc, #72]	; (8005324 <prvCheckForValidListAndQueue+0x70>)
 80052da:	4a10      	ldr	r2, [pc, #64]	; (800531c <prvCheckForValidListAndQueue+0x68>)
 80052dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80052de:	2300      	movs	r3, #0
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	4b11      	ldr	r3, [pc, #68]	; (8005328 <prvCheckForValidListAndQueue+0x74>)
 80052e4:	4a11      	ldr	r2, [pc, #68]	; (800532c <prvCheckForValidListAndQueue+0x78>)
 80052e6:	2110      	movs	r1, #16
 80052e8:	200a      	movs	r0, #10
 80052ea:	f7fe f8b3 	bl	8003454 <xQueueGenericCreateStatic>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4a08      	ldr	r2, [pc, #32]	; (8005314 <prvCheckForValidListAndQueue+0x60>)
 80052f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052f4:	4b07      	ldr	r3, [pc, #28]	; (8005314 <prvCheckForValidListAndQueue+0x60>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <prvCheckForValidListAndQueue+0x60>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	490b      	ldr	r1, [pc, #44]	; (8005330 <prvCheckForValidListAndQueue+0x7c>)
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe fd48 	bl	8003d98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005308:	f000 f974 	bl	80055f4 <vPortExitCritical>
}
 800530c:	bf00      	nop
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000d50 	.word	0x20000d50
 8005318:	20000d20 	.word	0x20000d20
 800531c:	20000d34 	.word	0x20000d34
 8005320:	20000d48 	.word	0x20000d48
 8005324:	20000d4c 	.word	0x20000d4c
 8005328:	20000dfc 	.word	0x20000dfc
 800532c:	20000d5c 	.word	0x20000d5c
 8005330:	08006570 	.word	0x08006570

08005334 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3b04      	subs	r3, #4
 8005344:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800534c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3b04      	subs	r3, #4
 8005352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f023 0201 	bic.w	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3b04      	subs	r3, #4
 8005362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005364:	4a0c      	ldr	r2, [pc, #48]	; (8005398 <pxPortInitialiseStack+0x64>)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3b14      	subs	r3, #20
 800536e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3b04      	subs	r3, #4
 800537a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f06f 0202 	mvn.w	r2, #2
 8005382:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3b20      	subs	r3, #32
 8005388:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800538a:	68fb      	ldr	r3, [r7, #12]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	0800539d 	.word	0x0800539d

0800539c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <prvTaskExitError+0x54>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ae:	d00a      	beq.n	80053c6 <prvTaskExitError+0x2a>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	60fb      	str	r3, [r7, #12]
}
 80053c2:	bf00      	nop
 80053c4:	e7fe      	b.n	80053c4 <prvTaskExitError+0x28>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	60bb      	str	r3, [r7, #8]
}
 80053d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053da:	bf00      	nop
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0fc      	beq.n	80053dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	2000000c 	.word	0x2000000c
	...

08005400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <pxCurrentTCBConst2>)
 8005402:	6819      	ldr	r1, [r3, #0]
 8005404:	6808      	ldr	r0, [r1, #0]
 8005406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540a:	f380 8809 	msr	PSP, r0
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f380 8811 	msr	BASEPRI, r0
 800541a:	4770      	bx	lr
 800541c:	f3af 8000 	nop.w

08005420 <pxCurrentTCBConst2>:
 8005420:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop

08005428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005428:	4808      	ldr	r0, [pc, #32]	; (800544c <prvPortStartFirstTask+0x24>)
 800542a:	6800      	ldr	r0, [r0, #0]
 800542c:	6800      	ldr	r0, [r0, #0]
 800542e:	f380 8808 	msr	MSP, r0
 8005432:	f04f 0000 	mov.w	r0, #0
 8005436:	f380 8814 	msr	CONTROL, r0
 800543a:	b662      	cpsie	i
 800543c:	b661      	cpsie	f
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	df00      	svc	0
 8005448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800544a:	bf00      	nop
 800544c:	e000ed08 	.word	0xe000ed08

08005450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005456:	4b46      	ldr	r3, [pc, #280]	; (8005570 <xPortStartScheduler+0x120>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a46      	ldr	r2, [pc, #280]	; (8005574 <xPortStartScheduler+0x124>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10a      	bne.n	8005476 <xPortStartScheduler+0x26>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	613b      	str	r3, [r7, #16]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005476:	4b3e      	ldr	r3, [pc, #248]	; (8005570 <xPortStartScheduler+0x120>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a3f      	ldr	r2, [pc, #252]	; (8005578 <xPortStartScheduler+0x128>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d10a      	bne.n	8005496 <xPortStartScheduler+0x46>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60fb      	str	r3, [r7, #12]
}
 8005492:	bf00      	nop
 8005494:	e7fe      	b.n	8005494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005496:	4b39      	ldr	r3, [pc, #228]	; (800557c <xPortStartScheduler+0x12c>)
 8005498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	22ff      	movs	r2, #255	; 0xff
 80054a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	4b31      	ldr	r3, [pc, #196]	; (8005580 <xPortStartScheduler+0x130>)
 80054bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054be:	4b31      	ldr	r3, [pc, #196]	; (8005584 <xPortStartScheduler+0x134>)
 80054c0:	2207      	movs	r2, #7
 80054c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054c4:	e009      	b.n	80054da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80054c6:	4b2f      	ldr	r3, [pc, #188]	; (8005584 <xPortStartScheduler+0x134>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	4a2d      	ldr	r2, [pc, #180]	; (8005584 <xPortStartScheduler+0x134>)
 80054ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e2:	2b80      	cmp	r3, #128	; 0x80
 80054e4:	d0ef      	beq.n	80054c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054e6:	4b27      	ldr	r3, [pc, #156]	; (8005584 <xPortStartScheduler+0x134>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f1c3 0307 	rsb	r3, r3, #7
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d00a      	beq.n	8005508 <xPortStartScheduler+0xb8>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	60bb      	str	r3, [r7, #8]
}
 8005504:	bf00      	nop
 8005506:	e7fe      	b.n	8005506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005508:	4b1e      	ldr	r3, [pc, #120]	; (8005584 <xPortStartScheduler+0x134>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <xPortStartScheduler+0x134>)
 8005510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005512:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <xPortStartScheduler+0x134>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800551a:	4a1a      	ldr	r2, [pc, #104]	; (8005584 <xPortStartScheduler+0x134>)
 800551c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	b2da      	uxtb	r2, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005526:	4b18      	ldr	r3, [pc, #96]	; (8005588 <xPortStartScheduler+0x138>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a17      	ldr	r2, [pc, #92]	; (8005588 <xPortStartScheduler+0x138>)
 800552c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <xPortStartScheduler+0x138>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a14      	ldr	r2, [pc, #80]	; (8005588 <xPortStartScheduler+0x138>)
 8005538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800553c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800553e:	f000 f8dd 	bl	80056fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005542:	4b12      	ldr	r3, [pc, #72]	; (800558c <xPortStartScheduler+0x13c>)
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005548:	f000 f8fc 	bl	8005744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800554c:	4b10      	ldr	r3, [pc, #64]	; (8005590 <xPortStartScheduler+0x140>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a0f      	ldr	r2, [pc, #60]	; (8005590 <xPortStartScheduler+0x140>)
 8005552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005558:	f7ff ff66 	bl	8005428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800555c:	f7ff f850 	bl	8004600 <vTaskSwitchContext>
	prvTaskExitError();
 8005560:	f7ff ff1c 	bl	800539c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	e000ed00 	.word	0xe000ed00
 8005574:	410fc271 	.word	0x410fc271
 8005578:	410fc270 	.word	0x410fc270
 800557c:	e000e400 	.word	0xe000e400
 8005580:	20000e50 	.word	0x20000e50
 8005584:	20000e54 	.word	0x20000e54
 8005588:	e000ed20 	.word	0xe000ed20
 800558c:	2000000c 	.word	0x2000000c
 8005590:	e000ef34 	.word	0xe000ef34

08005594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	607b      	str	r3, [r7, #4]
}
 80055ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055ae:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <vPortEnterCritical+0x58>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3301      	adds	r3, #1
 80055b4:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <vPortEnterCritical+0x58>)
 80055b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <vPortEnterCritical+0x58>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d10f      	bne.n	80055e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <vPortEnterCritical+0x5c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	603b      	str	r3, [r7, #0]
}
 80055dc:	bf00      	nop
 80055de:	e7fe      	b.n	80055de <vPortEnterCritical+0x4a>
	}
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	2000000c 	.word	0x2000000c
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055fa:	4b12      	ldr	r3, [pc, #72]	; (8005644 <vPortExitCritical+0x50>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <vPortExitCritical+0x24>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	607b      	str	r3, [r7, #4]
}
 8005614:	bf00      	nop
 8005616:	e7fe      	b.n	8005616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <vPortExitCritical+0x50>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3b01      	subs	r3, #1
 800561e:	4a09      	ldr	r2, [pc, #36]	; (8005644 <vPortExitCritical+0x50>)
 8005620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <vPortExitCritical+0x50>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d105      	bne.n	8005636 <vPortExitCritical+0x42>
 800562a:	2300      	movs	r3, #0
 800562c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f383 8811 	msr	BASEPRI, r3
}
 8005634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	2000000c 	.word	0x2000000c
	...

08005650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005650:	f3ef 8009 	mrs	r0, PSP
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	4b15      	ldr	r3, [pc, #84]	; (80056b0 <pxCurrentTCBConst>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	f01e 0f10 	tst.w	lr, #16
 8005660:	bf08      	it	eq
 8005662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566a:	6010      	str	r0, [r2, #0]
 800566c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005674:	f380 8811 	msr	BASEPRI, r0
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f7fe ffbe 	bl	8004600 <vTaskSwitchContext>
 8005684:	f04f 0000 	mov.w	r0, #0
 8005688:	f380 8811 	msr	BASEPRI, r0
 800568c:	bc09      	pop	{r0, r3}
 800568e:	6819      	ldr	r1, [r3, #0]
 8005690:	6808      	ldr	r0, [r1, #0]
 8005692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005696:	f01e 0f10 	tst.w	lr, #16
 800569a:	bf08      	it	eq
 800569c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056a0:	f380 8809 	msr	PSP, r0
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	f3af 8000 	nop.w

080056b0 <pxCurrentTCBConst>:
 80056b0:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop

080056b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	607b      	str	r3, [r7, #4]
}
 80056d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056d2:	f7fe fedb 	bl	800448c <xTaskIncrementTick>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <xPortSysTickHandler+0x40>)
 80056de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	2300      	movs	r3, #0
 80056e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f383 8811 	msr	BASEPRI, r3
}
 80056ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	e000ed04 	.word	0xe000ed04

080056fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <vPortSetupTimerInterrupt+0x34>)
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <vPortSetupTimerInterrupt+0x38>)
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <vPortSetupTimerInterrupt+0x3c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a0a      	ldr	r2, [pc, #40]	; (800573c <vPortSetupTimerInterrupt+0x40>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	099b      	lsrs	r3, r3, #6
 8005718:	4a09      	ldr	r2, [pc, #36]	; (8005740 <vPortSetupTimerInterrupt+0x44>)
 800571a:	3b01      	subs	r3, #1
 800571c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800571e:	4b04      	ldr	r3, [pc, #16]	; (8005730 <vPortSetupTimerInterrupt+0x34>)
 8005720:	2207      	movs	r2, #7
 8005722:	601a      	str	r2, [r3, #0]
}
 8005724:	bf00      	nop
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	e000e010 	.word	0xe000e010
 8005734:	e000e018 	.word	0xe000e018
 8005738:	20000000 	.word	0x20000000
 800573c:	10624dd3 	.word	0x10624dd3
 8005740:	e000e014 	.word	0xe000e014

08005744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005754 <vPortEnableVFP+0x10>
 8005748:	6801      	ldr	r1, [r0, #0]
 800574a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800574e:	6001      	str	r1, [r0, #0]
 8005750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005752:	bf00      	nop
 8005754:	e000ed88 	.word	0xe000ed88

08005758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800575e:	f3ef 8305 	mrs	r3, IPSR
 8005762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b0f      	cmp	r3, #15
 8005768:	d914      	bls.n	8005794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800576a:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <vPortValidateInterruptPriority+0x70>)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005774:	4b15      	ldr	r3, [pc, #84]	; (80057cc <vPortValidateInterruptPriority+0x74>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	7afa      	ldrb	r2, [r7, #11]
 800577a:	429a      	cmp	r2, r3
 800577c:	d20a      	bcs.n	8005794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	607b      	str	r3, [r7, #4]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005794:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <vPortValidateInterruptPriority+0x78>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800579c:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <vPortValidateInterruptPriority+0x7c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d90a      	bls.n	80057ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	603b      	str	r3, [r7, #0]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <vPortValidateInterruptPriority+0x60>
	}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	e000e3f0 	.word	0xe000e3f0
 80057cc:	20000e50 	.word	0x20000e50
 80057d0:	e000ed0c 	.word	0xe000ed0c
 80057d4:	20000e54 	.word	0x20000e54

080057d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057e4:	f7fe fd96 	bl	8004314 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057e8:	4b5b      	ldr	r3, [pc, #364]	; (8005958 <pvPortMalloc+0x180>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057f0:	f000 f920 	bl	8005a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057f4:	4b59      	ldr	r3, [pc, #356]	; (800595c <pvPortMalloc+0x184>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4013      	ands	r3, r2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f040 8093 	bne.w	8005928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01d      	beq.n	8005844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005808:	2208      	movs	r2, #8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4413      	add	r3, r2
 800580e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	2b00      	cmp	r3, #0
 8005818:	d014      	beq.n	8005844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f023 0307 	bic.w	r3, r3, #7
 8005820:	3308      	adds	r3, #8
 8005822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <pvPortMalloc+0x6c>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	617b      	str	r3, [r7, #20]
}
 8005840:	bf00      	nop
 8005842:	e7fe      	b.n	8005842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d06e      	beq.n	8005928 <pvPortMalloc+0x150>
 800584a:	4b45      	ldr	r3, [pc, #276]	; (8005960 <pvPortMalloc+0x188>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	429a      	cmp	r2, r3
 8005852:	d869      	bhi.n	8005928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005854:	4b43      	ldr	r3, [pc, #268]	; (8005964 <pvPortMalloc+0x18c>)
 8005856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005858:	4b42      	ldr	r3, [pc, #264]	; (8005964 <pvPortMalloc+0x18c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800585e:	e004      	b.n	800586a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	429a      	cmp	r2, r3
 8005872:	d903      	bls.n	800587c <pvPortMalloc+0xa4>
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f1      	bne.n	8005860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800587c:	4b36      	ldr	r3, [pc, #216]	; (8005958 <pvPortMalloc+0x180>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005882:	429a      	cmp	r2, r3
 8005884:	d050      	beq.n	8005928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2208      	movs	r2, #8
 800588c:	4413      	add	r3, r2
 800588e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	1ad2      	subs	r2, r2, r3
 80058a0:	2308      	movs	r3, #8
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d91f      	bls.n	80058e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4413      	add	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <pvPortMalloc+0xf8>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	613b      	str	r3, [r7, #16]
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	1ad2      	subs	r2, r2, r3
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058e2:	69b8      	ldr	r0, [r7, #24]
 80058e4:	f000 f908 	bl	8005af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058e8:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <pvPortMalloc+0x188>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	4a1b      	ldr	r2, [pc, #108]	; (8005960 <pvPortMalloc+0x188>)
 80058f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058f6:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <pvPortMalloc+0x188>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <pvPortMalloc+0x190>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d203      	bcs.n	800590a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005902:	4b17      	ldr	r3, [pc, #92]	; (8005960 <pvPortMalloc+0x188>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a18      	ldr	r2, [pc, #96]	; (8005968 <pvPortMalloc+0x190>)
 8005908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	4b13      	ldr	r3, [pc, #76]	; (800595c <pvPortMalloc+0x184>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	431a      	orrs	r2, r3
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800591e:	4b13      	ldr	r3, [pc, #76]	; (800596c <pvPortMalloc+0x194>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3301      	adds	r3, #1
 8005924:	4a11      	ldr	r2, [pc, #68]	; (800596c <pvPortMalloc+0x194>)
 8005926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005928:	f7fe fd02 	bl	8004330 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <pvPortMalloc+0x174>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	60fb      	str	r3, [r7, #12]
}
 8005948:	bf00      	nop
 800594a:	e7fe      	b.n	800594a <pvPortMalloc+0x172>
	return pvReturn;
 800594c:	69fb      	ldr	r3, [r7, #28]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3728      	adds	r7, #40	; 0x28
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20004a60 	.word	0x20004a60
 800595c:	20004a74 	.word	0x20004a74
 8005960:	20004a64 	.word	0x20004a64
 8005964:	20004a58 	.word	0x20004a58
 8005968:	20004a68 	.word	0x20004a68
 800596c:	20004a6c 	.word	0x20004a6c

08005970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d04d      	beq.n	8005a1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005982:	2308      	movs	r3, #8
 8005984:	425b      	negs	r3, r3
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4413      	add	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	4b24      	ldr	r3, [pc, #144]	; (8005a28 <vPortFree+0xb8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4013      	ands	r3, r2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10a      	bne.n	80059b4 <vPortFree+0x44>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	60fb      	str	r3, [r7, #12]
}
 80059b0:	bf00      	nop
 80059b2:	e7fe      	b.n	80059b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <vPortFree+0x62>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	60bb      	str	r3, [r7, #8]
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <vPortFree+0xb8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01e      	beq.n	8005a1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d11a      	bne.n	8005a1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	4b0e      	ldr	r3, [pc, #56]	; (8005a28 <vPortFree+0xb8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	43db      	mvns	r3, r3
 80059f2:	401a      	ands	r2, r3
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059f8:	f7fe fc8c 	bl	8004314 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <vPortFree+0xbc>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4413      	add	r3, r2
 8005a06:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <vPortFree+0xbc>)
 8005a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a0a:	6938      	ldr	r0, [r7, #16]
 8005a0c:	f000 f874 	bl	8005af8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a10:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <vPortFree+0xc0>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3301      	adds	r3, #1
 8005a16:	4a06      	ldr	r2, [pc, #24]	; (8005a30 <vPortFree+0xc0>)
 8005a18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a1a:	f7fe fc89 	bl	8004330 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a1e:	bf00      	nop
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20004a74 	.word	0x20004a74
 8005a2c:	20004a64 	.word	0x20004a64
 8005a30:	20004a70 	.word	0x20004a70

08005a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a40:	4b27      	ldr	r3, [pc, #156]	; (8005ae0 <prvHeapInit+0xac>)
 8005a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00c      	beq.n	8005a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3307      	adds	r3, #7
 8005a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0307 	bic.w	r3, r3, #7
 8005a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <prvHeapInit+0xac>)
 8005a64:	4413      	add	r3, r2
 8005a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <prvHeapInit+0xb0>)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a72:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <prvHeapInit+0xb0>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a80:	2208      	movs	r2, #8
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0307 	bic.w	r3, r3, #7
 8005a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <prvHeapInit+0xb4>)
 8005a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a96:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <prvHeapInit+0xb4>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a9e:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <prvHeapInit+0xb4>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	1ad2      	subs	r2, r2, r3
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ab4:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <prvHeapInit+0xb4>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	4a0a      	ldr	r2, [pc, #40]	; (8005aec <prvHeapInit+0xb8>)
 8005ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <prvHeapInit+0xbc>)
 8005aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005acc:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <prvHeapInit+0xc0>)
 8005ace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ad2:	601a      	str	r2, [r3, #0]
}
 8005ad4:	bf00      	nop
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	20000e58 	.word	0x20000e58
 8005ae4:	20004a58 	.word	0x20004a58
 8005ae8:	20004a60 	.word	0x20004a60
 8005aec:	20004a68 	.word	0x20004a68
 8005af0:	20004a64 	.word	0x20004a64
 8005af4:	20004a74 	.word	0x20004a74

08005af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b00:	4b28      	ldr	r3, [pc, #160]	; (8005ba4 <prvInsertBlockIntoFreeList+0xac>)
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	e002      	b.n	8005b0c <prvInsertBlockIntoFreeList+0x14>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d8f7      	bhi.n	8005b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	4413      	add	r3, r2
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d108      	bne.n	8005b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	441a      	add	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	441a      	add	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d118      	bne.n	8005b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d00d      	beq.n	8005b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	441a      	add	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	e008      	b.n	8005b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b76:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	e003      	b.n	8005b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d002      	beq.n	8005b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20004a58 	.word	0x20004a58
 8005ba8:	20004a60 	.word	0x20004a60

08005bac <__errno>:
 8005bac:	4b01      	ldr	r3, [pc, #4]	; (8005bb4 <__errno+0x8>)
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20000010 	.word	0x20000010

08005bb8 <__libc_init_array>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	4d0d      	ldr	r5, [pc, #52]	; (8005bf0 <__libc_init_array+0x38>)
 8005bbc:	4c0d      	ldr	r4, [pc, #52]	; (8005bf4 <__libc_init_array+0x3c>)
 8005bbe:	1b64      	subs	r4, r4, r5
 8005bc0:	10a4      	asrs	r4, r4, #2
 8005bc2:	2600      	movs	r6, #0
 8005bc4:	42a6      	cmp	r6, r4
 8005bc6:	d109      	bne.n	8005bdc <__libc_init_array+0x24>
 8005bc8:	4d0b      	ldr	r5, [pc, #44]	; (8005bf8 <__libc_init_array+0x40>)
 8005bca:	4c0c      	ldr	r4, [pc, #48]	; (8005bfc <__libc_init_array+0x44>)
 8005bcc:	f000 fca2 	bl	8006514 <_init>
 8005bd0:	1b64      	subs	r4, r4, r5
 8005bd2:	10a4      	asrs	r4, r4, #2
 8005bd4:	2600      	movs	r6, #0
 8005bd6:	42a6      	cmp	r6, r4
 8005bd8:	d105      	bne.n	8005be6 <__libc_init_array+0x2e>
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
 8005bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be0:	4798      	blx	r3
 8005be2:	3601      	adds	r6, #1
 8005be4:	e7ee      	b.n	8005bc4 <__libc_init_array+0xc>
 8005be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bea:	4798      	blx	r3
 8005bec:	3601      	adds	r6, #1
 8005bee:	e7f2      	b.n	8005bd6 <__libc_init_array+0x1e>
 8005bf0:	080065cc 	.word	0x080065cc
 8005bf4:	080065cc 	.word	0x080065cc
 8005bf8:	080065cc 	.word	0x080065cc
 8005bfc:	080065d0 	.word	0x080065d0

08005c00 <memcpy>:
 8005c00:	440a      	add	r2, r1
 8005c02:	4291      	cmp	r1, r2
 8005c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c08:	d100      	bne.n	8005c0c <memcpy+0xc>
 8005c0a:	4770      	bx	lr
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c16:	4291      	cmp	r1, r2
 8005c18:	d1f9      	bne.n	8005c0e <memcpy+0xe>
 8005c1a:	bd10      	pop	{r4, pc}

08005c1c <memset>:
 8005c1c:	4402      	add	r2, r0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d100      	bne.n	8005c26 <memset+0xa>
 8005c24:	4770      	bx	lr
 8005c26:	f803 1b01 	strb.w	r1, [r3], #1
 8005c2a:	e7f9      	b.n	8005c20 <memset+0x4>

08005c2c <sniprintf>:
 8005c2c:	b40c      	push	{r2, r3}
 8005c2e:	b530      	push	{r4, r5, lr}
 8005c30:	4b17      	ldr	r3, [pc, #92]	; (8005c90 <sniprintf+0x64>)
 8005c32:	1e0c      	subs	r4, r1, #0
 8005c34:	681d      	ldr	r5, [r3, #0]
 8005c36:	b09d      	sub	sp, #116	; 0x74
 8005c38:	da08      	bge.n	8005c4c <sniprintf+0x20>
 8005c3a:	238b      	movs	r3, #139	; 0x8b
 8005c3c:	602b      	str	r3, [r5, #0]
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c42:	b01d      	add	sp, #116	; 0x74
 8005c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c48:	b002      	add	sp, #8
 8005c4a:	4770      	bx	lr
 8005c4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005c50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c54:	bf14      	ite	ne
 8005c56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005c5a:	4623      	moveq	r3, r4
 8005c5c:	9304      	str	r3, [sp, #16]
 8005c5e:	9307      	str	r3, [sp, #28]
 8005c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c64:	9002      	str	r0, [sp, #8]
 8005c66:	9006      	str	r0, [sp, #24]
 8005c68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c6e:	ab21      	add	r3, sp, #132	; 0x84
 8005c70:	a902      	add	r1, sp, #8
 8005c72:	4628      	mov	r0, r5
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	f000 f869 	bl	8005d4c <_svfiprintf_r>
 8005c7a:	1c43      	adds	r3, r0, #1
 8005c7c:	bfbc      	itt	lt
 8005c7e:	238b      	movlt	r3, #139	; 0x8b
 8005c80:	602b      	strlt	r3, [r5, #0]
 8005c82:	2c00      	cmp	r4, #0
 8005c84:	d0dd      	beq.n	8005c42 <sniprintf+0x16>
 8005c86:	9b02      	ldr	r3, [sp, #8]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	e7d9      	b.n	8005c42 <sniprintf+0x16>
 8005c8e:	bf00      	nop
 8005c90:	20000010 	.word	0x20000010

08005c94 <__ssputs_r>:
 8005c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c98:	688e      	ldr	r6, [r1, #8]
 8005c9a:	429e      	cmp	r6, r3
 8005c9c:	4682      	mov	sl, r0
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	4690      	mov	r8, r2
 8005ca2:	461f      	mov	r7, r3
 8005ca4:	d838      	bhi.n	8005d18 <__ssputs_r+0x84>
 8005ca6:	898a      	ldrh	r2, [r1, #12]
 8005ca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cac:	d032      	beq.n	8005d14 <__ssputs_r+0x80>
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	6909      	ldr	r1, [r1, #16]
 8005cb2:	eba5 0901 	sub.w	r9, r5, r1
 8005cb6:	6965      	ldr	r5, [r4, #20]
 8005cb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	444b      	add	r3, r9
 8005cc4:	106d      	asrs	r5, r5, #1
 8005cc6:	429d      	cmp	r5, r3
 8005cc8:	bf38      	it	cc
 8005cca:	461d      	movcc	r5, r3
 8005ccc:	0553      	lsls	r3, r2, #21
 8005cce:	d531      	bpl.n	8005d34 <__ssputs_r+0xa0>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	f000 fb55 	bl	8006380 <_malloc_r>
 8005cd6:	4606      	mov	r6, r0
 8005cd8:	b950      	cbnz	r0, 8005cf0 <__ssputs_r+0x5c>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	f8ca 3000 	str.w	r3, [sl]
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf0:	6921      	ldr	r1, [r4, #16]
 8005cf2:	464a      	mov	r2, r9
 8005cf4:	f7ff ff84 	bl	8005c00 <memcpy>
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d02:	81a3      	strh	r3, [r4, #12]
 8005d04:	6126      	str	r6, [r4, #16]
 8005d06:	6165      	str	r5, [r4, #20]
 8005d08:	444e      	add	r6, r9
 8005d0a:	eba5 0509 	sub.w	r5, r5, r9
 8005d0e:	6026      	str	r6, [r4, #0]
 8005d10:	60a5      	str	r5, [r4, #8]
 8005d12:	463e      	mov	r6, r7
 8005d14:	42be      	cmp	r6, r7
 8005d16:	d900      	bls.n	8005d1a <__ssputs_r+0x86>
 8005d18:	463e      	mov	r6, r7
 8005d1a:	6820      	ldr	r0, [r4, #0]
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	4641      	mov	r1, r8
 8005d20:	f000 faa8 	bl	8006274 <memmove>
 8005d24:	68a3      	ldr	r3, [r4, #8]
 8005d26:	1b9b      	subs	r3, r3, r6
 8005d28:	60a3      	str	r3, [r4, #8]
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	4433      	add	r3, r6
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	2000      	movs	r0, #0
 8005d32:	e7db      	b.n	8005cec <__ssputs_r+0x58>
 8005d34:	462a      	mov	r2, r5
 8005d36:	f000 fb97 	bl	8006468 <_realloc_r>
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d1e1      	bne.n	8005d04 <__ssputs_r+0x70>
 8005d40:	6921      	ldr	r1, [r4, #16]
 8005d42:	4650      	mov	r0, sl
 8005d44:	f000 fab0 	bl	80062a8 <_free_r>
 8005d48:	e7c7      	b.n	8005cda <__ssputs_r+0x46>
	...

08005d4c <_svfiprintf_r>:
 8005d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d50:	4698      	mov	r8, r3
 8005d52:	898b      	ldrh	r3, [r1, #12]
 8005d54:	061b      	lsls	r3, r3, #24
 8005d56:	b09d      	sub	sp, #116	; 0x74
 8005d58:	4607      	mov	r7, r0
 8005d5a:	460d      	mov	r5, r1
 8005d5c:	4614      	mov	r4, r2
 8005d5e:	d50e      	bpl.n	8005d7e <_svfiprintf_r+0x32>
 8005d60:	690b      	ldr	r3, [r1, #16]
 8005d62:	b963      	cbnz	r3, 8005d7e <_svfiprintf_r+0x32>
 8005d64:	2140      	movs	r1, #64	; 0x40
 8005d66:	f000 fb0b 	bl	8006380 <_malloc_r>
 8005d6a:	6028      	str	r0, [r5, #0]
 8005d6c:	6128      	str	r0, [r5, #16]
 8005d6e:	b920      	cbnz	r0, 8005d7a <_svfiprintf_r+0x2e>
 8005d70:	230c      	movs	r3, #12
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	e0d1      	b.n	8005f1e <_svfiprintf_r+0x1d2>
 8005d7a:	2340      	movs	r3, #64	; 0x40
 8005d7c:	616b      	str	r3, [r5, #20]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	9309      	str	r3, [sp, #36]	; 0x24
 8005d82:	2320      	movs	r3, #32
 8005d84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d88:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d8c:	2330      	movs	r3, #48	; 0x30
 8005d8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005f38 <_svfiprintf_r+0x1ec>
 8005d92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d96:	f04f 0901 	mov.w	r9, #1
 8005d9a:	4623      	mov	r3, r4
 8005d9c:	469a      	mov	sl, r3
 8005d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005da2:	b10a      	cbz	r2, 8005da8 <_svfiprintf_r+0x5c>
 8005da4:	2a25      	cmp	r2, #37	; 0x25
 8005da6:	d1f9      	bne.n	8005d9c <_svfiprintf_r+0x50>
 8005da8:	ebba 0b04 	subs.w	fp, sl, r4
 8005dac:	d00b      	beq.n	8005dc6 <_svfiprintf_r+0x7a>
 8005dae:	465b      	mov	r3, fp
 8005db0:	4622      	mov	r2, r4
 8005db2:	4629      	mov	r1, r5
 8005db4:	4638      	mov	r0, r7
 8005db6:	f7ff ff6d 	bl	8005c94 <__ssputs_r>
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f000 80aa 	beq.w	8005f14 <_svfiprintf_r+0x1c8>
 8005dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dc2:	445a      	add	r2, fp
 8005dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8005dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 80a2 	beq.w	8005f14 <_svfiprintf_r+0x1c8>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dda:	f10a 0a01 	add.w	sl, sl, #1
 8005dde:	9304      	str	r3, [sp, #16]
 8005de0:	9307      	str	r3, [sp, #28]
 8005de2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005de6:	931a      	str	r3, [sp, #104]	; 0x68
 8005de8:	4654      	mov	r4, sl
 8005dea:	2205      	movs	r2, #5
 8005dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df0:	4851      	ldr	r0, [pc, #324]	; (8005f38 <_svfiprintf_r+0x1ec>)
 8005df2:	f7fa f9f5 	bl	80001e0 <memchr>
 8005df6:	9a04      	ldr	r2, [sp, #16]
 8005df8:	b9d8      	cbnz	r0, 8005e32 <_svfiprintf_r+0xe6>
 8005dfa:	06d0      	lsls	r0, r2, #27
 8005dfc:	bf44      	itt	mi
 8005dfe:	2320      	movmi	r3, #32
 8005e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e04:	0711      	lsls	r1, r2, #28
 8005e06:	bf44      	itt	mi
 8005e08:	232b      	movmi	r3, #43	; 0x2b
 8005e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e12:	2b2a      	cmp	r3, #42	; 0x2a
 8005e14:	d015      	beq.n	8005e42 <_svfiprintf_r+0xf6>
 8005e16:	9a07      	ldr	r2, [sp, #28]
 8005e18:	4654      	mov	r4, sl
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	f04f 0c0a 	mov.w	ip, #10
 8005e20:	4621      	mov	r1, r4
 8005e22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e26:	3b30      	subs	r3, #48	; 0x30
 8005e28:	2b09      	cmp	r3, #9
 8005e2a:	d94e      	bls.n	8005eca <_svfiprintf_r+0x17e>
 8005e2c:	b1b0      	cbz	r0, 8005e5c <_svfiprintf_r+0x110>
 8005e2e:	9207      	str	r2, [sp, #28]
 8005e30:	e014      	b.n	8005e5c <_svfiprintf_r+0x110>
 8005e32:	eba0 0308 	sub.w	r3, r0, r8
 8005e36:	fa09 f303 	lsl.w	r3, r9, r3
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	9304      	str	r3, [sp, #16]
 8005e3e:	46a2      	mov	sl, r4
 8005e40:	e7d2      	b.n	8005de8 <_svfiprintf_r+0x9c>
 8005e42:	9b03      	ldr	r3, [sp, #12]
 8005e44:	1d19      	adds	r1, r3, #4
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	9103      	str	r1, [sp, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bfbb      	ittet	lt
 8005e4e:	425b      	neglt	r3, r3
 8005e50:	f042 0202 	orrlt.w	r2, r2, #2
 8005e54:	9307      	strge	r3, [sp, #28]
 8005e56:	9307      	strlt	r3, [sp, #28]
 8005e58:	bfb8      	it	lt
 8005e5a:	9204      	strlt	r2, [sp, #16]
 8005e5c:	7823      	ldrb	r3, [r4, #0]
 8005e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e60:	d10c      	bne.n	8005e7c <_svfiprintf_r+0x130>
 8005e62:	7863      	ldrb	r3, [r4, #1]
 8005e64:	2b2a      	cmp	r3, #42	; 0x2a
 8005e66:	d135      	bne.n	8005ed4 <_svfiprintf_r+0x188>
 8005e68:	9b03      	ldr	r3, [sp, #12]
 8005e6a:	1d1a      	adds	r2, r3, #4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	9203      	str	r2, [sp, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	bfb8      	it	lt
 8005e74:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e78:	3402      	adds	r4, #2
 8005e7a:	9305      	str	r3, [sp, #20]
 8005e7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f48 <_svfiprintf_r+0x1fc>
 8005e80:	7821      	ldrb	r1, [r4, #0]
 8005e82:	2203      	movs	r2, #3
 8005e84:	4650      	mov	r0, sl
 8005e86:	f7fa f9ab 	bl	80001e0 <memchr>
 8005e8a:	b140      	cbz	r0, 8005e9e <_svfiprintf_r+0x152>
 8005e8c:	2340      	movs	r3, #64	; 0x40
 8005e8e:	eba0 000a 	sub.w	r0, r0, sl
 8005e92:	fa03 f000 	lsl.w	r0, r3, r0
 8005e96:	9b04      	ldr	r3, [sp, #16]
 8005e98:	4303      	orrs	r3, r0
 8005e9a:	3401      	adds	r4, #1
 8005e9c:	9304      	str	r3, [sp, #16]
 8005e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ea2:	4826      	ldr	r0, [pc, #152]	; (8005f3c <_svfiprintf_r+0x1f0>)
 8005ea4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ea8:	2206      	movs	r2, #6
 8005eaa:	f7fa f999 	bl	80001e0 <memchr>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d038      	beq.n	8005f24 <_svfiprintf_r+0x1d8>
 8005eb2:	4b23      	ldr	r3, [pc, #140]	; (8005f40 <_svfiprintf_r+0x1f4>)
 8005eb4:	bb1b      	cbnz	r3, 8005efe <_svfiprintf_r+0x1b2>
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	3307      	adds	r3, #7
 8005eba:	f023 0307 	bic.w	r3, r3, #7
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	9303      	str	r3, [sp, #12]
 8005ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec4:	4433      	add	r3, r6
 8005ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec8:	e767      	b.n	8005d9a <_svfiprintf_r+0x4e>
 8005eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ece:	460c      	mov	r4, r1
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	e7a5      	b.n	8005e20 <_svfiprintf_r+0xd4>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	3401      	adds	r4, #1
 8005ed8:	9305      	str	r3, [sp, #20]
 8005eda:	4619      	mov	r1, r3
 8005edc:	f04f 0c0a 	mov.w	ip, #10
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ee6:	3a30      	subs	r2, #48	; 0x30
 8005ee8:	2a09      	cmp	r2, #9
 8005eea:	d903      	bls.n	8005ef4 <_svfiprintf_r+0x1a8>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0c5      	beq.n	8005e7c <_svfiprintf_r+0x130>
 8005ef0:	9105      	str	r1, [sp, #20]
 8005ef2:	e7c3      	b.n	8005e7c <_svfiprintf_r+0x130>
 8005ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ef8:	4604      	mov	r4, r0
 8005efa:	2301      	movs	r3, #1
 8005efc:	e7f0      	b.n	8005ee0 <_svfiprintf_r+0x194>
 8005efe:	ab03      	add	r3, sp, #12
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	462a      	mov	r2, r5
 8005f04:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <_svfiprintf_r+0x1f8>)
 8005f06:	a904      	add	r1, sp, #16
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f3af 8000 	nop.w
 8005f0e:	1c42      	adds	r2, r0, #1
 8005f10:	4606      	mov	r6, r0
 8005f12:	d1d6      	bne.n	8005ec2 <_svfiprintf_r+0x176>
 8005f14:	89ab      	ldrh	r3, [r5, #12]
 8005f16:	065b      	lsls	r3, r3, #25
 8005f18:	f53f af2c 	bmi.w	8005d74 <_svfiprintf_r+0x28>
 8005f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f1e:	b01d      	add	sp, #116	; 0x74
 8005f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f24:	ab03      	add	r3, sp, #12
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	462a      	mov	r2, r5
 8005f2a:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <_svfiprintf_r+0x1f8>)
 8005f2c:	a904      	add	r1, sp, #16
 8005f2e:	4638      	mov	r0, r7
 8005f30:	f000 f87a 	bl	8006028 <_printf_i>
 8005f34:	e7eb      	b.n	8005f0e <_svfiprintf_r+0x1c2>
 8005f36:	bf00      	nop
 8005f38:	08006590 	.word	0x08006590
 8005f3c:	0800659a 	.word	0x0800659a
 8005f40:	00000000 	.word	0x00000000
 8005f44:	08005c95 	.word	0x08005c95
 8005f48:	08006596 	.word	0x08006596

08005f4c <_printf_common>:
 8005f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f50:	4616      	mov	r6, r2
 8005f52:	4699      	mov	r9, r3
 8005f54:	688a      	ldr	r2, [r1, #8]
 8005f56:	690b      	ldr	r3, [r1, #16]
 8005f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	bfb8      	it	lt
 8005f60:	4613      	movlt	r3, r2
 8005f62:	6033      	str	r3, [r6, #0]
 8005f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f68:	4607      	mov	r7, r0
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	b10a      	cbz	r2, 8005f72 <_printf_common+0x26>
 8005f6e:	3301      	adds	r3, #1
 8005f70:	6033      	str	r3, [r6, #0]
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	0699      	lsls	r1, r3, #26
 8005f76:	bf42      	ittt	mi
 8005f78:	6833      	ldrmi	r3, [r6, #0]
 8005f7a:	3302      	addmi	r3, #2
 8005f7c:	6033      	strmi	r3, [r6, #0]
 8005f7e:	6825      	ldr	r5, [r4, #0]
 8005f80:	f015 0506 	ands.w	r5, r5, #6
 8005f84:	d106      	bne.n	8005f94 <_printf_common+0x48>
 8005f86:	f104 0a19 	add.w	sl, r4, #25
 8005f8a:	68e3      	ldr	r3, [r4, #12]
 8005f8c:	6832      	ldr	r2, [r6, #0]
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	42ab      	cmp	r3, r5
 8005f92:	dc26      	bgt.n	8005fe2 <_printf_common+0x96>
 8005f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f98:	1e13      	subs	r3, r2, #0
 8005f9a:	6822      	ldr	r2, [r4, #0]
 8005f9c:	bf18      	it	ne
 8005f9e:	2301      	movne	r3, #1
 8005fa0:	0692      	lsls	r2, r2, #26
 8005fa2:	d42b      	bmi.n	8005ffc <_printf_common+0xb0>
 8005fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fa8:	4649      	mov	r1, r9
 8005faa:	4638      	mov	r0, r7
 8005fac:	47c0      	blx	r8
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d01e      	beq.n	8005ff0 <_printf_common+0xa4>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	68e5      	ldr	r5, [r4, #12]
 8005fb6:	6832      	ldr	r2, [r6, #0]
 8005fb8:	f003 0306 	and.w	r3, r3, #6
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	bf08      	it	eq
 8005fc0:	1aad      	subeq	r5, r5, r2
 8005fc2:	68a3      	ldr	r3, [r4, #8]
 8005fc4:	6922      	ldr	r2, [r4, #16]
 8005fc6:	bf0c      	ite	eq
 8005fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fcc:	2500      	movne	r5, #0
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	bfc4      	itt	gt
 8005fd2:	1a9b      	subgt	r3, r3, r2
 8005fd4:	18ed      	addgt	r5, r5, r3
 8005fd6:	2600      	movs	r6, #0
 8005fd8:	341a      	adds	r4, #26
 8005fda:	42b5      	cmp	r5, r6
 8005fdc:	d11a      	bne.n	8006014 <_printf_common+0xc8>
 8005fde:	2000      	movs	r0, #0
 8005fe0:	e008      	b.n	8005ff4 <_printf_common+0xa8>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	4652      	mov	r2, sl
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4638      	mov	r0, r7
 8005fea:	47c0      	blx	r8
 8005fec:	3001      	adds	r0, #1
 8005fee:	d103      	bne.n	8005ff8 <_printf_common+0xac>
 8005ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff8:	3501      	adds	r5, #1
 8005ffa:	e7c6      	b.n	8005f8a <_printf_common+0x3e>
 8005ffc:	18e1      	adds	r1, r4, r3
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	2030      	movs	r0, #48	; 0x30
 8006002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006006:	4422      	add	r2, r4
 8006008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800600c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006010:	3302      	adds	r3, #2
 8006012:	e7c7      	b.n	8005fa4 <_printf_common+0x58>
 8006014:	2301      	movs	r3, #1
 8006016:	4622      	mov	r2, r4
 8006018:	4649      	mov	r1, r9
 800601a:	4638      	mov	r0, r7
 800601c:	47c0      	blx	r8
 800601e:	3001      	adds	r0, #1
 8006020:	d0e6      	beq.n	8005ff0 <_printf_common+0xa4>
 8006022:	3601      	adds	r6, #1
 8006024:	e7d9      	b.n	8005fda <_printf_common+0x8e>
	...

08006028 <_printf_i>:
 8006028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800602c:	7e0f      	ldrb	r7, [r1, #24]
 800602e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006030:	2f78      	cmp	r7, #120	; 0x78
 8006032:	4691      	mov	r9, r2
 8006034:	4680      	mov	r8, r0
 8006036:	460c      	mov	r4, r1
 8006038:	469a      	mov	sl, r3
 800603a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800603e:	d807      	bhi.n	8006050 <_printf_i+0x28>
 8006040:	2f62      	cmp	r7, #98	; 0x62
 8006042:	d80a      	bhi.n	800605a <_printf_i+0x32>
 8006044:	2f00      	cmp	r7, #0
 8006046:	f000 80d8 	beq.w	80061fa <_printf_i+0x1d2>
 800604a:	2f58      	cmp	r7, #88	; 0x58
 800604c:	f000 80a3 	beq.w	8006196 <_printf_i+0x16e>
 8006050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006058:	e03a      	b.n	80060d0 <_printf_i+0xa8>
 800605a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800605e:	2b15      	cmp	r3, #21
 8006060:	d8f6      	bhi.n	8006050 <_printf_i+0x28>
 8006062:	a101      	add	r1, pc, #4	; (adr r1, 8006068 <_printf_i+0x40>)
 8006064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006068:	080060c1 	.word	0x080060c1
 800606c:	080060d5 	.word	0x080060d5
 8006070:	08006051 	.word	0x08006051
 8006074:	08006051 	.word	0x08006051
 8006078:	08006051 	.word	0x08006051
 800607c:	08006051 	.word	0x08006051
 8006080:	080060d5 	.word	0x080060d5
 8006084:	08006051 	.word	0x08006051
 8006088:	08006051 	.word	0x08006051
 800608c:	08006051 	.word	0x08006051
 8006090:	08006051 	.word	0x08006051
 8006094:	080061e1 	.word	0x080061e1
 8006098:	08006105 	.word	0x08006105
 800609c:	080061c3 	.word	0x080061c3
 80060a0:	08006051 	.word	0x08006051
 80060a4:	08006051 	.word	0x08006051
 80060a8:	08006203 	.word	0x08006203
 80060ac:	08006051 	.word	0x08006051
 80060b0:	08006105 	.word	0x08006105
 80060b4:	08006051 	.word	0x08006051
 80060b8:	08006051 	.word	0x08006051
 80060bc:	080061cb 	.word	0x080061cb
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	1d1a      	adds	r2, r3, #4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	602a      	str	r2, [r5, #0]
 80060c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0a3      	b.n	800621c <_printf_i+0x1f4>
 80060d4:	6820      	ldr	r0, [r4, #0]
 80060d6:	6829      	ldr	r1, [r5, #0]
 80060d8:	0606      	lsls	r6, r0, #24
 80060da:	f101 0304 	add.w	r3, r1, #4
 80060de:	d50a      	bpl.n	80060f6 <_printf_i+0xce>
 80060e0:	680e      	ldr	r6, [r1, #0]
 80060e2:	602b      	str	r3, [r5, #0]
 80060e4:	2e00      	cmp	r6, #0
 80060e6:	da03      	bge.n	80060f0 <_printf_i+0xc8>
 80060e8:	232d      	movs	r3, #45	; 0x2d
 80060ea:	4276      	negs	r6, r6
 80060ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f0:	485e      	ldr	r0, [pc, #376]	; (800626c <_printf_i+0x244>)
 80060f2:	230a      	movs	r3, #10
 80060f4:	e019      	b.n	800612a <_printf_i+0x102>
 80060f6:	680e      	ldr	r6, [r1, #0]
 80060f8:	602b      	str	r3, [r5, #0]
 80060fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060fe:	bf18      	it	ne
 8006100:	b236      	sxthne	r6, r6
 8006102:	e7ef      	b.n	80060e4 <_printf_i+0xbc>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	6820      	ldr	r0, [r4, #0]
 8006108:	1d19      	adds	r1, r3, #4
 800610a:	6029      	str	r1, [r5, #0]
 800610c:	0601      	lsls	r1, r0, #24
 800610e:	d501      	bpl.n	8006114 <_printf_i+0xec>
 8006110:	681e      	ldr	r6, [r3, #0]
 8006112:	e002      	b.n	800611a <_printf_i+0xf2>
 8006114:	0646      	lsls	r6, r0, #25
 8006116:	d5fb      	bpl.n	8006110 <_printf_i+0xe8>
 8006118:	881e      	ldrh	r6, [r3, #0]
 800611a:	4854      	ldr	r0, [pc, #336]	; (800626c <_printf_i+0x244>)
 800611c:	2f6f      	cmp	r7, #111	; 0x6f
 800611e:	bf0c      	ite	eq
 8006120:	2308      	moveq	r3, #8
 8006122:	230a      	movne	r3, #10
 8006124:	2100      	movs	r1, #0
 8006126:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800612a:	6865      	ldr	r5, [r4, #4]
 800612c:	60a5      	str	r5, [r4, #8]
 800612e:	2d00      	cmp	r5, #0
 8006130:	bfa2      	ittt	ge
 8006132:	6821      	ldrge	r1, [r4, #0]
 8006134:	f021 0104 	bicge.w	r1, r1, #4
 8006138:	6021      	strge	r1, [r4, #0]
 800613a:	b90e      	cbnz	r6, 8006140 <_printf_i+0x118>
 800613c:	2d00      	cmp	r5, #0
 800613e:	d04d      	beq.n	80061dc <_printf_i+0x1b4>
 8006140:	4615      	mov	r5, r2
 8006142:	fbb6 f1f3 	udiv	r1, r6, r3
 8006146:	fb03 6711 	mls	r7, r3, r1, r6
 800614a:	5dc7      	ldrb	r7, [r0, r7]
 800614c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006150:	4637      	mov	r7, r6
 8006152:	42bb      	cmp	r3, r7
 8006154:	460e      	mov	r6, r1
 8006156:	d9f4      	bls.n	8006142 <_printf_i+0x11a>
 8006158:	2b08      	cmp	r3, #8
 800615a:	d10b      	bne.n	8006174 <_printf_i+0x14c>
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	07de      	lsls	r6, r3, #31
 8006160:	d508      	bpl.n	8006174 <_printf_i+0x14c>
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	6861      	ldr	r1, [r4, #4]
 8006166:	4299      	cmp	r1, r3
 8006168:	bfde      	ittt	le
 800616a:	2330      	movle	r3, #48	; 0x30
 800616c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006170:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006174:	1b52      	subs	r2, r2, r5
 8006176:	6122      	str	r2, [r4, #16]
 8006178:	f8cd a000 	str.w	sl, [sp]
 800617c:	464b      	mov	r3, r9
 800617e:	aa03      	add	r2, sp, #12
 8006180:	4621      	mov	r1, r4
 8006182:	4640      	mov	r0, r8
 8006184:	f7ff fee2 	bl	8005f4c <_printf_common>
 8006188:	3001      	adds	r0, #1
 800618a:	d14c      	bne.n	8006226 <_printf_i+0x1fe>
 800618c:	f04f 30ff 	mov.w	r0, #4294967295
 8006190:	b004      	add	sp, #16
 8006192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006196:	4835      	ldr	r0, [pc, #212]	; (800626c <_printf_i+0x244>)
 8006198:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800619c:	6829      	ldr	r1, [r5, #0]
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80061a4:	6029      	str	r1, [r5, #0]
 80061a6:	061d      	lsls	r5, r3, #24
 80061a8:	d514      	bpl.n	80061d4 <_printf_i+0x1ac>
 80061aa:	07df      	lsls	r7, r3, #31
 80061ac:	bf44      	itt	mi
 80061ae:	f043 0320 	orrmi.w	r3, r3, #32
 80061b2:	6023      	strmi	r3, [r4, #0]
 80061b4:	b91e      	cbnz	r6, 80061be <_printf_i+0x196>
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	f023 0320 	bic.w	r3, r3, #32
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	2310      	movs	r3, #16
 80061c0:	e7b0      	b.n	8006124 <_printf_i+0xfc>
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	f043 0320 	orr.w	r3, r3, #32
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	2378      	movs	r3, #120	; 0x78
 80061cc:	4828      	ldr	r0, [pc, #160]	; (8006270 <_printf_i+0x248>)
 80061ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061d2:	e7e3      	b.n	800619c <_printf_i+0x174>
 80061d4:	0659      	lsls	r1, r3, #25
 80061d6:	bf48      	it	mi
 80061d8:	b2b6      	uxthmi	r6, r6
 80061da:	e7e6      	b.n	80061aa <_printf_i+0x182>
 80061dc:	4615      	mov	r5, r2
 80061de:	e7bb      	b.n	8006158 <_printf_i+0x130>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	6826      	ldr	r6, [r4, #0]
 80061e4:	6961      	ldr	r1, [r4, #20]
 80061e6:	1d18      	adds	r0, r3, #4
 80061e8:	6028      	str	r0, [r5, #0]
 80061ea:	0635      	lsls	r5, r6, #24
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	d501      	bpl.n	80061f4 <_printf_i+0x1cc>
 80061f0:	6019      	str	r1, [r3, #0]
 80061f2:	e002      	b.n	80061fa <_printf_i+0x1d2>
 80061f4:	0670      	lsls	r0, r6, #25
 80061f6:	d5fb      	bpl.n	80061f0 <_printf_i+0x1c8>
 80061f8:	8019      	strh	r1, [r3, #0]
 80061fa:	2300      	movs	r3, #0
 80061fc:	6123      	str	r3, [r4, #16]
 80061fe:	4615      	mov	r5, r2
 8006200:	e7ba      	b.n	8006178 <_printf_i+0x150>
 8006202:	682b      	ldr	r3, [r5, #0]
 8006204:	1d1a      	adds	r2, r3, #4
 8006206:	602a      	str	r2, [r5, #0]
 8006208:	681d      	ldr	r5, [r3, #0]
 800620a:	6862      	ldr	r2, [r4, #4]
 800620c:	2100      	movs	r1, #0
 800620e:	4628      	mov	r0, r5
 8006210:	f7f9 ffe6 	bl	80001e0 <memchr>
 8006214:	b108      	cbz	r0, 800621a <_printf_i+0x1f2>
 8006216:	1b40      	subs	r0, r0, r5
 8006218:	6060      	str	r0, [r4, #4]
 800621a:	6863      	ldr	r3, [r4, #4]
 800621c:	6123      	str	r3, [r4, #16]
 800621e:	2300      	movs	r3, #0
 8006220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006224:	e7a8      	b.n	8006178 <_printf_i+0x150>
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	462a      	mov	r2, r5
 800622a:	4649      	mov	r1, r9
 800622c:	4640      	mov	r0, r8
 800622e:	47d0      	blx	sl
 8006230:	3001      	adds	r0, #1
 8006232:	d0ab      	beq.n	800618c <_printf_i+0x164>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	079b      	lsls	r3, r3, #30
 8006238:	d413      	bmi.n	8006262 <_printf_i+0x23a>
 800623a:	68e0      	ldr	r0, [r4, #12]
 800623c:	9b03      	ldr	r3, [sp, #12]
 800623e:	4298      	cmp	r0, r3
 8006240:	bfb8      	it	lt
 8006242:	4618      	movlt	r0, r3
 8006244:	e7a4      	b.n	8006190 <_printf_i+0x168>
 8006246:	2301      	movs	r3, #1
 8006248:	4632      	mov	r2, r6
 800624a:	4649      	mov	r1, r9
 800624c:	4640      	mov	r0, r8
 800624e:	47d0      	blx	sl
 8006250:	3001      	adds	r0, #1
 8006252:	d09b      	beq.n	800618c <_printf_i+0x164>
 8006254:	3501      	adds	r5, #1
 8006256:	68e3      	ldr	r3, [r4, #12]
 8006258:	9903      	ldr	r1, [sp, #12]
 800625a:	1a5b      	subs	r3, r3, r1
 800625c:	42ab      	cmp	r3, r5
 800625e:	dcf2      	bgt.n	8006246 <_printf_i+0x21e>
 8006260:	e7eb      	b.n	800623a <_printf_i+0x212>
 8006262:	2500      	movs	r5, #0
 8006264:	f104 0619 	add.w	r6, r4, #25
 8006268:	e7f5      	b.n	8006256 <_printf_i+0x22e>
 800626a:	bf00      	nop
 800626c:	080065a1 	.word	0x080065a1
 8006270:	080065b2 	.word	0x080065b2

08006274 <memmove>:
 8006274:	4288      	cmp	r0, r1
 8006276:	b510      	push	{r4, lr}
 8006278:	eb01 0402 	add.w	r4, r1, r2
 800627c:	d902      	bls.n	8006284 <memmove+0x10>
 800627e:	4284      	cmp	r4, r0
 8006280:	4623      	mov	r3, r4
 8006282:	d807      	bhi.n	8006294 <memmove+0x20>
 8006284:	1e43      	subs	r3, r0, #1
 8006286:	42a1      	cmp	r1, r4
 8006288:	d008      	beq.n	800629c <memmove+0x28>
 800628a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800628e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006292:	e7f8      	b.n	8006286 <memmove+0x12>
 8006294:	4402      	add	r2, r0
 8006296:	4601      	mov	r1, r0
 8006298:	428a      	cmp	r2, r1
 800629a:	d100      	bne.n	800629e <memmove+0x2a>
 800629c:	bd10      	pop	{r4, pc}
 800629e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062a6:	e7f7      	b.n	8006298 <memmove+0x24>

080062a8 <_free_r>:
 80062a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062aa:	2900      	cmp	r1, #0
 80062ac:	d044      	beq.n	8006338 <_free_r+0x90>
 80062ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062b2:	9001      	str	r0, [sp, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f1a1 0404 	sub.w	r4, r1, #4
 80062ba:	bfb8      	it	lt
 80062bc:	18e4      	addlt	r4, r4, r3
 80062be:	f000 f913 	bl	80064e8 <__malloc_lock>
 80062c2:	4a1e      	ldr	r2, [pc, #120]	; (800633c <_free_r+0x94>)
 80062c4:	9801      	ldr	r0, [sp, #4]
 80062c6:	6813      	ldr	r3, [r2, #0]
 80062c8:	b933      	cbnz	r3, 80062d8 <_free_r+0x30>
 80062ca:	6063      	str	r3, [r4, #4]
 80062cc:	6014      	str	r4, [r2, #0]
 80062ce:	b003      	add	sp, #12
 80062d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062d4:	f000 b90e 	b.w	80064f4 <__malloc_unlock>
 80062d8:	42a3      	cmp	r3, r4
 80062da:	d908      	bls.n	80062ee <_free_r+0x46>
 80062dc:	6825      	ldr	r5, [r4, #0]
 80062de:	1961      	adds	r1, r4, r5
 80062e0:	428b      	cmp	r3, r1
 80062e2:	bf01      	itttt	eq
 80062e4:	6819      	ldreq	r1, [r3, #0]
 80062e6:	685b      	ldreq	r3, [r3, #4]
 80062e8:	1949      	addeq	r1, r1, r5
 80062ea:	6021      	streq	r1, [r4, #0]
 80062ec:	e7ed      	b.n	80062ca <_free_r+0x22>
 80062ee:	461a      	mov	r2, r3
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	b10b      	cbz	r3, 80062f8 <_free_r+0x50>
 80062f4:	42a3      	cmp	r3, r4
 80062f6:	d9fa      	bls.n	80062ee <_free_r+0x46>
 80062f8:	6811      	ldr	r1, [r2, #0]
 80062fa:	1855      	adds	r5, r2, r1
 80062fc:	42a5      	cmp	r5, r4
 80062fe:	d10b      	bne.n	8006318 <_free_r+0x70>
 8006300:	6824      	ldr	r4, [r4, #0]
 8006302:	4421      	add	r1, r4
 8006304:	1854      	adds	r4, r2, r1
 8006306:	42a3      	cmp	r3, r4
 8006308:	6011      	str	r1, [r2, #0]
 800630a:	d1e0      	bne.n	80062ce <_free_r+0x26>
 800630c:	681c      	ldr	r4, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	6053      	str	r3, [r2, #4]
 8006312:	4421      	add	r1, r4
 8006314:	6011      	str	r1, [r2, #0]
 8006316:	e7da      	b.n	80062ce <_free_r+0x26>
 8006318:	d902      	bls.n	8006320 <_free_r+0x78>
 800631a:	230c      	movs	r3, #12
 800631c:	6003      	str	r3, [r0, #0]
 800631e:	e7d6      	b.n	80062ce <_free_r+0x26>
 8006320:	6825      	ldr	r5, [r4, #0]
 8006322:	1961      	adds	r1, r4, r5
 8006324:	428b      	cmp	r3, r1
 8006326:	bf04      	itt	eq
 8006328:	6819      	ldreq	r1, [r3, #0]
 800632a:	685b      	ldreq	r3, [r3, #4]
 800632c:	6063      	str	r3, [r4, #4]
 800632e:	bf04      	itt	eq
 8006330:	1949      	addeq	r1, r1, r5
 8006332:	6021      	streq	r1, [r4, #0]
 8006334:	6054      	str	r4, [r2, #4]
 8006336:	e7ca      	b.n	80062ce <_free_r+0x26>
 8006338:	b003      	add	sp, #12
 800633a:	bd30      	pop	{r4, r5, pc}
 800633c:	20004a78 	.word	0x20004a78

08006340 <sbrk_aligned>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	4e0e      	ldr	r6, [pc, #56]	; (800637c <sbrk_aligned+0x3c>)
 8006344:	460c      	mov	r4, r1
 8006346:	6831      	ldr	r1, [r6, #0]
 8006348:	4605      	mov	r5, r0
 800634a:	b911      	cbnz	r1, 8006352 <sbrk_aligned+0x12>
 800634c:	f000 f8bc 	bl	80064c8 <_sbrk_r>
 8006350:	6030      	str	r0, [r6, #0]
 8006352:	4621      	mov	r1, r4
 8006354:	4628      	mov	r0, r5
 8006356:	f000 f8b7 	bl	80064c8 <_sbrk_r>
 800635a:	1c43      	adds	r3, r0, #1
 800635c:	d00a      	beq.n	8006374 <sbrk_aligned+0x34>
 800635e:	1cc4      	adds	r4, r0, #3
 8006360:	f024 0403 	bic.w	r4, r4, #3
 8006364:	42a0      	cmp	r0, r4
 8006366:	d007      	beq.n	8006378 <sbrk_aligned+0x38>
 8006368:	1a21      	subs	r1, r4, r0
 800636a:	4628      	mov	r0, r5
 800636c:	f000 f8ac 	bl	80064c8 <_sbrk_r>
 8006370:	3001      	adds	r0, #1
 8006372:	d101      	bne.n	8006378 <sbrk_aligned+0x38>
 8006374:	f04f 34ff 	mov.w	r4, #4294967295
 8006378:	4620      	mov	r0, r4
 800637a:	bd70      	pop	{r4, r5, r6, pc}
 800637c:	20004a7c 	.word	0x20004a7c

08006380 <_malloc_r>:
 8006380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006384:	1ccd      	adds	r5, r1, #3
 8006386:	f025 0503 	bic.w	r5, r5, #3
 800638a:	3508      	adds	r5, #8
 800638c:	2d0c      	cmp	r5, #12
 800638e:	bf38      	it	cc
 8006390:	250c      	movcc	r5, #12
 8006392:	2d00      	cmp	r5, #0
 8006394:	4607      	mov	r7, r0
 8006396:	db01      	blt.n	800639c <_malloc_r+0x1c>
 8006398:	42a9      	cmp	r1, r5
 800639a:	d905      	bls.n	80063a8 <_malloc_r+0x28>
 800639c:	230c      	movs	r3, #12
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	2600      	movs	r6, #0
 80063a2:	4630      	mov	r0, r6
 80063a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a8:	4e2e      	ldr	r6, [pc, #184]	; (8006464 <_malloc_r+0xe4>)
 80063aa:	f000 f89d 	bl	80064e8 <__malloc_lock>
 80063ae:	6833      	ldr	r3, [r6, #0]
 80063b0:	461c      	mov	r4, r3
 80063b2:	bb34      	cbnz	r4, 8006402 <_malloc_r+0x82>
 80063b4:	4629      	mov	r1, r5
 80063b6:	4638      	mov	r0, r7
 80063b8:	f7ff ffc2 	bl	8006340 <sbrk_aligned>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	4604      	mov	r4, r0
 80063c0:	d14d      	bne.n	800645e <_malloc_r+0xde>
 80063c2:	6834      	ldr	r4, [r6, #0]
 80063c4:	4626      	mov	r6, r4
 80063c6:	2e00      	cmp	r6, #0
 80063c8:	d140      	bne.n	800644c <_malloc_r+0xcc>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	4631      	mov	r1, r6
 80063ce:	4638      	mov	r0, r7
 80063d0:	eb04 0803 	add.w	r8, r4, r3
 80063d4:	f000 f878 	bl	80064c8 <_sbrk_r>
 80063d8:	4580      	cmp	r8, r0
 80063da:	d13a      	bne.n	8006452 <_malloc_r+0xd2>
 80063dc:	6821      	ldr	r1, [r4, #0]
 80063de:	3503      	adds	r5, #3
 80063e0:	1a6d      	subs	r5, r5, r1
 80063e2:	f025 0503 	bic.w	r5, r5, #3
 80063e6:	3508      	adds	r5, #8
 80063e8:	2d0c      	cmp	r5, #12
 80063ea:	bf38      	it	cc
 80063ec:	250c      	movcc	r5, #12
 80063ee:	4629      	mov	r1, r5
 80063f0:	4638      	mov	r0, r7
 80063f2:	f7ff ffa5 	bl	8006340 <sbrk_aligned>
 80063f6:	3001      	adds	r0, #1
 80063f8:	d02b      	beq.n	8006452 <_malloc_r+0xd2>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	442b      	add	r3, r5
 80063fe:	6023      	str	r3, [r4, #0]
 8006400:	e00e      	b.n	8006420 <_malloc_r+0xa0>
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	1b52      	subs	r2, r2, r5
 8006406:	d41e      	bmi.n	8006446 <_malloc_r+0xc6>
 8006408:	2a0b      	cmp	r2, #11
 800640a:	d916      	bls.n	800643a <_malloc_r+0xba>
 800640c:	1961      	adds	r1, r4, r5
 800640e:	42a3      	cmp	r3, r4
 8006410:	6025      	str	r5, [r4, #0]
 8006412:	bf18      	it	ne
 8006414:	6059      	strne	r1, [r3, #4]
 8006416:	6863      	ldr	r3, [r4, #4]
 8006418:	bf08      	it	eq
 800641a:	6031      	streq	r1, [r6, #0]
 800641c:	5162      	str	r2, [r4, r5]
 800641e:	604b      	str	r3, [r1, #4]
 8006420:	4638      	mov	r0, r7
 8006422:	f104 060b 	add.w	r6, r4, #11
 8006426:	f000 f865 	bl	80064f4 <__malloc_unlock>
 800642a:	f026 0607 	bic.w	r6, r6, #7
 800642e:	1d23      	adds	r3, r4, #4
 8006430:	1af2      	subs	r2, r6, r3
 8006432:	d0b6      	beq.n	80063a2 <_malloc_r+0x22>
 8006434:	1b9b      	subs	r3, r3, r6
 8006436:	50a3      	str	r3, [r4, r2]
 8006438:	e7b3      	b.n	80063a2 <_malloc_r+0x22>
 800643a:	6862      	ldr	r2, [r4, #4]
 800643c:	42a3      	cmp	r3, r4
 800643e:	bf0c      	ite	eq
 8006440:	6032      	streq	r2, [r6, #0]
 8006442:	605a      	strne	r2, [r3, #4]
 8006444:	e7ec      	b.n	8006420 <_malloc_r+0xa0>
 8006446:	4623      	mov	r3, r4
 8006448:	6864      	ldr	r4, [r4, #4]
 800644a:	e7b2      	b.n	80063b2 <_malloc_r+0x32>
 800644c:	4634      	mov	r4, r6
 800644e:	6876      	ldr	r6, [r6, #4]
 8006450:	e7b9      	b.n	80063c6 <_malloc_r+0x46>
 8006452:	230c      	movs	r3, #12
 8006454:	603b      	str	r3, [r7, #0]
 8006456:	4638      	mov	r0, r7
 8006458:	f000 f84c 	bl	80064f4 <__malloc_unlock>
 800645c:	e7a1      	b.n	80063a2 <_malloc_r+0x22>
 800645e:	6025      	str	r5, [r4, #0]
 8006460:	e7de      	b.n	8006420 <_malloc_r+0xa0>
 8006462:	bf00      	nop
 8006464:	20004a78 	.word	0x20004a78

08006468 <_realloc_r>:
 8006468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646c:	4680      	mov	r8, r0
 800646e:	4614      	mov	r4, r2
 8006470:	460e      	mov	r6, r1
 8006472:	b921      	cbnz	r1, 800647e <_realloc_r+0x16>
 8006474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006478:	4611      	mov	r1, r2
 800647a:	f7ff bf81 	b.w	8006380 <_malloc_r>
 800647e:	b92a      	cbnz	r2, 800648c <_realloc_r+0x24>
 8006480:	f7ff ff12 	bl	80062a8 <_free_r>
 8006484:	4625      	mov	r5, r4
 8006486:	4628      	mov	r0, r5
 8006488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800648c:	f000 f838 	bl	8006500 <_malloc_usable_size_r>
 8006490:	4284      	cmp	r4, r0
 8006492:	4607      	mov	r7, r0
 8006494:	d802      	bhi.n	800649c <_realloc_r+0x34>
 8006496:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800649a:	d812      	bhi.n	80064c2 <_realloc_r+0x5a>
 800649c:	4621      	mov	r1, r4
 800649e:	4640      	mov	r0, r8
 80064a0:	f7ff ff6e 	bl	8006380 <_malloc_r>
 80064a4:	4605      	mov	r5, r0
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d0ed      	beq.n	8006486 <_realloc_r+0x1e>
 80064aa:	42bc      	cmp	r4, r7
 80064ac:	4622      	mov	r2, r4
 80064ae:	4631      	mov	r1, r6
 80064b0:	bf28      	it	cs
 80064b2:	463a      	movcs	r2, r7
 80064b4:	f7ff fba4 	bl	8005c00 <memcpy>
 80064b8:	4631      	mov	r1, r6
 80064ba:	4640      	mov	r0, r8
 80064bc:	f7ff fef4 	bl	80062a8 <_free_r>
 80064c0:	e7e1      	b.n	8006486 <_realloc_r+0x1e>
 80064c2:	4635      	mov	r5, r6
 80064c4:	e7df      	b.n	8006486 <_realloc_r+0x1e>
	...

080064c8 <_sbrk_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4d06      	ldr	r5, [pc, #24]	; (80064e4 <_sbrk_r+0x1c>)
 80064cc:	2300      	movs	r3, #0
 80064ce:	4604      	mov	r4, r0
 80064d0:	4608      	mov	r0, r1
 80064d2:	602b      	str	r3, [r5, #0]
 80064d4:	f7fa faf4 	bl	8000ac0 <_sbrk>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	d102      	bne.n	80064e2 <_sbrk_r+0x1a>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	b103      	cbz	r3, 80064e2 <_sbrk_r+0x1a>
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	bd38      	pop	{r3, r4, r5, pc}
 80064e4:	20004a80 	.word	0x20004a80

080064e8 <__malloc_lock>:
 80064e8:	4801      	ldr	r0, [pc, #4]	; (80064f0 <__malloc_lock+0x8>)
 80064ea:	f000 b811 	b.w	8006510 <__retarget_lock_acquire_recursive>
 80064ee:	bf00      	nop
 80064f0:	20004a84 	.word	0x20004a84

080064f4 <__malloc_unlock>:
 80064f4:	4801      	ldr	r0, [pc, #4]	; (80064fc <__malloc_unlock+0x8>)
 80064f6:	f000 b80c 	b.w	8006512 <__retarget_lock_release_recursive>
 80064fa:	bf00      	nop
 80064fc:	20004a84 	.word	0x20004a84

08006500 <_malloc_usable_size_r>:
 8006500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006504:	1f18      	subs	r0, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	bfbc      	itt	lt
 800650a:	580b      	ldrlt	r3, [r1, r0]
 800650c:	18c0      	addlt	r0, r0, r3
 800650e:	4770      	bx	lr

08006510 <__retarget_lock_acquire_recursive>:
 8006510:	4770      	bx	lr

08006512 <__retarget_lock_release_recursive>:
 8006512:	4770      	bx	lr

08006514 <_init>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	bf00      	nop
 8006518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651a:	bc08      	pop	{r3}
 800651c:	469e      	mov	lr, r3
 800651e:	4770      	bx	lr

08006520 <_fini>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	bf00      	nop
 8006524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006526:	bc08      	pop	{r3}
 8006528:	469e      	mov	lr, r3
 800652a:	4770      	bx	lr
