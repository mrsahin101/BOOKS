
026_FreeRTOS_Binary_Semaphore_With_TIMEOUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006010  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800628c  0800628c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800628c  0800628c  0001628c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006294  08006294  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006294  08006294  00016294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006298  08006298  00016298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800629c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ac4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b38  20004b38  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001950d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003282  00000000  00000000  000395b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0003c838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001318  00000000  00000000  0003dc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000037e3  00000000  00000000  0003ef80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ff4  00000000  00000000  00042763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5147  00000000  00000000  00058757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d89e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005868  00000000  00000000  0012d8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006188 	.word	0x08006188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006188 	.word	0x08006188

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0)
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d114      	bne.n	800051e <HAL_GPIO_EXTI_Callback+0x3a>
  {
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]

	  xSemaphoreGiveFromISR(xBinarySemaphore, &xHigherPriorityTaskWoken);
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_GPIO_EXTI_Callback+0x44>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f107 020c 	add.w	r2, r7, #12
 8000500:	4611      	mov	r1, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f003 f9c9 	bl	800389a <xQueueGiveFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d007      	beq.n	800051e <HAL_GPIO_EXTI_Callback+0x3a>
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <HAL_GPIO_EXTI_Callback+0x48>)
 8000510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	f3bf 8f4f 	dsb	sy
 800051a:	f3bf 8f6f 	isb	sy
  }
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200000d4 	.word	0x200000d4
 800052c:	e000ed04 	.word	0xe000ed04

08000530 <vButtonHandlerTask>:
void vButtonHandlerTask(void *pvParameters)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	const char *msg = "Button was pressed!\r\n";
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <vButtonHandlerTask+0x58>)
 800053a:	617b      	str	r3, [r7, #20]
	const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS(5000);
 800053c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000540:	613b      	str	r3, [r7, #16]
	const char *errmsg = "Press Press the Button. Been 5 second since last press\r\n";
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <vButtonHandlerTask+0x5c>)
 8000544:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		if(xSemaphoreTake(xBinarySemaphore, xMaxExpectedBlockTime) == pdFAIL)
 8000546:	4b12      	ldr	r3, [pc, #72]	; (8000590 <vButtonHandlerTask+0x60>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6939      	ldr	r1, [r7, #16]
 800054c:	4618      	mov	r0, r3
 800054e:	f003 fb11 	bl	8003b74 <xQueueSemaphoreTake>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d10b      	bne.n	8000570 <vButtonHandlerTask+0x40>
			HAL_UART_Transmit(&huart2, (uint8_t*)errmsg, strlen(errmsg), HAL_MAX_DELAY);
 8000558:	68f8      	ldr	r0, [r7, #12]
 800055a:	f7ff fe39 	bl	80001d0 <strlen>
 800055e:	4603      	mov	r3, r0
 8000560:	b29a      	uxth	r2, r3
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	68f9      	ldr	r1, [r7, #12]
 8000568:	480a      	ldr	r0, [pc, #40]	; (8000594 <vButtonHandlerTask+0x64>)
 800056a:	f001 fe00 	bl	800216e <HAL_UART_Transmit>
 800056e:	e7ea      	b.n	8000546 <vButtonHandlerTask+0x16>
		else
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000570:	6978      	ldr	r0, [r7, #20]
 8000572:	f7ff fe2d 	bl	80001d0 <strlen>
 8000576:	4603      	mov	r3, r0
 8000578:	b29a      	uxth	r2, r3
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
 800057e:	6979      	ldr	r1, [r7, #20]
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <vButtonHandlerTask+0x64>)
 8000582:	f001 fdf4 	bl	800216e <HAL_UART_Transmit>
		if(xSemaphoreTake(xBinarySemaphore, xMaxExpectedBlockTime) == pdFAIL)
 8000586:	e7de      	b.n	8000546 <vButtonHandlerTask+0x16>
 8000588:	080061a0 	.word	0x080061a0
 800058c:	080061b8 	.word	0x080061b8
 8000590:	200000d4 	.word	0x200000d4
 8000594:	20000090 	.word	0x20000090

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fa9d 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f81f 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f8b1 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005aa:	f000 f885 	bl	80006b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xBinarySemaphore = xSemaphoreCreateBinary();
 80005ae:	2203      	movs	r2, #3
 80005b0:	2100      	movs	r1, #0
 80005b2:	2001      	movs	r0, #1
 80005b4:	f002 ff7a 	bl	80034ac <xQueueGenericCreate>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <main+0x40>)
 80005bc:	6013      	str	r3, [r2, #0]
  xTaskCreate(vButtonHandlerTask,"Handler", configMINIMAL_STACK_SIZE, NULL, 1,NULL);
 80005be:	2300      	movs	r3, #0
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2301      	movs	r3, #1
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	4904      	ldr	r1, [pc, #16]	; (80005dc <main+0x44>)
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <main+0x48>)
 80005ce:	f003 fdc0 	bl	8004152 <xTaskCreate>
  vTaskStartScheduler();
 80005d2:	f003 ff19 	bl	8004408 <vTaskStartScheduler>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <main+0x3e>
 80005d8:	200000d4 	.word	0x200000d4
 80005dc:	080061f4 	.word	0x080061f4
 80005e0:	08000531 	.word	0x08000531

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f005 fcfe 	bl	8005ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <SystemClock_Config+0xcc>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <SystemClock_Config+0xd0>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000658:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000662:	2307      	movs	r3, #7
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fdba 	bl	80011e4 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000676:	f000 f8c5 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000686:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2105      	movs	r1, #5
 8000698:	4618      	mov	r0, r3
 800069a:	f001 f81b 	bl	80016d4 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a4:	f000 f8ae 	bl	8000804 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f001 fcf0 	bl	80020d4 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f883 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000090 	.word	0x20000090
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <MX_GPIO_Init+0xc8>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a23      	ldr	r2, [pc, #140]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_GPIO_Init+0xc8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <MX_GPIO_Init+0xcc>)
 800077e:	f000 fcff 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000782:	2301      	movs	r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000786:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	4811      	ldr	r0, [pc, #68]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000798:	f000 fb56 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800079c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4619      	mov	r1, r3
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <MX_GPIO_Init+0xcc>)
 80007b6:	f000 fb47 	bl	8000e48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2105      	movs	r1, #5
 80007be:	2006      	movs	r0, #6
 80007c0:	f000 fa86 	bl	8000cd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007c4:	2006      	movs	r0, #6
 80007c6:	f000 fa9f 	bl	8000d08 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ca:	bf00      	nop
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020c00 	.word	0x40020c00
 80007dc:	40020000 	.word	0x40020000

080007e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d101      	bne.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007f2:	f000 f995 	bl	8000b20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40002000 	.word	0x40002000

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_MspInit+0x54>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a11      	ldr	r2, [pc, #68]	; (8000864 <HAL_MspInit+0x54>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x54>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_MspInit+0x54>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <HAL_MspInit+0x54>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_MspInit+0x54>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	210f      	movs	r1, #15
 8000852:	f06f 0001 	mvn.w	r0, #1
 8000856:	f000 fa3b 	bl	8000cd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <HAL_UART_MspInit+0x94>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d133      	bne.n	80008f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_UART_MspInit+0x98>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <HAL_UART_MspInit+0x98>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_UART_MspInit+0x98>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_UART_MspInit+0x98>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a14      	ldr	r2, [pc, #80]	; (8000900 <HAL_UART_MspInit+0x98>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_UART_MspInit+0x98>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c2:	230c      	movs	r3, #12
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d2:	2307      	movs	r3, #7
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <HAL_UART_MspInit+0x9c>)
 80008de:	f000 fab3 	bl	8000e48 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2105      	movs	r1, #5
 80008e6:	2026      	movs	r0, #38	; 0x26
 80008e8:	f000 f9f2 	bl	8000cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ec:	2026      	movs	r0, #38	; 0x26
 80008ee:	f000 fa0b 	bl	8000d08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	; 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40004400 	.word	0x40004400
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000

08000908 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	; 0x38
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	4b33      	ldr	r3, [pc, #204]	; (80009ec <HAL_InitTick+0xe4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a32      	ldr	r2, [pc, #200]	; (80009ec <HAL_InitTick+0xe4>)
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b30      	ldr	r3, [pc, #192]	; (80009ec <HAL_InitTick+0xe4>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000934:	f107 0210 	add.w	r2, r7, #16
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f8e8 	bl	8001b14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000944:	6a3b      	ldr	r3, [r7, #32]
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094a:	2b00      	cmp	r3, #0
 800094c:	d103      	bne.n	8000956 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800094e:	f001 f8b9 	bl	8001ac4 <HAL_RCC_GetPCLK1Freq>
 8000952:	6378      	str	r0, [r7, #52]	; 0x34
 8000954:	e004      	b.n	8000960 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000956:	f001 f8b5 	bl	8001ac4 <HAL_RCC_GetPCLK1Freq>
 800095a:	4603      	mov	r3, r0
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000962:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <HAL_InitTick+0xe8>)
 8000964:	fba2 2303 	umull	r2, r3, r2, r3
 8000968:	0c9b      	lsrs	r3, r3, #18
 800096a:	3b01      	subs	r3, #1
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <HAL_InitTick+0xec>)
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <HAL_InitTick+0xf0>)
 8000972:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <HAL_InitTick+0xec>)
 8000976:	f240 32e7 	movw	r2, #999	; 0x3e7
 800097a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800097c:	4a1d      	ldr	r2, [pc, #116]	; (80009f4 <HAL_InitTick+0xec>)
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <HAL_InitTick+0xec>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <HAL_InitTick+0xec>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <HAL_InitTick+0xec>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000994:	4817      	ldr	r0, [pc, #92]	; (80009f4 <HAL_InitTick+0xec>)
 8000996:	f001 f8ef 	bl	8001b78 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d11b      	bne.n	80009e0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <HAL_InitTick+0xec>)
 80009aa:	f001 f93f 	bl	8001c2c <HAL_TIM_Base_Start_IT>
 80009ae:	4603      	mov	r3, r0
 80009b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d111      	bne.n	80009e0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80009bc:	202d      	movs	r0, #45	; 0x2d
 80009be:	f000 f9a3 	bl	8000d08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d808      	bhi.n	80009da <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	202d      	movs	r0, #45	; 0x2d
 80009ce:	f000 f97f 	bl	8000cd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_InitTick+0xf4>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	e002      	b.n	80009e0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3738      	adds	r7, #56	; 0x38
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	200000d8 	.word	0x200000d8
 80009f8:	40002000 	.word	0x40002000
 80009fc:	20000004 	.word	0x20000004

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f000 fbbf 	bl	80011b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <USART2_IRQHandler+0x10>)
 8000a42:	f001 fc27 	bl	8002294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000090 	.word	0x20000090

08000a50 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000a56:	f001 f959 	bl	8001d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000d8 	.word	0x200000d8

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a8e:	490e      	ldr	r1, [pc, #56]	; (8000ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa4:	4c0b      	ldr	r4, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ab2:	f7ff ffd7 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f005 fa69 	bl	8005f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aba:	f7ff fd6d 	bl	8000598 <main>
  bx  lr    
 8000abe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000acc:	0800629c 	.word	0x0800629c
  ldr r2, =_sbss
 8000ad0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ad4:	20004b38 	.word	0x20004b38

08000ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC_IRQHandler>
	...

08000adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <HAL_Init+0x40>)
 8000ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_Init+0x40>)
 8000af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x40>)
 8000afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f8d8 	bl	8000cba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f7ff fefc 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fe7e 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023c00 	.word	0x40023c00

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000120 	.word	0x20000120

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000120 	.word	0x20000120

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	; (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ff4c 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
 8000cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce2:	f7ff ff61 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000ce6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	68b9      	ldr	r1, [r7, #8]
 8000cec:	6978      	ldr	r0, [r7, #20]
 8000cee:	f7ff ffb1 	bl	8000c54 <NVIC_EncodePriority>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff80 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff54 	bl	8000bc4 <__NVIC_EnableIRQ>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d32:	f7ff ff09 	bl	8000b48 <HAL_GetTick>
 8000d36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d008      	beq.n	8000d56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e052      	b.n	8000dfc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0216 	bic.w	r2, r2, #22
 8000d64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	695a      	ldr	r2, [r3, #20]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d103      	bne.n	8000d86 <HAL_DMA_Abort+0x62>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d007      	beq.n	8000d96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0208 	bic.w	r2, r2, #8
 8000d94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0201 	bic.w	r2, r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000da6:	e013      	b.n	8000dd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000da8:	f7ff fece 	bl	8000b48 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b05      	cmp	r3, #5
 8000db4:	d90c      	bls.n	8000dd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2220      	movs	r2, #32
 8000dba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e015      	b.n	8000dfc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1e4      	bne.n	8000da8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de2:	223f      	movs	r2, #63	; 0x3f
 8000de4:	409a      	lsls	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2201      	movs	r2, #1
 8000dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d004      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00c      	b.n	8000e3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2205      	movs	r2, #5
 8000e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 0201 	bic.w	r2, r2, #1
 8000e38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	e16b      	b.n	800113c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 815a 	bne.w	8001136 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d130      	bne.n	8000efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d017      	beq.n	8000f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	69b9      	ldr	r1, [r7, #24]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80b4 	beq.w	8001136 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b60      	ldr	r3, [pc, #384]	; (8001154 <HAL_GPIO_Init+0x30c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a5f      	ldr	r2, [pc, #380]	; (8001154 <HAL_GPIO_Init+0x30c>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b5d      	ldr	r3, [pc, #372]	; (8001154 <HAL_GPIO_Init+0x30c>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fea:	4a5b      	ldr	r2, [pc, #364]	; (8001158 <HAL_GPIO_Init+0x310>)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a52      	ldr	r2, [pc, #328]	; (800115c <HAL_GPIO_Init+0x314>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d02b      	beq.n	800106e <HAL_GPIO_Init+0x226>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a51      	ldr	r2, [pc, #324]	; (8001160 <HAL_GPIO_Init+0x318>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d025      	beq.n	800106a <HAL_GPIO_Init+0x222>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a50      	ldr	r2, [pc, #320]	; (8001164 <HAL_GPIO_Init+0x31c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01f      	beq.n	8001066 <HAL_GPIO_Init+0x21e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4f      	ldr	r2, [pc, #316]	; (8001168 <HAL_GPIO_Init+0x320>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d019      	beq.n	8001062 <HAL_GPIO_Init+0x21a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4e      	ldr	r2, [pc, #312]	; (800116c <HAL_GPIO_Init+0x324>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0x216>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4d      	ldr	r2, [pc, #308]	; (8001170 <HAL_GPIO_Init+0x328>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00d      	beq.n	800105a <HAL_GPIO_Init+0x212>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4c      	ldr	r2, [pc, #304]	; (8001174 <HAL_GPIO_Init+0x32c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x20e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4b      	ldr	r2, [pc, #300]	; (8001178 <HAL_GPIO_Init+0x330>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_GPIO_Init+0x20a>
 800104e:	2307      	movs	r3, #7
 8001050:	e00e      	b.n	8001070 <HAL_GPIO_Init+0x228>
 8001052:	2308      	movs	r3, #8
 8001054:	e00c      	b.n	8001070 <HAL_GPIO_Init+0x228>
 8001056:	2306      	movs	r3, #6
 8001058:	e00a      	b.n	8001070 <HAL_GPIO_Init+0x228>
 800105a:	2305      	movs	r3, #5
 800105c:	e008      	b.n	8001070 <HAL_GPIO_Init+0x228>
 800105e:	2304      	movs	r3, #4
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x228>
 8001062:	2303      	movs	r3, #3
 8001064:	e004      	b.n	8001070 <HAL_GPIO_Init+0x228>
 8001066:	2302      	movs	r3, #2
 8001068:	e002      	b.n	8001070 <HAL_GPIO_Init+0x228>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_GPIO_Init+0x228>
 800106e:	2300      	movs	r3, #0
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	f002 0203 	and.w	r2, r2, #3
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	4093      	lsls	r3, r2
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001080:	4935      	ldr	r1, [pc, #212]	; (8001158 <HAL_GPIO_Init+0x310>)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108e:	4b3b      	ldr	r3, [pc, #236]	; (800117c <HAL_GPIO_Init+0x334>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b2:	4a32      	ldr	r2, [pc, #200]	; (800117c <HAL_GPIO_Init+0x334>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b8:	4b30      	ldr	r3, [pc, #192]	; (800117c <HAL_GPIO_Init+0x334>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010dc:	4a27      	ldr	r2, [pc, #156]	; (800117c <HAL_GPIO_Init+0x334>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e2:	4b26      	ldr	r3, [pc, #152]	; (800117c <HAL_GPIO_Init+0x334>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001106:	4a1d      	ldr	r2, [pc, #116]	; (800117c <HAL_GPIO_Init+0x334>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_GPIO_Init+0x334>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <HAL_GPIO_Init+0x334>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3301      	adds	r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	f67f ae90 	bls.w	8000e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3724      	adds	r7, #36	; 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	40013800 	.word	0x40013800
 800115c:	40020000 	.word	0x40020000
 8001160:	40020400 	.word	0x40020400
 8001164:	40020800 	.word	0x40020800
 8001168:	40020c00 	.word	0x40020c00
 800116c:	40021000 	.word	0x40021000
 8001170:	40021400 	.word	0x40021400
 8001174:	40021800 	.word	0x40021800
 8001178:	40021c00 	.word	0x40021c00
 800117c:	40013c00 	.word	0x40013c00

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800119c:	e003      	b.n	80011a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f986 	bl	80004e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40013c00 	.word	0x40013c00

080011e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e267      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d075      	beq.n	80012ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001202:	4b88      	ldr	r3, [pc, #544]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b04      	cmp	r3, #4
 800120c:	d00c      	beq.n	8001228 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120e:	4b85      	ldr	r3, [pc, #532]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001216:	2b08      	cmp	r3, #8
 8001218:	d112      	bne.n	8001240 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121a:	4b82      	ldr	r3, [pc, #520]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001226:	d10b      	bne.n	8001240 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	4b7e      	ldr	r3, [pc, #504]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d05b      	beq.n	80012ec <HAL_RCC_OscConfig+0x108>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d157      	bne.n	80012ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e242      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001248:	d106      	bne.n	8001258 <HAL_RCC_OscConfig+0x74>
 800124a:	4b76      	ldr	r3, [pc, #472]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a75      	ldr	r2, [pc, #468]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e01d      	b.n	8001294 <HAL_RCC_OscConfig+0xb0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x98>
 8001262:	4b70      	ldr	r3, [pc, #448]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6f      	ldr	r2, [pc, #444]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b6d      	ldr	r3, [pc, #436]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a6c      	ldr	r2, [pc, #432]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0xb0>
 800127c:	4b69      	ldr	r3, [pc, #420]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a68      	ldr	r2, [pc, #416]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b66      	ldr	r3, [pc, #408]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a65      	ldr	r2, [pc, #404]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 800128e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fc54 	bl	8000b48 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fc50 	bl	8000b48 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	; 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e207      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	4b5b      	ldr	r3, [pc, #364]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0xc0>
 80012c2:	e014      	b.n	80012ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fc40 	bl	8000b48 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fc3c 	bl	8000b48 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e1f3      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012de:	4b51      	ldr	r3, [pc, #324]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0xe8>
 80012ea:	e000      	b.n	80012ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d063      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fa:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00b      	beq.n	800131e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001306:	4b47      	ldr	r3, [pc, #284]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800130e:	2b08      	cmp	r3, #8
 8001310:	d11c      	bne.n	800134c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001312:	4b44      	ldr	r3, [pc, #272]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	4b41      	ldr	r3, [pc, #260]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <HAL_RCC_OscConfig+0x152>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e1c7      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001336:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4937      	ldr	r1, [pc, #220]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	e03a      	b.n	80013c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d020      	beq.n	8001396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001354:	4b34      	ldr	r3, [pc, #208]	; (8001428 <HAL_RCC_OscConfig+0x244>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135a:	f7ff fbf5 	bl	8000b48 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001362:	f7ff fbf1 	bl	8000b48 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e1a8      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001374:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4925      	ldr	r1, [pc, #148]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e015      	b.n	80013c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <HAL_RCC_OscConfig+0x244>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fbd4 	bl	8000b48 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a4:	f7ff fbd0 	bl	8000b48 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e187      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d036      	beq.n	800143c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d016      	beq.n	8001404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_RCC_OscConfig+0x248>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff fbb4 	bl	8000b48 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff fbb0 	bl	8000b48 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e167      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_RCC_OscConfig+0x240>)
 80013f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x200>
 8001402:	e01b      	b.n	800143c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_RCC_OscConfig+0x248>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff fb9d 	bl	8000b48 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001410:	e00e      	b.n	8001430 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001412:	f7ff fb99 	bl	8000b48 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d907      	bls.n	8001430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e150      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
 8001424:	40023800 	.word	0x40023800
 8001428:	42470000 	.word	0x42470000
 800142c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	4b88      	ldr	r3, [pc, #544]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 8001432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ea      	bne.n	8001412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 8097 	beq.w	8001578 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144e:	4b81      	ldr	r3, [pc, #516]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10f      	bne.n	800147a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b7d      	ldr	r3, [pc, #500]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a7c      	ldr	r2, [pc, #496]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b7a      	ldr	r3, [pc, #488]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001476:	2301      	movs	r3, #1
 8001478:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	4b77      	ldr	r3, [pc, #476]	; (8001658 <HAL_RCC_OscConfig+0x474>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001482:	2b00      	cmp	r3, #0
 8001484:	d118      	bne.n	80014b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001486:	4b74      	ldr	r3, [pc, #464]	; (8001658 <HAL_RCC_OscConfig+0x474>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a73      	ldr	r2, [pc, #460]	; (8001658 <HAL_RCC_OscConfig+0x474>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001492:	f7ff fb59 	bl	8000b48 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149a:	f7ff fb55 	bl	8000b48 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e10c      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <HAL_RCC_OscConfig+0x474>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d106      	bne.n	80014ce <HAL_RCC_OscConfig+0x2ea>
 80014c0:	4b64      	ldr	r3, [pc, #400]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	4a63      	ldr	r2, [pc, #396]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6713      	str	r3, [r2, #112]	; 0x70
 80014cc:	e01c      	b.n	8001508 <HAL_RCC_OscConfig+0x324>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x30c>
 80014d6:	4b5f      	ldr	r3, [pc, #380]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	4a5e      	ldr	r2, [pc, #376]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6713      	str	r3, [r2, #112]	; 0x70
 80014e2:	4b5c      	ldr	r3, [pc, #368]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e6:	4a5b      	ldr	r2, [pc, #364]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6713      	str	r3, [r2, #112]	; 0x70
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0x324>
 80014f0:	4b58      	ldr	r3, [pc, #352]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f4:	4a57      	ldr	r2, [pc, #348]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	6713      	str	r3, [r2, #112]	; 0x70
 80014fc:	4b55      	ldr	r3, [pc, #340]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001500:	4a54      	ldr	r2, [pc, #336]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 8001502:	f023 0304 	bic.w	r3, r3, #4
 8001506:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d015      	beq.n	800153c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff fb1a 	bl	8000b48 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001516:	e00a      	b.n	800152e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff fb16 	bl	8000b48 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	; 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e0cb      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152e:	4b49      	ldr	r3, [pc, #292]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0ee      	beq.n	8001518 <HAL_RCC_OscConfig+0x334>
 800153a:	e014      	b.n	8001566 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff fb04 	bl	8000b48 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001542:	e00a      	b.n	800155a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001544:	f7ff fb00 	bl	8000b48 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e0b5      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155a:	4b3e      	ldr	r3, [pc, #248]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1ee      	bne.n	8001544 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d105      	bne.n	8001578 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156c:	4b39      	ldr	r3, [pc, #228]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	4a38      	ldr	r2, [pc, #224]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 8001572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001576:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80a1 	beq.w	80016c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001582:	4b34      	ldr	r3, [pc, #208]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b08      	cmp	r3, #8
 800158c:	d05c      	beq.n	8001648 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d141      	bne.n	800161a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001596:	4b31      	ldr	r3, [pc, #196]	; (800165c <HAL_RCC_OscConfig+0x478>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fad4 	bl	8000b48 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff fad0 	bl	8000b48 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e087      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b6:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69da      	ldr	r2, [r3, #28]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	019b      	lsls	r3, r3, #6
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	085b      	lsrs	r3, r3, #1
 80015da:	3b01      	subs	r3, #1
 80015dc:	041b      	lsls	r3, r3, #16
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	061b      	lsls	r3, r3, #24
 80015e6:	491b      	ldr	r1, [pc, #108]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_RCC_OscConfig+0x478>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff faa9 	bl	8000b48 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fa:	f7ff faa5 	bl	8000b48 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e05c      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x416>
 8001618:	e054      	b.n	80016c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_RCC_OscConfig+0x478>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fa92 	bl	8000b48 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff fa8e 	bl	8000b48 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e045      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_RCC_OscConfig+0x470>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x444>
 8001646:	e03d      	b.n	80016c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d107      	bne.n	8001660 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e038      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
 8001654:	40023800 	.word	0x40023800
 8001658:	40007000 	.word	0x40007000
 800165c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_RCC_OscConfig+0x4ec>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d028      	beq.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d121      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d11a      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001696:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001698:	4293      	cmp	r3, r2
 800169a:	d111      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	085b      	lsrs	r3, r3, #1
 80016a8:	3b01      	subs	r3, #1
 80016aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0cc      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e8:	4b68      	ldr	r3, [pc, #416]	; (800188c <HAL_RCC_ClockConfig+0x1b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d90c      	bls.n	8001710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b65      	ldr	r3, [pc, #404]	; (800188c <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b63      	ldr	r3, [pc, #396]	; (800188c <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0b8      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001728:	4b59      	ldr	r3, [pc, #356]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a58      	ldr	r2, [pc, #352]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001732:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001740:	4b53      	ldr	r3, [pc, #332]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a52      	ldr	r2, [pc, #328]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800174a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800174c:	4b50      	ldr	r3, [pc, #320]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	494d      	ldr	r1, [pc, #308]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d044      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d107      	bne.n	8001782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	4b47      	ldr	r3, [pc, #284]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d119      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e07f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d003      	beq.n	8001792 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178e:	2b03      	cmp	r3, #3
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001792:	4b3f      	ldr	r3, [pc, #252]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e06f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a2:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e067      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017b2:	4b37      	ldr	r3, [pc, #220]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f023 0203 	bic.w	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4934      	ldr	r1, [pc, #208]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c4:	f7ff f9c0 	bl	8000b48 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017cc:	f7ff f9bc 	bl	8000b48 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e04f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 020c 	and.w	r2, r3, #12
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d1eb      	bne.n	80017cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <HAL_RCC_ClockConfig+0x1b8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d20c      	bcs.n	800181c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e032      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001828:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4916      	ldr	r1, [pc, #88]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d009      	beq.n	800185a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	490e      	ldr	r1, [pc, #56]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800185a:	f000 f821 	bl	80018a0 <HAL_RCC_GetSysClockFreq>
 800185e:	4602      	mov	r2, r0
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	490a      	ldr	r1, [pc, #40]	; (8001894 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	5ccb      	ldrb	r3, [r1, r3]
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f844 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00
 8001890:	40023800 	.word	0x40023800
 8001894:	08006214 	.word	0x08006214
 8001898:	20000000 	.word	0x20000000
 800189c:	20000004 	.word	0x20000004

080018a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a4:	b094      	sub	sp, #80	; 0x50
 80018a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	647b      	str	r3, [r7, #68]	; 0x44
 80018ac:	2300      	movs	r3, #0
 80018ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018b0:	2300      	movs	r3, #0
 80018b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b8:	4b79      	ldr	r3, [pc, #484]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d00d      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x40>
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	f200 80e1 	bhi.w	8001a8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x34>
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d003      	beq.n	80018da <HAL_RCC_GetSysClockFreq+0x3a>
 80018d2:	e0db      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4b73      	ldr	r3, [pc, #460]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018d8:	e0db      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018da:	4b73      	ldr	r3, [pc, #460]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x208>)
 80018dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018de:	e0d8      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e0:	4b6f      	ldr	r3, [pc, #444]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ea:	4b6d      	ldr	r3, [pc, #436]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d063      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f6:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	099b      	lsrs	r3, r3, #6
 80018fc:	2200      	movs	r2, #0
 80018fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001900:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
 800190a:	2300      	movs	r3, #0
 800190c:	637b      	str	r3, [r7, #52]	; 0x34
 800190e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001912:	4622      	mov	r2, r4
 8001914:	462b      	mov	r3, r5
 8001916:	f04f 0000 	mov.w	r0, #0
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	0159      	lsls	r1, r3, #5
 8001920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001924:	0150      	lsls	r0, r2, #5
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4621      	mov	r1, r4
 800192c:	1a51      	subs	r1, r2, r1
 800192e:	6139      	str	r1, [r7, #16]
 8001930:	4629      	mov	r1, r5
 8001932:	eb63 0301 	sbc.w	r3, r3, r1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001944:	4659      	mov	r1, fp
 8001946:	018b      	lsls	r3, r1, #6
 8001948:	4651      	mov	r1, sl
 800194a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800194e:	4651      	mov	r1, sl
 8001950:	018a      	lsls	r2, r1, #6
 8001952:	4651      	mov	r1, sl
 8001954:	ebb2 0801 	subs.w	r8, r2, r1
 8001958:	4659      	mov	r1, fp
 800195a:	eb63 0901 	sbc.w	r9, r3, r1
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800196a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800196e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001972:	4690      	mov	r8, r2
 8001974:	4699      	mov	r9, r3
 8001976:	4623      	mov	r3, r4
 8001978:	eb18 0303 	adds.w	r3, r8, r3
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	462b      	mov	r3, r5
 8001980:	eb49 0303 	adc.w	r3, r9, r3
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001992:	4629      	mov	r1, r5
 8001994:	024b      	lsls	r3, r1, #9
 8001996:	4621      	mov	r1, r4
 8001998:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800199c:	4621      	mov	r1, r4
 800199e:	024a      	lsls	r2, r1, #9
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a6:	2200      	movs	r2, #0
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019b0:	f7fe fc16 	bl	80001e0 <__aeabi_uldivmod>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4613      	mov	r3, r2
 80019ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019bc:	e058      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	2200      	movs	r2, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	4611      	mov	r1, r2
 80019ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ce:	623b      	str	r3, [r7, #32]
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
 80019d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019d8:	4642      	mov	r2, r8
 80019da:	464b      	mov	r3, r9
 80019dc:	f04f 0000 	mov.w	r0, #0
 80019e0:	f04f 0100 	mov.w	r1, #0
 80019e4:	0159      	lsls	r1, r3, #5
 80019e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ea:	0150      	lsls	r0, r2, #5
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4641      	mov	r1, r8
 80019f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80019f6:	4649      	mov	r1, r9
 80019f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a10:	ebb2 040a 	subs.w	r4, r2, sl
 8001a14:	eb63 050b 	sbc.w	r5, r3, fp
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	00eb      	lsls	r3, r5, #3
 8001a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a26:	00e2      	lsls	r2, r4, #3
 8001a28:	4614      	mov	r4, r2
 8001a2a:	461d      	mov	r5, r3
 8001a2c:	4643      	mov	r3, r8
 8001a2e:	18e3      	adds	r3, r4, r3
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	464b      	mov	r3, r9
 8001a34:	eb45 0303 	adc.w	r3, r5, r3
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a46:	4629      	mov	r1, r5
 8001a48:	028b      	lsls	r3, r1, #10
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a50:	4621      	mov	r1, r4
 8001a52:	028a      	lsls	r2, r1, #10
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	61fa      	str	r2, [r7, #28]
 8001a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a64:	f7fe fbbc 	bl	80001e0 <__aeabi_uldivmod>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	0c1b      	lsrs	r3, r3, #16
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a8a:	e002      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3750      	adds	r7, #80	; 0x50
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	00f42400 	.word	0x00f42400
 8001aa8:	007a1200 	.word	0x007a1200

08001aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000000 	.word	0x20000000

08001ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ac8:	f7ff fff0 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	0a9b      	lsrs	r3, r3, #10
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4903      	ldr	r1, [pc, #12]	; (8001ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	08006224 	.word	0x08006224

08001aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001af0:	f7ff ffdc 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	0b5b      	lsrs	r3, r3, #13
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	4903      	ldr	r1, [pc, #12]	; (8001b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b02:	5ccb      	ldrb	r3, [r1, r3]
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	08006224 	.word	0x08006224

08001b14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	220f      	movs	r2, #15
 8001b22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_RCC_GetClockConfig+0x5c>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	08db      	lsrs	r3, r3, #3
 8001b4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <HAL_RCC_GetClockConfig+0x60>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0207 	and.w	r2, r3, #7
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	601a      	str	r2, [r3, #0]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40023c00 	.word	0x40023c00

08001b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e041      	b.n	8001c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f839 	bl	8001c16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f000 f9d8 	bl	8001f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d001      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e04e      	b.n	8001ce2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a23      	ldr	r2, [pc, #140]	; (8001cf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d022      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c6e:	d01d      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d018      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00e      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d009      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d004      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d111      	bne.n	8001cd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d010      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0201 	orr.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cce:	e007      	b.n	8001ce0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	40000400 	.word	0x40000400
 8001cf8:	40000800 	.word	0x40000800
 8001cfc:	40000c00 	.word	0x40000c00
 8001d00:	40010400 	.word	0x40010400
 8001d04:	40014000 	.word	0x40014000
 8001d08:	40001800 	.word	0x40001800

08001d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d122      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d11b      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0202 	mvn.w	r2, #2
 8001d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8ee 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8e0 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f8f1 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0204 	mvn.w	r2, #4
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8c4 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8b6 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8c7 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0208 	mvn.w	r2, #8
 8001de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2204      	movs	r2, #4
 8001de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f89a 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f88c 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f89d 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b10      	cmp	r3, #16
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0210 	mvn.w	r2, #16
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2208      	movs	r2, #8
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f870 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f862 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f873 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0201 	mvn.w	r2, #1
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7fe fca8 	bl	80007e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	2b80      	cmp	r3, #128	; 0x80
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea8:	2b80      	cmp	r3, #128	; 0x80
 8001eaa:	d107      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f902 	bl	80020c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec6:	2b40      	cmp	r3, #64	; 0x40
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed4:	2b40      	cmp	r3, #64	; 0x40
 8001ed6:	d107      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f838 	bl	8001f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d10e      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d107      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0220 	mvn.w	r2, #32
 8001f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f8cc 	bl	80020ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a40      	ldr	r2, [pc, #256]	; (8002080 <TIM_Base_SetConfig+0x114>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d013      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8a:	d00f      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a3d      	ldr	r2, [pc, #244]	; (8002084 <TIM_Base_SetConfig+0x118>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00b      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a3c      	ldr	r2, [pc, #240]	; (8002088 <TIM_Base_SetConfig+0x11c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3b      	ldr	r2, [pc, #236]	; (800208c <TIM_Base_SetConfig+0x120>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d003      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3a      	ldr	r2, [pc, #232]	; (8002090 <TIM_Base_SetConfig+0x124>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d108      	bne.n	8001fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a2f      	ldr	r2, [pc, #188]	; (8002080 <TIM_Base_SetConfig+0x114>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d02b      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fcc:	d027      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a2c      	ldr	r2, [pc, #176]	; (8002084 <TIM_Base_SetConfig+0x118>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d023      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a2b      	ldr	r2, [pc, #172]	; (8002088 <TIM_Base_SetConfig+0x11c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d01f      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a2a      	ldr	r2, [pc, #168]	; (800208c <TIM_Base_SetConfig+0x120>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01b      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a29      	ldr	r2, [pc, #164]	; (8002090 <TIM_Base_SetConfig+0x124>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d017      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a28      	ldr	r2, [pc, #160]	; (8002094 <TIM_Base_SetConfig+0x128>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a27      	ldr	r2, [pc, #156]	; (8002098 <TIM_Base_SetConfig+0x12c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00f      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a26      	ldr	r2, [pc, #152]	; (800209c <TIM_Base_SetConfig+0x130>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00b      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a25      	ldr	r2, [pc, #148]	; (80020a0 <TIM_Base_SetConfig+0x134>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a24      	ldr	r2, [pc, #144]	; (80020a4 <TIM_Base_SetConfig+0x138>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d003      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a23      	ldr	r2, [pc, #140]	; (80020a8 <TIM_Base_SetConfig+0x13c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d108      	bne.n	8002030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <TIM_Base_SetConfig+0x114>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <TIM_Base_SetConfig+0xf8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <TIM_Base_SetConfig+0x124>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d103      	bne.n	800206c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	615a      	str	r2, [r3, #20]
}
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40010000 	.word	0x40010000
 8002084:	40000400 	.word	0x40000400
 8002088:	40000800 	.word	0x40000800
 800208c:	40000c00 	.word	0x40000c00
 8002090:	40010400 	.word	0x40010400
 8002094:	40014000 	.word	0x40014000
 8002098:	40014400 	.word	0x40014400
 800209c:	40014800 	.word	0x40014800
 80020a0:	40001800 	.word	0x40001800
 80020a4:	40001c00 	.word	0x40001c00
 80020a8:	40002000 	.word	0x40002000

080020ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e03f      	b.n	8002166 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fbb4 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2224      	movs	r2, #36	; 0x24
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fd7b 	bl	8002c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800212c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800213c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800214c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b08a      	sub	sp, #40	; 0x28
 8002172:	af02      	add	r7, sp, #8
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b20      	cmp	r3, #32
 800218c:	d17c      	bne.n	8002288 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_UART_Transmit+0x2c>
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e075      	b.n	800228a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_UART_Transmit+0x3e>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e06e      	b.n	800228a <HAL_UART_Transmit+0x11c>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2221      	movs	r2, #33	; 0x21
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021c2:	f7fe fcc1 	bl	8000b48 <HAL_GetTick>
 80021c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	88fa      	ldrh	r2, [r7, #6]
 80021cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	88fa      	ldrh	r2, [r7, #6]
 80021d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021dc:	d108      	bne.n	80021f0 <HAL_UART_Transmit+0x82>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d104      	bne.n	80021f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	e003      	b.n	80021f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002200:	e02a      	b.n	8002258 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2200      	movs	r2, #0
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 faf9 	bl	8002804 <UART_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e036      	b.n	800228a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002230:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	3302      	adds	r3, #2
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	e007      	b.n	800224a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3301      	adds	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1cf      	bne.n	8002202 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2200      	movs	r2, #0
 800226a:	2140      	movs	r1, #64	; 0x40
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 fac9 	bl	8002804 <UART_WaitOnFlagUntilTimeout>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e006      	b.n	800228a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e000      	b.n	800228a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002288:	2302      	movs	r3, #2
  }
}
 800228a:	4618      	mov	r0, r3
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b0ba      	sub	sp, #232	; 0xe8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10f      	bne.n	80022fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_UART_IRQHandler+0x66>
 80022e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fbd3 	bl	8002a9e <UART_Receive_IT>
      return;
 80022f8:	e256      	b.n	80027a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80de 	beq.w	80024c0 <HAL_UART_IRQHandler+0x22c>
 8002304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d106      	bne.n	800231e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002314:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80d1 	beq.w	80024c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800231e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <HAL_UART_IRQHandler+0xae>
 800232a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_UART_IRQHandler+0xd2>
 800234e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f043 0202 	orr.w	r2, r3, #2
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_UART_IRQHandler+0xf6>
 8002372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f043 0204 	orr.w	r2, r3, #4
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800238a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d011      	beq.n	80023ba <HAL_UART_IRQHandler+0x126>
 8002396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f043 0208 	orr.w	r2, r3, #8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 81ed 	beq.w	800279e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_UART_IRQHandler+0x14e>
 80023d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fb5e 	bl	8002a9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ec:	2b40      	cmp	r3, #64	; 0x40
 80023ee:	bf0c      	ite	eq
 80023f0:	2301      	moveq	r3, #1
 80023f2:	2300      	movne	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d103      	bne.n	800240e <HAL_UART_IRQHandler+0x17a>
 8002406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d04f      	beq.n	80024ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fa66 	bl	80028e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d141      	bne.n	80024a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	3314      	adds	r3, #20
 8002428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002430:	e853 3f00 	ldrex	r3, [r3]
 8002434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800243c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3314      	adds	r3, #20
 800244a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800244e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800245a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800245e:	e841 2300 	strex	r3, r2, [r1]
 8002462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1d9      	bne.n	8002422 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	2b00      	cmp	r3, #0
 8002474:	d013      	beq.n	800249e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247a:	4a7d      	ldr	r2, [pc, #500]	; (8002670 <HAL_UART_IRQHandler+0x3dc>)
 800247c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fcbe 	bl	8000e04 <HAL_DMA_Abort_IT>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d016      	beq.n	80024bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002498:	4610      	mov	r0, r2
 800249a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800249c:	e00e      	b.n	80024bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f99a 	bl	80027d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a4:	e00a      	b.n	80024bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f996 	bl	80027d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ac:	e006      	b.n	80024bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f992 	bl	80027d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024ba:	e170      	b.n	800279e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024bc:	bf00      	nop
    return;
 80024be:	e16e      	b.n	800279e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	f040 814a 	bne.w	800275e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8143 	beq.w	800275e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 813c 	beq.w	800275e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	f040 80b4 	bne.w	8002674 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002518:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8140 	beq.w	80027a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800252a:	429a      	cmp	r2, r3
 800252c:	f080 8139 	bcs.w	80027a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002536:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002542:	f000 8088 	beq.w	8002656 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	330c      	adds	r3, #12
 800254c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002550:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002554:	e853 3f00 	ldrex	r3, [r3]
 8002558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800255c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	330c      	adds	r3, #12
 800256e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002572:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002576:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800257e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002582:	e841 2300 	strex	r3, r2, [r1]
 8002586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800258a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1d9      	bne.n	8002546 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3314      	adds	r3, #20
 8002598:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259c:	e853 3f00 	ldrex	r3, [r3]
 80025a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3314      	adds	r3, #20
 80025b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025c2:	e841 2300 	strex	r3, r2, [r1]
 80025c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1e1      	bne.n	8002592 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3314      	adds	r3, #20
 80025d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025d8:	e853 3f00 	ldrex	r3, [r3]
 80025dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3314      	adds	r3, #20
 80025ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025fa:	e841 2300 	strex	r3, r2, [r1]
 80025fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1e3      	bne.n	80025ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	330c      	adds	r3, #12
 800261a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800261e:	e853 3f00 	ldrex	r3, [r3]
 8002622:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002626:	f023 0310 	bic.w	r3, r3, #16
 800262a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	330c      	adds	r3, #12
 8002634:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002638:	65ba      	str	r2, [r7, #88]	; 0x58
 800263a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800263e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002640:	e841 2300 	strex	r3, r2, [r1]
 8002644:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1e3      	bne.n	8002614 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe fb67 	bl	8000d24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800265e:	b29b      	uxth	r3, r3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	b29b      	uxth	r3, r3
 8002664:	4619      	mov	r1, r3
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8c0 	bl	80027ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800266c:	e099      	b.n	80027a2 <HAL_UART_IRQHandler+0x50e>
 800266e:	bf00      	nop
 8002670:	080029a7 	.word	0x080029a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800267c:	b29b      	uxth	r3, r3
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 808b 	beq.w	80027a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8086 	beq.w	80027a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	330c      	adds	r3, #12
 80026a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a4:	e853 3f00 	ldrex	r3, [r3]
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	330c      	adds	r3, #12
 80026ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026be:	647a      	str	r2, [r7, #68]	; 0x44
 80026c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026c6:	e841 2300 	strex	r3, r2, [r1]
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1e3      	bne.n	800269a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3314      	adds	r3, #20
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	e853 3f00 	ldrex	r3, [r3]
 80026e0:	623b      	str	r3, [r7, #32]
   return(result);
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	3314      	adds	r3, #20
 80026f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026f6:	633a      	str	r2, [r7, #48]	; 0x30
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026fe:	e841 2300 	strex	r3, r2, [r1]
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1e3      	bne.n	80026d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	330c      	adds	r3, #12
 800271e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	e853 3f00 	ldrex	r3, [r3]
 8002726:	60fb      	str	r3, [r7, #12]
   return(result);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0310 	bic.w	r3, r3, #16
 800272e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	330c      	adds	r3, #12
 8002738:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800273c:	61fa      	str	r2, [r7, #28]
 800273e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002740:	69b9      	ldr	r1, [r7, #24]
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	e841 2300 	strex	r3, r2, [r1]
 8002748:	617b      	str	r3, [r7, #20]
   return(result);
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1e3      	bne.n	8002718 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002754:	4619      	mov	r1, r3
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f848 	bl	80027ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800275c:	e023      	b.n	80027a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800275e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_UART_IRQHandler+0x4ea>
 800276a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800276e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f929 	bl	80029ce <UART_Transmit_IT>
    return;
 800277c:	e014      	b.n	80027a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800277e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00e      	beq.n	80027a8 <HAL_UART_IRQHandler+0x514>
 800278a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800278e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f969 	bl	8002a6e <UART_EndTransmit_IT>
    return;
 800279c:	e004      	b.n	80027a8 <HAL_UART_IRQHandler+0x514>
    return;
 800279e:	bf00      	nop
 80027a0:	e002      	b.n	80027a8 <HAL_UART_IRQHandler+0x514>
      return;
 80027a2:	bf00      	nop
 80027a4:	e000      	b.n	80027a8 <HAL_UART_IRQHandler+0x514>
      return;
 80027a6:	bf00      	nop
  }
}
 80027a8:	37e8      	adds	r7, #232	; 0xe8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop

080027b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b090      	sub	sp, #64	; 0x40
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002814:	e050      	b.n	80028b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d04c      	beq.n	80028b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800281e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002820:	2b00      	cmp	r3, #0
 8002822:	d007      	beq.n	8002834 <UART_WaitOnFlagUntilTimeout+0x30>
 8002824:	f7fe f990 	bl	8000b48 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002830:	429a      	cmp	r2, r3
 8002832:	d241      	bcs.n	80028b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	e853 3f00 	ldrex	r3, [r3]
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	330c      	adds	r3, #12
 8002852:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002854:	637a      	str	r2, [r7, #52]	; 0x34
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002858:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800285a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800285c:	e841 2300 	strex	r3, r2, [r1]
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1e5      	bne.n	8002834 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3314      	adds	r3, #20
 800286e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	e853 3f00 	ldrex	r3, [r3]
 8002876:	613b      	str	r3, [r7, #16]
   return(result);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3314      	adds	r3, #20
 8002886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002888:	623a      	str	r2, [r7, #32]
 800288a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288c:	69f9      	ldr	r1, [r7, #28]
 800288e:	6a3a      	ldr	r2, [r7, #32]
 8002890:	e841 2300 	strex	r3, r2, [r1]
 8002894:	61bb      	str	r3, [r7, #24]
   return(result);
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e5      	bne.n	8002868 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e00f      	b.n	80028d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4013      	ands	r3, r2
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d09f      	beq.n	8002816 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3740      	adds	r7, #64	; 0x40
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b095      	sub	sp, #84	; 0x54
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f2:	e853 3f00 	ldrex	r3, [r3]
 80028f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002908:	643a      	str	r2, [r7, #64]	; 0x40
 800290a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800290e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002910:	e841 2300 	strex	r3, r2, [r1]
 8002914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e5      	bne.n	80028e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3314      	adds	r3, #20
 8002922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	e853 3f00 	ldrex	r3, [r3]
 800292a:	61fb      	str	r3, [r7, #28]
   return(result);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	64bb      	str	r3, [r7, #72]	; 0x48
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3314      	adds	r3, #20
 800293a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800293c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002944:	e841 2300 	strex	r3, r2, [r1]
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e5      	bne.n	800291c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	2b01      	cmp	r3, #1
 8002956:	d119      	bne.n	800298c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	330c      	adds	r3, #12
 800295e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	e853 3f00 	ldrex	r3, [r3]
 8002966:	60bb      	str	r3, [r7, #8]
   return(result);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f023 0310 	bic.w	r3, r3, #16
 800296e:	647b      	str	r3, [r7, #68]	; 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002978:	61ba      	str	r2, [r7, #24]
 800297a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297c:	6979      	ldr	r1, [r7, #20]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	e841 2300 	strex	r3, r2, [r1]
 8002984:	613b      	str	r3, [r7, #16]
   return(result);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e5      	bne.n	8002958 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
}
 800299a:	bf00      	nop
 800299c:	3754      	adds	r7, #84	; 0x54
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff ff09 	bl	80027d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b21      	cmp	r3, #33	; 0x21
 80029e0:	d13e      	bne.n	8002a60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	d114      	bne.n	8002a16 <UART_Transmit_IT+0x48>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d110      	bne.n	8002a16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	1c9a      	adds	r2, r3, #2
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	621a      	str	r2, [r3, #32]
 8002a14:	e008      	b.n	8002a28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	1c59      	adds	r1, r3, #1
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6211      	str	r1, [r2, #32]
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4619      	mov	r1, r3
 8002a36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10f      	bne.n	8002a5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e000      	b.n	8002a62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fe8e 	bl	80027b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b08c      	sub	sp, #48	; 0x30
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b22      	cmp	r3, #34	; 0x22
 8002ab0:	f040 80ab 	bne.w	8002c0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abc:	d117      	bne.n	8002aee <UART_Receive_IT+0x50>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d113      	bne.n	8002aee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	1c9a      	adds	r2, r3, #2
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
 8002aec:	e026      	b.n	8002b3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b00:	d007      	beq.n	8002b12 <UART_Receive_IT+0x74>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10a      	bne.n	8002b20 <UART_Receive_IT+0x82>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e008      	b.n	8002b32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d15a      	bne.n	8002c06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0220 	bic.w	r2, r2, #32
 8002b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d135      	bne.n	8002bfc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	e853 3f00 	ldrex	r3, [r3]
 8002ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f023 0310 	bic.w	r3, r3, #16
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	330c      	adds	r3, #12
 8002bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb6:	623a      	str	r2, [r7, #32]
 8002bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bba:	69f9      	ldr	r1, [r7, #28]
 8002bbc:	6a3a      	ldr	r2, [r7, #32]
 8002bbe:	e841 2300 	strex	r3, r2, [r1]
 8002bc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e5      	bne.n	8002b96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d10a      	bne.n	8002bee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff fdf9 	bl	80027ec <HAL_UARTEx_RxEventCallback>
 8002bfa:	e002      	b.n	8002c02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff fde1 	bl	80027c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e002      	b.n	8002c0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3730      	adds	r7, #48	; 0x30
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c18:	b0c0      	sub	sp, #256	; 0x100
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c30:	68d9      	ldr	r1, [r3, #12]
 8002c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	ea40 0301 	orr.w	r3, r0, r1
 8002c3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c6c:	f021 010c 	bic.w	r1, r1, #12
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8e:	6999      	ldr	r1, [r3, #24]
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	ea40 0301 	orr.w	r3, r0, r1
 8002c9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4b8f      	ldr	r3, [pc, #572]	; (8002ee0 <UART_SetConfig+0x2cc>)
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d005      	beq.n	8002cb4 <UART_SetConfig+0xa0>
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b8d      	ldr	r3, [pc, #564]	; (8002ee4 <UART_SetConfig+0x2d0>)
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d104      	bne.n	8002cbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cb4:	f7fe ff1a 	bl	8001aec <HAL_RCC_GetPCLK2Freq>
 8002cb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cbc:	e003      	b.n	8002cc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cbe:	f7fe ff01 	bl	8001ac4 <HAL_RCC_GetPCLK1Freq>
 8002cc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd0:	f040 810c 	bne.w	8002eec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ce2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ce6:	4622      	mov	r2, r4
 8002ce8:	462b      	mov	r3, r5
 8002cea:	1891      	adds	r1, r2, r2
 8002cec:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cee:	415b      	adcs	r3, r3
 8002cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	eb12 0801 	adds.w	r8, r2, r1
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	eb43 0901 	adc.w	r9, r3, r1
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d16:	4690      	mov	r8, r2
 8002d18:	4699      	mov	r9, r3
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	eb18 0303 	adds.w	r3, r8, r3
 8002d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d24:	462b      	mov	r3, r5
 8002d26:	eb49 0303 	adc.w	r3, r9, r3
 8002d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d42:	460b      	mov	r3, r1
 8002d44:	18db      	adds	r3, r3, r3
 8002d46:	653b      	str	r3, [r7, #80]	; 0x50
 8002d48:	4613      	mov	r3, r2
 8002d4a:	eb42 0303 	adc.w	r3, r2, r3
 8002d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d58:	f7fd fa42 	bl	80001e0 <__aeabi_uldivmod>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <UART_SetConfig+0x2d4>)
 8002d62:	fba3 2302 	umull	r2, r3, r3, r2
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	011c      	lsls	r4, r3, #4
 8002d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d7c:	4642      	mov	r2, r8
 8002d7e:	464b      	mov	r3, r9
 8002d80:	1891      	adds	r1, r2, r2
 8002d82:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d84:	415b      	adcs	r3, r3
 8002d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d92:	4649      	mov	r1, r9
 8002d94:	eb43 0b01 	adc.w	fp, r3, r1
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002da4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dac:	4692      	mov	sl, r2
 8002dae:	469b      	mov	fp, r3
 8002db0:	4643      	mov	r3, r8
 8002db2:	eb1a 0303 	adds.w	r3, sl, r3
 8002db6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dba:	464b      	mov	r3, r9
 8002dbc:	eb4b 0303 	adc.w	r3, fp, r3
 8002dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002dd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	18db      	adds	r3, r3, r3
 8002ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8002dde:	4613      	mov	r3, r2
 8002de0:	eb42 0303 	adc.w	r3, r2, r3
 8002de4:	647b      	str	r3, [r7, #68]	; 0x44
 8002de6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002dee:	f7fd f9f7 	bl	80001e0 <__aeabi_uldivmod>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4611      	mov	r1, r2
 8002df8:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <UART_SetConfig+0x2d4>)
 8002dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	2264      	movs	r2, #100	; 0x64
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	1acb      	subs	r3, r1, r3
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e0e:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <UART_SetConfig+0x2d4>)
 8002e10:	fba3 2302 	umull	r2, r3, r3, r2
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e1c:	441c      	add	r4, r3
 8002e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e30:	4642      	mov	r2, r8
 8002e32:	464b      	mov	r3, r9
 8002e34:	1891      	adds	r1, r2, r2
 8002e36:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e38:	415b      	adcs	r3, r3
 8002e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e40:	4641      	mov	r1, r8
 8002e42:	1851      	adds	r1, r2, r1
 8002e44:	6339      	str	r1, [r7, #48]	; 0x30
 8002e46:	4649      	mov	r1, r9
 8002e48:	414b      	adcs	r3, r1
 8002e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e58:	4659      	mov	r1, fp
 8002e5a:	00cb      	lsls	r3, r1, #3
 8002e5c:	4651      	mov	r1, sl
 8002e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e62:	4651      	mov	r1, sl
 8002e64:	00ca      	lsls	r2, r1, #3
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4642      	mov	r2, r8
 8002e6e:	189b      	adds	r3, r3, r2
 8002e70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e74:	464b      	mov	r3, r9
 8002e76:	460a      	mov	r2, r1
 8002e78:	eb42 0303 	adc.w	r3, r2, r3
 8002e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e94:	460b      	mov	r3, r1
 8002e96:	18db      	adds	r3, r3, r3
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ea6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002eaa:	f7fd f999 	bl	80001e0 <__aeabi_uldivmod>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <UART_SetConfig+0x2d4>)
 8002eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	2164      	movs	r1, #100	; 0x64
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	3332      	adds	r3, #50	; 0x32
 8002ec6:	4a08      	ldr	r2, [pc, #32]	; (8002ee8 <UART_SetConfig+0x2d4>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	f003 0207 	and.w	r2, r3, #7
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4422      	add	r2, r4
 8002eda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002edc:	e105      	b.n	80030ea <UART_SetConfig+0x4d6>
 8002ede:	bf00      	nop
 8002ee0:	40011000 	.word	0x40011000
 8002ee4:	40011400 	.word	0x40011400
 8002ee8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ef6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002efa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002efe:	4642      	mov	r2, r8
 8002f00:	464b      	mov	r3, r9
 8002f02:	1891      	adds	r1, r2, r2
 8002f04:	6239      	str	r1, [r7, #32]
 8002f06:	415b      	adcs	r3, r3
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f0e:	4641      	mov	r1, r8
 8002f10:	1854      	adds	r4, r2, r1
 8002f12:	4649      	mov	r1, r9
 8002f14:	eb43 0501 	adc.w	r5, r3, r1
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	00eb      	lsls	r3, r5, #3
 8002f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f26:	00e2      	lsls	r2, r4, #3
 8002f28:	4614      	mov	r4, r2
 8002f2a:	461d      	mov	r5, r3
 8002f2c:	4643      	mov	r3, r8
 8002f2e:	18e3      	adds	r3, r4, r3
 8002f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f34:	464b      	mov	r3, r9
 8002f36:	eb45 0303 	adc.w	r3, r5, r3
 8002f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	008b      	lsls	r3, r1, #2
 8002f5e:	4621      	mov	r1, r4
 8002f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f64:	4621      	mov	r1, r4
 8002f66:	008a      	lsls	r2, r1, #2
 8002f68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f6c:	f7fd f938 	bl	80001e0 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4b60      	ldr	r3, [pc, #384]	; (80030f8 <UART_SetConfig+0x4e4>)
 8002f76:	fba3 2302 	umull	r2, r3, r3, r2
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	011c      	lsls	r4, r3, #4
 8002f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f82:	2200      	movs	r2, #0
 8002f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f90:	4642      	mov	r2, r8
 8002f92:	464b      	mov	r3, r9
 8002f94:	1891      	adds	r1, r2, r2
 8002f96:	61b9      	str	r1, [r7, #24]
 8002f98:	415b      	adcs	r3, r3
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	1851      	adds	r1, r2, r1
 8002fa4:	6139      	str	r1, [r7, #16]
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	414b      	adcs	r3, r1
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fb8:	4659      	mov	r1, fp
 8002fba:	00cb      	lsls	r3, r1, #3
 8002fbc:	4651      	mov	r1, sl
 8002fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fc2:	4651      	mov	r1, sl
 8002fc4:	00ca      	lsls	r2, r1, #3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4642      	mov	r2, r8
 8002fce:	189b      	adds	r3, r3, r2
 8002fd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fd4:	464b      	mov	r3, r9
 8002fd6:	460a      	mov	r2, r1
 8002fd8:	eb42 0303 	adc.w	r3, r2, r3
 8002fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	008b      	lsls	r3, r1, #2
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003002:	4641      	mov	r1, r8
 8003004:	008a      	lsls	r2, r1, #2
 8003006:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800300a:	f7fd f8e9 	bl	80001e0 <__aeabi_uldivmod>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <UART_SetConfig+0x4e4>)
 8003014:	fba3 1302 	umull	r1, r3, r3, r2
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	2164      	movs	r1, #100	; 0x64
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	3332      	adds	r3, #50	; 0x32
 8003026:	4a34      	ldr	r2, [pc, #208]	; (80030f8 <UART_SetConfig+0x4e4>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003032:	441c      	add	r4, r3
 8003034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003038:	2200      	movs	r2, #0
 800303a:	673b      	str	r3, [r7, #112]	; 0x70
 800303c:	677a      	str	r2, [r7, #116]	; 0x74
 800303e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003042:	4642      	mov	r2, r8
 8003044:	464b      	mov	r3, r9
 8003046:	1891      	adds	r1, r2, r2
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	415b      	adcs	r3, r3
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003052:	4641      	mov	r1, r8
 8003054:	1851      	adds	r1, r2, r1
 8003056:	6039      	str	r1, [r7, #0]
 8003058:	4649      	mov	r1, r9
 800305a:	414b      	adcs	r3, r1
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800306a:	4659      	mov	r1, fp
 800306c:	00cb      	lsls	r3, r1, #3
 800306e:	4651      	mov	r1, sl
 8003070:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003074:	4651      	mov	r1, sl
 8003076:	00ca      	lsls	r2, r1, #3
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	4603      	mov	r3, r0
 800307e:	4642      	mov	r2, r8
 8003080:	189b      	adds	r3, r3, r2
 8003082:	66bb      	str	r3, [r7, #104]	; 0x68
 8003084:	464b      	mov	r3, r9
 8003086:	460a      	mov	r2, r1
 8003088:	eb42 0303 	adc.w	r3, r2, r3
 800308c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800308e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	663b      	str	r3, [r7, #96]	; 0x60
 8003098:	667a      	str	r2, [r7, #100]	; 0x64
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030a6:	4649      	mov	r1, r9
 80030a8:	008b      	lsls	r3, r1, #2
 80030aa:	4641      	mov	r1, r8
 80030ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030b0:	4641      	mov	r1, r8
 80030b2:	008a      	lsls	r2, r1, #2
 80030b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030b8:	f7fd f892 	bl	80001e0 <__aeabi_uldivmod>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <UART_SetConfig+0x4e4>)
 80030c2:	fba3 1302 	umull	r1, r3, r3, r2
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	2164      	movs	r1, #100	; 0x64
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	3332      	adds	r3, #50	; 0x32
 80030d4:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <UART_SetConfig+0x4e4>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	f003 020f 	and.w	r2, r3, #15
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4422      	add	r2, r4
 80030e8:	609a      	str	r2, [r3, #8]
}
 80030ea:	bf00      	nop
 80030ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030f0:	46bd      	mov	sp, r7
 80030f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030f6:	bf00      	nop
 80030f8:	51eb851f 	.word	0x51eb851f

080030fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <SysTick_Handler+0x1c>)
 8003102:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003104:	f001 fddc 	bl	8004cc0 <xTaskGetSchedulerState>
 8003108:	4603      	mov	r3, r0
 800310a:	2b01      	cmp	r3, #1
 800310c:	d001      	beq.n	8003112 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800310e:	f002 fcc3 	bl	8005a98 <xPortSysTickHandler>
  }
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	e000e010 	.word	0xe000e010

0800311c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a07      	ldr	r2, [pc, #28]	; (8003148 <vApplicationGetIdleTaskMemory+0x2c>)
 800312c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	4a06      	ldr	r2, [pc, #24]	; (800314c <vApplicationGetIdleTaskMemory+0x30>)
 8003132:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	601a      	str	r2, [r3, #0]
}
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000124 	.word	0x20000124
 800314c:	200001e0 	.word	0x200001e0

08003150 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a07      	ldr	r2, [pc, #28]	; (800317c <vApplicationGetTimerTaskMemory+0x2c>)
 8003160:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4a06      	ldr	r2, [pc, #24]	; (8003180 <vApplicationGetTimerTaskMemory+0x30>)
 8003166:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800316e:	601a      	str	r2, [r3, #0]
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	200003e0 	.word	0x200003e0
 8003180:	2000049c 	.word	0x2000049c

08003184 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f103 0208 	add.w	r2, r3, #8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f103 0208 	add.w	r2, r3, #8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f103 0208 	add.w	r2, r3, #8
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031de:	b480      	push	{r7}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	601a      	str	r2, [r3, #0]
}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d103      	bne.n	8003246 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e00c      	b.n	8003260 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3308      	adds	r3, #8
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e002      	b.n	8003254 <vListInsert+0x2e>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	429a      	cmp	r2, r3
 800325e:	d2f6      	bcs.n	800324e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	601a      	str	r2, [r3, #0]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6892      	ldr	r2, [r2, #8]
 80032ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6852      	ldr	r2, [r2, #4]
 80032b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d103      	bne.n	80032cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	1e5a      	subs	r2, r3, #1
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003316:	f002 fb2d 	bl	8005974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003322:	68f9      	ldr	r1, [r7, #12]
 8003324:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	441a      	add	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	3b01      	subs	r3, #1
 8003348:	68f9      	ldr	r1, [r7, #12]
 800334a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	441a      	add	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	22ff      	movs	r2, #255	; 0xff
 800335a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	22ff      	movs	r2, #255	; 0xff
 8003362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d114      	bne.n	8003396 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01a      	beq.n	80033aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3310      	adds	r3, #16
 8003378:	4618      	mov	r0, r3
 800337a:	f001 fadf 	bl	800493c <xTaskRemoveFromEventList>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d012      	beq.n	80033aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <xQueueGenericReset+0xcc>)
 8003386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	e009      	b.n	80033aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3310      	adds	r3, #16
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fef2 	bl	8003184 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3324      	adds	r3, #36	; 0x24
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff feed 	bl	8003184 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80033aa:	f002 fb13 	bl	80059d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80033ae:	2301      	movs	r3, #1
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08e      	sub	sp, #56	; 0x38
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80033d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d4:	f383 8811 	msr	BASEPRI, r3
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033e2:	bf00      	nop
 80033e4:	e7fe      	b.n	80033e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033fe:	bf00      	nop
 8003400:	e7fe      	b.n	8003400 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <xQueueGenericCreateStatic+0x52>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <xQueueGenericCreateStatic+0x56>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <xQueueGenericCreateStatic+0x58>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10a      	bne.n	800342e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	623b      	str	r3, [r7, #32]
}
 800342a:	bf00      	nop
 800342c:	e7fe      	b.n	800342c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <xQueueGenericCreateStatic+0x7e>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <xQueueGenericCreateStatic+0x82>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <xQueueGenericCreateStatic+0x84>
 800343e:	2300      	movs	r3, #0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	61fb      	str	r3, [r7, #28]
}
 8003456:	bf00      	nop
 8003458:	e7fe      	b.n	8003458 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800345a:	2350      	movs	r3, #80	; 0x50
 800345c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b50      	cmp	r3, #80	; 0x50
 8003462:	d00a      	beq.n	800347a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	61bb      	str	r3, [r7, #24]
}
 8003476:	bf00      	nop
 8003478:	e7fe      	b.n	8003478 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800347a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00d      	beq.n	80034a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800348e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f83f 	bl	8003520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3730      	adds	r7, #48	; 0x30
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10a      	bne.n	80034d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	613b      	str	r3, [r7, #16]
}
 80034d2:	bf00      	nop
 80034d4:	e7fe      	b.n	80034d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	fb02 f303 	mul.w	r3, r2, r3
 80034de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	3350      	adds	r3, #80	; 0x50
 80034e4:	4618      	mov	r0, r3
 80034e6:	f002 fb67 	bl	8005bb8 <pvPortMalloc>
 80034ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d011      	beq.n	8003516 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3350      	adds	r3, #80	; 0x50
 80034fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003504:	79fa      	ldrb	r2, [r7, #7]
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4613      	mov	r3, r2
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f805 	bl	8003520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003516:	69bb      	ldr	r3, [r7, #24]
	}
 8003518:	4618      	mov	r0, r3
 800351a:	3720      	adds	r7, #32
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d103      	bne.n	800353c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e002      	b.n	8003542 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800354e:	2101      	movs	r1, #1
 8003550:	69b8      	ldr	r0, [r7, #24]
 8003552:	f7ff fecb 	bl	80032ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08e      	sub	sp, #56	; 0x38
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003576:	2300      	movs	r3, #0
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <xQueueGenericSend+0x32>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003596:	bf00      	nop
 8003598:	e7fe      	b.n	8003598 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <xQueueGenericSend+0x40>
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <xQueueGenericSend+0x44>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <xQueueGenericSend+0x46>
 80035ac:	2300      	movs	r3, #0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <xQueueGenericSend+0x60>
	__asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d103      	bne.n	80035d6 <xQueueGenericSend+0x6e>
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <xQueueGenericSend+0x72>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <xQueueGenericSend+0x74>
 80035da:	2300      	movs	r3, #0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	623b      	str	r3, [r7, #32]
}
 80035f2:	bf00      	nop
 80035f4:	e7fe      	b.n	80035f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035f6:	f001 fb63 	bl	8004cc0 <xTaskGetSchedulerState>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <xQueueGenericSend+0x9e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <xQueueGenericSend+0xa2>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <xQueueGenericSend+0xa4>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10a      	bne.n	8003626 <xQueueGenericSend+0xbe>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	61fb      	str	r3, [r7, #28]
}
 8003622:	bf00      	nop
 8003624:	e7fe      	b.n	8003624 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003626:	f002 f9a5 	bl	8005974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <xQueueGenericSend+0xd4>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d129      	bne.n	8003690 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003642:	f000 fbbb 	bl	8003dbc <prvCopyDataToQueue>
 8003646:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	2b00      	cmp	r3, #0
 800364e:	d010      	beq.n	8003672 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	3324      	adds	r3, #36	; 0x24
 8003654:	4618      	mov	r0, r3
 8003656:	f001 f971 	bl	800493c <xTaskRemoveFromEventList>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003660:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <xQueueGenericSend+0x1f8>)
 8003662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	e00a      	b.n	8003688 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003678:	4b39      	ldr	r3, [pc, #228]	; (8003760 <xQueueGenericSend+0x1f8>)
 800367a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003688:	f002 f9a4 	bl	80059d4 <vPortExitCritical>
				return pdPASS;
 800368c:	2301      	movs	r3, #1
 800368e:	e063      	b.n	8003758 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003696:	f002 f99d 	bl	80059d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800369a:	2300      	movs	r3, #0
 800369c:	e05c      	b.n	8003758 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 f9ab 	bl	8004a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036ae:	2301      	movs	r3, #1
 80036b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036b2:	f002 f98f 	bl	80059d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036b6:	f000 ff17 	bl	80044e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036ba:	f002 f95b 	bl	8005974 <vPortEnterCritical>
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036c4:	b25b      	sxtb	r3, r3
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ca:	d103      	bne.n	80036d4 <xQueueGenericSend+0x16c>
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036da:	b25b      	sxtb	r3, r3
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d103      	bne.n	80036ea <xQueueGenericSend+0x182>
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ea:	f002 f973 	bl	80059d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036ee:	1d3a      	adds	r2, r7, #4
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 f99a 	bl	8004a30 <xTaskCheckForTimeOut>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d124      	bne.n	800374c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003704:	f000 fc52 	bl	8003fac <prvIsQueueFull>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d018      	beq.n	8003740 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	3310      	adds	r3, #16
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f001 f8c0 	bl	800489c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800371c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800371e:	f000 fbdd 	bl	8003edc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003722:	f000 feef 	bl	8004504 <xTaskResumeAll>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	f47f af7c 	bne.w	8003626 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <xQueueGenericSend+0x1f8>)
 8003730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	e772      	b.n	8003626 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003742:	f000 fbcb 	bl	8003edc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003746:	f000 fedd 	bl	8004504 <xTaskResumeAll>
 800374a:	e76c      	b.n	8003626 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800374c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800374e:	f000 fbc5 	bl	8003edc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003752:	f000 fed7 	bl	8004504 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003756:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003758:	4618      	mov	r0, r3
 800375a:	3738      	adds	r7, #56	; 0x38
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	e000ed04 	.word	0xe000ed04

08003764 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b090      	sub	sp, #64	; 0x40
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d103      	bne.n	80037a0 <xQueueGenericSendFromISR+0x3c>
 8003798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <xQueueGenericSendFromISR+0x40>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <xQueueGenericSendFromISR+0x42>
 80037a4:	2300      	movs	r3, #0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037bc:	bf00      	nop
 80037be:	e7fe      	b.n	80037be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d103      	bne.n	80037ce <xQueueGenericSendFromISR+0x6a>
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <xQueueGenericSendFromISR+0x6e>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <xQueueGenericSendFromISR+0x70>
 80037d2:	2300      	movs	r3, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	623b      	str	r3, [r7, #32]
}
 80037ea:	bf00      	nop
 80037ec:	e7fe      	b.n	80037ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037ee:	f002 f9a3 	bl	8005b38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80037f2:	f3ef 8211 	mrs	r2, BASEPRI
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	61fa      	str	r2, [r7, #28]
 8003808:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800380a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800380c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <xQueueGenericSendFromISR+0xbc>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d12f      	bne.n	8003880 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003836:	f000 fac1 	bl	8003dbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800383a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800383e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003842:	d112      	bne.n	800386a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2b00      	cmp	r3, #0
 800384a:	d016      	beq.n	800387a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	3324      	adds	r3, #36	; 0x24
 8003850:	4618      	mov	r0, r3
 8003852:	f001 f873 	bl	800493c <xTaskRemoveFromEventList>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00e      	beq.n	800387a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e007      	b.n	800387a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800386a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800386e:	3301      	adds	r3, #1
 8003870:	b2db      	uxtb	r3, r3
 8003872:	b25a      	sxtb	r2, r3
 8003874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800387a:	2301      	movs	r3, #1
 800387c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800387e:	e001      	b.n	8003884 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003880:	2300      	movs	r3, #0
 8003882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003886:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800388e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003892:	4618      	mov	r0, r3
 8003894:	3740      	adds	r7, #64	; 0x40
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b08e      	sub	sp, #56	; 0x38
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	623b      	str	r3, [r7, #32]
}
 80038c0:	bf00      	nop
 80038c2:	e7fe      	b.n	80038c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	61fb      	str	r3, [r7, #28]
}
 80038de:	bf00      	nop
 80038e0:	e7fe      	b.n	80038e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <xQueueGiveFromISR+0x58>
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <xQueueGiveFromISR+0x5c>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <xQueueGiveFromISR+0x5e>
 80038f6:	2300      	movs	r3, #0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xQueueGiveFromISR+0x78>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	61bb      	str	r3, [r7, #24]
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003912:	f002 f911 	bl	8005b38 <vPortValidateInterruptPriority>
	__asm volatile
 8003916:	f3ef 8211 	mrs	r2, BASEPRI
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	617a      	str	r2, [r7, #20]
 800392c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800392e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800393e:	429a      	cmp	r2, r3
 8003940:	d22b      	bcs.n	800399a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003954:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d112      	bne.n	8003984 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	3324      	adds	r3, #36	; 0x24
 800396a:	4618      	mov	r0, r3
 800396c:	f000 ffe6 	bl	800493c <xTaskRemoveFromEventList>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00e      	beq.n	8003994 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00b      	beq.n	8003994 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e007      	b.n	8003994 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003988:	3301      	adds	r3, #1
 800398a:	b2db      	uxtb	r3, r3
 800398c:	b25a      	sxtb	r2, r3
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003994:	2301      	movs	r3, #1
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
 8003998:	e001      	b.n	800399e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800399a:	2300      	movs	r3, #0
 800399c:	637b      	str	r3, [r7, #52]	; 0x34
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f383 8811 	msr	BASEPRI, r3
}
 80039a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3738      	adds	r7, #56	; 0x38
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08c      	sub	sp, #48	; 0x30
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <xQueueReceive+0x30>
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	623b      	str	r3, [r7, #32]
}
 80039e0:	bf00      	nop
 80039e2:	e7fe      	b.n	80039e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <xQueueReceive+0x3e>
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <xQueueReceive+0x42>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <xQueueReceive+0x44>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xQueueReceive+0x5e>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	61fb      	str	r3, [r7, #28]
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a12:	f001 f955 	bl	8004cc0 <xTaskGetSchedulerState>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <xQueueReceive+0x6e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <xQueueReceive+0x72>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <xQueueReceive+0x74>
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <xQueueReceive+0x8e>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	61bb      	str	r3, [r7, #24]
}
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a42:	f001 ff97 	bl	8005974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d01f      	beq.n	8003a92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a56:	f000 fa1b 	bl	8003e90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	1e5a      	subs	r2, r3, #1
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00f      	beq.n	8003a8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	3310      	adds	r3, #16
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 ff64 	bl	800493c <xTaskRemoveFromEventList>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d007      	beq.n	8003a8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a7a:	4b3d      	ldr	r3, [pc, #244]	; (8003b70 <xQueueReceive+0x1bc>)
 8003a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a8a:	f001 ffa3 	bl	80059d4 <vPortExitCritical>
				return pdPASS;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e069      	b.n	8003b66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d103      	bne.n	8003aa0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a98:	f001 ff9c 	bl	80059d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e062      	b.n	8003b66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003aa6:	f107 0310 	add.w	r3, r7, #16
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 ffaa 	bl	8004a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ab4:	f001 ff8e 	bl	80059d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ab8:	f000 fd16 	bl	80044e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003abc:	f001 ff5a 	bl	8005974 <vPortEnterCritical>
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d103      	bne.n	8003ad6 <xQueueReceive+0x122>
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003adc:	b25b      	sxtb	r3, r3
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d103      	bne.n	8003aec <xQueueReceive+0x138>
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aec:	f001 ff72 	bl	80059d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003af0:	1d3a      	adds	r2, r7, #4
 8003af2:	f107 0310 	add.w	r3, r7, #16
 8003af6:	4611      	mov	r1, r2
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 ff99 	bl	8004a30 <xTaskCheckForTimeOut>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d123      	bne.n	8003b4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b06:	f000 fa3b 	bl	8003f80 <prvIsQueueEmpty>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d017      	beq.n	8003b40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	3324      	adds	r3, #36	; 0x24
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 febf 	bl	800489c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b20:	f000 f9dc 	bl	8003edc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b24:	f000 fcee 	bl	8004504 <xTaskResumeAll>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d189      	bne.n	8003a42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <xQueueReceive+0x1bc>)
 8003b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	e780      	b.n	8003a42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b42:	f000 f9cb 	bl	8003edc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b46:	f000 fcdd 	bl	8004504 <xTaskResumeAll>
 8003b4a:	e77a      	b.n	8003a42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b4e:	f000 f9c5 	bl	8003edc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b52:	f000 fcd7 	bl	8004504 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b58:	f000 fa12 	bl	8003f80 <prvIsQueueEmpty>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f43f af6f 	beq.w	8003a42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3730      	adds	r7, #48	; 0x30
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	e000ed04 	.word	0xe000ed04

08003b74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08e      	sub	sp, #56	; 0x38
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	623b      	str	r3, [r7, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	e7fe      	b.n	8003ba4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	61fb      	str	r3, [r7, #28]
}
 8003bc0:	bf00      	nop
 8003bc2:	e7fe      	b.n	8003bc2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bc4:	f001 f87c 	bl	8004cc0 <xTaskGetSchedulerState>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <xQueueSemaphoreTake+0x60>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <xQueueSemaphoreTake+0x64>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <xQueueSemaphoreTake+0x66>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	61bb      	str	r3, [r7, #24]
}
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bf4:	f001 febe 	bl	8005974 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d024      	beq.n	8003c4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	1e5a      	subs	r2, r3, #1
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d104      	bne.n	8003c1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003c14:	f001 f9ca 	bl	8004fac <pvTaskIncrementMutexHeldCount>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00f      	beq.n	8003c46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	3310      	adds	r3, #16
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fe86 	bl	800493c <xTaskRemoveFromEventList>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c36:	4b54      	ldr	r3, [pc, #336]	; (8003d88 <xQueueSemaphoreTake+0x214>)
 8003c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c46:	f001 fec5 	bl	80059d4 <vPortExitCritical>
				return pdPASS;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e097      	b.n	8003d7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d111      	bne.n	8003c78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	617b      	str	r3, [r7, #20]
}
 8003c6c:	bf00      	nop
 8003c6e:	e7fe      	b.n	8003c6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003c70:	f001 feb0 	bl	80059d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e082      	b.n	8003d7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c7e:	f107 030c 	add.w	r3, r7, #12
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 febe 	bl	8004a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c8c:	f001 fea2 	bl	80059d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c90:	f000 fc2a 	bl	80044e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c94:	f001 fe6e 	bl	8005974 <vPortEnterCritical>
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c9e:	b25b      	sxtb	r3, r3
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d103      	bne.n	8003cae <xQueueSemaphoreTake+0x13a>
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cb4:	b25b      	sxtb	r3, r3
 8003cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cba:	d103      	bne.n	8003cc4 <xQueueSemaphoreTake+0x150>
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cc4:	f001 fe86 	bl	80059d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cc8:	463a      	mov	r2, r7
 8003cca:	f107 030c 	add.w	r3, r7, #12
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fead 	bl	8004a30 <xTaskCheckForTimeOut>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d132      	bne.n	8003d42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cde:	f000 f94f 	bl	8003f80 <prvIsQueueEmpty>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d026      	beq.n	8003d36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003cf0:	f001 fe40 	bl	8005974 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 ffff 	bl	8004cfc <xTaskPriorityInherit>
 8003cfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003d00:	f001 fe68 	bl	80059d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	3324      	adds	r3, #36	; 0x24
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fdc5 	bl	800489c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d14:	f000 f8e2 	bl	8003edc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d18:	f000 fbf4 	bl	8004504 <xTaskResumeAll>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f47f af68 	bne.w	8003bf4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003d24:	4b18      	ldr	r3, [pc, #96]	; (8003d88 <xQueueSemaphoreTake+0x214>)
 8003d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	e75e      	b.n	8003bf4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003d36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d38:	f000 f8d0 	bl	8003edc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d3c:	f000 fbe2 	bl	8004504 <xTaskResumeAll>
 8003d40:	e758      	b.n	8003bf4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003d42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d44:	f000 f8ca 	bl	8003edc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d48:	f000 fbdc 	bl	8004504 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d4e:	f000 f917 	bl	8003f80 <prvIsQueueEmpty>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f43f af4d 	beq.w	8003bf4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00d      	beq.n	8003d7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003d60:	f001 fe08 	bl	8005974 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003d64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d66:	f000 f811 	bl	8003d8c <prvGetDisinheritPriorityAfterTimeout>
 8003d6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d72:	4618      	mov	r0, r3
 8003d74:	f001 f898 	bl	8004ea8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003d78:	f001 fe2c 	bl	80059d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3738      	adds	r7, #56	; 0x38
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	e001      	b.n	8003dae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003dae:	68fb      	ldr	r3, [r7, #12]
	}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d14d      	bne.n	8003e7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fff0 	bl	8004dcc <xTaskPriorityDisinherit>
 8003dec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	e043      	b.n	8003e7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d119      	bne.n	8003e30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6858      	ldr	r0, [r3, #4]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	461a      	mov	r2, r3
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	f002 f8e6 	bl	8005fd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	441a      	add	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d32b      	bcc.n	8003e7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	e026      	b.n	8003e7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	68d8      	ldr	r0, [r3, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	f002 f8cc 	bl	8005fd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	425b      	negs	r3, r3
 8003e4a:	441a      	add	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d207      	bcs.n	8003e6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	425b      	negs	r3, r3
 8003e66:	441a      	add	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d105      	bne.n	8003e7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e86:	697b      	ldr	r3, [r7, #20]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d018      	beq.n	8003ed4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	441a      	add	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d303      	bcc.n	8003ec4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68d9      	ldr	r1, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	461a      	mov	r2, r3
 8003ece:	6838      	ldr	r0, [r7, #0]
 8003ed0:	f002 f882 	bl	8005fd8 <memcpy>
	}
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ee4:	f001 fd46 	bl	8005974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ef0:	e011      	b.n	8003f16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d012      	beq.n	8003f20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3324      	adds	r3, #36	; 0x24
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fd1c 	bl	800493c <xTaskRemoveFromEventList>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f0a:	f000 fdf3 	bl	8004af4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	dce9      	bgt.n	8003ef2 <prvUnlockQueue+0x16>
 8003f1e:	e000      	b.n	8003f22 <prvUnlockQueue+0x46>
					break;
 8003f20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	22ff      	movs	r2, #255	; 0xff
 8003f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f2a:	f001 fd53 	bl	80059d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f2e:	f001 fd21 	bl	8005974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f3a:	e011      	b.n	8003f60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d012      	beq.n	8003f6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3310      	adds	r3, #16
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fcf7 	bl	800493c <xTaskRemoveFromEventList>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f54:	f000 fdce 	bl	8004af4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f58:	7bbb      	ldrb	r3, [r7, #14]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	dce9      	bgt.n	8003f3c <prvUnlockQueue+0x60>
 8003f68:	e000      	b.n	8003f6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	22ff      	movs	r2, #255	; 0xff
 8003f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f74:	f001 fd2e 	bl	80059d4 <vPortExitCritical>
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f88:	f001 fcf4 	bl	8005974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e001      	b.n	8003f9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f9e:	f001 fd19 	bl	80059d4 <vPortExitCritical>

	return xReturn;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fb4:	f001 fcde 	bl	8005974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d102      	bne.n	8003fca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e001      	b.n	8003fce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fce:	f001 fd01 	bl	80059d4 <vPortExitCritical>

	return xReturn;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	e014      	b.n	8004016 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fec:	4a0f      	ldr	r2, [pc, #60]	; (800402c <vQueueAddToRegistry+0x50>)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ff8:	490c      	ldr	r1, [pc, #48]	; (800402c <vQueueAddToRegistry+0x50>)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <vQueueAddToRegistry+0x50>)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800400e:	e006      	b.n	800401e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3301      	adds	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b07      	cmp	r3, #7
 800401a:	d9e7      	bls.n	8003fec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	2000089c 	.word	0x2000089c

08004030 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004040:	f001 fc98 	bl	8005974 <vPortEnterCritical>
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800404a:	b25b      	sxtb	r3, r3
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d103      	bne.n	800405a <vQueueWaitForMessageRestricted+0x2a>
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004060:	b25b      	sxtb	r3, r3
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d103      	bne.n	8004070 <vQueueWaitForMessageRestricted+0x40>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004070:	f001 fcb0 	bl	80059d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	3324      	adds	r3, #36	; 0x24
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fc2d 	bl	80048e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800408a:	6978      	ldr	r0, [r7, #20]
 800408c:	f7ff ff26 	bl	8003edc <prvUnlockQueue>
	}
 8004090:	bf00      	nop
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08e      	sub	sp, #56	; 0x38
 800409c:	af04      	add	r7, sp, #16
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	623b      	str	r3, [r7, #32]
}
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <xTaskCreateStatic+0x46>
	__asm volatile
 80040c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	61fb      	str	r3, [r7, #28]
}
 80040da:	bf00      	nop
 80040dc:	e7fe      	b.n	80040dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040de:	23bc      	movs	r3, #188	; 0xbc
 80040e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2bbc      	cmp	r3, #188	; 0xbc
 80040e6:	d00a      	beq.n	80040fe <xTaskCreateStatic+0x66>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	61bb      	str	r3, [r7, #24]
}
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01e      	beq.n	8004144 <xTaskCreateStatic+0xac>
 8004106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01b      	beq.n	8004144 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004114:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	2202      	movs	r2, #2
 800411a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800411e:	2300      	movs	r3, #0
 8004120:	9303      	str	r3, [sp, #12]
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	9302      	str	r3, [sp, #8]
 8004126:	f107 0314 	add.w	r3, r7, #20
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f850 	bl	80041dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800413c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800413e:	f000 f8f3 	bl	8004328 <prvAddNewTaskToReadyList>
 8004142:	e001      	b.n	8004148 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004148:	697b      	ldr	r3, [r7, #20]
	}
 800414a:	4618      	mov	r0, r3
 800414c:	3728      	adds	r7, #40	; 0x28
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004152:	b580      	push	{r7, lr}
 8004154:	b08c      	sub	sp, #48	; 0x30
 8004156:	af04      	add	r7, sp, #16
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fd26 	bl	8005bb8 <pvPortMalloc>
 800416c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00e      	beq.n	8004192 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004174:	20bc      	movs	r0, #188	; 0xbc
 8004176:	f001 fd1f 	bl	8005bb8 <pvPortMalloc>
 800417a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
 8004188:	e005      	b.n	8004196 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f001 fde0 	bl	8005d50 <vPortFree>
 8004190:	e001      	b.n	8004196 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d017      	beq.n	80041cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	2300      	movs	r3, #0
 80041a8:	9303      	str	r3, [sp, #12]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	9302      	str	r3, [sp, #8]
 80041ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f80e 	bl	80041dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041c0:	69f8      	ldr	r0, [r7, #28]
 80041c2:	f000 f8b1 	bl	8004328 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041c6:	2301      	movs	r3, #1
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	e002      	b.n	80041d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041cc:	f04f 33ff 	mov.w	r3, #4294967295
 80041d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041d2:	69bb      	ldr	r3, [r7, #24]
	}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3720      	adds	r7, #32
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	461a      	mov	r2, r3
 80041f4:	21a5      	movs	r1, #165	; 0xa5
 80041f6:	f001 fefd 	bl	8005ff4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004204:	3b01      	subs	r3, #1
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	f023 0307 	bic.w	r3, r3, #7
 8004212:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <prvInitialiseNewTask+0x58>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	617b      	str	r3, [r7, #20]
}
 8004230:	bf00      	nop
 8004232:	e7fe      	b.n	8004232 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01f      	beq.n	800427a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	e012      	b.n	8004266 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	7819      	ldrb	r1, [r3, #0]
 8004248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	3334      	adds	r3, #52	; 0x34
 8004250:	460a      	mov	r2, r1
 8004252:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d006      	beq.n	800426e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	3301      	adds	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	2b0f      	cmp	r3, #15
 800426a:	d9e9      	bls.n	8004240 <prvInitialiseNewTask+0x64>
 800426c:	e000      	b.n	8004270 <prvInitialiseNewTask+0x94>
			{
				break;
 800426e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004278:	e003      	b.n	8004282 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	2b37      	cmp	r3, #55	; 0x37
 8004286:	d901      	bls.n	800428c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004288:	2337      	movs	r3, #55	; 0x37
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004290:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004296:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	2200      	movs	r2, #0
 800429c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	3304      	adds	r3, #4
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe ff8e 	bl	80031c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	3318      	adds	r3, #24
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fe ff89 	bl	80031c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	3354      	adds	r3, #84	; 0x54
 80042dc:	2260      	movs	r2, #96	; 0x60
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 fe87 	bl	8005ff4 <memset>
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	4a0c      	ldr	r2, [pc, #48]	; (800431c <prvInitialiseNewTask+0x140>)
 80042ea:	659a      	str	r2, [r3, #88]	; 0x58
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	4a0c      	ldr	r2, [pc, #48]	; (8004320 <prvInitialiseNewTask+0x144>)
 80042f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	4a0b      	ldr	r2, [pc, #44]	; (8004324 <prvInitialiseNewTask+0x148>)
 80042f6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	69b8      	ldr	r0, [r7, #24]
 80042fe:	f001 fa0b 	bl	8005718 <pxPortInitialiseStack>
 8004302:	4602      	mov	r2, r0
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004312:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004314:	bf00      	nop
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	0800624c 	.word	0x0800624c
 8004320:	0800626c 	.word	0x0800626c
 8004324:	0800622c 	.word	0x0800622c

08004328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004330:	f001 fb20 	bl	8005974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004334:	4b2d      	ldr	r3, [pc, #180]	; (80043ec <prvAddNewTaskToReadyList+0xc4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3301      	adds	r3, #1
 800433a:	4a2c      	ldr	r2, [pc, #176]	; (80043ec <prvAddNewTaskToReadyList+0xc4>)
 800433c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800433e:	4b2c      	ldr	r3, [pc, #176]	; (80043f0 <prvAddNewTaskToReadyList+0xc8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004346:	4a2a      	ldr	r2, [pc, #168]	; (80043f0 <prvAddNewTaskToReadyList+0xc8>)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800434c:	4b27      	ldr	r3, [pc, #156]	; (80043ec <prvAddNewTaskToReadyList+0xc4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d110      	bne.n	8004376 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004354:	f000 fbf2 	bl	8004b3c <prvInitialiseTaskLists>
 8004358:	e00d      	b.n	8004376 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <prvAddNewTaskToReadyList+0xcc>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004362:	4b23      	ldr	r3, [pc, #140]	; (80043f0 <prvAddNewTaskToReadyList+0xc8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	429a      	cmp	r2, r3
 800436e:	d802      	bhi.n	8004376 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004370:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <prvAddNewTaskToReadyList+0xc8>)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004376:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <prvAddNewTaskToReadyList+0xd0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3301      	adds	r3, #1
 800437c:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <prvAddNewTaskToReadyList+0xd0>)
 800437e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004380:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <prvAddNewTaskToReadyList+0xd0>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438c:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <prvAddNewTaskToReadyList+0xd4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d903      	bls.n	800439c <prvAddNewTaskToReadyList+0x74>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	4a18      	ldr	r2, [pc, #96]	; (80043fc <prvAddNewTaskToReadyList+0xd4>)
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4a15      	ldr	r2, [pc, #84]	; (8004400 <prvAddNewTaskToReadyList+0xd8>)
 80043aa:	441a      	add	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f7fe ff13 	bl	80031de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043b8:	f001 fb0c 	bl	80059d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043bc:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <prvAddNewTaskToReadyList+0xcc>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00e      	beq.n	80043e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <prvAddNewTaskToReadyList+0xc8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d207      	bcs.n	80043e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <prvAddNewTaskToReadyList+0xdc>)
 80043d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000db0 	.word	0x20000db0
 80043f0:	200008dc 	.word	0x200008dc
 80043f4:	20000dbc 	.word	0x20000dbc
 80043f8:	20000dcc 	.word	0x20000dcc
 80043fc:	20000db8 	.word	0x20000db8
 8004400:	200008e0 	.word	0x200008e0
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	; 0x28
 800440c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004416:	463a      	mov	r2, r7
 8004418:	1d39      	adds	r1, r7, #4
 800441a:	f107 0308 	add.w	r3, r7, #8
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe fe7c 	bl	800311c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004424:	6839      	ldr	r1, [r7, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	9202      	str	r2, [sp, #8]
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	2300      	movs	r3, #0
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	2300      	movs	r3, #0
 8004434:	460a      	mov	r2, r1
 8004436:	4924      	ldr	r1, [pc, #144]	; (80044c8 <vTaskStartScheduler+0xc0>)
 8004438:	4824      	ldr	r0, [pc, #144]	; (80044cc <vTaskStartScheduler+0xc4>)
 800443a:	f7ff fe2d 	bl	8004098 <xTaskCreateStatic>
 800443e:	4603      	mov	r3, r0
 8004440:	4a23      	ldr	r2, [pc, #140]	; (80044d0 <vTaskStartScheduler+0xc8>)
 8004442:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004444:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <vTaskStartScheduler+0xc8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800444c:	2301      	movs	r3, #1
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	e001      	b.n	8004456 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d102      	bne.n	8004462 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800445c:	f000 fe0e 	bl	800507c <xTimerCreateTimerTask>
 8004460:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d11b      	bne.n	80044a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	613b      	str	r3, [r7, #16]
}
 800447a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800447c:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <vTaskStartScheduler+0xcc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3354      	adds	r3, #84	; 0x54
 8004482:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <vTaskStartScheduler+0xd0>)
 8004484:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <vTaskStartScheduler+0xd4>)
 8004488:	f04f 32ff 	mov.w	r2, #4294967295
 800448c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <vTaskStartScheduler+0xd8>)
 8004490:	2201      	movs	r2, #1
 8004492:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004494:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <vTaskStartScheduler+0xdc>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800449a:	f001 f9c9 	bl	8005830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800449e:	e00e      	b.n	80044be <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	d10a      	bne.n	80044be <vTaskStartScheduler+0xb6>
	__asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	60fb      	str	r3, [r7, #12]
}
 80044ba:	bf00      	nop
 80044bc:	e7fe      	b.n	80044bc <vTaskStartScheduler+0xb4>
}
 80044be:	bf00      	nop
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	080061fc 	.word	0x080061fc
 80044cc:	08004b0d 	.word	0x08004b0d
 80044d0:	20000dd4 	.word	0x20000dd4
 80044d4:	200008dc 	.word	0x200008dc
 80044d8:	20000010 	.word	0x20000010
 80044dc:	20000dd0 	.word	0x20000dd0
 80044e0:	20000dbc 	.word	0x20000dbc
 80044e4:	20000db4 	.word	0x20000db4

080044e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <vTaskSuspendAll+0x18>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3301      	adds	r3, #1
 80044f2:	4a03      	ldr	r2, [pc, #12]	; (8004500 <vTaskSuspendAll+0x18>)
 80044f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044f6:	bf00      	nop
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	20000dd8 	.word	0x20000dd8

08004504 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004512:	4b42      	ldr	r3, [pc, #264]	; (800461c <xTaskResumeAll+0x118>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10a      	bne.n	8004530 <xTaskResumeAll+0x2c>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	603b      	str	r3, [r7, #0]
}
 800452c:	bf00      	nop
 800452e:	e7fe      	b.n	800452e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004530:	f001 fa20 	bl	8005974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004534:	4b39      	ldr	r3, [pc, #228]	; (800461c <xTaskResumeAll+0x118>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3b01      	subs	r3, #1
 800453a:	4a38      	ldr	r2, [pc, #224]	; (800461c <xTaskResumeAll+0x118>)
 800453c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800453e:	4b37      	ldr	r3, [pc, #220]	; (800461c <xTaskResumeAll+0x118>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d162      	bne.n	800460c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004546:	4b36      	ldr	r3, [pc, #216]	; (8004620 <xTaskResumeAll+0x11c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d05e      	beq.n	800460c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800454e:	e02f      	b.n	80045b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004550:	4b34      	ldr	r3, [pc, #208]	; (8004624 <xTaskResumeAll+0x120>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3318      	adds	r3, #24
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe fe9b 	bl	8003298 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3304      	adds	r3, #4
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe fe96 	bl	8003298 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	4b2d      	ldr	r3, [pc, #180]	; (8004628 <xTaskResumeAll+0x124>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d903      	bls.n	8004580 <xTaskResumeAll+0x7c>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	4a2a      	ldr	r2, [pc, #168]	; (8004628 <xTaskResumeAll+0x124>)
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4a27      	ldr	r2, [pc, #156]	; (800462c <xTaskResumeAll+0x128>)
 800458e:	441a      	add	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7fe fe21 	bl	80031de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a0:	4b23      	ldr	r3, [pc, #140]	; (8004630 <xTaskResumeAll+0x12c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80045aa:	4b22      	ldr	r3, [pc, #136]	; (8004634 <xTaskResumeAll+0x130>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045b0:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <xTaskResumeAll+0x120>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1cb      	bne.n	8004550 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045be:	f000 fb5f 	bl	8004c80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045c2:	4b1d      	ldr	r3, [pc, #116]	; (8004638 <xTaskResumeAll+0x134>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d010      	beq.n	80045f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045ce:	f000 f847 	bl	8004660 <xTaskIncrementTick>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80045d8:	4b16      	ldr	r3, [pc, #88]	; (8004634 <xTaskResumeAll+0x130>)
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f1      	bne.n	80045ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80045ea:	4b13      	ldr	r3, [pc, #76]	; (8004638 <xTaskResumeAll+0x134>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045f0:	4b10      	ldr	r3, [pc, #64]	; (8004634 <xTaskResumeAll+0x130>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045f8:	2301      	movs	r3, #1
 80045fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045fc:	4b0f      	ldr	r3, [pc, #60]	; (800463c <xTaskResumeAll+0x138>)
 80045fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800460c:	f001 f9e2 	bl	80059d4 <vPortExitCritical>

	return xAlreadyYielded;
 8004610:	68bb      	ldr	r3, [r7, #8]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000dd8 	.word	0x20000dd8
 8004620:	20000db0 	.word	0x20000db0
 8004624:	20000d70 	.word	0x20000d70
 8004628:	20000db8 	.word	0x20000db8
 800462c:	200008e0 	.word	0x200008e0
 8004630:	200008dc 	.word	0x200008dc
 8004634:	20000dc4 	.word	0x20000dc4
 8004638:	20000dc0 	.word	0x20000dc0
 800463c:	e000ed04 	.word	0xe000ed04

08004640 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <xTaskGetTickCount+0x1c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800464c:	687b      	ldr	r3, [r7, #4]
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20000db4 	.word	0x20000db4

08004660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800466a:	4b4f      	ldr	r3, [pc, #316]	; (80047a8 <xTaskIncrementTick+0x148>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f040 808f 	bne.w	8004792 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004674:	4b4d      	ldr	r3, [pc, #308]	; (80047ac <xTaskIncrementTick+0x14c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3301      	adds	r3, #1
 800467a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800467c:	4a4b      	ldr	r2, [pc, #300]	; (80047ac <xTaskIncrementTick+0x14c>)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d120      	bne.n	80046ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004688:	4b49      	ldr	r3, [pc, #292]	; (80047b0 <xTaskIncrementTick+0x150>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	603b      	str	r3, [r7, #0]
}
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <xTaskIncrementTick+0x46>
 80046a8:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <xTaskIncrementTick+0x150>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <xTaskIncrementTick+0x154>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a3f      	ldr	r2, [pc, #252]	; (80047b0 <xTaskIncrementTick+0x150>)
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4a3f      	ldr	r2, [pc, #252]	; (80047b4 <xTaskIncrementTick+0x154>)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	4b3e      	ldr	r3, [pc, #248]	; (80047b8 <xTaskIncrementTick+0x158>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3301      	adds	r3, #1
 80046c2:	4a3d      	ldr	r2, [pc, #244]	; (80047b8 <xTaskIncrementTick+0x158>)
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	f000 fadb 	bl	8004c80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046ca:	4b3c      	ldr	r3, [pc, #240]	; (80047bc <xTaskIncrementTick+0x15c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d349      	bcc.n	8004768 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046d4:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <xTaskIncrementTick+0x150>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046de:	4b37      	ldr	r3, [pc, #220]	; (80047bc <xTaskIncrementTick+0x15c>)
 80046e0:	f04f 32ff 	mov.w	r2, #4294967295
 80046e4:	601a      	str	r2, [r3, #0]
					break;
 80046e6:	e03f      	b.n	8004768 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e8:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <xTaskIncrementTick+0x150>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d203      	bcs.n	8004708 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004700:	4a2e      	ldr	r2, [pc, #184]	; (80047bc <xTaskIncrementTick+0x15c>)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004706:	e02f      	b.n	8004768 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	3304      	adds	r3, #4
 800470c:	4618      	mov	r0, r3
 800470e:	f7fe fdc3 	bl	8003298 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	2b00      	cmp	r3, #0
 8004718:	d004      	beq.n	8004724 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	3318      	adds	r3, #24
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe fdba 	bl	8003298 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004728:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <xTaskIncrementTick+0x160>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d903      	bls.n	8004738 <xTaskIncrementTick+0xd8>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	4a22      	ldr	r2, [pc, #136]	; (80047c0 <xTaskIncrementTick+0x160>)
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4a1f      	ldr	r2, [pc, #124]	; (80047c4 <xTaskIncrementTick+0x164>)
 8004746:	441a      	add	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7fe fd45 	bl	80031de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <xTaskIncrementTick+0x168>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	429a      	cmp	r2, r3
 8004760:	d3b8      	bcc.n	80046d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004762:	2301      	movs	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004766:	e7b5      	b.n	80046d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004768:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <xTaskIncrementTick+0x168>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476e:	4915      	ldr	r1, [pc, #84]	; (80047c4 <xTaskIncrementTick+0x164>)
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d901      	bls.n	8004784 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004780:	2301      	movs	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004784:	4b11      	ldr	r3, [pc, #68]	; (80047cc <xTaskIncrementTick+0x16c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e004      	b.n	800479c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004792:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <xTaskIncrementTick+0x170>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3301      	adds	r3, #1
 8004798:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <xTaskIncrementTick+0x170>)
 800479a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800479c:	697b      	ldr	r3, [r7, #20]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000dd8 	.word	0x20000dd8
 80047ac:	20000db4 	.word	0x20000db4
 80047b0:	20000d68 	.word	0x20000d68
 80047b4:	20000d6c 	.word	0x20000d6c
 80047b8:	20000dc8 	.word	0x20000dc8
 80047bc:	20000dd0 	.word	0x20000dd0
 80047c0:	20000db8 	.word	0x20000db8
 80047c4:	200008e0 	.word	0x200008e0
 80047c8:	200008dc 	.word	0x200008dc
 80047cc:	20000dc4 	.word	0x20000dc4
 80047d0:	20000dc0 	.word	0x20000dc0

080047d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047da:	4b2a      	ldr	r3, [pc, #168]	; (8004884 <vTaskSwitchContext+0xb0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047e2:	4b29      	ldr	r3, [pc, #164]	; (8004888 <vTaskSwitchContext+0xb4>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047e8:	e046      	b.n	8004878 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80047ea:	4b27      	ldr	r3, [pc, #156]	; (8004888 <vTaskSwitchContext+0xb4>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f0:	4b26      	ldr	r3, [pc, #152]	; (800488c <vTaskSwitchContext+0xb8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	e010      	b.n	800481a <vTaskSwitchContext+0x46>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <vTaskSwitchContext+0x40>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	607b      	str	r3, [r7, #4]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <vTaskSwitchContext+0x3e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3b01      	subs	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	491d      	ldr	r1, [pc, #116]	; (8004890 <vTaskSwitchContext+0xbc>)
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0e4      	beq.n	80047f8 <vTaskSwitchContext+0x24>
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4a15      	ldr	r2, [pc, #84]	; (8004890 <vTaskSwitchContext+0xbc>)
 800483a:	4413      	add	r3, r2
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	605a      	str	r2, [r3, #4]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3308      	adds	r3, #8
 8004850:	429a      	cmp	r2, r3
 8004852:	d104      	bne.n	800485e <vTaskSwitchContext+0x8a>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4a0b      	ldr	r2, [pc, #44]	; (8004894 <vTaskSwitchContext+0xc0>)
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	4a08      	ldr	r2, [pc, #32]	; (800488c <vTaskSwitchContext+0xb8>)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800486e:	4b09      	ldr	r3, [pc, #36]	; (8004894 <vTaskSwitchContext+0xc0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3354      	adds	r3, #84	; 0x54
 8004874:	4a08      	ldr	r2, [pc, #32]	; (8004898 <vTaskSwitchContext+0xc4>)
 8004876:	6013      	str	r3, [r2, #0]
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20000dd8 	.word	0x20000dd8
 8004888:	20000dc4 	.word	0x20000dc4
 800488c:	20000db8 	.word	0x20000db8
 8004890:	200008e0 	.word	0x200008e0
 8004894:	200008dc 	.word	0x200008dc
 8004898:	20000010 	.word	0x20000010

0800489c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	60fb      	str	r3, [r7, #12]
}
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048c2:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <vTaskPlaceOnEventList+0x44>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3318      	adds	r3, #24
 80048c8:	4619      	mov	r1, r3
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fe fcab 	bl	8003226 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048d0:	2101      	movs	r1, #1
 80048d2:	6838      	ldr	r0, [r7, #0]
 80048d4:	f000 fb7e 	bl	8004fd4 <prvAddCurrentTaskToDelayedList>
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	200008dc 	.word	0x200008dc

080048e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	617b      	str	r3, [r7, #20]
}
 8004908:	bf00      	nop
 800490a:	e7fe      	b.n	800490a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <vTaskPlaceOnEventListRestricted+0x54>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3318      	adds	r3, #24
 8004912:	4619      	mov	r1, r3
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7fe fc62 	bl	80031de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004920:	f04f 33ff 	mov.w	r3, #4294967295
 8004924:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	68b8      	ldr	r0, [r7, #8]
 800492a:	f000 fb53 	bl	8004fd4 <prvAddCurrentTaskToDelayedList>
	}
 800492e:	bf00      	nop
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	200008dc 	.word	0x200008dc

0800493c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	60fb      	str	r3, [r7, #12]
}
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	3318      	adds	r3, #24
 800496c:	4618      	mov	r0, r3
 800496e:	f7fe fc93 	bl	8003298 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004972:	4b1e      	ldr	r3, [pc, #120]	; (80049ec <xTaskRemoveFromEventList+0xb0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11d      	bne.n	80049b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3304      	adds	r3, #4
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe fc8a 	bl	8003298 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004988:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <xTaskRemoveFromEventList+0xb4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d903      	bls.n	8004998 <xTaskRemoveFromEventList+0x5c>
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	4a16      	ldr	r2, [pc, #88]	; (80049f0 <xTaskRemoveFromEventList+0xb4>)
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <xTaskRemoveFromEventList+0xb8>)
 80049a6:	441a      	add	r2, r3
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f7fe fc15 	bl	80031de <vListInsertEnd>
 80049b4:	e005      	b.n	80049c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	3318      	adds	r3, #24
 80049ba:	4619      	mov	r1, r3
 80049bc:	480e      	ldr	r0, [pc, #56]	; (80049f8 <xTaskRemoveFromEventList+0xbc>)
 80049be:	f7fe fc0e 	bl	80031de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c6:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <xTaskRemoveFromEventList+0xc0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d905      	bls.n	80049dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049d0:	2301      	movs	r3, #1
 80049d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <xTaskRemoveFromEventList+0xc4>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e001      	b.n	80049e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80049e0:	697b      	ldr	r3, [r7, #20]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000dd8 	.word	0x20000dd8
 80049f0:	20000db8 	.word	0x20000db8
 80049f4:	200008e0 	.word	0x200008e0
 80049f8:	20000d70 	.word	0x20000d70
 80049fc:	200008dc 	.word	0x200008dc
 8004a00:	20000dc4 	.word	0x20000dc4

08004a04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <vTaskInternalSetTimeOutState+0x24>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <vTaskInternalSetTimeOutState+0x28>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	605a      	str	r2, [r3, #4]
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20000dc8 	.word	0x20000dc8
 8004a2c:	20000db4 	.word	0x20000db4

08004a30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	613b      	str	r3, [r7, #16]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	60fb      	str	r3, [r7, #12]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a72:	f000 ff7f 	bl	8005974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a76:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <xTaskCheckForTimeOut+0xbc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8e:	d102      	bne.n	8004a96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	e023      	b.n	8004ade <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <xTaskCheckForTimeOut+0xc0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d007      	beq.n	8004ab2 <xTaskCheckForTimeOut+0x82>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d302      	bcc.n	8004ab2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004aac:	2301      	movs	r3, #1
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	e015      	b.n	8004ade <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d20b      	bcs.n	8004ad4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	1ad2      	subs	r2, r2, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff ff9b 	bl	8004a04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	e004      	b.n	8004ade <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ada:	2301      	movs	r3, #1
 8004adc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ade:	f000 ff79 	bl	80059d4 <vPortExitCritical>

	return xReturn;
 8004ae2:	69fb      	ldr	r3, [r7, #28]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20000db4 	.word	0x20000db4
 8004af0:	20000dc8 	.word	0x20000dc8

08004af4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004af8:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <vTaskMissedYield+0x14>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
}
 8004afe:	bf00      	nop
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	20000dc4 	.word	0x20000dc4

08004b0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b14:	f000 f852 	bl	8004bbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <prvIdleTask+0x28>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d9f9      	bls.n	8004b14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <prvIdleTask+0x2c>)
 8004b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b30:	e7f0      	b.n	8004b14 <prvIdleTask+0x8>
 8004b32:	bf00      	nop
 8004b34:	200008e0 	.word	0x200008e0
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b42:	2300      	movs	r3, #0
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	e00c      	b.n	8004b62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4a12      	ldr	r2, [pc, #72]	; (8004b9c <prvInitialiseTaskLists+0x60>)
 8004b54:	4413      	add	r3, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe fb14 	bl	8003184 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b37      	cmp	r3, #55	; 0x37
 8004b66:	d9ef      	bls.n	8004b48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b68:	480d      	ldr	r0, [pc, #52]	; (8004ba0 <prvInitialiseTaskLists+0x64>)
 8004b6a:	f7fe fb0b 	bl	8003184 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b6e:	480d      	ldr	r0, [pc, #52]	; (8004ba4 <prvInitialiseTaskLists+0x68>)
 8004b70:	f7fe fb08 	bl	8003184 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b74:	480c      	ldr	r0, [pc, #48]	; (8004ba8 <prvInitialiseTaskLists+0x6c>)
 8004b76:	f7fe fb05 	bl	8003184 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b7a:	480c      	ldr	r0, [pc, #48]	; (8004bac <prvInitialiseTaskLists+0x70>)
 8004b7c:	f7fe fb02 	bl	8003184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b80:	480b      	ldr	r0, [pc, #44]	; (8004bb0 <prvInitialiseTaskLists+0x74>)
 8004b82:	f7fe faff 	bl	8003184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <prvInitialiseTaskLists+0x78>)
 8004b88:	4a05      	ldr	r2, [pc, #20]	; (8004ba0 <prvInitialiseTaskLists+0x64>)
 8004b8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <prvInitialiseTaskLists+0x7c>)
 8004b8e:	4a05      	ldr	r2, [pc, #20]	; (8004ba4 <prvInitialiseTaskLists+0x68>)
 8004b90:	601a      	str	r2, [r3, #0]
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	200008e0 	.word	0x200008e0
 8004ba0:	20000d40 	.word	0x20000d40
 8004ba4:	20000d54 	.word	0x20000d54
 8004ba8:	20000d70 	.word	0x20000d70
 8004bac:	20000d84 	.word	0x20000d84
 8004bb0:	20000d9c 	.word	0x20000d9c
 8004bb4:	20000d68 	.word	0x20000d68
 8004bb8:	20000d6c 	.word	0x20000d6c

08004bbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bc2:	e019      	b.n	8004bf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bc4:	f000 fed6 	bl	8005974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc8:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <prvCheckTasksWaitingTermination+0x50>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fe fb5f 	bl	8003298 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <prvCheckTasksWaitingTermination+0x54>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	4a0b      	ldr	r2, [pc, #44]	; (8004c10 <prvCheckTasksWaitingTermination+0x54>)
 8004be2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <prvCheckTasksWaitingTermination+0x58>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <prvCheckTasksWaitingTermination+0x58>)
 8004bec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bee:	f000 fef1 	bl	80059d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f810 	bl	8004c18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <prvCheckTasksWaitingTermination+0x58>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e1      	bne.n	8004bc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c00:	bf00      	nop
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000d84 	.word	0x20000d84
 8004c10:	20000db0 	.word	0x20000db0
 8004c14:	20000d98 	.word	0x20000d98

08004c18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3354      	adds	r3, #84	; 0x54
 8004c24:	4618      	mov	r0, r3
 8004c26:	f001 f9fb 	bl	8006020 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d108      	bne.n	8004c46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f001 f889 	bl	8005d50 <vPortFree>
				vPortFree( pxTCB );
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f001 f886 	bl	8005d50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c44:	e018      	b.n	8004c78 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d103      	bne.n	8004c58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f001 f87d 	bl	8005d50 <vPortFree>
	}
 8004c56:	e00f      	b.n	8004c78 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d00a      	beq.n	8004c78 <prvDeleteTCB+0x60>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	60fb      	str	r3, [r7, #12]
}
 8004c74:	bf00      	nop
 8004c76:	e7fe      	b.n	8004c76 <prvDeleteTCB+0x5e>
	}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <prvResetNextTaskUnblockTime+0x38>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d104      	bne.n	8004c9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c90:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <prvResetNextTaskUnblockTime+0x3c>)
 8004c92:	f04f 32ff 	mov.w	r2, #4294967295
 8004c96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c98:	e008      	b.n	8004cac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9a:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <prvResetNextTaskUnblockTime+0x38>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4a04      	ldr	r2, [pc, #16]	; (8004cbc <prvResetNextTaskUnblockTime+0x3c>)
 8004caa:	6013      	str	r3, [r2, #0]
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	20000d68 	.word	0x20000d68
 8004cbc:	20000dd0 	.word	0x20000dd0

08004cc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <xTaskGetSchedulerState+0x34>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d102      	bne.n	8004cd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	e008      	b.n	8004ce6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cd4:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <xTaskGetSchedulerState+0x38>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	e001      	b.n	8004ce6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ce6:	687b      	ldr	r3, [r7, #4]
	}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	20000dbc 	.word	0x20000dbc
 8004cf8:	20000dd8 	.word	0x20000dd8

08004cfc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d051      	beq.n	8004db6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d16:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <xTaskPriorityInherit+0xc4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d241      	bcs.n	8004da4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	db06      	blt.n	8004d36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d28:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <xTaskPriorityInherit+0xc4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6959      	ldr	r1, [r3, #20]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4a1f      	ldr	r2, [pc, #124]	; (8004dc4 <xTaskPriorityInherit+0xc8>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	4299      	cmp	r1, r3
 8004d4c:	d122      	bne.n	8004d94 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe faa0 	bl	8003298 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d58:	4b19      	ldr	r3, [pc, #100]	; (8004dc0 <xTaskPriorityInherit+0xc4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d66:	4b18      	ldr	r3, [pc, #96]	; (8004dc8 <xTaskPriorityInherit+0xcc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d903      	bls.n	8004d76 <xTaskPriorityInherit+0x7a>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	4a15      	ldr	r2, [pc, #84]	; (8004dc8 <xTaskPriorityInherit+0xcc>)
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4a10      	ldr	r2, [pc, #64]	; (8004dc4 <xTaskPriorityInherit+0xc8>)
 8004d84:	441a      	add	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f7fe fa26 	bl	80031de <vListInsertEnd>
 8004d92:	e004      	b.n	8004d9e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d94:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <xTaskPriorityInherit+0xc4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	e008      	b.n	8004db6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <xTaskPriorityInherit+0xc4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d201      	bcs.n	8004db6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004db2:	2301      	movs	r3, #1
 8004db4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004db6:	68fb      	ldr	r3, [r7, #12]
	}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	200008dc 	.word	0x200008dc
 8004dc4:	200008e0 	.word	0x200008e0
 8004dc8:	20000db8 	.word	0x20000db8

08004dcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d056      	beq.n	8004e90 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004de2:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <xTaskPriorityDisinherit+0xd0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d00a      	beq.n	8004e02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	60fb      	str	r3, [r7, #12]
}
 8004dfe:	bf00      	nop
 8004e00:	e7fe      	b.n	8004e00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10a      	bne.n	8004e20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	60bb      	str	r3, [r7, #8]
}
 8004e1c:	bf00      	nop
 8004e1e:	e7fe      	b.n	8004e1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e24:	1e5a      	subs	r2, r3, #1
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d02c      	beq.n	8004e90 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d128      	bne.n	8004e90 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	3304      	adds	r3, #4
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fe fa28 	bl	8003298 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e60:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <xTaskPriorityDisinherit+0xd4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d903      	bls.n	8004e70 <xTaskPriorityDisinherit+0xa4>
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ea0 <xTaskPriorityDisinherit+0xd4>)
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <xTaskPriorityDisinherit+0xd8>)
 8004e7e:	441a      	add	r2, r3
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	4610      	mov	r0, r2
 8004e88:	f7fe f9a9 	bl	80031de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e90:	697b      	ldr	r3, [r7, #20]
	}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	200008dc 	.word	0x200008dc
 8004ea0:	20000db8 	.word	0x20000db8
 8004ea4:	200008e0 	.word	0x200008e0

08004ea8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d06a      	beq.n	8004f96 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	60fb      	str	r3, [r7, #12]
}
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d902      	bls.n	8004eee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	61fb      	str	r3, [r7, #28]
 8004eec:	e002      	b.n	8004ef4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d04b      	beq.n	8004f96 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d146      	bne.n	8004f96 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004f08:	4b25      	ldr	r3, [pc, #148]	; (8004fa0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d10a      	bne.n	8004f28 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	60bb      	str	r3, [r7, #8]
}
 8004f24:	bf00      	nop
 8004f26:	e7fe      	b.n	8004f26 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	db04      	blt.n	8004f46 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	6959      	ldr	r1, [r3, #20]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004f56:	4413      	add	r3, r2
 8004f58:	4299      	cmp	r1, r3
 8004f5a:	d11c      	bne.n	8004f96 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fe f999 	bl	8003298 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6a:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d903      	bls.n	8004f7a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004f88:	441a      	add	r2, r3
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f7fe f924 	bl	80031de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f96:	bf00      	nop
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	200008dc 	.word	0x200008dc
 8004fa4:	200008e0 	.word	0x200008e0
 8004fa8:	20000db8 	.word	0x20000db8

08004fac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fbe:	3201      	adds	r2, #1
 8004fc0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004fc2:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
	}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	200008dc 	.word	0x200008dc

08004fd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fde:	4b21      	ldr	r3, [pc, #132]	; (8005064 <prvAddCurrentTaskToDelayedList+0x90>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe4:	4b20      	ldr	r3, [pc, #128]	; (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe f954 	bl	8003298 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff6:	d10a      	bne.n	800500e <prvAddCurrentTaskToDelayedList+0x3a>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ffe:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3304      	adds	r3, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4819      	ldr	r0, [pc, #100]	; (800506c <prvAddCurrentTaskToDelayedList+0x98>)
 8005008:	f7fe f8e9 	bl	80031de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800500c:	e026      	b.n	800505c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	429a      	cmp	r2, r3
 8005024:	d209      	bcs.n	800503a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005026:	4b12      	ldr	r3, [pc, #72]	; (8005070 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3304      	adds	r3, #4
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f7fe f8f7 	bl	8003226 <vListInsert>
}
 8005038:	e010      	b.n	800505c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800503a:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <prvAddCurrentTaskToDelayedList+0xa0>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f7fe f8ed 	bl	8003226 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800504c:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <prvAddCurrentTaskToDelayedList+0xa4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	d202      	bcs.n	800505c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005056:	4a08      	ldr	r2, [pc, #32]	; (8005078 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	6013      	str	r3, [r2, #0]
}
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000db4 	.word	0x20000db4
 8005068:	200008dc 	.word	0x200008dc
 800506c:	20000d9c 	.word	0x20000d9c
 8005070:	20000d6c 	.word	0x20000d6c
 8005074:	20000d68 	.word	0x20000d68
 8005078:	20000dd0 	.word	0x20000dd0

0800507c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08a      	sub	sp, #40	; 0x28
 8005080:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005086:	f000 fb07 	bl	8005698 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800508a:	4b1c      	ldr	r3, [pc, #112]	; (80050fc <xTimerCreateTimerTask+0x80>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d021      	beq.n	80050d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800509a:	1d3a      	adds	r2, r7, #4
 800509c:	f107 0108 	add.w	r1, r7, #8
 80050a0:	f107 030c 	add.w	r3, r7, #12
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe f853 	bl	8003150 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	9202      	str	r2, [sp, #8]
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	2302      	movs	r3, #2
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	2300      	movs	r3, #0
 80050ba:	460a      	mov	r2, r1
 80050bc:	4910      	ldr	r1, [pc, #64]	; (8005100 <xTimerCreateTimerTask+0x84>)
 80050be:	4811      	ldr	r0, [pc, #68]	; (8005104 <xTimerCreateTimerTask+0x88>)
 80050c0:	f7fe ffea 	bl	8004098 <xTaskCreateStatic>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4a10      	ldr	r2, [pc, #64]	; (8005108 <xTimerCreateTimerTask+0x8c>)
 80050c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <xTimerCreateTimerTask+0x8c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80050d2:	2301      	movs	r3, #1
 80050d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	613b      	str	r3, [r7, #16]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80050f2:	697b      	ldr	r3, [r7, #20]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000e0c 	.word	0x20000e0c
 8005100:	08006204 	.word	0x08006204
 8005104:	08005241 	.word	0x08005241
 8005108:	20000e10 	.word	0x20000e10

0800510c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800511a:	2300      	movs	r3, #0
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	623b      	str	r3, [r7, #32]
}
 8005136:	bf00      	nop
 8005138:	e7fe      	b.n	8005138 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800513a:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <xTimerGenericCommand+0x98>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d02a      	beq.n	8005198 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b05      	cmp	r3, #5
 8005152:	dc18      	bgt.n	8005186 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005154:	f7ff fdb4 	bl	8004cc0 <xTaskGetSchedulerState>
 8005158:	4603      	mov	r3, r0
 800515a:	2b02      	cmp	r3, #2
 800515c:	d109      	bne.n	8005172 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <xTimerGenericCommand+0x98>)
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	f107 0110 	add.w	r1, r7, #16
 8005166:	2300      	movs	r3, #0
 8005168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516a:	f7fe f9fd 	bl	8003568 <xQueueGenericSend>
 800516e:	6278      	str	r0, [r7, #36]	; 0x24
 8005170:	e012      	b.n	8005198 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005172:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <xTimerGenericCommand+0x98>)
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	f107 0110 	add.w	r1, r7, #16
 800517a:	2300      	movs	r3, #0
 800517c:	2200      	movs	r2, #0
 800517e:	f7fe f9f3 	bl	8003568 <xQueueGenericSend>
 8005182:	6278      	str	r0, [r7, #36]	; 0x24
 8005184:	e008      	b.n	8005198 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005186:	4b07      	ldr	r3, [pc, #28]	; (80051a4 <xTimerGenericCommand+0x98>)
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	f107 0110 	add.w	r1, r7, #16
 800518e:	2300      	movs	r3, #0
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	f7fe fae7 	bl	8003764 <xQueueGenericSendFromISR>
 8005196:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800519a:	4618      	mov	r0, r3
 800519c:	3728      	adds	r7, #40	; 0x28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000e0c 	.word	0x20000e0c

080051a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b2:	4b22      	ldr	r3, [pc, #136]	; (800523c <prvProcessExpiredTimer+0x94>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	3304      	adds	r3, #4
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe f869 	bl	8003298 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d022      	beq.n	800521a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	699a      	ldr	r2, [r3, #24]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	18d1      	adds	r1, r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	6978      	ldr	r0, [r7, #20]
 80051e2:	f000 f8d1 	bl	8005388 <prvInsertTimerInActiveList>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01f      	beq.n	800522c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051ec:	2300      	movs	r3, #0
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	2300      	movs	r3, #0
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	2100      	movs	r1, #0
 80051f6:	6978      	ldr	r0, [r7, #20]
 80051f8:	f7ff ff88 	bl	800510c <xTimerGenericCommand>
 80051fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d113      	bne.n	800522c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	60fb      	str	r3, [r7, #12]
}
 8005216:	bf00      	nop
 8005218:	e7fe      	b.n	8005218 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	b2da      	uxtb	r2, r3
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	6978      	ldr	r0, [r7, #20]
 8005232:	4798      	blx	r3
}
 8005234:	bf00      	nop
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20000e04 	.word	0x20000e04

08005240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005248:	f107 0308 	add.w	r3, r7, #8
 800524c:	4618      	mov	r0, r3
 800524e:	f000 f857 	bl	8005300 <prvGetNextExpireTime>
 8005252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4619      	mov	r1, r3
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f803 	bl	8005264 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800525e:	f000 f8d5 	bl	800540c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005262:	e7f1      	b.n	8005248 <prvTimerTask+0x8>

08005264 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800526e:	f7ff f93b 	bl	80044e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005272:	f107 0308 	add.w	r3, r7, #8
 8005276:	4618      	mov	r0, r3
 8005278:	f000 f866 	bl	8005348 <prvSampleTimeNow>
 800527c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d130      	bne.n	80052e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <prvProcessTimerOrBlockTask+0x3c>
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	429a      	cmp	r2, r3
 8005290:	d806      	bhi.n	80052a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005292:	f7ff f937 	bl	8004504 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005296:	68f9      	ldr	r1, [r7, #12]
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff ff85 	bl	80051a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800529e:	e024      	b.n	80052ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d008      	beq.n	80052b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052a6:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <prvProcessTimerOrBlockTask+0x90>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <prvProcessTimerOrBlockTask+0x50>
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <prvProcessTimerOrBlockTask+0x52>
 80052b4:	2300      	movs	r3, #0
 80052b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052b8:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <prvProcessTimerOrBlockTask+0x94>)
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	4619      	mov	r1, r3
 80052c6:	f7fe feb3 	bl	8004030 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052ca:	f7ff f91b 	bl	8004504 <xTaskResumeAll>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <prvProcessTimerOrBlockTask+0x98>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	f3bf 8f6f 	isb	sy
}
 80052e4:	e001      	b.n	80052ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80052e6:	f7ff f90d 	bl	8004504 <xTaskResumeAll>
}
 80052ea:	bf00      	nop
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000e08 	.word	0x20000e08
 80052f8:	20000e0c 	.word	0x20000e0c
 80052fc:	e000ed04 	.word	0xe000ed04

08005300 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005308:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <prvGetNextExpireTime+0x44>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <prvGetNextExpireTime+0x16>
 8005312:	2201      	movs	r2, #1
 8005314:	e000      	b.n	8005318 <prvGetNextExpireTime+0x18>
 8005316:	2200      	movs	r2, #0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d105      	bne.n	8005330 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005324:	4b07      	ldr	r3, [pc, #28]	; (8005344 <prvGetNextExpireTime+0x44>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	e001      	b.n	8005334 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005334:	68fb      	ldr	r3, [r7, #12]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000e04 	.word	0x20000e04

08005348 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005350:	f7ff f976 	bl	8004640 <xTaskGetTickCount>
 8005354:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <prvSampleTimeNow+0x3c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	429a      	cmp	r2, r3
 800535e:	d205      	bcs.n	800536c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005360:	f000 f936 	bl	80055d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e002      	b.n	8005372 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005372:	4a04      	ldr	r2, [pc, #16]	; (8005384 <prvSampleTimeNow+0x3c>)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005378:	68fb      	ldr	r3, [r7, #12]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000e14 	.word	0x20000e14

08005388 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d812      	bhi.n	80053d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d302      	bcc.n	80053c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053bc:	2301      	movs	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e01b      	b.n	80053fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053c2:	4b10      	ldr	r3, [pc, #64]	; (8005404 <prvInsertTimerInActiveList+0x7c>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f7fd ff2a 	bl	8003226 <vListInsert>
 80053d2:	e012      	b.n	80053fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d206      	bcs.n	80053ea <prvInsertTimerInActiveList+0x62>
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d302      	bcc.n	80053ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80053e4:	2301      	movs	r3, #1
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e007      	b.n	80053fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053ea:	4b07      	ldr	r3, [pc, #28]	; (8005408 <prvInsertTimerInActiveList+0x80>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3304      	adds	r3, #4
 80053f2:	4619      	mov	r1, r3
 80053f4:	4610      	mov	r0, r2
 80053f6:	f7fd ff16 	bl	8003226 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053fa:	697b      	ldr	r3, [r7, #20]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000e08 	.word	0x20000e08
 8005408:	20000e04 	.word	0x20000e04

0800540c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08e      	sub	sp, #56	; 0x38
 8005410:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005412:	e0ca      	b.n	80055aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	da18      	bge.n	800544c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800541a:	1d3b      	adds	r3, r7, #4
 800541c:	3304      	adds	r3, #4
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	61fb      	str	r3, [r7, #28]
}
 8005438:	bf00      	nop
 800543a:	e7fe      	b.n	800543a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005442:	6850      	ldr	r0, [r2, #4]
 8005444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005446:	6892      	ldr	r2, [r2, #8]
 8005448:	4611      	mov	r1, r2
 800544a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	f2c0 80aa 	blt.w	80055a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	3304      	adds	r3, #4
 8005464:	4618      	mov	r0, r3
 8005466:	f7fd ff17 	bl	8003298 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800546a:	463b      	mov	r3, r7
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff ff6b 	bl	8005348 <prvSampleTimeNow>
 8005472:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b09      	cmp	r3, #9
 8005478:	f200 8097 	bhi.w	80055aa <prvProcessReceivedCommands+0x19e>
 800547c:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <prvProcessReceivedCommands+0x78>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	080054ad 	.word	0x080054ad
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054ad 	.word	0x080054ad
 8005490:	08005521 	.word	0x08005521
 8005494:	08005535 	.word	0x08005535
 8005498:	0800557f 	.word	0x0800557f
 800549c:	080054ad 	.word	0x080054ad
 80054a0:	080054ad 	.word	0x080054ad
 80054a4:	08005521 	.word	0x08005521
 80054a8:	08005535 	.word	0x08005535
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	18d1      	adds	r1, r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054cc:	f7ff ff5c 	bl	8005388 <prvInsertTimerInActiveList>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d069      	beq.n	80055aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d05e      	beq.n	80055aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	441a      	add	r2, r3
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	2300      	movs	r3, #0
 80054fa:	2100      	movs	r1, #0
 80054fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054fe:	f7ff fe05 	bl	800510c <xTimerGenericCommand>
 8005502:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d14f      	bne.n	80055aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	61bb      	str	r3, [r7, #24]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	b2da      	uxtb	r2, r3
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005532:	e03a      	b.n	80055aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	b2da      	uxtb	r2, r3
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	617b      	str	r3, [r7, #20]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	18d1      	adds	r1, r2, r3
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005578:	f7ff ff06 	bl	8005388 <prvInsertTimerInActiveList>
					break;
 800557c:	e015      	b.n	80055aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d103      	bne.n	8005594 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800558c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800558e:	f000 fbdf 	bl	8005d50 <vPortFree>
 8005592:	e00a      	b.n	80055aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055a6:	e000      	b.n	80055aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80055a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055aa:	4b08      	ldr	r3, [pc, #32]	; (80055cc <prvProcessReceivedCommands+0x1c0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	1d39      	adds	r1, r7, #4
 80055b0:	2200      	movs	r2, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe f9fe 	bl	80039b4 <xQueueReceive>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f47f af2a 	bne.w	8005414 <prvProcessReceivedCommands+0x8>
	}
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	3730      	adds	r7, #48	; 0x30
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000e0c 	.word	0x20000e0c

080055d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055d6:	e048      	b.n	800566a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055d8:	4b2d      	ldr	r3, [pc, #180]	; (8005690 <prvSwitchTimerLists+0xc0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055e2:	4b2b      	ldr	r3, [pc, #172]	; (8005690 <prvSwitchTimerLists+0xc0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fd fe51 	bl	8003298 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02e      	beq.n	800566a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4413      	add	r3, r2
 8005614:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	429a      	cmp	r2, r3
 800561c:	d90e      	bls.n	800563c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800562a:	4b19      	ldr	r3, [pc, #100]	; (8005690 <prvSwitchTimerLists+0xc0>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3304      	adds	r3, #4
 8005632:	4619      	mov	r1, r3
 8005634:	4610      	mov	r0, r2
 8005636:	f7fd fdf6 	bl	8003226 <vListInsert>
 800563a:	e016      	b.n	800566a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800563c:	2300      	movs	r3, #0
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	2300      	movs	r3, #0
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	2100      	movs	r1, #0
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7ff fd60 	bl	800510c <xTimerGenericCommand>
 800564c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	603b      	str	r3, [r7, #0]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800566a:	4b09      	ldr	r3, [pc, #36]	; (8005690 <prvSwitchTimerLists+0xc0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1b1      	bne.n	80055d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005674:	4b06      	ldr	r3, [pc, #24]	; (8005690 <prvSwitchTimerLists+0xc0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800567a:	4b06      	ldr	r3, [pc, #24]	; (8005694 <prvSwitchTimerLists+0xc4>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a04      	ldr	r2, [pc, #16]	; (8005690 <prvSwitchTimerLists+0xc0>)
 8005680:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005682:	4a04      	ldr	r2, [pc, #16]	; (8005694 <prvSwitchTimerLists+0xc4>)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	6013      	str	r3, [r2, #0]
}
 8005688:	bf00      	nop
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20000e04 	.word	0x20000e04
 8005694:	20000e08 	.word	0x20000e08

08005698 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800569e:	f000 f969 	bl	8005974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056a2:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <prvCheckForValidListAndQueue+0x60>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d120      	bne.n	80056ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056aa:	4814      	ldr	r0, [pc, #80]	; (80056fc <prvCheckForValidListAndQueue+0x64>)
 80056ac:	f7fd fd6a 	bl	8003184 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056b0:	4813      	ldr	r0, [pc, #76]	; (8005700 <prvCheckForValidListAndQueue+0x68>)
 80056b2:	f7fd fd67 	bl	8003184 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80056b6:	4b13      	ldr	r3, [pc, #76]	; (8005704 <prvCheckForValidListAndQueue+0x6c>)
 80056b8:	4a10      	ldr	r2, [pc, #64]	; (80056fc <prvCheckForValidListAndQueue+0x64>)
 80056ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80056bc:	4b12      	ldr	r3, [pc, #72]	; (8005708 <prvCheckForValidListAndQueue+0x70>)
 80056be:	4a10      	ldr	r2, [pc, #64]	; (8005700 <prvCheckForValidListAndQueue+0x68>)
 80056c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056c2:	2300      	movs	r3, #0
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	4b11      	ldr	r3, [pc, #68]	; (800570c <prvCheckForValidListAndQueue+0x74>)
 80056c8:	4a11      	ldr	r2, [pc, #68]	; (8005710 <prvCheckForValidListAndQueue+0x78>)
 80056ca:	2110      	movs	r1, #16
 80056cc:	200a      	movs	r0, #10
 80056ce:	f7fd fe75 	bl	80033bc <xQueueGenericCreateStatic>
 80056d2:	4603      	mov	r3, r0
 80056d4:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <prvCheckForValidListAndQueue+0x60>)
 80056d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056d8:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <prvCheckForValidListAndQueue+0x60>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <prvCheckForValidListAndQueue+0x60>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	490b      	ldr	r1, [pc, #44]	; (8005714 <prvCheckForValidListAndQueue+0x7c>)
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fc78 	bl	8003fdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056ec:	f000 f972 	bl	80059d4 <vPortExitCritical>
}
 80056f0:	bf00      	nop
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000e0c 	.word	0x20000e0c
 80056fc:	20000ddc 	.word	0x20000ddc
 8005700:	20000df0 	.word	0x20000df0
 8005704:	20000e04 	.word	0x20000e04
 8005708:	20000e08 	.word	0x20000e08
 800570c:	20000eb8 	.word	0x20000eb8
 8005710:	20000e18 	.word	0x20000e18
 8005714:	0800620c 	.word	0x0800620c

08005718 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3b04      	subs	r3, #4
 8005728:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3b04      	subs	r3, #4
 8005736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f023 0201 	bic.w	r2, r3, #1
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3b04      	subs	r3, #4
 8005746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005748:	4a0c      	ldr	r2, [pc, #48]	; (800577c <pxPortInitialiseStack+0x64>)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3b14      	subs	r3, #20
 8005752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3b04      	subs	r3, #4
 800575e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f06f 0202 	mvn.w	r2, #2
 8005766:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3b20      	subs	r3, #32
 800576c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800576e:	68fb      	ldr	r3, [r7, #12]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	08005781 	.word	0x08005781

08005780 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800578a:	4b12      	ldr	r3, [pc, #72]	; (80057d4 <prvTaskExitError+0x54>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d00a      	beq.n	80057aa <prvTaskExitError+0x2a>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	60fb      	str	r3, [r7, #12]
}
 80057a6:	bf00      	nop
 80057a8:	e7fe      	b.n	80057a8 <prvTaskExitError+0x28>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	60bb      	str	r3, [r7, #8]
}
 80057bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057be:	bf00      	nop
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0fc      	beq.n	80057c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057c6:	bf00      	nop
 80057c8:	bf00      	nop
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	2000000c 	.word	0x2000000c
	...

080057e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057e0:	4b07      	ldr	r3, [pc, #28]	; (8005800 <pxCurrentTCBConst2>)
 80057e2:	6819      	ldr	r1, [r3, #0]
 80057e4:	6808      	ldr	r0, [r1, #0]
 80057e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ea:	f380 8809 	msr	PSP, r0
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f04f 0000 	mov.w	r0, #0
 80057f6:	f380 8811 	msr	BASEPRI, r0
 80057fa:	4770      	bx	lr
 80057fc:	f3af 8000 	nop.w

08005800 <pxCurrentTCBConst2>:
 8005800:	200008dc 	.word	0x200008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop

08005808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005808:	4808      	ldr	r0, [pc, #32]	; (800582c <prvPortStartFirstTask+0x24>)
 800580a:	6800      	ldr	r0, [r0, #0]
 800580c:	6800      	ldr	r0, [r0, #0]
 800580e:	f380 8808 	msr	MSP, r0
 8005812:	f04f 0000 	mov.w	r0, #0
 8005816:	f380 8814 	msr	CONTROL, r0
 800581a:	b662      	cpsie	i
 800581c:	b661      	cpsie	f
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	df00      	svc	0
 8005828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800582a:	bf00      	nop
 800582c:	e000ed08 	.word	0xe000ed08

08005830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005836:	4b46      	ldr	r3, [pc, #280]	; (8005950 <xPortStartScheduler+0x120>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a46      	ldr	r2, [pc, #280]	; (8005954 <xPortStartScheduler+0x124>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d10a      	bne.n	8005856 <xPortStartScheduler+0x26>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	613b      	str	r3, [r7, #16]
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005856:	4b3e      	ldr	r3, [pc, #248]	; (8005950 <xPortStartScheduler+0x120>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a3f      	ldr	r2, [pc, #252]	; (8005958 <xPortStartScheduler+0x128>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d10a      	bne.n	8005876 <xPortStartScheduler+0x46>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	60fb      	str	r3, [r7, #12]
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005876:	4b39      	ldr	r3, [pc, #228]	; (800595c <xPortStartScheduler+0x12c>)
 8005878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	b2db      	uxtb	r3, r3
 8005880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	22ff      	movs	r2, #255	; 0xff
 8005886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005898:	b2da      	uxtb	r2, r3
 800589a:	4b31      	ldr	r3, [pc, #196]	; (8005960 <xPortStartScheduler+0x130>)
 800589c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800589e:	4b31      	ldr	r3, [pc, #196]	; (8005964 <xPortStartScheduler+0x134>)
 80058a0:	2207      	movs	r2, #7
 80058a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058a4:	e009      	b.n	80058ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80058a6:	4b2f      	ldr	r3, [pc, #188]	; (8005964 <xPortStartScheduler+0x134>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	4a2d      	ldr	r2, [pc, #180]	; (8005964 <xPortStartScheduler+0x134>)
 80058ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b80      	cmp	r3, #128	; 0x80
 80058c4:	d0ef      	beq.n	80058a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058c6:	4b27      	ldr	r3, [pc, #156]	; (8005964 <xPortStartScheduler+0x134>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f1c3 0307 	rsb	r3, r3, #7
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d00a      	beq.n	80058e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	60bb      	str	r3, [r7, #8]
}
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058e8:	4b1e      	ldr	r3, [pc, #120]	; (8005964 <xPortStartScheduler+0x134>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	4a1d      	ldr	r2, [pc, #116]	; (8005964 <xPortStartScheduler+0x134>)
 80058f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058f2:	4b1c      	ldr	r3, [pc, #112]	; (8005964 <xPortStartScheduler+0x134>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058fa:	4a1a      	ldr	r2, [pc, #104]	; (8005964 <xPortStartScheduler+0x134>)
 80058fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	b2da      	uxtb	r2, r3
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005906:	4b18      	ldr	r3, [pc, #96]	; (8005968 <xPortStartScheduler+0x138>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a17      	ldr	r2, [pc, #92]	; (8005968 <xPortStartScheduler+0x138>)
 800590c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005912:	4b15      	ldr	r3, [pc, #84]	; (8005968 <xPortStartScheduler+0x138>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a14      	ldr	r2, [pc, #80]	; (8005968 <xPortStartScheduler+0x138>)
 8005918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800591c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800591e:	f000 f8dd 	bl	8005adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <xPortStartScheduler+0x13c>)
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005928:	f000 f8fc 	bl	8005b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800592c:	4b10      	ldr	r3, [pc, #64]	; (8005970 <xPortStartScheduler+0x140>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0f      	ldr	r2, [pc, #60]	; (8005970 <xPortStartScheduler+0x140>)
 8005932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005938:	f7ff ff66 	bl	8005808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800593c:	f7fe ff4a 	bl	80047d4 <vTaskSwitchContext>
	prvTaskExitError();
 8005940:	f7ff ff1e 	bl	8005780 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	e000ed00 	.word	0xe000ed00
 8005954:	410fc271 	.word	0x410fc271
 8005958:	410fc270 	.word	0x410fc270
 800595c:	e000e400 	.word	0xe000e400
 8005960:	20000f08 	.word	0x20000f08
 8005964:	20000f0c 	.word	0x20000f0c
 8005968:	e000ed20 	.word	0xe000ed20
 800596c:	2000000c 	.word	0x2000000c
 8005970:	e000ef34 	.word	0xe000ef34

08005974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	607b      	str	r3, [r7, #4]
}
 800598c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800598e:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <vPortEnterCritical+0x58>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3301      	adds	r3, #1
 8005994:	4a0d      	ldr	r2, [pc, #52]	; (80059cc <vPortEnterCritical+0x58>)
 8005996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005998:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <vPortEnterCritical+0x58>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d10f      	bne.n	80059c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <vPortEnterCritical+0x5c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	603b      	str	r3, [r7, #0]
}
 80059bc:	bf00      	nop
 80059be:	e7fe      	b.n	80059be <vPortEnterCritical+0x4a>
	}
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	2000000c 	.word	0x2000000c
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059da:	4b12      	ldr	r3, [pc, #72]	; (8005a24 <vPortExitCritical+0x50>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <vPortExitCritical+0x24>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	607b      	str	r3, [r7, #4]
}
 80059f4:	bf00      	nop
 80059f6:	e7fe      	b.n	80059f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059f8:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <vPortExitCritical+0x50>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <vPortExitCritical+0x50>)
 8005a00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a02:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <vPortExitCritical+0x50>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d105      	bne.n	8005a16 <vPortExitCritical+0x42>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	f383 8811 	msr	BASEPRI, r3
}
 8005a14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	2000000c 	.word	0x2000000c
	...

08005a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a30:	f3ef 8009 	mrs	r0, PSP
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <pxCurrentTCBConst>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	f01e 0f10 	tst.w	lr, #16
 8005a40:	bf08      	it	eq
 8005a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4a:	6010      	str	r0, [r2, #0]
 8005a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a54:	f380 8811 	msr	BASEPRI, r0
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f7fe feb8 	bl	80047d4 <vTaskSwitchContext>
 8005a64:	f04f 0000 	mov.w	r0, #0
 8005a68:	f380 8811 	msr	BASEPRI, r0
 8005a6c:	bc09      	pop	{r0, r3}
 8005a6e:	6819      	ldr	r1, [r3, #0]
 8005a70:	6808      	ldr	r0, [r1, #0]
 8005a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a76:	f01e 0f10 	tst.w	lr, #16
 8005a7a:	bf08      	it	eq
 8005a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a80:	f380 8809 	msr	PSP, r0
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	f3af 8000 	nop.w

08005a90 <pxCurrentTCBConst>:
 8005a90:	200008dc 	.word	0x200008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a94:	bf00      	nop
 8005a96:	bf00      	nop

08005a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	607b      	str	r3, [r7, #4]
}
 8005ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ab2:	f7fe fdd5 	bl	8004660 <xTaskIncrementTick>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005abc:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <xPortSysTickHandler+0x40>)
 8005abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	f383 8811 	msr	BASEPRI, r3
}
 8005ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ad0:	bf00      	nop
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <vPortSetupTimerInterrupt+0x34>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <vPortSetupTimerInterrupt+0x38>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005aec:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <vPortSetupTimerInterrupt+0x3c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a0a      	ldr	r2, [pc, #40]	; (8005b1c <vPortSetupTimerInterrupt+0x40>)
 8005af2:	fba2 2303 	umull	r2, r3, r2, r3
 8005af6:	099b      	lsrs	r3, r3, #6
 8005af8:	4a09      	ldr	r2, [pc, #36]	; (8005b20 <vPortSetupTimerInterrupt+0x44>)
 8005afa:	3b01      	subs	r3, #1
 8005afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005afe:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <vPortSetupTimerInterrupt+0x34>)
 8005b00:	2207      	movs	r2, #7
 8005b02:	601a      	str	r2, [r3, #0]
}
 8005b04:	bf00      	nop
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	e000e010 	.word	0xe000e010
 8005b14:	e000e018 	.word	0xe000e018
 8005b18:	20000000 	.word	0x20000000
 8005b1c:	10624dd3 	.word	0x10624dd3
 8005b20:	e000e014 	.word	0xe000e014

08005b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b34 <vPortEnableVFP+0x10>
 8005b28:	6801      	ldr	r1, [r0, #0]
 8005b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b2e:	6001      	str	r1, [r0, #0]
 8005b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b32:	bf00      	nop
 8005b34:	e000ed88 	.word	0xe000ed88

08005b38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b3e:	f3ef 8305 	mrs	r3, IPSR
 8005b42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b0f      	cmp	r3, #15
 8005b48:	d914      	bls.n	8005b74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b4a:	4a17      	ldr	r2, [pc, #92]	; (8005ba8 <vPortValidateInterruptPriority+0x70>)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b54:	4b15      	ldr	r3, [pc, #84]	; (8005bac <vPortValidateInterruptPriority+0x74>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	7afa      	ldrb	r2, [r7, #11]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d20a      	bcs.n	8005b74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	607b      	str	r3, [r7, #4]
}
 8005b70:	bf00      	nop
 8005b72:	e7fe      	b.n	8005b72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b74:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <vPortValidateInterruptPriority+0x78>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b7c:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <vPortValidateInterruptPriority+0x7c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d90a      	bls.n	8005b9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	603b      	str	r3, [r7, #0]
}
 8005b96:	bf00      	nop
 8005b98:	e7fe      	b.n	8005b98 <vPortValidateInterruptPriority+0x60>
	}
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	e000e3f0 	.word	0xe000e3f0
 8005bac:	20000f08 	.word	0x20000f08
 8005bb0:	e000ed0c 	.word	0xe000ed0c
 8005bb4:	20000f0c 	.word	0x20000f0c

08005bb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08a      	sub	sp, #40	; 0x28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005bc4:	f7fe fc90 	bl	80044e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005bc8:	4b5b      	ldr	r3, [pc, #364]	; (8005d38 <pvPortMalloc+0x180>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005bd0:	f000 f920 	bl	8005e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bd4:	4b59      	ldr	r3, [pc, #356]	; (8005d3c <pvPortMalloc+0x184>)
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f040 8093 	bne.w	8005d08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d01d      	beq.n	8005c24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005be8:	2208      	movs	r2, #8
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4413      	add	r3, r2
 8005bee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d014      	beq.n	8005c24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f023 0307 	bic.w	r3, r3, #7
 8005c00:	3308      	adds	r3, #8
 8005c02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <pvPortMalloc+0x6c>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	617b      	str	r3, [r7, #20]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d06e      	beq.n	8005d08 <pvPortMalloc+0x150>
 8005c2a:	4b45      	ldr	r3, [pc, #276]	; (8005d40 <pvPortMalloc+0x188>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d869      	bhi.n	8005d08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c34:	4b43      	ldr	r3, [pc, #268]	; (8005d44 <pvPortMalloc+0x18c>)
 8005c36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c38:	4b42      	ldr	r3, [pc, #264]	; (8005d44 <pvPortMalloc+0x18c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c3e:	e004      	b.n	8005c4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d903      	bls.n	8005c5c <pvPortMalloc+0xa4>
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1f1      	bne.n	8005c40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c5c:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <pvPortMalloc+0x180>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d050      	beq.n	8005d08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2208      	movs	r2, #8
 8005c6c:	4413      	add	r3, r2
 8005c6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	1ad2      	subs	r2, r2, r3
 8005c80:	2308      	movs	r3, #8
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d91f      	bls.n	8005cc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <pvPortMalloc+0xf8>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	613b      	str	r3, [r7, #16]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	1ad2      	subs	r2, r2, r3
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cc2:	69b8      	ldr	r0, [r7, #24]
 8005cc4:	f000 f908 	bl	8005ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cc8:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <pvPortMalloc+0x188>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	4a1b      	ldr	r2, [pc, #108]	; (8005d40 <pvPortMalloc+0x188>)
 8005cd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cd6:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <pvPortMalloc+0x188>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b1b      	ldr	r3, [pc, #108]	; (8005d48 <pvPortMalloc+0x190>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d203      	bcs.n	8005cea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ce2:	4b17      	ldr	r3, [pc, #92]	; (8005d40 <pvPortMalloc+0x188>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a18      	ldr	r2, [pc, #96]	; (8005d48 <pvPortMalloc+0x190>)
 8005ce8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <pvPortMalloc+0x184>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cfe:	4b13      	ldr	r3, [pc, #76]	; (8005d4c <pvPortMalloc+0x194>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3301      	adds	r3, #1
 8005d04:	4a11      	ldr	r2, [pc, #68]	; (8005d4c <pvPortMalloc+0x194>)
 8005d06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d08:	f7fe fbfc 	bl	8004504 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <pvPortMalloc+0x174>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	60fb      	str	r3, [r7, #12]
}
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <pvPortMalloc+0x172>
	return pvReturn;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3728      	adds	r7, #40	; 0x28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20004b18 	.word	0x20004b18
 8005d3c:	20004b2c 	.word	0x20004b2c
 8005d40:	20004b1c 	.word	0x20004b1c
 8005d44:	20004b10 	.word	0x20004b10
 8005d48:	20004b20 	.word	0x20004b20
 8005d4c:	20004b24 	.word	0x20004b24

08005d50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d04d      	beq.n	8005dfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d62:	2308      	movs	r3, #8
 8005d64:	425b      	negs	r3, r3
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4413      	add	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	4b24      	ldr	r3, [pc, #144]	; (8005e08 <vPortFree+0xb8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <vPortFree+0x44>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	60fb      	str	r3, [r7, #12]
}
 8005d90:	bf00      	nop
 8005d92:	e7fe      	b.n	8005d92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <vPortFree+0x62>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	60bb      	str	r3, [r7, #8]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <vPortFree+0xb8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01e      	beq.n	8005dfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d11a      	bne.n	8005dfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	4b0e      	ldr	r3, [pc, #56]	; (8005e08 <vPortFree+0xb8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	401a      	ands	r2, r3
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005dd8:	f7fe fb86 	bl	80044e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <vPortFree+0xbc>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4413      	add	r3, r2
 8005de6:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <vPortFree+0xbc>)
 8005de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dea:	6938      	ldr	r0, [r7, #16]
 8005dec:	f000 f874 	bl	8005ed8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <vPortFree+0xc0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3301      	adds	r3, #1
 8005df6:	4a06      	ldr	r2, [pc, #24]	; (8005e10 <vPortFree+0xc0>)
 8005df8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005dfa:	f7fe fb83 	bl	8004504 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dfe:	bf00      	nop
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20004b2c 	.word	0x20004b2c
 8005e0c:	20004b1c 	.word	0x20004b1c
 8005e10:	20004b28 	.word	0x20004b28

08005e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e20:	4b27      	ldr	r3, [pc, #156]	; (8005ec0 <prvHeapInit+0xac>)
 8005e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00c      	beq.n	8005e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3307      	adds	r3, #7
 8005e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0307 	bic.w	r3, r3, #7
 8005e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	4a1f      	ldr	r2, [pc, #124]	; (8005ec0 <prvHeapInit+0xac>)
 8005e44:	4413      	add	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ec4 <prvHeapInit+0xb0>)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e52:	4b1c      	ldr	r3, [pc, #112]	; (8005ec4 <prvHeapInit+0xb0>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e60:	2208      	movs	r2, #8
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0307 	bic.w	r3, r3, #7
 8005e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4a15      	ldr	r2, [pc, #84]	; (8005ec8 <prvHeapInit+0xb4>)
 8005e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <prvHeapInit+0xb4>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e7e:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <prvHeapInit+0xb4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e94:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <prvHeapInit+0xb4>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <prvHeapInit+0xb8>)
 8005ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	4a09      	ldr	r2, [pc, #36]	; (8005ed0 <prvHeapInit+0xbc>)
 8005eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <prvHeapInit+0xc0>)
 8005eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005eb2:	601a      	str	r2, [r3, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	20000f10 	.word	0x20000f10
 8005ec4:	20004b10 	.word	0x20004b10
 8005ec8:	20004b18 	.word	0x20004b18
 8005ecc:	20004b20 	.word	0x20004b20
 8005ed0:	20004b1c 	.word	0x20004b1c
 8005ed4:	20004b2c 	.word	0x20004b2c

08005ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ee0:	4b28      	ldr	r3, [pc, #160]	; (8005f84 <prvInsertBlockIntoFreeList+0xac>)
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	e002      	b.n	8005eec <prvInsertBlockIntoFreeList+0x14>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d8f7      	bhi.n	8005ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	4413      	add	r3, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d108      	bne.n	8005f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	441a      	add	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	441a      	add	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d118      	bne.n	8005f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <prvInsertBlockIntoFreeList+0xb0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d00d      	beq.n	8005f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	441a      	add	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	e008      	b.n	8005f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f56:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <prvInsertBlockIntoFreeList+0xb0>)
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	e003      	b.n	8005f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d002      	beq.n	8005f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f76:	bf00      	nop
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20004b10 	.word	0x20004b10
 8005f88:	20004b18 	.word	0x20004b18

08005f8c <__libc_init_array>:
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	4d0d      	ldr	r5, [pc, #52]	; (8005fc4 <__libc_init_array+0x38>)
 8005f90:	4c0d      	ldr	r4, [pc, #52]	; (8005fc8 <__libc_init_array+0x3c>)
 8005f92:	1b64      	subs	r4, r4, r5
 8005f94:	10a4      	asrs	r4, r4, #2
 8005f96:	2600      	movs	r6, #0
 8005f98:	42a6      	cmp	r6, r4
 8005f9a:	d109      	bne.n	8005fb0 <__libc_init_array+0x24>
 8005f9c:	4d0b      	ldr	r5, [pc, #44]	; (8005fcc <__libc_init_array+0x40>)
 8005f9e:	4c0c      	ldr	r4, [pc, #48]	; (8005fd0 <__libc_init_array+0x44>)
 8005fa0:	f000 f8f2 	bl	8006188 <_init>
 8005fa4:	1b64      	subs	r4, r4, r5
 8005fa6:	10a4      	asrs	r4, r4, #2
 8005fa8:	2600      	movs	r6, #0
 8005faa:	42a6      	cmp	r6, r4
 8005fac:	d105      	bne.n	8005fba <__libc_init_array+0x2e>
 8005fae:	bd70      	pop	{r4, r5, r6, pc}
 8005fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb4:	4798      	blx	r3
 8005fb6:	3601      	adds	r6, #1
 8005fb8:	e7ee      	b.n	8005f98 <__libc_init_array+0xc>
 8005fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fbe:	4798      	blx	r3
 8005fc0:	3601      	adds	r6, #1
 8005fc2:	e7f2      	b.n	8005faa <__libc_init_array+0x1e>
 8005fc4:	08006294 	.word	0x08006294
 8005fc8:	08006294 	.word	0x08006294
 8005fcc:	08006294 	.word	0x08006294
 8005fd0:	08006298 	.word	0x08006298

08005fd4 <__retarget_lock_acquire_recursive>:
 8005fd4:	4770      	bx	lr

08005fd6 <__retarget_lock_release_recursive>:
 8005fd6:	4770      	bx	lr

08005fd8 <memcpy>:
 8005fd8:	440a      	add	r2, r1
 8005fda:	4291      	cmp	r1, r2
 8005fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fe0:	d100      	bne.n	8005fe4 <memcpy+0xc>
 8005fe2:	4770      	bx	lr
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fee:	4291      	cmp	r1, r2
 8005ff0:	d1f9      	bne.n	8005fe6 <memcpy+0xe>
 8005ff2:	bd10      	pop	{r4, pc}

08005ff4 <memset>:
 8005ff4:	4402      	add	r2, r0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d100      	bne.n	8005ffe <memset+0xa>
 8005ffc:	4770      	bx	lr
 8005ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8006002:	e7f9      	b.n	8005ff8 <memset+0x4>

08006004 <cleanup_glue>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	460c      	mov	r4, r1
 8006008:	6809      	ldr	r1, [r1, #0]
 800600a:	4605      	mov	r5, r0
 800600c:	b109      	cbz	r1, 8006012 <cleanup_glue+0xe>
 800600e:	f7ff fff9 	bl	8006004 <cleanup_glue>
 8006012:	4621      	mov	r1, r4
 8006014:	4628      	mov	r0, r5
 8006016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800601a:	f000 b869 	b.w	80060f0 <_free_r>
	...

08006020 <_reclaim_reent>:
 8006020:	4b2c      	ldr	r3, [pc, #176]	; (80060d4 <_reclaim_reent+0xb4>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4283      	cmp	r3, r0
 8006026:	b570      	push	{r4, r5, r6, lr}
 8006028:	4604      	mov	r4, r0
 800602a:	d051      	beq.n	80060d0 <_reclaim_reent+0xb0>
 800602c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800602e:	b143      	cbz	r3, 8006042 <_reclaim_reent+0x22>
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d14a      	bne.n	80060cc <_reclaim_reent+0xac>
 8006036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006038:	6819      	ldr	r1, [r3, #0]
 800603a:	b111      	cbz	r1, 8006042 <_reclaim_reent+0x22>
 800603c:	4620      	mov	r0, r4
 800603e:	f000 f857 	bl	80060f0 <_free_r>
 8006042:	6961      	ldr	r1, [r4, #20]
 8006044:	b111      	cbz	r1, 800604c <_reclaim_reent+0x2c>
 8006046:	4620      	mov	r0, r4
 8006048:	f000 f852 	bl	80060f0 <_free_r>
 800604c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800604e:	b111      	cbz	r1, 8006056 <_reclaim_reent+0x36>
 8006050:	4620      	mov	r0, r4
 8006052:	f000 f84d 	bl	80060f0 <_free_r>
 8006056:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006058:	b111      	cbz	r1, 8006060 <_reclaim_reent+0x40>
 800605a:	4620      	mov	r0, r4
 800605c:	f000 f848 	bl	80060f0 <_free_r>
 8006060:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006062:	b111      	cbz	r1, 800606a <_reclaim_reent+0x4a>
 8006064:	4620      	mov	r0, r4
 8006066:	f000 f843 	bl	80060f0 <_free_r>
 800606a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800606c:	b111      	cbz	r1, 8006074 <_reclaim_reent+0x54>
 800606e:	4620      	mov	r0, r4
 8006070:	f000 f83e 	bl	80060f0 <_free_r>
 8006074:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006076:	b111      	cbz	r1, 800607e <_reclaim_reent+0x5e>
 8006078:	4620      	mov	r0, r4
 800607a:	f000 f839 	bl	80060f0 <_free_r>
 800607e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006080:	b111      	cbz	r1, 8006088 <_reclaim_reent+0x68>
 8006082:	4620      	mov	r0, r4
 8006084:	f000 f834 	bl	80060f0 <_free_r>
 8006088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800608a:	b111      	cbz	r1, 8006092 <_reclaim_reent+0x72>
 800608c:	4620      	mov	r0, r4
 800608e:	f000 f82f 	bl	80060f0 <_free_r>
 8006092:	69a3      	ldr	r3, [r4, #24]
 8006094:	b1e3      	cbz	r3, 80060d0 <_reclaim_reent+0xb0>
 8006096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006098:	4620      	mov	r0, r4
 800609a:	4798      	blx	r3
 800609c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800609e:	b1b9      	cbz	r1, 80060d0 <_reclaim_reent+0xb0>
 80060a0:	4620      	mov	r0, r4
 80060a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060a6:	f7ff bfad 	b.w	8006004 <cleanup_glue>
 80060aa:	5949      	ldr	r1, [r1, r5]
 80060ac:	b941      	cbnz	r1, 80060c0 <_reclaim_reent+0xa0>
 80060ae:	3504      	adds	r5, #4
 80060b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060b2:	2d80      	cmp	r5, #128	; 0x80
 80060b4:	68d9      	ldr	r1, [r3, #12]
 80060b6:	d1f8      	bne.n	80060aa <_reclaim_reent+0x8a>
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 f819 	bl	80060f0 <_free_r>
 80060be:	e7ba      	b.n	8006036 <_reclaim_reent+0x16>
 80060c0:	680e      	ldr	r6, [r1, #0]
 80060c2:	4620      	mov	r0, r4
 80060c4:	f000 f814 	bl	80060f0 <_free_r>
 80060c8:	4631      	mov	r1, r6
 80060ca:	e7ef      	b.n	80060ac <_reclaim_reent+0x8c>
 80060cc:	2500      	movs	r5, #0
 80060ce:	e7ef      	b.n	80060b0 <_reclaim_reent+0x90>
 80060d0:	bd70      	pop	{r4, r5, r6, pc}
 80060d2:	bf00      	nop
 80060d4:	20000010 	.word	0x20000010

080060d8 <__malloc_lock>:
 80060d8:	4801      	ldr	r0, [pc, #4]	; (80060e0 <__malloc_lock+0x8>)
 80060da:	f7ff bf7b 	b.w	8005fd4 <__retarget_lock_acquire_recursive>
 80060de:	bf00      	nop
 80060e0:	20004b30 	.word	0x20004b30

080060e4 <__malloc_unlock>:
 80060e4:	4801      	ldr	r0, [pc, #4]	; (80060ec <__malloc_unlock+0x8>)
 80060e6:	f7ff bf76 	b.w	8005fd6 <__retarget_lock_release_recursive>
 80060ea:	bf00      	nop
 80060ec:	20004b30 	.word	0x20004b30

080060f0 <_free_r>:
 80060f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060f2:	2900      	cmp	r1, #0
 80060f4:	d044      	beq.n	8006180 <_free_r+0x90>
 80060f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060fa:	9001      	str	r0, [sp, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006102:	bfb8      	it	lt
 8006104:	18e4      	addlt	r4, r4, r3
 8006106:	f7ff ffe7 	bl	80060d8 <__malloc_lock>
 800610a:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <_free_r+0x94>)
 800610c:	9801      	ldr	r0, [sp, #4]
 800610e:	6813      	ldr	r3, [r2, #0]
 8006110:	b933      	cbnz	r3, 8006120 <_free_r+0x30>
 8006112:	6063      	str	r3, [r4, #4]
 8006114:	6014      	str	r4, [r2, #0]
 8006116:	b003      	add	sp, #12
 8006118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800611c:	f7ff bfe2 	b.w	80060e4 <__malloc_unlock>
 8006120:	42a3      	cmp	r3, r4
 8006122:	d908      	bls.n	8006136 <_free_r+0x46>
 8006124:	6825      	ldr	r5, [r4, #0]
 8006126:	1961      	adds	r1, r4, r5
 8006128:	428b      	cmp	r3, r1
 800612a:	bf01      	itttt	eq
 800612c:	6819      	ldreq	r1, [r3, #0]
 800612e:	685b      	ldreq	r3, [r3, #4]
 8006130:	1949      	addeq	r1, r1, r5
 8006132:	6021      	streq	r1, [r4, #0]
 8006134:	e7ed      	b.n	8006112 <_free_r+0x22>
 8006136:	461a      	mov	r2, r3
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	b10b      	cbz	r3, 8006140 <_free_r+0x50>
 800613c:	42a3      	cmp	r3, r4
 800613e:	d9fa      	bls.n	8006136 <_free_r+0x46>
 8006140:	6811      	ldr	r1, [r2, #0]
 8006142:	1855      	adds	r5, r2, r1
 8006144:	42a5      	cmp	r5, r4
 8006146:	d10b      	bne.n	8006160 <_free_r+0x70>
 8006148:	6824      	ldr	r4, [r4, #0]
 800614a:	4421      	add	r1, r4
 800614c:	1854      	adds	r4, r2, r1
 800614e:	42a3      	cmp	r3, r4
 8006150:	6011      	str	r1, [r2, #0]
 8006152:	d1e0      	bne.n	8006116 <_free_r+0x26>
 8006154:	681c      	ldr	r4, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	6053      	str	r3, [r2, #4]
 800615a:	4421      	add	r1, r4
 800615c:	6011      	str	r1, [r2, #0]
 800615e:	e7da      	b.n	8006116 <_free_r+0x26>
 8006160:	d902      	bls.n	8006168 <_free_r+0x78>
 8006162:	230c      	movs	r3, #12
 8006164:	6003      	str	r3, [r0, #0]
 8006166:	e7d6      	b.n	8006116 <_free_r+0x26>
 8006168:	6825      	ldr	r5, [r4, #0]
 800616a:	1961      	adds	r1, r4, r5
 800616c:	428b      	cmp	r3, r1
 800616e:	bf04      	itt	eq
 8006170:	6819      	ldreq	r1, [r3, #0]
 8006172:	685b      	ldreq	r3, [r3, #4]
 8006174:	6063      	str	r3, [r4, #4]
 8006176:	bf04      	itt	eq
 8006178:	1949      	addeq	r1, r1, r5
 800617a:	6021      	streq	r1, [r4, #0]
 800617c:	6054      	str	r4, [r2, #4]
 800617e:	e7ca      	b.n	8006116 <_free_r+0x26>
 8006180:	b003      	add	sp, #12
 8006182:	bd30      	pop	{r4, r5, pc}
 8006184:	20004b34 	.word	0x20004b34

08006188 <_init>:
 8006188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618a:	bf00      	nop
 800618c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618e:	bc08      	pop	{r3}
 8006190:	469e      	mov	lr, r3
 8006192:	4770      	bx	lr

08006194 <_fini>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	bf00      	nop
 8006198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619a:	bc08      	pop	{r3}
 800619c:	469e      	mov	lr, r3
 800619e:	4770      	bx	lr
