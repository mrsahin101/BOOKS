
017_FreeRTOS_Queue_Structure_Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006354  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080064e4  080064e4  000164e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006630  08006630  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006630  08006630  00016630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006638  08006638  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800663c  0800663c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004a10  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a84  20004a84  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f57  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000324a  00000000  00000000  00037ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  0003b248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001320  00000000  00000000  0003c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003d92  00000000  00000000  0003d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001634c  00000000  00000000  00041742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5164  00000000  00000000  00057a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012cbf2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000595c  00000000  00000000  0012cc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064cc 	.word	0x080064cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080064cc 	.word	0x080064cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vSenderTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void vSenderTask(void *pvParameters)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	BaseType_t xStatus;
	const TickType_t xTicksToWait = pdMS_TO_TICKS(100);
 800058c:	2364      	movs	r3, #100	; 0x64
 800058e:	617b      	str	r3, [r7, #20]
		 in the Blocked state to wait for space to become available on the queue
		 if the queue is already full. A block time is specified because the
		 sending tasks have a higher priority than the receiving task so the queue
		 is expected to become full. The receiving task will remove items from
		 the queue when both sending tasks are in the Blocked state. */
		xStatus = xQueueSendToBack(xQueue,pvParameters, xTicksToWait);
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <vSenderTask+0x40>)
 8000592:	6818      	ldr	r0, [r3, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	697a      	ldr	r2, [r7, #20]
 8000598:	6879      	ldr	r1, [r7, #4]
 800059a:	f003 f89d 	bl	80036d8 <xQueueGenericSend>
 800059e:	6138      	str	r0, [r7, #16]
		if(xStatus != pdPASS)
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d0f4      	beq.n	8000590 <vSenderTask+0xc>
		{
			/* The send operation could not complete, even after waiting for 100ms.
			 This must be an error as the receiving task should make space in the
			 queue as soon as both sending tasks are in the Blocked state. */
			const char *errorMessage = "Could not send to the queue\r\n";
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <vSenderTask+0x44>)
 80005a8:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t* )errorMessage, strlen(errorMessage), HAL_MAX_DELAY);
 80005aa:	68f8      	ldr	r0, [r7, #12]
 80005ac:	f7ff fe10 	bl	80001d0 <strlen>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	68f9      	ldr	r1, [r7, #12]
 80005ba:	4804      	ldr	r0, [pc, #16]	; (80005cc <vSenderTask+0x48>)
 80005bc:	f001 fe8f 	bl	80022de <HAL_UART_Transmit>
		xStatus = xQueueSendToBack(xQueue,pvParameters, xTicksToWait);
 80005c0:	e7e6      	b.n	8000590 <vSenderTask+0xc>
 80005c2:	bf00      	nop
 80005c4:	200000d4 	.word	0x200000d4
 80005c8:	080064e4 	.word	0x080064e4
 80005cc:	20000090 	.word	0x20000090

080005d0 <vReceiverTask>:
		}
	}
}
static void vReceiverTask(void *pvParameters)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
		/* Because it has the lowest priority this task will only run when the
		 sending tasks are in the Blocked state. The sending tasks will only enter
		 the Blocked state when the queue is full so this task always expects the
		 number of items in the queue to be equal to the queue length, which is 3 in
		 this case. */
		if(uxQueueMessagesWaiting(xQueue) != 3)
 80005d8:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <vReceiverTask+0xb4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 faf5 	bl	8003bcc <uxQueueMessagesWaiting>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	d00c      	beq.n	8000602 <vReceiverTask+0x32>
		{
			const char *fllMsg = "Queue should have been full!\r\n";
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <vReceiverTask+0xb8>)
 80005ea:	64fb      	str	r3, [r7, #76]	; 0x4c
			HAL_UART_Transmit(&huart2, (uint8_t *)fllMsg, strlen(fllMsg), HAL_MAX_DELAY);
 80005ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80005ee:	f7ff fdef 	bl	80001d0 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80005fc:	4823      	ldr	r0, [pc, #140]	; (800068c <vReceiverTask+0xbc>)
 80005fe:	f001 fe6e 	bl	80022de <HAL_UART_Transmit>
		 has the required size to hold the received structure.
		 The last parameter is the block time - the maximum amount of time that the
		 task will remain in the Blocked state to wait for data to be available
		 if the queue is already empty. In this case a block time is not necessary
		 because this task will only run when the queue is full. */
		xStatus = xQueueReceive(xQueue, &xReceivedStructure, 0);
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <vReceiverTask+0xb4>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800060a:	2200      	movs	r2, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f003 f9fd 	bl	8003a0c <xQueueReceive>
 8000612:	64b8      	str	r0, [r7, #72]	; 0x48
		if(xStatus == pdPASS)
 8000614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000616:	2b01      	cmp	r3, #1
 8000618:	d125      	bne.n	8000666 <vReceiverTask+0x96>
		{
			char buffer[50];
			/* Data was successfully received from the queue, print out the received
			 value and the source of the value. */
			if(xReceivedStructure.eDataSource == eSender1)
 800061a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800061e:	2b00      	cmp	r3, #0
 8000620:	d109      	bne.n	8000636 <vReceiverTask+0x66>
				sprintf(buffer, "From Sender 1 = %d\r\n", xReceivedStructure.ucValue);
 8000622:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000626:	461a      	mov	r2, r3
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4918      	ldr	r1, [pc, #96]	; (8000690 <vReceiverTask+0xc0>)
 800062e:	4618      	mov	r0, r3
 8000630:	f005 faec 	bl	8005c0c <siprintf>
 8000634:	e008      	b.n	8000648 <vReceiverTask+0x78>

			else
				sprintf(buffer, "From Sender 2 = %d\r\n", xReceivedStructure.ucValue);
 8000636:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800063a:	461a      	mov	r2, r3
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4914      	ldr	r1, [pc, #80]	; (8000694 <vReceiverTask+0xc4>)
 8000642:	4618      	mov	r0, r3
 8000644:	f005 fae2 	bl	8005c0c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fdbf 	bl	80001d0 <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	b29a      	uxth	r2, r3
 8000656:	f107 010c 	add.w	r1, r7, #12
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	480b      	ldr	r0, [pc, #44]	; (800068c <vReceiverTask+0xbc>)
 8000660:	f001 fe3d 	bl	80022de <HAL_UART_Transmit>
 8000664:	e7b8      	b.n	80005d8 <vReceiverTask+0x8>
		}
		else
		{
			/* Nothing was received from the queue. This must be an error as this
			 task should only run when the queue is full. */
			const char *errMsg = "Could not receive from the queue.\r\n";
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <vReceiverTask+0xc8>)
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
			HAL_UART_Transmit(&huart2, (uint8_t *)errMsg, strlen(errMsg), HAL_MAX_DELAY);
 800066a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800066c:	f7ff fdb0 	bl	80001d0 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	b29a      	uxth	r2, r3
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <vReceiverTask+0xbc>)
 800067c:	f001 fe2f 	bl	80022de <HAL_UART_Transmit>
		if(uxQueueMessagesWaiting(xQueue) != 3)
 8000680:	e7aa      	b.n	80005d8 <vReceiverTask+0x8>
 8000682:	bf00      	nop
 8000684:	200000d4 	.word	0x200000d4
 8000688:	08006504 	.word	0x08006504
 800068c:	20000090 	.word	0x20000090
 8000690:	08006524 	.word	0x08006524
 8000694:	0800653c 	.word	0x0800653c
 8000698:	08006554 	.word	0x08006554

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f000 faeb 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f857 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f000 f8e9 	bl	8000880 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ae:	f000 f8bd 	bl	800082c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* The queue is created to hold a maximum of 3 structures of type Data_t. */
  xQueue = xQueueCreate(3, sizeof(Data_t));
 80006b2:	2200      	movs	r2, #0
 80006b4:	2102      	movs	r1, #2
 80006b6:	2003      	movs	r0, #3
 80006b8:	f002 ffb0 	bl	800361c <xQueueGenericCreate>
 80006bc:	4603      	mov	r3, r0
 80006be:	4a1c      	ldr	r2, [pc, #112]	; (8000730 <main+0x94>)
 80006c0:	6013      	str	r3, [r2, #0]

  if(xQueue != NULL)
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <main+0x94>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d023      	beq.n	8000712 <main+0x76>
	  /* Create two instances of the task that will write to the queue. The
	   parameter is used to pass the structure that the task will write to the
	   queue, so one task will continuously send xStructsToSend[ 0 ] to the queue
	   while the other task will continuously send xStructsToSend[ 1 ]. Both
	   tasks are created at priority 2, which is above the priority of the receiver. */
	  xTaskCreate(vSenderTask, "Sender1", 1000, &(xStructsToSend[0]), 2, NULL);
 80006ca:	2300      	movs	r3, #0
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2302      	movs	r3, #2
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <main+0x98>)
 80006d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d8:	4917      	ldr	r1, [pc, #92]	; (8000738 <main+0x9c>)
 80006da:	4818      	ldr	r0, [pc, #96]	; (800073c <main+0xa0>)
 80006dc:	f003 fc5f 	bl	8003f9e <xTaskCreate>
	  xTaskCreate(vSenderTask, "Sender2", 1000, &(xStructsToSend[1]), 2, NULL);
 80006e0:	2300      	movs	r3, #0
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	2302      	movs	r3, #2
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <main+0xa4>)
 80006ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ee:	4915      	ldr	r1, [pc, #84]	; (8000744 <main+0xa8>)
 80006f0:	4812      	ldr	r0, [pc, #72]	; (800073c <main+0xa0>)
 80006f2:	f003 fc54 	bl	8003f9e <xTaskCreate>

	  /* Create the task that will read from the queue. The task is created with
	   priority 1, so below the priority of the sender tasks. */
	  xTaskCreate(vReceiverTask, "Receiver", 1000, NULL, 1, NULL);
 80006f6:	2300      	movs	r3, #0
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2301      	movs	r3, #1
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2300      	movs	r3, #0
 8000700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000704:	4910      	ldr	r1, [pc, #64]	; (8000748 <main+0xac>)
 8000706:	4811      	ldr	r0, [pc, #68]	; (800074c <main+0xb0>)
 8000708:	f003 fc49 	bl	8003f9e <xTaskCreate>

	  /* Start the scheduler so the created tasks start executing. */
	  vTaskStartScheduler();
 800070c:	f003 fd8c 	bl	8004228 <vTaskStartScheduler>
 8000710:	e00c      	b.n	800072c <main+0x90>
  }
  else
  {
	  const char *errMsg = "Queue couldn't create, Scheduler didn't started.\r\n";
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <main+0xb4>)
 8000714:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t *)errMsg, strlen(errMsg), HAL_MAX_DELAY);
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff fd5a 	bl	80001d0 <strlen>
 800071c:	4603      	mov	r3, r0
 800071e:	b29a      	uxth	r2, r3
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <main+0xb8>)
 8000728:	f001 fdd9 	bl	80022de <HAL_UART_Transmit>

  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072c:	e7fe      	b.n	800072c <main+0x90>
 800072e:	bf00      	nop
 8000730:	200000d4 	.word	0x200000d4
 8000734:	080065e0 	.word	0x080065e0
 8000738:	08006578 	.word	0x08006578
 800073c:	08000585 	.word	0x08000585
 8000740:	080065e2 	.word	0x080065e2
 8000744:	08006580 	.word	0x08006580
 8000748:	08006588 	.word	0x08006588
 800074c:	080005d1 	.word	0x080005d1
 8000750:	08006594 	.word	0x08006594
 8000754:	20000090 	.word	0x20000090

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f005 fa48 	bl	8005bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <SystemClock_Config+0xcc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a27      	ldr	r2, [pc, #156]	; (8000824 <SystemClock_Config+0xcc>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b25      	ldr	r3, [pc, #148]	; (8000824 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <SystemClock_Config+0xd0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <SystemClock_Config+0xd0>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b4:	2301      	movs	r3, #1
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c8:	2308      	movs	r3, #8
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d6:	2307      	movs	r3, #7
 80007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 fdb8 	bl	8001354 <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ea:	f000 f8ad 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2105      	movs	r1, #5
 800080c:	4618      	mov	r0, r3
 800080e:	f001 f819 	bl	8001844 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000818:	f000 f896 	bl	8000948 <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3750      	adds	r7, #80	; 0x50
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_USART2_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000864:	f001 fcee 	bl	8002244 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f86b 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000090 	.word	0x20000090
 800087c:	40004400 	.word	0x40004400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <MX_GPIO_Init+0x9c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a1f      	ldr	r2, [pc, #124]	; (800091c <MX_GPIO_Init+0x9c>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_GPIO_Init+0x9c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_GPIO_Init+0x9c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <MX_GPIO_Init+0x9c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_GPIO_Init+0x9c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_GPIO_Init+0x9c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a11      	ldr	r2, [pc, #68]	; (800091c <MX_GPIO_Init+0x9c>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_GPIO_Init+0x9c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0xa0>)
 80008f2:	f000 fd15 	bl	8001320 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4619      	mov	r1, r3
 800090e:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_GPIO_Init+0xa0>)
 8000910:	f000 fb6a 	bl	8000fe8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40020c00 	.word	0x40020c00

08000924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000936:	f000 f9c3 	bl	8000cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40002000 	.word	0x40002000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_MspInit+0x54>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a11      	ldr	r2, [pc, #68]	; (80009a8 <HAL_MspInit+0x54>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x54>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_MspInit+0x54>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_MspInit+0x54>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_MspInit+0x54>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	210f      	movs	r1, #15
 8000996:	f06f 0001 	mvn.w	r0, #1
 800099a:	f000 fa69 	bl	8000e70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <HAL_UART_MspInit+0x94>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d133      	bne.n	8000a36 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <HAL_UART_MspInit+0x98>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <HAL_UART_MspInit+0x98>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <HAL_UART_MspInit+0x98>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_UART_MspInit+0x98>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <HAL_UART_MspInit+0x98>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_UART_MspInit+0x98>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a06:	230c      	movs	r3, #12
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a16:	2307      	movs	r3, #7
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <HAL_UART_MspInit+0x9c>)
 8000a22:	f000 fae1 	bl	8000fe8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2105      	movs	r1, #5
 8000a2a:	2026      	movs	r0, #38	; 0x26
 8000a2c:	f000 fa20 	bl	8000e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a30:	2026      	movs	r0, #38	; 0x26
 8000a32:	f000 fa39 	bl	8000ea8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40004400 	.word	0x40004400
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000

08000a4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <HAL_InitTick+0xe4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a32      	ldr	r2, [pc, #200]	; (8000b30 <HAL_InitTick+0xe4>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <HAL_InitTick+0xe4>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a78:	f107 0210 	add.w	r2, r7, #16
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f8fe 	bl	8001c84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a88:	6a3b      	ldr	r3, [r7, #32]
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d103      	bne.n	8000a9a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a92:	f001 f8cf 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 8000a96:	6378      	str	r0, [r7, #52]	; 0x34
 8000a98:	e004      	b.n	8000aa4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a9a:	f001 f8cb 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa6:	4a23      	ldr	r2, [pc, #140]	; (8000b34 <HAL_InitTick+0xe8>)
 8000aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aac:	0c9b      	lsrs	r3, r3, #18
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <HAL_InitTick+0xec>)
 8000ab4:	4a21      	ldr	r2, [pc, #132]	; (8000b3c <HAL_InitTick+0xf0>)
 8000ab6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <HAL_InitTick+0xec>)
 8000aba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000abe:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <HAL_InitTick+0xec>)
 8000ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <HAL_InitTick+0xec>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <HAL_InitTick+0xec>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <HAL_InitTick+0xec>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000ad8:	4817      	ldr	r0, [pc, #92]	; (8000b38 <HAL_InitTick+0xec>)
 8000ada:	f001 f905 	bl	8001ce8 <HAL_TIM_Base_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ae4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d11b      	bne.n	8000b24 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000aec:	4812      	ldr	r0, [pc, #72]	; (8000b38 <HAL_InitTick+0xec>)
 8000aee:	f001 f955 	bl	8001d9c <HAL_TIM_Base_Start_IT>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000af8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d111      	bne.n	8000b24 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b00:	202d      	movs	r0, #45	; 0x2d
 8000b02:	f000 f9d1 	bl	8000ea8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d808      	bhi.n	8000b1e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	202d      	movs	r0, #45	; 0x2d
 8000b12:	f000 f9ad 	bl	8000e70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_InitTick+0xf4>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	e002      	b.n	8000b24 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3738      	adds	r7, #56	; 0x38
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	431bde83 	.word	0x431bde83
 8000b38:	200000d8 	.word	0x200000d8
 8000b3c:	40002000 	.word	0x40002000
 8000b40:	20000004 	.word	0x20000004

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <USART2_IRQHandler+0x10>)
 8000b76:	f001 fc45 	bl	8002404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000090 	.word	0x20000090

08000b84 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b8a:	f001 f977 	bl	8001e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000d8 	.word	0x200000d8

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f004 ffe0 	bl	8005b8c <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <_sbrk+0x64>)
 8000be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20020000 	.word	0x20020000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	20000120 	.word	0x20000120
 8000c00:	20004a88 	.word	0x20004a88

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ffd7 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f004 ff9f 	bl	8005b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fd1f 	bl	800069c <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c6c:	08006640 	.word	0x08006640
  ldr r2, =_sbss
 8000c70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c74:	20004a84 	.word	0x20004a84

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f8d8 	bl	8000e5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	200f      	movs	r0, #15
 8000cac:	f7ff fece 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fe50 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000124 	.word	0x20000124

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000124 	.word	0x20000124

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0b      	blt.n	8000d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 021f 	and.w	r2, r3, #31
 8000d7c:	4907      	ldr	r1, [pc, #28]	; (8000d9c <__NVIC_EnableIRQ+0x38>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	2001      	movs	r0, #1
 8000d86:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db0a      	blt.n	8000dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <__NVIC_SetPriority+0x4c>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc8:	e00a      	b.n	8000de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <__NVIC_SetPriority+0x50>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	761a      	strb	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ff4c 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e82:	f7ff ff61 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000e86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	68b9      	ldr	r1, [r7, #8]
 8000e8c:	6978      	ldr	r0, [r7, #20]
 8000e8e:	f7ff ffb1 	bl	8000df4 <NVIC_EncodePriority>
 8000e92:	4602      	mov	r2, r0
 8000e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff80 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ea0:	bf00      	nop
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff54 	bl	8000d64 <__NVIC_EnableIRQ>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ed2:	f7ff ff09 	bl	8000ce8 <HAL_GetTick>
 8000ed6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d008      	beq.n	8000ef6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e052      	b.n	8000f9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0216 	bic.w	r2, r2, #22
 8000f04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	695a      	ldr	r2, [r3, #20]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d103      	bne.n	8000f26 <HAL_DMA_Abort+0x62>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0208 	bic.w	r2, r2, #8
 8000f34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0201 	bic.w	r2, r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f46:	e013      	b.n	8000f70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f48:	f7ff fece 	bl	8000ce8 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d90c      	bls.n	8000f70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2220      	movs	r2, #32
 8000f5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2203      	movs	r2, #3
 8000f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e015      	b.n	8000f9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1e4      	bne.n	8000f48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f82:	223f      	movs	r2, #63	; 0x3f
 8000f84:	409a      	lsls	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d004      	beq.n	8000fc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00c      	b.n	8000fdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0201 	bic.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
 8001002:	e16b      	b.n	80012dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001004:	2201      	movs	r2, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	429a      	cmp	r2, r3
 800101e:	f040 815a 	bne.w	80012d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b01      	cmp	r3, #1
 800102c:	d005      	beq.n	800103a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001036:	2b02      	cmp	r3, #2
 8001038:	d130      	bne.n	800109c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	f003 0201 	and.w	r2, r3, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d017      	beq.n	80010d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d123      	bne.n	800112c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	08da      	lsrs	r2, r3, #3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3208      	adds	r2, #8
 8001126:	69b9      	ldr	r1, [r7, #24]
 8001128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0203 	and.w	r2, r3, #3
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 80b4 	beq.w	80012d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b60      	ldr	r3, [pc, #384]	; (80012f4 <HAL_GPIO_Init+0x30c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a5f      	ldr	r2, [pc, #380]	; (80012f4 <HAL_GPIO_Init+0x30c>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b5d      	ldr	r3, [pc, #372]	; (80012f4 <HAL_GPIO_Init+0x30c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800118a:	4a5b      	ldr	r2, [pc, #364]	; (80012f8 <HAL_GPIO_Init+0x310>)
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a52      	ldr	r2, [pc, #328]	; (80012fc <HAL_GPIO_Init+0x314>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d02b      	beq.n	800120e <HAL_GPIO_Init+0x226>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a51      	ldr	r2, [pc, #324]	; (8001300 <HAL_GPIO_Init+0x318>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d025      	beq.n	800120a <HAL_GPIO_Init+0x222>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a50      	ldr	r2, [pc, #320]	; (8001304 <HAL_GPIO_Init+0x31c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d01f      	beq.n	8001206 <HAL_GPIO_Init+0x21e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4f      	ldr	r2, [pc, #316]	; (8001308 <HAL_GPIO_Init+0x320>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d019      	beq.n	8001202 <HAL_GPIO_Init+0x21a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4e      	ldr	r2, [pc, #312]	; (800130c <HAL_GPIO_Init+0x324>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0x216>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4d      	ldr	r2, [pc, #308]	; (8001310 <HAL_GPIO_Init+0x328>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d00d      	beq.n	80011fa <HAL_GPIO_Init+0x212>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4c      	ldr	r2, [pc, #304]	; (8001314 <HAL_GPIO_Init+0x32c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d007      	beq.n	80011f6 <HAL_GPIO_Init+0x20e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4b      	ldr	r2, [pc, #300]	; (8001318 <HAL_GPIO_Init+0x330>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_GPIO_Init+0x20a>
 80011ee:	2307      	movs	r3, #7
 80011f0:	e00e      	b.n	8001210 <HAL_GPIO_Init+0x228>
 80011f2:	2308      	movs	r3, #8
 80011f4:	e00c      	b.n	8001210 <HAL_GPIO_Init+0x228>
 80011f6:	2306      	movs	r3, #6
 80011f8:	e00a      	b.n	8001210 <HAL_GPIO_Init+0x228>
 80011fa:	2305      	movs	r3, #5
 80011fc:	e008      	b.n	8001210 <HAL_GPIO_Init+0x228>
 80011fe:	2304      	movs	r3, #4
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x228>
 8001202:	2303      	movs	r3, #3
 8001204:	e004      	b.n	8001210 <HAL_GPIO_Init+0x228>
 8001206:	2302      	movs	r3, #2
 8001208:	e002      	b.n	8001210 <HAL_GPIO_Init+0x228>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x228>
 800120e:	2300      	movs	r3, #0
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	f002 0203 	and.w	r2, r2, #3
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4093      	lsls	r3, r2
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001220:	4935      	ldr	r1, [pc, #212]	; (80012f8 <HAL_GPIO_Init+0x310>)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122e:	4b3b      	ldr	r3, [pc, #236]	; (800131c <HAL_GPIO_Init+0x334>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001252:	4a32      	ldr	r2, [pc, #200]	; (800131c <HAL_GPIO_Init+0x334>)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001258:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_GPIO_Init+0x334>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800127c:	4a27      	ldr	r2, [pc, #156]	; (800131c <HAL_GPIO_Init+0x334>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <HAL_GPIO_Init+0x334>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a6:	4a1d      	ldr	r2, [pc, #116]	; (800131c <HAL_GPIO_Init+0x334>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_GPIO_Init+0x334>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <HAL_GPIO_Init+0x334>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	f67f ae90 	bls.w	8001004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40013800 	.word	0x40013800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020400 	.word	0x40020400
 8001304:	40020800 	.word	0x40020800
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40021000 	.word	0x40021000
 8001310:	40021400 	.word	0x40021400
 8001314:	40021800 	.word	0x40021800
 8001318:	40021c00 	.word	0x40021c00
 800131c:	40013c00 	.word	0x40013c00

08001320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
 800132c:	4613      	mov	r3, r2
 800132e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800133c:	e003      	b.n	8001346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	041a      	lsls	r2, r3, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	619a      	str	r2, [r3, #24]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e267      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d075      	beq.n	800145e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001372:	4b88      	ldr	r3, [pc, #544]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b04      	cmp	r3, #4
 800137c:	d00c      	beq.n	8001398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800137e:	4b85      	ldr	r3, [pc, #532]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001386:	2b08      	cmp	r3, #8
 8001388:	d112      	bne.n	80013b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138a:	4b82      	ldr	r3, [pc, #520]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001396:	d10b      	bne.n	80013b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	4b7e      	ldr	r3, [pc, #504]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d05b      	beq.n	800145c <HAL_RCC_OscConfig+0x108>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d157      	bne.n	800145c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e242      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b8:	d106      	bne.n	80013c8 <HAL_RCC_OscConfig+0x74>
 80013ba:	4b76      	ldr	r3, [pc, #472]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a75      	ldr	r2, [pc, #468]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e01d      	b.n	8001404 <HAL_RCC_OscConfig+0xb0>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0x98>
 80013d2:	4b70      	ldr	r3, [pc, #448]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a6f      	ldr	r2, [pc, #444]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80013d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b6d      	ldr	r3, [pc, #436]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a6c      	ldr	r2, [pc, #432]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e00b      	b.n	8001404 <HAL_RCC_OscConfig+0xb0>
 80013ec:	4b69      	ldr	r3, [pc, #420]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a68      	ldr	r2, [pc, #416]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80013f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b66      	ldr	r3, [pc, #408]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a65      	ldr	r2, [pc, #404]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80013fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d013      	beq.n	8001434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fc6c 	bl	8000ce8 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff fc68 	bl	8000ce8 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e207      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0xc0>
 8001432:	e014      	b.n	800145e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fc58 	bl	8000ce8 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fc54 	bl	8000ce8 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e1f3      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144e:	4b51      	ldr	r3, [pc, #324]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0xe8>
 800145a:	e000      	b.n	800145e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d063      	beq.n	8001532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800146a:	4b4a      	ldr	r3, [pc, #296]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00b      	beq.n	800148e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800147e:	2b08      	cmp	r3, #8
 8001480:	d11c      	bne.n	80014bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001482:	4b44      	ldr	r3, [pc, #272]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d116      	bne.n	80014bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148e:	4b41      	ldr	r3, [pc, #260]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d005      	beq.n	80014a6 <HAL_RCC_OscConfig+0x152>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d001      	beq.n	80014a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e1c7      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a6:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4937      	ldr	r1, [pc, #220]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	e03a      	b.n	8001532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d020      	beq.n	8001506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c4:	4b34      	ldr	r3, [pc, #208]	; (8001598 <HAL_RCC_OscConfig+0x244>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ca:	f7ff fc0d 	bl	8000ce8 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d2:	f7ff fc09 	bl	8000ce8 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e1a8      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	4925      	ldr	r1, [pc, #148]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
 8001504:	e015      	b.n	8001532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <HAL_RCC_OscConfig+0x244>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fbec 	bl	8000ce8 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001514:	f7ff fbe8 	bl	8000ce8 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e187      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d036      	beq.n	80015ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d016      	beq.n	8001574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_RCC_OscConfig+0x248>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff fbcc 	bl	8000ce8 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001554:	f7ff fbc8 	bl	8000ce8 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e167      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_RCC_OscConfig+0x240>)
 8001568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x200>
 8001572:	e01b      	b.n	80015ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_RCC_OscConfig+0x248>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157a:	f7ff fbb5 	bl	8000ce8 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001580:	e00e      	b.n	80015a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001582:	f7ff fbb1 	bl	8000ce8 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d907      	bls.n	80015a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e150      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
 8001594:	40023800 	.word	0x40023800
 8001598:	42470000 	.word	0x42470000
 800159c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1ea      	bne.n	8001582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 8097 	beq.w	80016e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015be:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10f      	bne.n	80015ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b7d      	ldr	r3, [pc, #500]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a7c      	ldr	r2, [pc, #496]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b7a      	ldr	r3, [pc, #488]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e6:	2301      	movs	r3, #1
 80015e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ea:	4b77      	ldr	r3, [pc, #476]	; (80017c8 <HAL_RCC_OscConfig+0x474>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d118      	bne.n	8001628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f6:	4b74      	ldr	r3, [pc, #464]	; (80017c8 <HAL_RCC_OscConfig+0x474>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a73      	ldr	r2, [pc, #460]	; (80017c8 <HAL_RCC_OscConfig+0x474>)
 80015fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001602:	f7ff fb71 	bl	8000ce8 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160a:	f7ff fb6d 	bl	8000ce8 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e10c      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	4b6a      	ldr	r3, [pc, #424]	; (80017c8 <HAL_RCC_OscConfig+0x474>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x2ea>
 8001630:	4b64      	ldr	r3, [pc, #400]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001634:	4a63      	ldr	r2, [pc, #396]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6713      	str	r3, [r2, #112]	; 0x70
 800163c:	e01c      	b.n	8001678 <HAL_RCC_OscConfig+0x324>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b05      	cmp	r3, #5
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0x30c>
 8001646:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164a:	4a5e      	ldr	r2, [pc, #376]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6713      	str	r3, [r2, #112]	; 0x70
 8001652:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001656:	4a5b      	ldr	r2, [pc, #364]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6713      	str	r3, [r2, #112]	; 0x70
 800165e:	e00b      	b.n	8001678 <HAL_RCC_OscConfig+0x324>
 8001660:	4b58      	ldr	r3, [pc, #352]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001664:	4a57      	ldr	r2, [pc, #348]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001666:	f023 0301 	bic.w	r3, r3, #1
 800166a:	6713      	str	r3, [r2, #112]	; 0x70
 800166c:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 800166e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001670:	4a54      	ldr	r2, [pc, #336]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001672:	f023 0304 	bic.w	r3, r3, #4
 8001676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d015      	beq.n	80016ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff fb32 	bl	8000ce8 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001686:	e00a      	b.n	800169e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001688:	f7ff fb2e 	bl	8000ce8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	; 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e0cb      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169e:	4b49      	ldr	r3, [pc, #292]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0ee      	beq.n	8001688 <HAL_RCC_OscConfig+0x334>
 80016aa:	e014      	b.n	80016d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7ff fb1c 	bl	8000ce8 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7ff fb18 	bl	8000ce8 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e0b5      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ca:	4b3e      	ldr	r3, [pc, #248]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ee      	bne.n	80016b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016dc:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	4a38      	ldr	r2, [pc, #224]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 80016e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80a1 	beq.w	8001834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016f2:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d05c      	beq.n	80017b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d141      	bne.n	800178a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b31      	ldr	r3, [pc, #196]	; (80017cc <HAL_RCC_OscConfig+0x478>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff faec 	bl	8000ce8 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff fae8 	bl	8000ce8 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e087      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69da      	ldr	r2, [r3, #28]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	019b      	lsls	r3, r3, #6
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	3b01      	subs	r3, #1
 800174c:	041b      	lsls	r3, r3, #16
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	061b      	lsls	r3, r3, #24
 8001756:	491b      	ldr	r1, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_RCC_OscConfig+0x478>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff fac1 	bl	8000ce8 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff fabd 	bl	8000ce8 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e05c      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x416>
 8001788:	e054      	b.n	8001834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_RCC_OscConfig+0x478>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff faaa 	bl	8000ce8 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff faa6 	bl	8000ce8 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e045      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_RCC_OscConfig+0x470>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x444>
 80017b6:	e03d      	b.n	8001834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e038      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40007000 	.word	0x40007000
 80017cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x4ec>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d028      	beq.n	8001830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d121      	bne.n	8001830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d11a      	bne.n	8001830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001800:	4013      	ands	r3, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001808:	4293      	cmp	r3, r2
 800180a:	d111      	bne.n	8001830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	3b01      	subs	r3, #1
 800181a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d107      	bne.n	8001830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800

08001844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0cc      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001858:	4b68      	ldr	r3, [pc, #416]	; (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d90c      	bls.n	8001880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b65      	ldr	r3, [pc, #404]	; (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b63      	ldr	r3, [pc, #396]	; (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0b8      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001898:	4b59      	ldr	r3, [pc, #356]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a58      	ldr	r2, [pc, #352]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b0:	4b53      	ldr	r3, [pc, #332]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a52      	ldr	r2, [pc, #328]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018bc:	4b50      	ldr	r3, [pc, #320]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	494d      	ldr	r1, [pc, #308]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d044      	beq.n	8001964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b47      	ldr	r3, [pc, #284]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d119      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e07f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d003      	beq.n	8001902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001902:	4b3f      	ldr	r3, [pc, #252]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e06f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e067      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001922:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f023 0203 	bic.w	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4934      	ldr	r1, [pc, #208]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	4313      	orrs	r3, r2
 8001932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001934:	f7ff f9d8 	bl	8000ce8 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	e00a      	b.n	8001952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193c:	f7ff f9d4 	bl	8000ce8 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e04f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 020c 	and.w	r2, r3, #12
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	429a      	cmp	r2, r3
 8001962:	d1eb      	bne.n	800193c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d20c      	bcs.n	800198c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e032      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4916      	ldr	r1, [pc, #88]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	490e      	ldr	r1, [pc, #56]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ca:	f000 f821 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	490a      	ldr	r1, [pc, #40]	; (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	5ccb      	ldrb	r3, [r1, r3]
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_ClockConfig+0x1c8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f82e 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00
 8001a00:	40023800 	.word	0x40023800
 8001a04:	080065e4 	.word	0x080065e4
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a14:	b094      	sub	sp, #80	; 0x50
 8001a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a20:	2300      	movs	r3, #0
 8001a22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a28:	4b79      	ldr	r3, [pc, #484]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d00d      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x40>
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	f200 80e1 	bhi.w	8001bfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x34>
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d003      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a42:	e0db      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a44:	4b73      	ldr	r3, [pc, #460]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a48:	e0db      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a4a:	4b73      	ldr	r3, [pc, #460]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a4e:	e0d8      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a50:	4b6f      	ldr	r3, [pc, #444]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a5a:	4b6d      	ldr	r3, [pc, #436]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d063      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a66:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	099b      	lsrs	r3, r3, #6
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a82:	4622      	mov	r2, r4
 8001a84:	462b      	mov	r3, r5
 8001a86:	f04f 0000 	mov.w	r0, #0
 8001a8a:	f04f 0100 	mov.w	r1, #0
 8001a8e:	0159      	lsls	r1, r3, #5
 8001a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a94:	0150      	lsls	r0, r2, #5
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	1a51      	subs	r1, r2, r1
 8001a9e:	6139      	str	r1, [r7, #16]
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ab4:	4659      	mov	r1, fp
 8001ab6:	018b      	lsls	r3, r1, #6
 8001ab8:	4651      	mov	r1, sl
 8001aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001abe:	4651      	mov	r1, sl
 8001ac0:	018a      	lsls	r2, r1, #6
 8001ac2:	4651      	mov	r1, sl
 8001ac4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ac8:	4659      	mov	r1, fp
 8001aca:	eb63 0901 	sbc.w	r9, r3, r1
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ae2:	4690      	mov	r8, r2
 8001ae4:	4699      	mov	r9, r3
 8001ae6:	4623      	mov	r3, r4
 8001ae8:	eb18 0303 	adds.w	r3, r8, r3
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	462b      	mov	r3, r5
 8001af0:	eb49 0303 	adc.w	r3, r9, r3
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b02:	4629      	mov	r1, r5
 8001b04:	024b      	lsls	r3, r1, #9
 8001b06:	4621      	mov	r1, r4
 8001b08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	024a      	lsls	r2, r1, #9
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b16:	2200      	movs	r2, #0
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b20:	f7fe fbae 	bl	8000280 <__aeabi_uldivmod>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4613      	mov	r3, r2
 8001b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b2c:	e058      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2e:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	2200      	movs	r2, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	4611      	mov	r1, r2
 8001b3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b3e:	623b      	str	r3, [r7, #32]
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
 8001b44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b48:	4642      	mov	r2, r8
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	f04f 0000 	mov.w	r0, #0
 8001b50:	f04f 0100 	mov.w	r1, #0
 8001b54:	0159      	lsls	r1, r3, #5
 8001b56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b5a:	0150      	lsls	r0, r2, #5
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4641      	mov	r1, r8
 8001b62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b66:	4649      	mov	r1, r9
 8001b68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b80:	ebb2 040a 	subs.w	r4, r2, sl
 8001b84:	eb63 050b 	sbc.w	r5, r3, fp
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	00eb      	lsls	r3, r5, #3
 8001b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b96:	00e2      	lsls	r2, r4, #3
 8001b98:	4614      	mov	r4, r2
 8001b9a:	461d      	mov	r5, r3
 8001b9c:	4643      	mov	r3, r8
 8001b9e:	18e3      	adds	r3, r4, r3
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	eb45 0303 	adc.w	r3, r5, r3
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	028b      	lsls	r3, r1, #10
 8001bba:	4621      	mov	r1, r4
 8001bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	028a      	lsls	r2, r1, #10
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	61fa      	str	r2, [r7, #28]
 8001bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd4:	f7fe fb54 	bl	8000280 <__aeabi_uldivmod>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4613      	mov	r3, r2
 8001bde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	3301      	adds	r3, #1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bfa:	e002      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3750      	adds	r7, #80	; 0x50
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	00f42400 	.word	0x00f42400
 8001c18:	007a1200 	.word	0x007a1200

08001c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000000 	.word	0x20000000

08001c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c38:	f7ff fff0 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0a9b      	lsrs	r3, r3, #10
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	080065f4 	.word	0x080065f4

08001c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c60:	f7ff ffdc 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	0b5b      	lsrs	r3, r3, #13
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4903      	ldr	r1, [pc, #12]	; (8001c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	080065f4 	.word	0x080065f4

08001c84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	220f      	movs	r2, #15
 8001c92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0203 	and.w	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	08db      	lsrs	r3, r3, #3
 8001cbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <HAL_RCC_GetClockConfig+0x60>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0207 	and.w	r2, r3, #7
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	601a      	str	r2, [r3, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40023c00 	.word	0x40023c00

08001ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e041      	b.n	8001d7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f839 	bl	8001d86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3304      	adds	r3, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4610      	mov	r0, r2
 8001d28:	f000 f9d8 	bl	80020dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d001      	beq.n	8001db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e04e      	b.n	8001e52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a23      	ldr	r2, [pc, #140]	; (8001e60 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d022      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dde:	d01d      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <HAL_TIM_Base_Start_IT+0xc8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d018      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_TIM_Base_Start_IT+0xcc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d013      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_TIM_Base_Start_IT+0xd0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00e      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d009      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d004      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x80>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d111      	bne.n	8001e40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d010      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3e:	e007      	b.n	8001e50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010000 	.word	0x40010000
 8001e64:	40000400 	.word	0x40000400
 8001e68:	40000800 	.word	0x40000800
 8001e6c:	40000c00 	.word	0x40000c00
 8001e70:	40010400 	.word	0x40010400
 8001e74:	40014000 	.word	0x40014000
 8001e78:	40001800 	.word	0x40001800

08001e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d122      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0202 	mvn.w	r2, #2
 8001ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8ee 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8e0 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f8f1 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d122      	bne.n	8001f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d11b      	bne.n	8001f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0204 	mvn.w	r2, #4
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2202      	movs	r2, #2
 8001f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8c4 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8b6 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8c7 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d122      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d11b      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0208 	mvn.w	r2, #8
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2204      	movs	r2, #4
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f89a 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f88c 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f89d 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d122      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b10      	cmp	r3, #16
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0210 	mvn.w	r2, #16
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f870 	bl	80020a0 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f862 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f873 	bl	80020b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d10e      	bne.n	8002000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d107      	bne.n	8002000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0201 	mvn.w	r2, #1
 8001ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7fe fc92 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200a:	2b80      	cmp	r3, #128	; 0x80
 800200c:	d10e      	bne.n	800202c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002018:	2b80      	cmp	r3, #128	; 0x80
 800201a:	d107      	bne.n	800202c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f902 	bl	8002230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002036:	2b40      	cmp	r3, #64	; 0x40
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f838 	bl	80020c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b20      	cmp	r3, #32
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b20      	cmp	r3, #32
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0220 	mvn.w	r2, #32
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8cc 	bl	800221c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a40      	ldr	r2, [pc, #256]	; (80021f0 <TIM_Base_SetConfig+0x114>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d013      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fa:	d00f      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a3d      	ldr	r2, [pc, #244]	; (80021f4 <TIM_Base_SetConfig+0x118>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d00b      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3c      	ldr	r2, [pc, #240]	; (80021f8 <TIM_Base_SetConfig+0x11c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d007      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3b      	ldr	r2, [pc, #236]	; (80021fc <TIM_Base_SetConfig+0x120>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3a      	ldr	r2, [pc, #232]	; (8002200 <TIM_Base_SetConfig+0x124>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d108      	bne.n	800212e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2f      	ldr	r2, [pc, #188]	; (80021f0 <TIM_Base_SetConfig+0x114>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d02b      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213c:	d027      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a2c      	ldr	r2, [pc, #176]	; (80021f4 <TIM_Base_SetConfig+0x118>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d023      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a2b      	ldr	r2, [pc, #172]	; (80021f8 <TIM_Base_SetConfig+0x11c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01f      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a2a      	ldr	r2, [pc, #168]	; (80021fc <TIM_Base_SetConfig+0x120>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01b      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a29      	ldr	r2, [pc, #164]	; (8002200 <TIM_Base_SetConfig+0x124>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d017      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a28      	ldr	r2, [pc, #160]	; (8002204 <TIM_Base_SetConfig+0x128>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a27      	ldr	r2, [pc, #156]	; (8002208 <TIM_Base_SetConfig+0x12c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00f      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a26      	ldr	r2, [pc, #152]	; (800220c <TIM_Base_SetConfig+0x130>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00b      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a25      	ldr	r2, [pc, #148]	; (8002210 <TIM_Base_SetConfig+0x134>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d007      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a24      	ldr	r2, [pc, #144]	; (8002214 <TIM_Base_SetConfig+0x138>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d003      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a23      	ldr	r2, [pc, #140]	; (8002218 <TIM_Base_SetConfig+0x13c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d108      	bne.n	80021a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <TIM_Base_SetConfig+0x114>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d003      	beq.n	80021d4 <TIM_Base_SetConfig+0xf8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <TIM_Base_SetConfig+0x124>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d103      	bne.n	80021dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	615a      	str	r2, [r3, #20]
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40000800 	.word	0x40000800
 80021fc:	40000c00 	.word	0x40000c00
 8002200:	40010400 	.word	0x40010400
 8002204:	40014000 	.word	0x40014000
 8002208:	40014400 	.word	0x40014400
 800220c:	40014800 	.word	0x40014800
 8002210:	40001800 	.word	0x40001800
 8002214:	40001c00 	.word	0x40001c00
 8002218:	40002000 	.word	0x40002000

0800221c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e03f      	b.n	80022d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fe fb9e 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2224      	movs	r2, #36	; 0x24
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fd7b 	bl	8002d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800229c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b08a      	sub	sp, #40	; 0x28
 80022e2:	af02      	add	r7, sp, #8
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d17c      	bne.n	80023f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_UART_Transmit+0x2c>
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e075      	b.n	80023fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_UART_Transmit+0x3e>
 8002318:	2302      	movs	r3, #2
 800231a:	e06e      	b.n	80023fa <HAL_UART_Transmit+0x11c>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2221      	movs	r2, #33	; 0x21
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002332:	f7fe fcd9 	bl	8000ce8 <HAL_GetTick>
 8002336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	88fa      	ldrh	r2, [r7, #6]
 800233c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	88fa      	ldrh	r2, [r7, #6]
 8002342:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234c:	d108      	bne.n	8002360 <HAL_UART_Transmit+0x82>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d104      	bne.n	8002360 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	e003      	b.n	8002368 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002370:	e02a      	b.n	80023c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2200      	movs	r2, #0
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 faf9 	bl	8002974 <UART_WaitOnFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e036      	b.n	80023fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10b      	bne.n	80023aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	3302      	adds	r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	e007      	b.n	80023ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	3301      	adds	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1cf      	bne.n	8002372 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2200      	movs	r2, #0
 80023da:	2140      	movs	r1, #64	; 0x40
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fac9 	bl	8002974 <UART_WaitOnFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e006      	b.n	80023fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e000      	b.n	80023fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b0ba      	sub	sp, #232	; 0xe8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10f      	bne.n	800246a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800244a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <HAL_UART_IRQHandler+0x66>
 8002456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fbd3 	bl	8002c0e <UART_Receive_IT>
      return;
 8002468:	e256      	b.n	8002918 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800246a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80de 	beq.w	8002630 <HAL_UART_IRQHandler+0x22c>
 8002474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d106      	bne.n	800248e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002484:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80d1 	beq.w	8002630 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800248e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_UART_IRQHandler+0xae>
 800249a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_UART_IRQHandler+0xd2>
 80024be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f043 0202 	orr.w	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_UART_IRQHandler+0xf6>
 80024e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f043 0204 	orr.w	r2, r3, #4
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d011      	beq.n	800252a <HAL_UART_IRQHandler+0x126>
 8002506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d105      	bne.n	800251e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f043 0208 	orr.w	r2, r3, #8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 81ed 	beq.w	800290e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_UART_IRQHandler+0x14e>
 8002540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fb5e 	bl	8002c0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_UART_IRQHandler+0x17a>
 8002576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d04f      	beq.n	800261e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fa66 	bl	8002a50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	d141      	bne.n	8002616 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3314      	adds	r3, #20
 8002598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025a0:	e853 3f00 	ldrex	r3, [r3]
 80025a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3314      	adds	r3, #20
 80025ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025ce:	e841 2300 	strex	r3, r2, [r1]
 80025d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1d9      	bne.n	8002592 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d013      	beq.n	800260e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	4a7d      	ldr	r2, [pc, #500]	; (80027e0 <HAL_UART_IRQHandler+0x3dc>)
 80025ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fcd6 	bl	8000fa4 <HAL_DMA_Abort_IT>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d016      	beq.n	800262c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002608:	4610      	mov	r0, r2
 800260a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260c:	e00e      	b.n	800262c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f99a 	bl	8002948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002614:	e00a      	b.n	800262c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f996 	bl	8002948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800261c:	e006      	b.n	800262c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f992 	bl	8002948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800262a:	e170      	b.n	800290e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262c:	bf00      	nop
    return;
 800262e:	e16e      	b.n	800290e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	2b01      	cmp	r3, #1
 8002636:	f040 814a 	bne.w	80028ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800263a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8143 	beq.w	80028ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 813c 	beq.w	80028ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	f040 80b4 	bne.w	80027e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002688:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8140 	beq.w	8002912 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800269a:	429a      	cmp	r2, r3
 800269c:	f080 8139 	bcs.w	8002912 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b2:	f000 8088 	beq.w	80027c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	330c      	adds	r3, #12
 80026bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026c4:	e853 3f00 	ldrex	r3, [r3]
 80026c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80026cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	330c      	adds	r3, #12
 80026de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80026ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026f2:	e841 2300 	strex	r3, r2, [r1]
 80026f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80026fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1d9      	bne.n	80026b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3314      	adds	r3, #20
 8002708:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800270c:	e853 3f00 	ldrex	r3, [r3]
 8002710:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3314      	adds	r3, #20
 8002722:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002726:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800272a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800272e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002738:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e1      	bne.n	8002702 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3314      	adds	r3, #20
 8002744:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002748:	e853 3f00 	ldrex	r3, [r3]
 800274c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800274e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3314      	adds	r3, #20
 800275e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002762:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002764:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002766:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002768:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800276a:	e841 2300 	strex	r3, r2, [r1]
 800276e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e3      	bne.n	800273e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	330c      	adds	r3, #12
 800278a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278e:	e853 3f00 	ldrex	r3, [r3]
 8002792:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002796:	f023 0310 	bic.w	r3, r3, #16
 800279a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	330c      	adds	r3, #12
 80027a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80027aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027b0:	e841 2300 	strex	r3, r2, [r1]
 80027b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1e3      	bne.n	8002784 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fb7f 	bl	8000ec4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	4619      	mov	r1, r3
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f8c0 	bl	800295c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027dc:	e099      	b.n	8002912 <HAL_UART_IRQHandler+0x50e>
 80027de:	bf00      	nop
 80027e0:	08002b17 	.word	0x08002b17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 808b 	beq.w	8002916 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002800:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8086 	beq.w	8002916 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	330c      	adds	r3, #12
 8002810:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800281a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002820:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	330c      	adds	r3, #12
 800282a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800282e:	647a      	str	r2, [r7, #68]	; 0x44
 8002830:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002832:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002836:	e841 2300 	strex	r3, r2, [r1]
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800283c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1e3      	bne.n	800280a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3314      	adds	r3, #20
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	e853 3f00 	ldrex	r3, [r3]
 8002850:	623b      	str	r3, [r7, #32]
   return(result);
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3314      	adds	r3, #20
 8002862:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002866:	633a      	str	r2, [r7, #48]	; 0x30
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800286c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e3      	bne.n	8002842 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	330c      	adds	r3, #12
 800288e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	e853 3f00 	ldrex	r3, [r3]
 8002896:	60fb      	str	r3, [r7, #12]
   return(result);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0310 	bic.w	r3, r3, #16
 800289e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028ac:	61fa      	str	r2, [r7, #28]
 80028ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b0:	69b9      	ldr	r1, [r7, #24]
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	e841 2300 	strex	r3, r2, [r1]
 80028b8:	617b      	str	r3, [r7, #20]
   return(result);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1e3      	bne.n	8002888 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028c4:	4619      	mov	r1, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f848 	bl	800295c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028cc:	e023      	b.n	8002916 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_UART_IRQHandler+0x4ea>
 80028da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f929 	bl	8002b3e <UART_Transmit_IT>
    return;
 80028ec:	e014      	b.n	8002918 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00e      	beq.n	8002918 <HAL_UART_IRQHandler+0x514>
 80028fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f969 	bl	8002bde <UART_EndTransmit_IT>
    return;
 800290c:	e004      	b.n	8002918 <HAL_UART_IRQHandler+0x514>
    return;
 800290e:	bf00      	nop
 8002910:	e002      	b.n	8002918 <HAL_UART_IRQHandler+0x514>
      return;
 8002912:	bf00      	nop
 8002914:	e000      	b.n	8002918 <HAL_UART_IRQHandler+0x514>
      return;
 8002916:	bf00      	nop
  }
}
 8002918:	37e8      	adds	r7, #232	; 0xe8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop

08002920 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b090      	sub	sp, #64	; 0x40
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002984:	e050      	b.n	8002a28 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d04c      	beq.n	8002a28 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800298e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002994:	f7fe f9a8 	bl	8000ce8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d241      	bcs.n	8002a28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	330c      	adds	r3, #12
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ae:	e853 3f00 	ldrex	r3, [r3]
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	330c      	adds	r3, #12
 80029c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029c4:	637a      	str	r2, [r7, #52]	; 0x34
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029cc:	e841 2300 	strex	r3, r2, [r1]
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1e5      	bne.n	80029a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3314      	adds	r3, #20
 80029de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	e853 3f00 	ldrex	r3, [r3]
 80029e6:	613b      	str	r3, [r7, #16]
   return(result);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3314      	adds	r3, #20
 80029f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029f8:	623a      	str	r2, [r7, #32]
 80029fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fc:	69f9      	ldr	r1, [r7, #28]
 80029fe:	6a3a      	ldr	r2, [r7, #32]
 8002a00:	e841 2300 	strex	r3, r2, [r1]
 8002a04:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e5      	bne.n	80029d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e00f      	b.n	8002a48 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4013      	ands	r3, r2
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d09f      	beq.n	8002986 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3740      	adds	r7, #64	; 0x40
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b095      	sub	sp, #84	; 0x54
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	330c      	adds	r3, #12
 8002a5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a62:	e853 3f00 	ldrex	r3, [r3]
 8002a66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a78:	643a      	str	r2, [r7, #64]	; 0x40
 8002a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a80:	e841 2300 	strex	r3, r2, [r1]
 8002a84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e5      	bne.n	8002a58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3314      	adds	r3, #20
 8002a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	e853 3f00 	ldrex	r3, [r3]
 8002a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3314      	adds	r3, #20
 8002aaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab4:	e841 2300 	strex	r3, r2, [r1]
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e5      	bne.n	8002a8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d119      	bne.n	8002afc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	330c      	adds	r3, #12
 8002ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	e853 3f00 	ldrex	r3, [r3]
 8002ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f023 0310 	bic.w	r3, r3, #16
 8002ade:	647b      	str	r3, [r7, #68]	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	330c      	adds	r3, #12
 8002ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ae8:	61ba      	str	r2, [r7, #24]
 8002aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aec:	6979      	ldr	r1, [r7, #20]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	e841 2300 	strex	r3, r2, [r1]
 8002af4:	613b      	str	r3, [r7, #16]
   return(result);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e5      	bne.n	8002ac8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b0a:	bf00      	nop
 8002b0c:	3754      	adds	r7, #84	; 0x54
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff ff09 	bl	8002948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b085      	sub	sp, #20
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b21      	cmp	r3, #33	; 0x21
 8002b50:	d13e      	bne.n	8002bd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5a:	d114      	bne.n	8002b86 <UART_Transmit_IT+0x48>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d110      	bne.n	8002b86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	1c9a      	adds	r2, r3, #2
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	621a      	str	r2, [r3, #32]
 8002b84:	e008      	b.n	8002b98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	1c59      	adds	r1, r3, #1
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6211      	str	r1, [r2, #32]
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10f      	bne.n	8002bcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e000      	b.n	8002bd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bd0:	2302      	movs	r3, #2
  }
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fe8e 	bl	8002920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b08c      	sub	sp, #48	; 0x30
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b22      	cmp	r3, #34	; 0x22
 8002c20:	f040 80ab 	bne.w	8002d7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2c:	d117      	bne.n	8002c5e <UART_Receive_IT+0x50>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d113      	bne.n	8002c5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	1c9a      	adds	r2, r3, #2
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c5c:	e026      	b.n	8002cac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c70:	d007      	beq.n	8002c82 <UART_Receive_IT+0x74>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10a      	bne.n	8002c90 <UART_Receive_IT+0x82>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e008      	b.n	8002ca2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d15a      	bne.n	8002d76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0220 	bic.w	r2, r2, #32
 8002cce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d135      	bne.n	8002d6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	613b      	str	r3, [r7, #16]
   return(result);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f023 0310 	bic.w	r3, r3, #16
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d26:	623a      	str	r2, [r7, #32]
 8002d28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2a:	69f9      	ldr	r1, [r7, #28]
 8002d2c:	6a3a      	ldr	r2, [r7, #32]
 8002d2e:	e841 2300 	strex	r3, r2, [r1]
 8002d32:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e5      	bne.n	8002d06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d10a      	bne.n	8002d5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d62:	4619      	mov	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff fdf9 	bl	800295c <HAL_UARTEx_RxEventCallback>
 8002d6a:	e002      	b.n	8002d72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff fde1 	bl	8002934 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e002      	b.n	8002d7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e000      	b.n	8002d7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
  }
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3730      	adds	r7, #48	; 0x30
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d88:	b0c0      	sub	sp, #256	; 0x100
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	68d9      	ldr	r1, [r3, #12]
 8002da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	ea40 0301 	orr.w	r3, r0, r1
 8002dac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ddc:	f021 010c 	bic.w	r1, r1, #12
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002dea:	430b      	orrs	r3, r1
 8002dec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfe:	6999      	ldr	r1, [r3, #24]
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	ea40 0301 	orr.w	r3, r0, r1
 8002e0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b8f      	ldr	r3, [pc, #572]	; (8003050 <UART_SetConfig+0x2cc>)
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d005      	beq.n	8002e24 <UART_SetConfig+0xa0>
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b8d      	ldr	r3, [pc, #564]	; (8003054 <UART_SetConfig+0x2d0>)
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d104      	bne.n	8002e2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e24:	f7fe ff1a 	bl	8001c5c <HAL_RCC_GetPCLK2Freq>
 8002e28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e2c:	e003      	b.n	8002e36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e2e:	f7fe ff01 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 8002e32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e40:	f040 810c 	bne.w	800305c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e56:	4622      	mov	r2, r4
 8002e58:	462b      	mov	r3, r5
 8002e5a:	1891      	adds	r1, r2, r2
 8002e5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e5e:	415b      	adcs	r3, r3
 8002e60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e66:	4621      	mov	r1, r4
 8002e68:	eb12 0801 	adds.w	r8, r2, r1
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	eb43 0901 	adc.w	r9, r3, r1
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e86:	4690      	mov	r8, r2
 8002e88:	4699      	mov	r9, r3
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	eb18 0303 	adds.w	r3, r8, r3
 8002e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e94:	462b      	mov	r3, r5
 8002e96:	eb49 0303 	adc.w	r3, r9, r3
 8002e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002eaa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002eae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	18db      	adds	r3, r3, r3
 8002eb6:	653b      	str	r3, [r7, #80]	; 0x50
 8002eb8:	4613      	mov	r3, r2
 8002eba:	eb42 0303 	adc.w	r3, r2, r3
 8002ebe:	657b      	str	r3, [r7, #84]	; 0x54
 8002ec0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ec4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ec8:	f7fd f9da 	bl	8000280 <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4b61      	ldr	r3, [pc, #388]	; (8003058 <UART_SetConfig+0x2d4>)
 8002ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	011c      	lsls	r4, r3, #4
 8002eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ee4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ee8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002eec:	4642      	mov	r2, r8
 8002eee:	464b      	mov	r3, r9
 8002ef0:	1891      	adds	r1, r2, r2
 8002ef2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ef4:	415b      	adcs	r3, r3
 8002ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002efc:	4641      	mov	r1, r8
 8002efe:	eb12 0a01 	adds.w	sl, r2, r1
 8002f02:	4649      	mov	r1, r9
 8002f04:	eb43 0b01 	adc.w	fp, r3, r1
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f1c:	4692      	mov	sl, r2
 8002f1e:	469b      	mov	fp, r3
 8002f20:	4643      	mov	r3, r8
 8002f22:	eb1a 0303 	adds.w	r3, sl, r3
 8002f26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	18db      	adds	r3, r3, r3
 8002f4c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f4e:	4613      	mov	r3, r2
 8002f50:	eb42 0303 	adc.w	r3, r2, r3
 8002f54:	647b      	str	r3, [r7, #68]	; 0x44
 8002f56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f5e:	f7fd f98f 	bl	8000280 <__aeabi_uldivmod>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <UART_SetConfig+0x2d4>)
 8002f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2264      	movs	r2, #100	; 0x64
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	1acb      	subs	r3, r1, r3
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f7e:	4b36      	ldr	r3, [pc, #216]	; (8003058 <UART_SetConfig+0x2d4>)
 8002f80:	fba3 2302 	umull	r2, r3, r3, r2
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f8c:	441c      	add	r4, r3
 8002f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fa0:	4642      	mov	r2, r8
 8002fa2:	464b      	mov	r3, r9
 8002fa4:	1891      	adds	r1, r2, r2
 8002fa6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fa8:	415b      	adcs	r3, r3
 8002faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	1851      	adds	r1, r2, r1
 8002fb4:	6339      	str	r1, [r7, #48]	; 0x30
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	414b      	adcs	r3, r1
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fc8:	4659      	mov	r1, fp
 8002fca:	00cb      	lsls	r3, r1, #3
 8002fcc:	4651      	mov	r1, sl
 8002fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	00ca      	lsls	r2, r1, #3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4642      	mov	r2, r8
 8002fde:	189b      	adds	r3, r3, r2
 8002fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	460a      	mov	r2, r1
 8002fe8:	eb42 0303 	adc.w	r3, r2, r3
 8002fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ffc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003000:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003004:	460b      	mov	r3, r1
 8003006:	18db      	adds	r3, r3, r3
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
 800300a:	4613      	mov	r3, r2
 800300c:	eb42 0303 	adc.w	r3, r2, r3
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003016:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800301a:	f7fd f931 	bl	8000280 <__aeabi_uldivmod>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <UART_SetConfig+0x2d4>)
 8003024:	fba3 1302 	umull	r1, r3, r3, r2
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	2164      	movs	r1, #100	; 0x64
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	3332      	adds	r3, #50	; 0x32
 8003036:	4a08      	ldr	r2, [pc, #32]	; (8003058 <UART_SetConfig+0x2d4>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	f003 0207 	and.w	r2, r3, #7
 8003042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4422      	add	r2, r4
 800304a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800304c:	e105      	b.n	800325a <UART_SetConfig+0x4d6>
 800304e:	bf00      	nop
 8003050:	40011000 	.word	0x40011000
 8003054:	40011400 	.word	0x40011400
 8003058:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800305c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003060:	2200      	movs	r2, #0
 8003062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003066:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800306a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800306e:	4642      	mov	r2, r8
 8003070:	464b      	mov	r3, r9
 8003072:	1891      	adds	r1, r2, r2
 8003074:	6239      	str	r1, [r7, #32]
 8003076:	415b      	adcs	r3, r3
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
 800307a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800307e:	4641      	mov	r1, r8
 8003080:	1854      	adds	r4, r2, r1
 8003082:	4649      	mov	r1, r9
 8003084:	eb43 0501 	adc.w	r5, r3, r1
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	00eb      	lsls	r3, r5, #3
 8003092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003096:	00e2      	lsls	r2, r4, #3
 8003098:	4614      	mov	r4, r2
 800309a:	461d      	mov	r5, r3
 800309c:	4643      	mov	r3, r8
 800309e:	18e3      	adds	r3, r4, r3
 80030a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030a4:	464b      	mov	r3, r9
 80030a6:	eb45 0303 	adc.w	r3, r5, r3
 80030aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030ca:	4629      	mov	r1, r5
 80030cc:	008b      	lsls	r3, r1, #2
 80030ce:	4621      	mov	r1, r4
 80030d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d4:	4621      	mov	r1, r4
 80030d6:	008a      	lsls	r2, r1, #2
 80030d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030dc:	f7fd f8d0 	bl	8000280 <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4b60      	ldr	r3, [pc, #384]	; (8003268 <UART_SetConfig+0x4e4>)
 80030e6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	011c      	lsls	r4, r3, #4
 80030ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003100:	4642      	mov	r2, r8
 8003102:	464b      	mov	r3, r9
 8003104:	1891      	adds	r1, r2, r2
 8003106:	61b9      	str	r1, [r7, #24]
 8003108:	415b      	adcs	r3, r3
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003110:	4641      	mov	r1, r8
 8003112:	1851      	adds	r1, r2, r1
 8003114:	6139      	str	r1, [r7, #16]
 8003116:	4649      	mov	r1, r9
 8003118:	414b      	adcs	r3, r1
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003128:	4659      	mov	r1, fp
 800312a:	00cb      	lsls	r3, r1, #3
 800312c:	4651      	mov	r1, sl
 800312e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003132:	4651      	mov	r1, sl
 8003134:	00ca      	lsls	r2, r1, #3
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	4603      	mov	r3, r0
 800313c:	4642      	mov	r2, r8
 800313e:	189b      	adds	r3, r3, r2
 8003140:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003144:	464b      	mov	r3, r9
 8003146:	460a      	mov	r2, r1
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	67bb      	str	r3, [r7, #120]	; 0x78
 800315a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003168:	4649      	mov	r1, r9
 800316a:	008b      	lsls	r3, r1, #2
 800316c:	4641      	mov	r1, r8
 800316e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003172:	4641      	mov	r1, r8
 8003174:	008a      	lsls	r2, r1, #2
 8003176:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800317a:	f7fd f881 	bl	8000280 <__aeabi_uldivmod>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4b39      	ldr	r3, [pc, #228]	; (8003268 <UART_SetConfig+0x4e4>)
 8003184:	fba3 1302 	umull	r1, r3, r3, r2
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	2164      	movs	r1, #100	; 0x64
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	3332      	adds	r3, #50	; 0x32
 8003196:	4a34      	ldr	r2, [pc, #208]	; (8003268 <UART_SetConfig+0x4e4>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031a2:	441c      	add	r4, r3
 80031a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a8:	2200      	movs	r2, #0
 80031aa:	673b      	str	r3, [r7, #112]	; 0x70
 80031ac:	677a      	str	r2, [r7, #116]	; 0x74
 80031ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031b2:	4642      	mov	r2, r8
 80031b4:	464b      	mov	r3, r9
 80031b6:	1891      	adds	r1, r2, r2
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	415b      	adcs	r3, r3
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031c2:	4641      	mov	r1, r8
 80031c4:	1851      	adds	r1, r2, r1
 80031c6:	6039      	str	r1, [r7, #0]
 80031c8:	4649      	mov	r1, r9
 80031ca:	414b      	adcs	r3, r1
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031da:	4659      	mov	r1, fp
 80031dc:	00cb      	lsls	r3, r1, #3
 80031de:	4651      	mov	r1, sl
 80031e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031e4:	4651      	mov	r1, sl
 80031e6:	00ca      	lsls	r2, r1, #3
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	4603      	mov	r3, r0
 80031ee:	4642      	mov	r2, r8
 80031f0:	189b      	adds	r3, r3, r2
 80031f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80031f4:	464b      	mov	r3, r9
 80031f6:	460a      	mov	r2, r1
 80031f8:	eb42 0303 	adc.w	r3, r2, r3
 80031fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	663b      	str	r3, [r7, #96]	; 0x60
 8003208:	667a      	str	r2, [r7, #100]	; 0x64
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003216:	4649      	mov	r1, r9
 8003218:	008b      	lsls	r3, r1, #2
 800321a:	4641      	mov	r1, r8
 800321c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003220:	4641      	mov	r1, r8
 8003222:	008a      	lsls	r2, r1, #2
 8003224:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003228:	f7fd f82a 	bl	8000280 <__aeabi_uldivmod>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <UART_SetConfig+0x4e4>)
 8003232:	fba3 1302 	umull	r1, r3, r3, r2
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2164      	movs	r1, #100	; 0x64
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	3332      	adds	r3, #50	; 0x32
 8003244:	4a08      	ldr	r2, [pc, #32]	; (8003268 <UART_SetConfig+0x4e4>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	f003 020f 	and.w	r2, r3, #15
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4422      	add	r2, r4
 8003258:	609a      	str	r2, [r3, #8]
}
 800325a:	bf00      	nop
 800325c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003260:	46bd      	mov	sp, r7
 8003262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003266:	bf00      	nop
 8003268:	51eb851f 	.word	0x51eb851f

0800326c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <SysTick_Handler+0x1c>)
 8003272:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003274:	f001 fc20 	bl	8004ab8 <xTaskGetSchedulerState>
 8003278:	4603      	mov	r3, r0
 800327a:	2b01      	cmp	r3, #1
 800327c:	d001      	beq.n	8003282 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800327e:	f002 fa0b 	bl	8005698 <xPortSysTickHandler>
  }
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	e000e010 	.word	0xe000e010

0800328c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800329c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4a06      	ldr	r2, [pc, #24]	; (80032bc <vApplicationGetIdleTaskMemory+0x30>)
 80032a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	601a      	str	r2, [r3, #0]
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000128 	.word	0x20000128
 80032bc:	20000184 	.word	0x20000184

080032c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a07      	ldr	r2, [pc, #28]	; (80032ec <vApplicationGetTimerTaskMemory+0x2c>)
 80032d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4a06      	ldr	r2, [pc, #24]	; (80032f0 <vApplicationGetTimerTaskMemory+0x30>)
 80032d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032de:	601a      	str	r2, [r3, #0]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	20000384 	.word	0x20000384
 80032f0:	200003e0 	.word	0x200003e0

080032f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f103 0208 	add.w	r2, r3, #8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f04f 32ff 	mov.w	r2, #4294967295
 800330c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f103 0208 	add.w	r2, r3, #8
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f103 0208 	add.w	r2, r3, #8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003396:	b480      	push	{r7}
 8003398:	b085      	sub	sp, #20
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d103      	bne.n	80033b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e00c      	b.n	80033d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3308      	adds	r3, #8
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e002      	b.n	80033c4 <vListInsert+0x2e>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d2f6      	bcs.n	80033be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	601a      	str	r2, [r3, #0]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6892      	ldr	r2, [r2, #8]
 800341e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6852      	ldr	r2, [r2, #4]
 8003428:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	429a      	cmp	r2, r3
 8003432:	d103      	bne.n	800343c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	1e5a      	subs	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003482:	bf00      	nop
 8003484:	e7fe      	b.n	8003484 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003486:	f002 f875 	bl	8005574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	68f9      	ldr	r1, [r7, #12]
 8003494:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	441a      	add	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	3b01      	subs	r3, #1
 80034b8:	68f9      	ldr	r1, [r7, #12]
 80034ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034bc:	fb01 f303 	mul.w	r3, r1, r3
 80034c0:	441a      	add	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	22ff      	movs	r2, #255	; 0xff
 80034ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	22ff      	movs	r2, #255	; 0xff
 80034d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d114      	bne.n	8003506 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01a      	beq.n	800351a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3310      	adds	r3, #16
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 f927 	bl	800473c <xTaskRemoveFromEventList>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d012      	beq.n	800351a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <xQueueGenericReset+0xcc>)
 80034f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	e009      	b.n	800351a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	3310      	adds	r3, #16
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fef2 	bl	80032f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3324      	adds	r3, #36	; 0x24
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff feed 	bl	80032f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800351a:	f002 f85b 	bl	80055d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800351e:	2301      	movs	r3, #1
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	e000ed04 	.word	0xe000ed04

0800352c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08e      	sub	sp, #56	; 0x38
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800356e:	bf00      	nop
 8003570:	e7fe      	b.n	8003570 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <xQueueGenericCreateStatic+0x52>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <xQueueGenericCreateStatic+0x56>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <xQueueGenericCreateStatic+0x58>
 8003582:	2300      	movs	r3, #0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10a      	bne.n	800359e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	623b      	str	r3, [r7, #32]
}
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <xQueueGenericCreateStatic+0x7e>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <xQueueGenericCreateStatic+0x82>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <xQueueGenericCreateStatic+0x84>
 80035ae:	2300      	movs	r3, #0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	61fb      	str	r3, [r7, #28]
}
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035ca:	2350      	movs	r3, #80	; 0x50
 80035cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b50      	cmp	r3, #80	; 0x50
 80035d2:	d00a      	beq.n	80035ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	61bb      	str	r3, [r7, #24]
}
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	4613      	mov	r3, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f83f 	bl	8003690 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003614:	4618      	mov	r0, r3
 8003616:	3730      	adds	r7, #48	; 0x30
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	4613      	mov	r3, r2
 8003628:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	613b      	str	r3, [r7, #16]
}
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	3350      	adds	r3, #80	; 0x50
 8003654:	4618      	mov	r0, r3
 8003656:	f002 f8af 	bl	80057b8 <pvPortMalloc>
 800365a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d011      	beq.n	8003686 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	3350      	adds	r3, #80	; 0x50
 800366a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003674:	79fa      	ldrb	r2, [r7, #7]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	4613      	mov	r3, r2
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 f805 	bl	8003690 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003686:	69bb      	ldr	r3, [r7, #24]
	}
 8003688:	4618      	mov	r0, r3
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d103      	bne.n	80036ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e002      	b.n	80036b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036be:	2101      	movs	r1, #1
 80036c0:	69b8      	ldr	r0, [r7, #24]
 80036c2:	f7ff fecb 	bl	800345c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036e6:	2300      	movs	r3, #0
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <xQueueGenericSend+0x32>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003706:	bf00      	nop
 8003708:	e7fe      	b.n	8003708 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d103      	bne.n	8003718 <xQueueGenericSend+0x40>
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <xQueueGenericSend+0x44>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <xQueueGenericSend+0x46>
 800371c:	2300      	movs	r3, #0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <xQueueGenericSend+0x60>
	__asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003734:	bf00      	nop
 8003736:	e7fe      	b.n	8003736 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d103      	bne.n	8003746 <xQueueGenericSend+0x6e>
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <xQueueGenericSend+0x72>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <xQueueGenericSend+0x74>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <xQueueGenericSend+0x8e>
	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	623b      	str	r3, [r7, #32]
}
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003766:	f001 f9a7 	bl	8004ab8 <xTaskGetSchedulerState>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d102      	bne.n	8003776 <xQueueGenericSend+0x9e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <xQueueGenericSend+0xa2>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <xQueueGenericSend+0xa4>
 800377a:	2300      	movs	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <xQueueGenericSend+0xbe>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	61fb      	str	r3, [r7, #28]
}
 8003792:	bf00      	nop
 8003794:	e7fe      	b.n	8003794 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003796:	f001 feed 	bl	8005574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <xQueueGenericSend+0xd4>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d129      	bne.n	8003800 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037b2:	f000 fa29 	bl	8003c08 <prvCopyDataToQueue>
 80037b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d010      	beq.n	80037e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	3324      	adds	r3, #36	; 0x24
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 ffb9 	bl	800473c <xTaskRemoveFromEventList>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037d0:	4b3f      	ldr	r3, [pc, #252]	; (80038d0 <xQueueGenericSend+0x1f8>)
 80037d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	e00a      	b.n	80037f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d007      	beq.n	80037f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037e8:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <xQueueGenericSend+0x1f8>)
 80037ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037f8:	f001 feec 	bl	80055d4 <vPortExitCritical>
				return pdPASS;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e063      	b.n	80038c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d103      	bne.n	800380e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003806:	f001 fee5 	bl	80055d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800380a:	2300      	movs	r3, #0
 800380c:	e05c      	b.n	80038c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800380e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003810:	2b00      	cmp	r3, #0
 8003812:	d106      	bne.n	8003822 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fff3 	bl	8004804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800381e:	2301      	movs	r3, #1
 8003820:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003822:	f001 fed7 	bl	80055d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003826:	f000 fd65 	bl	80042f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800382a:	f001 fea3 	bl	8005574 <vPortEnterCritical>
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003834:	b25b      	sxtb	r3, r3
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383a:	d103      	bne.n	8003844 <xQueueGenericSend+0x16c>
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800384a:	b25b      	sxtb	r3, r3
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d103      	bne.n	800385a <xQueueGenericSend+0x182>
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800385a:	f001 febb 	bl	80055d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800385e:	1d3a      	adds	r2, r7, #4
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	4611      	mov	r1, r2
 8003866:	4618      	mov	r0, r3
 8003868:	f000 ffe2 	bl	8004830 <xTaskCheckForTimeOut>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d124      	bne.n	80038bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003874:	f000 fac0 	bl	8003df8 <prvIsQueueFull>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d018      	beq.n	80038b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	3310      	adds	r3, #16
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f000 ff08 	bl	800469c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800388c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800388e:	f000 fa4b 	bl	8003d28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003892:	f000 fd3d 	bl	8004310 <xTaskResumeAll>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	f47f af7c 	bne.w	8003796 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <xQueueGenericSend+0x1f8>)
 80038a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	e772      	b.n	8003796 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038b2:	f000 fa39 	bl	8003d28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038b6:	f000 fd2b 	bl	8004310 <xTaskResumeAll>
 80038ba:	e76c      	b.n	8003796 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038be:	f000 fa33 	bl	8003d28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038c2:	f000 fd25 	bl	8004310 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3738      	adds	r7, #56	; 0x38
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b090      	sub	sp, #64	; 0x40
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038fe:	bf00      	nop
 8003900:	e7fe      	b.n	8003900 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d103      	bne.n	8003910 <xQueueGenericSendFromISR+0x3c>
 8003908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <xQueueGenericSendFromISR+0x40>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <xQueueGenericSendFromISR+0x42>
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800392c:	bf00      	nop
 800392e:	e7fe      	b.n	800392e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d103      	bne.n	800393e <xQueueGenericSendFromISR+0x6a>
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <xQueueGenericSendFromISR+0x6e>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <xQueueGenericSendFromISR+0x70>
 8003942:	2300      	movs	r3, #0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	623b      	str	r3, [r7, #32]
}
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800395e:	f001 feeb 	bl	8005738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003962:	f3ef 8211 	mrs	r2, BASEPRI
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	61fa      	str	r2, [r7, #28]
 8003978:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800397a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800397c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	429a      	cmp	r2, r3
 8003988:	d302      	bcc.n	8003990 <xQueueGenericSendFromISR+0xbc>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d12f      	bne.n	80039f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039a6:	f000 f92f 	bl	8003c08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b2:	d112      	bne.n	80039da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d016      	beq.n	80039ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	3324      	adds	r3, #36	; 0x24
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 febb 	bl	800473c <xTaskRemoveFromEventList>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00e      	beq.n	80039ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e007      	b.n	80039ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039de:	3301      	adds	r3, #1
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	b25a      	sxtb	r2, r3
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80039ea:	2301      	movs	r3, #1
 80039ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80039ee:	e001      	b.n	80039f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3740      	adds	r7, #64	; 0x40
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08c      	sub	sp, #48	; 0x30
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <xQueueReceive+0x30>
	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	623b      	str	r3, [r7, #32]
}
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <xQueueReceive+0x3e>
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <xQueueReceive+0x42>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <xQueueReceive+0x44>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xQueueReceive+0x5e>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	61fb      	str	r3, [r7, #28]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a6a:	f001 f825 	bl	8004ab8 <xTaskGetSchedulerState>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <xQueueReceive+0x6e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <xQueueReceive+0x72>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <xQueueReceive+0x74>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <xQueueReceive+0x8e>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	61bb      	str	r3, [r7, #24]
}
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a9a:	f001 fd6b 	bl	8005574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01f      	beq.n	8003aea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aae:	f000 f915 	bl	8003cdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	1e5a      	subs	r2, r3, #1
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00f      	beq.n	8003ae2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	3310      	adds	r3, #16
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fe38 	bl	800473c <xTaskRemoveFromEventList>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ad2:	4b3d      	ldr	r3, [pc, #244]	; (8003bc8 <xQueueReceive+0x1bc>)
 8003ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ae2:	f001 fd77 	bl	80055d4 <vPortExitCritical>
				return pdPASS;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e069      	b.n	8003bbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d103      	bne.n	8003af8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003af0:	f001 fd70 	bl	80055d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e062      	b.n	8003bbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003afe:	f107 0310 	add.w	r3, r7, #16
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fe7e 	bl	8004804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b0c:	f001 fd62 	bl	80055d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b10:	f000 fbf0 	bl	80042f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b14:	f001 fd2e 	bl	8005574 <vPortEnterCritical>
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b1e:	b25b      	sxtb	r3, r3
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d103      	bne.n	8003b2e <xQueueReceive+0x122>
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b34:	b25b      	sxtb	r3, r3
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d103      	bne.n	8003b44 <xQueueReceive+0x138>
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b44:	f001 fd46 	bl	80055d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b48:	1d3a      	adds	r2, r7, #4
 8003b4a:	f107 0310 	add.w	r3, r7, #16
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fe6d 	bl	8004830 <xTaskCheckForTimeOut>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d123      	bne.n	8003ba4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b5e:	f000 f935 	bl	8003dcc <prvIsQueueEmpty>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d017      	beq.n	8003b98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	3324      	adds	r3, #36	; 0x24
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fd93 	bl	800469c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b78:	f000 f8d6 	bl	8003d28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b7c:	f000 fbc8 	bl	8004310 <xTaskResumeAll>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d189      	bne.n	8003a9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <xQueueReceive+0x1bc>)
 8003b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	e780      	b.n	8003a9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b9a:	f000 f8c5 	bl	8003d28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b9e:	f000 fbb7 	bl	8004310 <xTaskResumeAll>
 8003ba2:	e77a      	b.n	8003a9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ba6:	f000 f8bf 	bl	8003d28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003baa:	f000 fbb1 	bl	8004310 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb0:	f000 f90c 	bl	8003dcc <prvIsQueueEmpty>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f43f af6f 	beq.w	8003a9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3730      	adds	r7, #48	; 0x30
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	e000ed04 	.word	0xe000ed04

08003bcc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	60bb      	str	r3, [r7, #8]
}
 8003bec:	bf00      	nop
 8003bee:	e7fe      	b.n	8003bee <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003bf0:	f001 fcc0 	bl	8005574 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003bfa:	f001 fceb 	bl	80055d4 <vPortExitCritical>

	return uxReturn;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10d      	bne.n	8003c42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d14d      	bne.n	8003cca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 ff5e 	bl	8004af4 <xTaskPriorityDisinherit>
 8003c38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	e043      	b.n	8003cca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d119      	bne.n	8003c7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6858      	ldr	r0, [r3, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	461a      	mov	r2, r3
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	f001 ffc4 	bl	8005be0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	441a      	add	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d32b      	bcc.n	8003cca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	e026      	b.n	8003cca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68d8      	ldr	r0, [r3, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	461a      	mov	r2, r3
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	f001 ffaa 	bl	8005be0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	425b      	negs	r3, r3
 8003c96:	441a      	add	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d207      	bcs.n	8003cb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	425b      	negs	r3, r3
 8003cb2:	441a      	add	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d105      	bne.n	8003cca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003cd2:	697b      	ldr	r3, [r7, #20]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d018      	beq.n	8003d20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	441a      	add	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d303      	bcc.n	8003d10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68d9      	ldr	r1, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6838      	ldr	r0, [r7, #0]
 8003d1c:	f001 ff60 	bl	8005be0 <memcpy>
	}
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d30:	f001 fc20 	bl	8005574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d3c:	e011      	b.n	8003d62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d012      	beq.n	8003d6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3324      	adds	r3, #36	; 0x24
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fcf6 	bl	800473c <xTaskRemoveFromEventList>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d56:	f000 fdcd 	bl	80048f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	dce9      	bgt.n	8003d3e <prvUnlockQueue+0x16>
 8003d6a:	e000      	b.n	8003d6e <prvUnlockQueue+0x46>
					break;
 8003d6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	22ff      	movs	r2, #255	; 0xff
 8003d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d76:	f001 fc2d 	bl	80055d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d7a:	f001 fbfb 	bl	8005574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d86:	e011      	b.n	8003dac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d012      	beq.n	8003db6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3310      	adds	r3, #16
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fcd1 	bl	800473c <xTaskRemoveFromEventList>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003da0:	f000 fda8 	bl	80048f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003da4:	7bbb      	ldrb	r3, [r7, #14]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	dce9      	bgt.n	8003d88 <prvUnlockQueue+0x60>
 8003db4:	e000      	b.n	8003db8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003db6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	22ff      	movs	r2, #255	; 0xff
 8003dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003dc0:	f001 fc08 	bl	80055d4 <vPortExitCritical>
}
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dd4:	f001 fbce 	bl	8005574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003de0:	2301      	movs	r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	e001      	b.n	8003dea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dea:	f001 fbf3 	bl	80055d4 <vPortExitCritical>

	return xReturn;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e00:	f001 fbb8 	bl	8005574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d102      	bne.n	8003e16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e10:	2301      	movs	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	e001      	b.n	8003e1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e1a:	f001 fbdb 	bl	80055d4 <vPortExitCritical>

	return xReturn;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e014      	b.n	8003e62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e38:	4a0f      	ldr	r2, [pc, #60]	; (8003e78 <vQueueAddToRegistry+0x50>)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e44:	490c      	ldr	r1, [pc, #48]	; (8003e78 <vQueueAddToRegistry+0x50>)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e4e:	4a0a      	ldr	r2, [pc, #40]	; (8003e78 <vQueueAddToRegistry+0x50>)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e5a:	e006      	b.n	8003e6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b07      	cmp	r3, #7
 8003e66:	d9e7      	bls.n	8003e38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	200007e0 	.word	0x200007e0

08003e7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e8c:	f001 fb72 	bl	8005574 <vPortEnterCritical>
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e96:	b25b      	sxtb	r3, r3
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9c:	d103      	bne.n	8003ea6 <vQueueWaitForMessageRestricted+0x2a>
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eac:	b25b      	sxtb	r3, r3
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d103      	bne.n	8003ebc <vQueueWaitForMessageRestricted+0x40>
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ebc:	f001 fb8a 	bl	80055d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d106      	bne.n	8003ed6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3324      	adds	r3, #36	; 0x24
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fc07 	bl	80046e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ed6:	6978      	ldr	r0, [r7, #20]
 8003ed8:	f7ff ff26 	bl	8003d28 <prvUnlockQueue>
	}
 8003edc:	bf00      	nop
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08e      	sub	sp, #56	; 0x38
 8003ee8:	af04      	add	r7, sp, #16
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	623b      	str	r3, [r7, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	e7fe      	b.n	8003f0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10a      	bne.n	8003f2a <xTaskCreateStatic+0x46>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	61fb      	str	r3, [r7, #28]
}
 8003f26:	bf00      	nop
 8003f28:	e7fe      	b.n	8003f28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f2a:	235c      	movs	r3, #92	; 0x5c
 8003f2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b5c      	cmp	r3, #92	; 0x5c
 8003f32:	d00a      	beq.n	8003f4a <xTaskCreateStatic+0x66>
	__asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	61bb      	str	r3, [r7, #24]
}
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d01e      	beq.n	8003f90 <xTaskCreateStatic+0xac>
 8003f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01b      	beq.n	8003f90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	9303      	str	r3, [sp, #12]
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	9302      	str	r3, [sp, #8]
 8003f72:	f107 0314 	add.w	r3, r7, #20
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f850 	bl	8004028 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f8a:	f000 f8dd 	bl	8004148 <prvAddNewTaskToReadyList>
 8003f8e:	e001      	b.n	8003f94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f94:	697b      	ldr	r3, [r7, #20]
	}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3728      	adds	r7, #40	; 0x28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b08c      	sub	sp, #48	; 0x30
 8003fa2:	af04      	add	r7, sp, #16
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 fc00 	bl	80057b8 <pvPortMalloc>
 8003fb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00e      	beq.n	8003fde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fc0:	205c      	movs	r0, #92	; 0x5c
 8003fc2:	f001 fbf9 	bl	80057b8 <pvPortMalloc>
 8003fc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003fd4:	e005      	b.n	8003fe2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fd6:	6978      	ldr	r0, [r7, #20]
 8003fd8:	f001 fcba 	bl	8005950 <vPortFree>
 8003fdc:	e001      	b.n	8003fe2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d017      	beq.n	8004018 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	9303      	str	r3, [sp, #12]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	9302      	str	r3, [sp, #8]
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f80e 	bl	8004028 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800400c:	69f8      	ldr	r0, [r7, #28]
 800400e:	f000 f89b 	bl	8004148 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004012:	2301      	movs	r3, #1
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	e002      	b.n	800401e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004018:	f04f 33ff 	mov.w	r3, #4294967295
 800401c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800401e:	69bb      	ldr	r3, [r7, #24]
	}
 8004020:	4618      	mov	r0, r3
 8004022:	3720      	adds	r7, #32
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	461a      	mov	r2, r3
 8004040:	21a5      	movs	r1, #165	; 0xa5
 8004042:	f001 fddb 	bl	8005bfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004050:	3b01      	subs	r3, #1
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	f023 0307 	bic.w	r3, r3, #7
 800405e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <prvInitialiseNewTask+0x58>
	__asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	617b      	str	r3, [r7, #20]
}
 800407c:	bf00      	nop
 800407e:	e7fe      	b.n	800407e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01f      	beq.n	80040c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	e012      	b.n	80040b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	7819      	ldrb	r1, [r3, #0]
 8004094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	3334      	adds	r3, #52	; 0x34
 800409c:	460a      	mov	r2, r1
 800409e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d006      	beq.n	80040ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	3301      	adds	r3, #1
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2b0f      	cmp	r3, #15
 80040b6:	d9e9      	bls.n	800408c <prvInitialiseNewTask+0x64>
 80040b8:	e000      	b.n	80040bc <prvInitialiseNewTask+0x94>
			{
				break;
 80040ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040c4:	e003      	b.n	80040ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d0:	2b37      	cmp	r3, #55	; 0x37
 80040d2:	d901      	bls.n	80040d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040d4:	2337      	movs	r3, #55	; 0x37
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	2200      	movs	r2, #0
 80040e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	3304      	adds	r3, #4
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff f920 	bl	8003334 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	3318      	adds	r3, #24
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff f91b 	bl	8003334 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004102:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004112:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	2200      	movs	r2, #0
 8004118:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	68f9      	ldr	r1, [r7, #12]
 8004126:	69b8      	ldr	r0, [r7, #24]
 8004128:	f001 f8f4 	bl	8005314 <pxPortInitialiseStack>
 800412c:	4602      	mov	r2, r0
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800413e:	bf00      	nop
 8004140:	3720      	adds	r7, #32
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004150:	f001 fa10 	bl	8005574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004154:	4b2d      	ldr	r3, [pc, #180]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3301      	adds	r3, #1
 800415a:	4a2c      	ldr	r2, [pc, #176]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 800415c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800415e:	4b2c      	ldr	r3, [pc, #176]	; (8004210 <prvAddNewTaskToReadyList+0xc8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004166:	4a2a      	ldr	r2, [pc, #168]	; (8004210 <prvAddNewTaskToReadyList+0xc8>)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800416c:	4b27      	ldr	r3, [pc, #156]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d110      	bne.n	8004196 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004174:	f000 fbe2 	bl	800493c <prvInitialiseTaskLists>
 8004178:	e00d      	b.n	8004196 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800417a:	4b26      	ldr	r3, [pc, #152]	; (8004214 <prvAddNewTaskToReadyList+0xcc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004182:	4b23      	ldr	r3, [pc, #140]	; (8004210 <prvAddNewTaskToReadyList+0xc8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	429a      	cmp	r2, r3
 800418e:	d802      	bhi.n	8004196 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004190:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <prvAddNewTaskToReadyList+0xc8>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004196:	4b20      	ldr	r3, [pc, #128]	; (8004218 <prvAddNewTaskToReadyList+0xd0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3301      	adds	r3, #1
 800419c:	4a1e      	ldr	r2, [pc, #120]	; (8004218 <prvAddNewTaskToReadyList+0xd0>)
 800419e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041a0:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <prvAddNewTaskToReadyList+0xd0>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <prvAddNewTaskToReadyList+0xd4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d903      	bls.n	80041bc <prvAddNewTaskToReadyList+0x74>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	4a18      	ldr	r2, [pc, #96]	; (800421c <prvAddNewTaskToReadyList+0xd4>)
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4a15      	ldr	r2, [pc, #84]	; (8004220 <prvAddNewTaskToReadyList+0xd8>)
 80041ca:	441a      	add	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	4610      	mov	r0, r2
 80041d4:	f7ff f8bb 	bl	800334e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041d8:	f001 f9fc 	bl	80055d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041dc:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <prvAddNewTaskToReadyList+0xcc>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00e      	beq.n	8004202 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <prvAddNewTaskToReadyList+0xc8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d207      	bcs.n	8004202 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041f2:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <prvAddNewTaskToReadyList+0xdc>)
 80041f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000cf4 	.word	0x20000cf4
 8004210:	20000820 	.word	0x20000820
 8004214:	20000d00 	.word	0x20000d00
 8004218:	20000d10 	.word	0x20000d10
 800421c:	20000cfc 	.word	0x20000cfc
 8004220:	20000824 	.word	0x20000824
 8004224:	e000ed04 	.word	0xe000ed04

08004228 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004236:	463a      	mov	r2, r7
 8004238:	1d39      	adds	r1, r7, #4
 800423a:	f107 0308 	add.w	r3, r7, #8
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff f824 	bl	800328c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004244:	6839      	ldr	r1, [r7, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	9202      	str	r2, [sp, #8]
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	2300      	movs	r3, #0
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	2300      	movs	r3, #0
 8004254:	460a      	mov	r2, r1
 8004256:	4921      	ldr	r1, [pc, #132]	; (80042dc <vTaskStartScheduler+0xb4>)
 8004258:	4821      	ldr	r0, [pc, #132]	; (80042e0 <vTaskStartScheduler+0xb8>)
 800425a:	f7ff fe43 	bl	8003ee4 <xTaskCreateStatic>
 800425e:	4603      	mov	r3, r0
 8004260:	4a20      	ldr	r2, [pc, #128]	; (80042e4 <vTaskStartScheduler+0xbc>)
 8004262:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004264:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <vTaskStartScheduler+0xbc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800426c:	2301      	movs	r3, #1
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	e001      	b.n	8004276 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d102      	bne.n	8004282 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800427c:	f000 fcfc 	bl	8004c78 <xTimerCreateTimerTask>
 8004280:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d116      	bne.n	80042b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	613b      	str	r3, [r7, #16]
}
 800429a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800429c:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <vTaskStartScheduler+0xc0>)
 800429e:	f04f 32ff 	mov.w	r2, #4294967295
 80042a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042a4:	4b11      	ldr	r3, [pc, #68]	; (80042ec <vTaskStartScheduler+0xc4>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <vTaskStartScheduler+0xc8>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042b0:	f001 f8be 	bl	8005430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042b4:	e00e      	b.n	80042d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d10a      	bne.n	80042d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	60fb      	str	r3, [r7, #12]
}
 80042d0:	bf00      	nop
 80042d2:	e7fe      	b.n	80042d2 <vTaskStartScheduler+0xaa>
}
 80042d4:	bf00      	nop
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	080065c8 	.word	0x080065c8
 80042e0:	0800490d 	.word	0x0800490d
 80042e4:	20000d18 	.word	0x20000d18
 80042e8:	20000d14 	.word	0x20000d14
 80042ec:	20000d00 	.word	0x20000d00
 80042f0:	20000cf8 	.word	0x20000cf8

080042f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <vTaskSuspendAll+0x18>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3301      	adds	r3, #1
 80042fe:	4a03      	ldr	r2, [pc, #12]	; (800430c <vTaskSuspendAll+0x18>)
 8004300:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004302:	bf00      	nop
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	20000d1c 	.word	0x20000d1c

08004310 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800431e:	4b42      	ldr	r3, [pc, #264]	; (8004428 <xTaskResumeAll+0x118>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <xTaskResumeAll+0x2c>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	603b      	str	r3, [r7, #0]
}
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800433c:	f001 f91a 	bl	8005574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004340:	4b39      	ldr	r3, [pc, #228]	; (8004428 <xTaskResumeAll+0x118>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3b01      	subs	r3, #1
 8004346:	4a38      	ldr	r2, [pc, #224]	; (8004428 <xTaskResumeAll+0x118>)
 8004348:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800434a:	4b37      	ldr	r3, [pc, #220]	; (8004428 <xTaskResumeAll+0x118>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d162      	bne.n	8004418 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004352:	4b36      	ldr	r3, [pc, #216]	; (800442c <xTaskResumeAll+0x11c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d05e      	beq.n	8004418 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800435a:	e02f      	b.n	80043bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800435c:	4b34      	ldr	r3, [pc, #208]	; (8004430 <xTaskResumeAll+0x120>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3318      	adds	r3, #24
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff f84d 	bl	8003408 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3304      	adds	r3, #4
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff f848 	bl	8003408 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437c:	4b2d      	ldr	r3, [pc, #180]	; (8004434 <xTaskResumeAll+0x124>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d903      	bls.n	800438c <xTaskResumeAll+0x7c>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	4a2a      	ldr	r2, [pc, #168]	; (8004434 <xTaskResumeAll+0x124>)
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4a27      	ldr	r2, [pc, #156]	; (8004438 <xTaskResumeAll+0x128>)
 800439a:	441a      	add	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3304      	adds	r3, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f7fe ffd3 	bl	800334e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4b23      	ldr	r3, [pc, #140]	; (800443c <xTaskResumeAll+0x12c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80043b6:	4b22      	ldr	r3, [pc, #136]	; (8004440 <xTaskResumeAll+0x130>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043bc:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <xTaskResumeAll+0x120>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1cb      	bne.n	800435c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043ca:	f000 fb55 	bl	8004a78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043ce:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <xTaskResumeAll+0x134>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d010      	beq.n	80043fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043da:	f000 f847 	bl	800446c <xTaskIncrementTick>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <xTaskResumeAll+0x130>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f1      	bne.n	80043da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80043f6:	4b13      	ldr	r3, [pc, #76]	; (8004444 <xTaskResumeAll+0x134>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043fc:	4b10      	ldr	r3, [pc, #64]	; (8004440 <xTaskResumeAll+0x130>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004404:	2301      	movs	r3, #1
 8004406:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <xTaskResumeAll+0x138>)
 800440a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004418:	f001 f8dc 	bl	80055d4 <vPortExitCritical>

	return xAlreadyYielded;
 800441c:	68bb      	ldr	r3, [r7, #8]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000d1c 	.word	0x20000d1c
 800442c:	20000cf4 	.word	0x20000cf4
 8004430:	20000cb4 	.word	0x20000cb4
 8004434:	20000cfc 	.word	0x20000cfc
 8004438:	20000824 	.word	0x20000824
 800443c:	20000820 	.word	0x20000820
 8004440:	20000d08 	.word	0x20000d08
 8004444:	20000d04 	.word	0x20000d04
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <xTaskGetTickCount+0x1c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004458:	687b      	ldr	r3, [r7, #4]
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000cf8 	.word	0x20000cf8

0800446c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004476:	4b4f      	ldr	r3, [pc, #316]	; (80045b4 <xTaskIncrementTick+0x148>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	f040 808f 	bne.w	800459e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004480:	4b4d      	ldr	r3, [pc, #308]	; (80045b8 <xTaskIncrementTick+0x14c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3301      	adds	r3, #1
 8004486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004488:	4a4b      	ldr	r2, [pc, #300]	; (80045b8 <xTaskIncrementTick+0x14c>)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d120      	bne.n	80044d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004494:	4b49      	ldr	r3, [pc, #292]	; (80045bc <xTaskIncrementTick+0x150>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	603b      	str	r3, [r7, #0]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <xTaskIncrementTick+0x46>
 80044b4:	4b41      	ldr	r3, [pc, #260]	; (80045bc <xTaskIncrementTick+0x150>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <xTaskIncrementTick+0x154>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a3f      	ldr	r2, [pc, #252]	; (80045bc <xTaskIncrementTick+0x150>)
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	4a3f      	ldr	r2, [pc, #252]	; (80045c0 <xTaskIncrementTick+0x154>)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b3e      	ldr	r3, [pc, #248]	; (80045c4 <xTaskIncrementTick+0x158>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	4a3d      	ldr	r2, [pc, #244]	; (80045c4 <xTaskIncrementTick+0x158>)
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	f000 fad1 	bl	8004a78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044d6:	4b3c      	ldr	r3, [pc, #240]	; (80045c8 <xTaskIncrementTick+0x15c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d349      	bcc.n	8004574 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044e0:	4b36      	ldr	r3, [pc, #216]	; (80045bc <xTaskIncrementTick+0x150>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ea:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <xTaskIncrementTick+0x15c>)
 80044ec:	f04f 32ff 	mov.w	r2, #4294967295
 80044f0:	601a      	str	r2, [r3, #0]
					break;
 80044f2:	e03f      	b.n	8004574 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f4:	4b31      	ldr	r3, [pc, #196]	; (80045bc <xTaskIncrementTick+0x150>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	429a      	cmp	r2, r3
 800450a:	d203      	bcs.n	8004514 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800450c:	4a2e      	ldr	r2, [pc, #184]	; (80045c8 <xTaskIncrementTick+0x15c>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004512:	e02f      	b.n	8004574 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	3304      	adds	r3, #4
 8004518:	4618      	mov	r0, r3
 800451a:	f7fe ff75 	bl	8003408 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	3318      	adds	r3, #24
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe ff6c 	bl	8003408 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	4b25      	ldr	r3, [pc, #148]	; (80045cc <xTaskIncrementTick+0x160>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d903      	bls.n	8004544 <xTaskIncrementTick+0xd8>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	4a22      	ldr	r2, [pc, #136]	; (80045cc <xTaskIncrementTick+0x160>)
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4a1f      	ldr	r2, [pc, #124]	; (80045d0 <xTaskIncrementTick+0x164>)
 8004552:	441a      	add	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	3304      	adds	r3, #4
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f7fe fef7 	bl	800334e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <xTaskIncrementTick+0x168>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	429a      	cmp	r2, r3
 800456c:	d3b8      	bcc.n	80044e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800456e:	2301      	movs	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004572:	e7b5      	b.n	80044e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004574:	4b17      	ldr	r3, [pc, #92]	; (80045d4 <xTaskIncrementTick+0x168>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457a:	4915      	ldr	r1, [pc, #84]	; (80045d0 <xTaskIncrementTick+0x164>)
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d901      	bls.n	8004590 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800458c:	2301      	movs	r3, #1
 800458e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004590:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <xTaskIncrementTick+0x16c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004598:	2301      	movs	r3, #1
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	e004      	b.n	80045a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <xTaskIncrementTick+0x170>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <xTaskIncrementTick+0x170>)
 80045a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80045a8:	697b      	ldr	r3, [r7, #20]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000d1c 	.word	0x20000d1c
 80045b8:	20000cf8 	.word	0x20000cf8
 80045bc:	20000cac 	.word	0x20000cac
 80045c0:	20000cb0 	.word	0x20000cb0
 80045c4:	20000d0c 	.word	0x20000d0c
 80045c8:	20000d14 	.word	0x20000d14
 80045cc:	20000cfc 	.word	0x20000cfc
 80045d0:	20000824 	.word	0x20000824
 80045d4:	20000820 	.word	0x20000820
 80045d8:	20000d08 	.word	0x20000d08
 80045dc:	20000d04 	.word	0x20000d04

080045e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045e6:	4b28      	ldr	r3, [pc, #160]	; (8004688 <vTaskSwitchContext+0xa8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045ee:	4b27      	ldr	r3, [pc, #156]	; (800468c <vTaskSwitchContext+0xac>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045f4:	e041      	b.n	800467a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80045f6:	4b25      	ldr	r3, [pc, #148]	; (800468c <vTaskSwitchContext+0xac>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fc:	4b24      	ldr	r3, [pc, #144]	; (8004690 <vTaskSwitchContext+0xb0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	e010      	b.n	8004626 <vTaskSwitchContext+0x46>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <vTaskSwitchContext+0x40>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	607b      	str	r3, [r7, #4]
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <vTaskSwitchContext+0x3e>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3b01      	subs	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	491b      	ldr	r1, [pc, #108]	; (8004694 <vTaskSwitchContext+0xb4>)
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0e4      	beq.n	8004604 <vTaskSwitchContext+0x24>
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4a13      	ldr	r2, [pc, #76]	; (8004694 <vTaskSwitchContext+0xb4>)
 8004646:	4413      	add	r3, r2
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	605a      	str	r2, [r3, #4]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	3308      	adds	r3, #8
 800465c:	429a      	cmp	r2, r3
 800465e:	d104      	bne.n	800466a <vTaskSwitchContext+0x8a>
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4a09      	ldr	r2, [pc, #36]	; (8004698 <vTaskSwitchContext+0xb8>)
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	4a06      	ldr	r2, [pc, #24]	; (8004690 <vTaskSwitchContext+0xb0>)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6013      	str	r3, [r2, #0]
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000d1c 	.word	0x20000d1c
 800468c:	20000d08 	.word	0x20000d08
 8004690:	20000cfc 	.word	0x20000cfc
 8004694:	20000824 	.word	0x20000824
 8004698:	20000820 	.word	0x20000820

0800469c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60fb      	str	r3, [r7, #12]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046c2:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <vTaskPlaceOnEventList+0x44>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3318      	adds	r3, #24
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fe fe63 	bl	8003396 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046d0:	2101      	movs	r1, #1
 80046d2:	6838      	ldr	r0, [r7, #0]
 80046d4:	f000 fa7c 	bl	8004bd0 <prvAddCurrentTaskToDelayedList>
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000820 	.word	0x20000820

080046e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	617b      	str	r3, [r7, #20]
}
 8004708:	bf00      	nop
 800470a:	e7fe      	b.n	800470a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <vTaskPlaceOnEventListRestricted+0x54>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3318      	adds	r3, #24
 8004712:	4619      	mov	r1, r3
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7fe fe1a 	bl	800334e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004720:	f04f 33ff 	mov.w	r3, #4294967295
 8004724:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	68b8      	ldr	r0, [r7, #8]
 800472a:	f000 fa51 	bl	8004bd0 <prvAddCurrentTaskToDelayedList>
	}
 800472e:	bf00      	nop
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000820 	.word	0x20000820

0800473c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60fb      	str	r3, [r7, #12]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	3318      	adds	r3, #24
 800476c:	4618      	mov	r0, r3
 800476e:	f7fe fe4b 	bl	8003408 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004772:	4b1e      	ldr	r3, [pc, #120]	; (80047ec <xTaskRemoveFromEventList+0xb0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d11d      	bne.n	80047b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	3304      	adds	r3, #4
 800477e:	4618      	mov	r0, r3
 8004780:	f7fe fe42 	bl	8003408 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <xTaskRemoveFromEventList+0xb4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d903      	bls.n	8004798 <xTaskRemoveFromEventList+0x5c>
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <xTaskRemoveFromEventList+0xb4>)
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <xTaskRemoveFromEventList+0xb8>)
 80047a6:	441a      	add	r2, r3
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f7fe fdcd 	bl	800334e <vListInsertEnd>
 80047b4:	e005      	b.n	80047c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3318      	adds	r3, #24
 80047ba:	4619      	mov	r1, r3
 80047bc:	480e      	ldr	r0, [pc, #56]	; (80047f8 <xTaskRemoveFromEventList+0xbc>)
 80047be:	f7fe fdc6 	bl	800334e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c6:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <xTaskRemoveFromEventList+0xc0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d905      	bls.n	80047dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047d0:	2301      	movs	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <xTaskRemoveFromEventList+0xc4>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e001      	b.n	80047e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047e0:	697b      	ldr	r3, [r7, #20]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000d1c 	.word	0x20000d1c
 80047f0:	20000cfc 	.word	0x20000cfc
 80047f4:	20000824 	.word	0x20000824
 80047f8:	20000cb4 	.word	0x20000cb4
 80047fc:	20000820 	.word	0x20000820
 8004800:	20000d08 	.word	0x20000d08

08004804 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800480c:	4b06      	ldr	r3, [pc, #24]	; (8004828 <vTaskInternalSetTimeOutState+0x24>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004814:	4b05      	ldr	r3, [pc, #20]	; (800482c <vTaskInternalSetTimeOutState+0x28>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	605a      	str	r2, [r3, #4]
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	20000d0c 	.word	0x20000d0c
 800482c:	20000cf8 	.word	0x20000cf8

08004830 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	613b      	str	r3, [r7, #16]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	60fb      	str	r3, [r7, #12]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004872:	f000 fe7f 	bl	8005574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004876:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <xTaskCheckForTimeOut+0xbc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d102      	bne.n	8004896 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	e023      	b.n	80048de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <xTaskCheckForTimeOut+0xc0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d007      	beq.n	80048b2 <xTaskCheckForTimeOut+0x82>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d302      	bcc.n	80048b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048ac:	2301      	movs	r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	e015      	b.n	80048de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d20b      	bcs.n	80048d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ff9b 	bl	8004804 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61fb      	str	r3, [r7, #28]
 80048d2:	e004      	b.n	80048de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048da:	2301      	movs	r3, #1
 80048dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048de:	f000 fe79 	bl	80055d4 <vPortExitCritical>

	return xReturn;
 80048e2:	69fb      	ldr	r3, [r7, #28]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000cf8 	.word	0x20000cf8
 80048f0:	20000d0c 	.word	0x20000d0c

080048f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048f8:	4b03      	ldr	r3, [pc, #12]	; (8004908 <vTaskMissedYield+0x14>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
}
 80048fe:	bf00      	nop
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	20000d08 	.word	0x20000d08

0800490c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004914:	f000 f852 	bl	80049bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004918:	4b06      	ldr	r3, [pc, #24]	; (8004934 <prvIdleTask+0x28>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d9f9      	bls.n	8004914 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004920:	4b05      	ldr	r3, [pc, #20]	; (8004938 <prvIdleTask+0x2c>)
 8004922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004930:	e7f0      	b.n	8004914 <prvIdleTask+0x8>
 8004932:	bf00      	nop
 8004934:	20000824 	.word	0x20000824
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004942:	2300      	movs	r3, #0
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	e00c      	b.n	8004962 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4a12      	ldr	r2, [pc, #72]	; (800499c <prvInitialiseTaskLists+0x60>)
 8004954:	4413      	add	r3, r2
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe fccc 	bl	80032f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3301      	adds	r3, #1
 8004960:	607b      	str	r3, [r7, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b37      	cmp	r3, #55	; 0x37
 8004966:	d9ef      	bls.n	8004948 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004968:	480d      	ldr	r0, [pc, #52]	; (80049a0 <prvInitialiseTaskLists+0x64>)
 800496a:	f7fe fcc3 	bl	80032f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800496e:	480d      	ldr	r0, [pc, #52]	; (80049a4 <prvInitialiseTaskLists+0x68>)
 8004970:	f7fe fcc0 	bl	80032f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004974:	480c      	ldr	r0, [pc, #48]	; (80049a8 <prvInitialiseTaskLists+0x6c>)
 8004976:	f7fe fcbd 	bl	80032f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800497a:	480c      	ldr	r0, [pc, #48]	; (80049ac <prvInitialiseTaskLists+0x70>)
 800497c:	f7fe fcba 	bl	80032f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004980:	480b      	ldr	r0, [pc, #44]	; (80049b0 <prvInitialiseTaskLists+0x74>)
 8004982:	f7fe fcb7 	bl	80032f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <prvInitialiseTaskLists+0x78>)
 8004988:	4a05      	ldr	r2, [pc, #20]	; (80049a0 <prvInitialiseTaskLists+0x64>)
 800498a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <prvInitialiseTaskLists+0x7c>)
 800498e:	4a05      	ldr	r2, [pc, #20]	; (80049a4 <prvInitialiseTaskLists+0x68>)
 8004990:	601a      	str	r2, [r3, #0]
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000824 	.word	0x20000824
 80049a0:	20000c84 	.word	0x20000c84
 80049a4:	20000c98 	.word	0x20000c98
 80049a8:	20000cb4 	.word	0x20000cb4
 80049ac:	20000cc8 	.word	0x20000cc8
 80049b0:	20000ce0 	.word	0x20000ce0
 80049b4:	20000cac 	.word	0x20000cac
 80049b8:	20000cb0 	.word	0x20000cb0

080049bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049c2:	e019      	b.n	80049f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049c4:	f000 fdd6 	bl	8005574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c8:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <prvCheckTasksWaitingTermination+0x50>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe fd17 	bl	8003408 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049da:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <prvCheckTasksWaitingTermination+0x54>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3b01      	subs	r3, #1
 80049e0:	4a0b      	ldr	r2, [pc, #44]	; (8004a10 <prvCheckTasksWaitingTermination+0x54>)
 80049e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <prvCheckTasksWaitingTermination+0x58>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <prvCheckTasksWaitingTermination+0x58>)
 80049ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049ee:	f000 fdf1 	bl	80055d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f810 	bl	8004a18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <prvCheckTasksWaitingTermination+0x58>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e1      	bne.n	80049c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000cc8 	.word	0x20000cc8
 8004a10:	20000cf4 	.word	0x20000cf4
 8004a14:	20000cdc 	.word	0x20000cdc

08004a18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d108      	bne.n	8004a3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 ff8e 	bl	8005950 <vPortFree>
				vPortFree( pxTCB );
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 ff8b 	bl	8005950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a3a:	e018      	b.n	8004a6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d103      	bne.n	8004a4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 ff82 	bl	8005950 <vPortFree>
	}
 8004a4c:	e00f      	b.n	8004a6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d00a      	beq.n	8004a6e <prvDeleteTCB+0x56>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	60fb      	str	r3, [r7, #12]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <prvDeleteTCB+0x54>
	}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a7e:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <prvResetNextTaskUnblockTime+0x38>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8004a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a90:	e008      	b.n	8004aa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a92:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <prvResetNextTaskUnblockTime+0x38>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4a04      	ldr	r2, [pc, #16]	; (8004ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8004aa2:	6013      	str	r3, [r2, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	20000cac 	.word	0x20000cac
 8004ab4:	20000d14 	.word	0x20000d14

08004ab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004abe:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <xTaskGetSchedulerState+0x34>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	e008      	b.n	8004ade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004acc:	4b08      	ldr	r3, [pc, #32]	; (8004af0 <xTaskGetSchedulerState+0x38>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	e001      	b.n	8004ade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ada:	2300      	movs	r3, #0
 8004adc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ade:	687b      	ldr	r3, [r7, #4]
	}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	20000d00 	.word	0x20000d00
 8004af0:	20000d1c 	.word	0x20000d1c

08004af4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d056      	beq.n	8004bb8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b0a:	4b2e      	ldr	r3, [pc, #184]	; (8004bc4 <xTaskPriorityDisinherit+0xd0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d00a      	beq.n	8004b2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	60fb      	str	r3, [r7, #12]
}
 8004b26:	bf00      	nop
 8004b28:	e7fe      	b.n	8004b28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	60bb      	str	r3, [r7, #8]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4c:	1e5a      	subs	r2, r3, #1
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d02c      	beq.n	8004bb8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d128      	bne.n	8004bb8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe fc4c 	bl	8003408 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <xTaskPriorityDisinherit+0xd4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d903      	bls.n	8004b98 <xTaskPriorityDisinherit+0xa4>
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	4a0c      	ldr	r2, [pc, #48]	; (8004bc8 <xTaskPriorityDisinherit+0xd4>)
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4a09      	ldr	r2, [pc, #36]	; (8004bcc <xTaskPriorityDisinherit+0xd8>)
 8004ba6:	441a      	add	r2, r3
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f7fe fbcd 	bl	800334e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bb8:	697b      	ldr	r3, [r7, #20]
	}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000820 	.word	0x20000820
 8004bc8:	20000cfc 	.word	0x20000cfc
 8004bcc:	20000824 	.word	0x20000824

08004bd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bda:	4b21      	ldr	r3, [pc, #132]	; (8004c60 <prvAddCurrentTaskToDelayedList+0x90>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be0:	4b20      	ldr	r3, [pc, #128]	; (8004c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3304      	adds	r3, #4
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fc0e 	bl	8003408 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d10a      	bne.n	8004c0a <prvAddCurrentTaskToDelayedList+0x3a>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bfa:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4619      	mov	r1, r3
 8004c02:	4819      	ldr	r0, [pc, #100]	; (8004c68 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c04:	f7fe fba3 	bl	800334e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c08:	e026      	b.n	8004c58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4413      	add	r3, r2
 8004c10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c12:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d209      	bcs.n	8004c36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	f7fe fbb1 	bl	8003396 <vListInsert>
}
 8004c34:	e010      	b.n	8004c58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c36:	4b0e      	ldr	r3, [pc, #56]	; (8004c70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	4610      	mov	r0, r2
 8004c44:	f7fe fba7 	bl	8003396 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d202      	bcs.n	8004c58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c52:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6013      	str	r3, [r2, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000cf8 	.word	0x20000cf8
 8004c64:	20000820 	.word	0x20000820
 8004c68:	20000ce0 	.word	0x20000ce0
 8004c6c:	20000cb0 	.word	0x20000cb0
 8004c70:	20000cac 	.word	0x20000cac
 8004c74:	20000d14 	.word	0x20000d14

08004c78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08a      	sub	sp, #40	; 0x28
 8004c7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c82:	f000 fb07 	bl	8005294 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <xTimerCreateTimerTask+0x80>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d021      	beq.n	8004cd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c96:	1d3a      	adds	r2, r7, #4
 8004c98:	f107 0108 	add.w	r1, r7, #8
 8004c9c:	f107 030c 	add.w	r3, r7, #12
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fe fb0d 	bl	80032c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	9202      	str	r2, [sp, #8]
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	460a      	mov	r2, r1
 8004cb8:	4910      	ldr	r1, [pc, #64]	; (8004cfc <xTimerCreateTimerTask+0x84>)
 8004cba:	4811      	ldr	r0, [pc, #68]	; (8004d00 <xTimerCreateTimerTask+0x88>)
 8004cbc:	f7ff f912 	bl	8003ee4 <xTaskCreateStatic>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	4a10      	ldr	r2, [pc, #64]	; (8004d04 <xTimerCreateTimerTask+0x8c>)
 8004cc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004cc6:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <xTimerCreateTimerTask+0x8c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	613b      	str	r3, [r7, #16]
}
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004cee:	697b      	ldr	r3, [r7, #20]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20000d50 	.word	0x20000d50
 8004cfc:	080065d0 	.word	0x080065d0
 8004d00:	08004e3d 	.word	0x08004e3d
 8004d04:	20000d54 	.word	0x20000d54

08004d08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	; 0x28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	623b      	str	r3, [r7, #32]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d36:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <xTimerGenericCommand+0x98>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d02a      	beq.n	8004d94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b05      	cmp	r3, #5
 8004d4e:	dc18      	bgt.n	8004d82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d50:	f7ff feb2 	bl	8004ab8 <xTaskGetSchedulerState>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d109      	bne.n	8004d6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d5a:	4b11      	ldr	r3, [pc, #68]	; (8004da0 <xTimerGenericCommand+0x98>)
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	f107 0110 	add.w	r1, r7, #16
 8004d62:	2300      	movs	r3, #0
 8004d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d66:	f7fe fcb7 	bl	80036d8 <xQueueGenericSend>
 8004d6a:	6278      	str	r0, [r7, #36]	; 0x24
 8004d6c:	e012      	b.n	8004d94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d6e:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <xTimerGenericCommand+0x98>)
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	f107 0110 	add.w	r1, r7, #16
 8004d76:	2300      	movs	r3, #0
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f7fe fcad 	bl	80036d8 <xQueueGenericSend>
 8004d7e:	6278      	str	r0, [r7, #36]	; 0x24
 8004d80:	e008      	b.n	8004d94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d82:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <xTimerGenericCommand+0x98>)
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	f107 0110 	add.w	r1, r7, #16
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	f7fe fda1 	bl	80038d4 <xQueueGenericSendFromISR>
 8004d92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3728      	adds	r7, #40	; 0x28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000d50 	.word	0x20000d50

08004da4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dae:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <prvProcessExpiredTimer+0x94>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fe fb23 	bl	8003408 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d022      	beq.n	8004e16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	699a      	ldr	r2, [r3, #24]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	18d1      	adds	r1, r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	6978      	ldr	r0, [r7, #20]
 8004dde:	f000 f8d1 	bl	8004f84 <prvInsertTimerInActiveList>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01f      	beq.n	8004e28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004de8:	2300      	movs	r3, #0
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	2300      	movs	r3, #0
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	2100      	movs	r1, #0
 8004df2:	6978      	ldr	r0, [r7, #20]
 8004df4:	f7ff ff88 	bl	8004d08 <xTimerGenericCommand>
 8004df8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d113      	bne.n	8004e28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	60fb      	str	r3, [r7, #12]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	6978      	ldr	r0, [r7, #20]
 8004e2e:	4798      	blx	r3
}
 8004e30:	bf00      	nop
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000d48 	.word	0x20000d48

08004e3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e44:	f107 0308 	add.w	r3, r7, #8
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 f857 	bl	8004efc <prvGetNextExpireTime>
 8004e4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4619      	mov	r1, r3
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f803 	bl	8004e60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e5a:	f000 f8d5 	bl	8005008 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e5e:	e7f1      	b.n	8004e44 <prvTimerTask+0x8>

08004e60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e6a:	f7ff fa43 	bl	80042f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e6e:	f107 0308 	add.w	r3, r7, #8
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f866 	bl	8004f44 <prvSampleTimeNow>
 8004e78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d130      	bne.n	8004ee2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10a      	bne.n	8004e9c <prvProcessTimerOrBlockTask+0x3c>
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d806      	bhi.n	8004e9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e8e:	f7ff fa3f 	bl	8004310 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff ff85 	bl	8004da4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e9a:	e024      	b.n	8004ee6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d008      	beq.n	8004eb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ea2:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <prvProcessTimerOrBlockTask+0x90>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <prvProcessTimerOrBlockTask+0x50>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <prvProcessTimerOrBlockTask+0x52>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004eb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ef4 <prvProcessTimerOrBlockTask+0x94>)
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	f7fe ffdb 	bl	8003e7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ec6:	f7ff fa23 	bl	8004310 <xTaskResumeAll>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ed0:	4b09      	ldr	r3, [pc, #36]	; (8004ef8 <prvProcessTimerOrBlockTask+0x98>)
 8004ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	f3bf 8f6f 	isb	sy
}
 8004ee0:	e001      	b.n	8004ee6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ee2:	f7ff fa15 	bl	8004310 <xTaskResumeAll>
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000d4c 	.word	0x20000d4c
 8004ef4:	20000d50 	.word	0x20000d50
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f04:	4b0e      	ldr	r3, [pc, #56]	; (8004f40 <prvGetNextExpireTime+0x44>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <prvGetNextExpireTime+0x16>
 8004f0e:	2201      	movs	r2, #1
 8004f10:	e000      	b.n	8004f14 <prvGetNextExpireTime+0x18>
 8004f12:	2200      	movs	r2, #0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d105      	bne.n	8004f2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f20:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <prvGetNextExpireTime+0x44>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	e001      	b.n	8004f30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f30:	68fb      	ldr	r3, [r7, #12]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	20000d48 	.word	0x20000d48

08004f44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f4c:	f7ff fa7e 	bl	800444c <xTaskGetTickCount>
 8004f50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f52:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <prvSampleTimeNow+0x3c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d205      	bcs.n	8004f68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f5c:	f000 f936 	bl	80051cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	e002      	b.n	8004f6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f6e:	4a04      	ldr	r2, [pc, #16]	; (8004f80 <prvSampleTimeNow+0x3c>)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f74:	68fb      	ldr	r3, [r7, #12]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000d58 	.word	0x20000d58

08004f84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d812      	bhi.n	8004fd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	1ad2      	subs	r2, r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d302      	bcc.n	8004fbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	e01b      	b.n	8004ff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004fbe:	4b10      	ldr	r3, [pc, #64]	; (8005000 <prvInsertTimerInActiveList+0x7c>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f7fe f9e4 	bl	8003396 <vListInsert>
 8004fce:	e012      	b.n	8004ff6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d206      	bcs.n	8004fe6 <prvInsertTimerInActiveList+0x62>
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d302      	bcc.n	8004fe6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	e007      	b.n	8004ff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fe6:	4b07      	ldr	r3, [pc, #28]	; (8005004 <prvInsertTimerInActiveList+0x80>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3304      	adds	r3, #4
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	f7fe f9d0 	bl	8003396 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ff6:	697b      	ldr	r3, [r7, #20]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20000d4c 	.word	0x20000d4c
 8005004:	20000d48 	.word	0x20000d48

08005008 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08e      	sub	sp, #56	; 0x38
 800500c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800500e:	e0ca      	b.n	80051a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	da18      	bge.n	8005048 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005016:	1d3b      	adds	r3, r7, #4
 8005018:	3304      	adds	r3, #4
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	61fb      	str	r3, [r7, #28]
}
 8005034:	bf00      	nop
 8005036:	e7fe      	b.n	8005036 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800503e:	6850      	ldr	r0, [r2, #4]
 8005040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005042:	6892      	ldr	r2, [r2, #8]
 8005044:	4611      	mov	r1, r2
 8005046:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f2c0 80aa 	blt.w	80051a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d004      	beq.n	8005066 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	3304      	adds	r3, #4
 8005060:	4618      	mov	r0, r3
 8005062:	f7fe f9d1 	bl	8003408 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005066:	463b      	mov	r3, r7
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff ff6b 	bl	8004f44 <prvSampleTimeNow>
 800506e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b09      	cmp	r3, #9
 8005074:	f200 8097 	bhi.w	80051a6 <prvProcessReceivedCommands+0x19e>
 8005078:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <prvProcessReceivedCommands+0x78>)
 800507a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507e:	bf00      	nop
 8005080:	080050a9 	.word	0x080050a9
 8005084:	080050a9 	.word	0x080050a9
 8005088:	080050a9 	.word	0x080050a9
 800508c:	0800511d 	.word	0x0800511d
 8005090:	08005131 	.word	0x08005131
 8005094:	0800517b 	.word	0x0800517b
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050a9 	.word	0x080050a9
 80050a0:	0800511d 	.word	0x0800511d
 80050a4:	08005131 	.word	0x08005131
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	18d1      	adds	r1, r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c8:	f7ff ff5c 	bl	8004f84 <prvInsertTimerInActiveList>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d069      	beq.n	80051a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d05e      	beq.n	80051a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	441a      	add	r2, r3
 80050f0:	2300      	movs	r3, #0
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	2300      	movs	r3, #0
 80050f6:	2100      	movs	r1, #0
 80050f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050fa:	f7ff fe05 	bl	8004d08 <xTimerGenericCommand>
 80050fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d14f      	bne.n	80051a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	61bb      	str	r3, [r7, #24]
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005122:	f023 0301 	bic.w	r3, r3, #1
 8005126:	b2da      	uxtb	r2, r3
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800512e:	e03a      	b.n	80051a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	b2da      	uxtb	r2, r3
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	617b      	str	r3, [r7, #20]
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	18d1      	adds	r1, r2, r3
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005174:	f7ff ff06 	bl	8004f84 <prvInsertTimerInActiveList>
					break;
 8005178:	e015      	b.n	80051a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d103      	bne.n	8005190 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800518a:	f000 fbe1 	bl	8005950 <vPortFree>
 800518e:	e00a      	b.n	80051a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	b2da      	uxtb	r2, r3
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051a2:	e000      	b.n	80051a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80051a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051a6:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <prvProcessReceivedCommands+0x1c0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	1d39      	adds	r1, r7, #4
 80051ac:	2200      	movs	r2, #0
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe fc2c 	bl	8003a0c <xQueueReceive>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f47f af2a 	bne.w	8005010 <prvProcessReceivedCommands+0x8>
	}
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	3730      	adds	r7, #48	; 0x30
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000d50 	.word	0x20000d50

080051cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051d2:	e048      	b.n	8005266 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051d4:	4b2d      	ldr	r3, [pc, #180]	; (800528c <prvSwitchTimerLists+0xc0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051de:	4b2b      	ldr	r3, [pc, #172]	; (800528c <prvSwitchTimerLists+0xc0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3304      	adds	r3, #4
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fe f90b 	bl	8003408 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d02e      	beq.n	8005266 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	429a      	cmp	r2, r3
 8005218:	d90e      	bls.n	8005238 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005226:	4b19      	ldr	r3, [pc, #100]	; (800528c <prvSwitchTimerLists+0xc0>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3304      	adds	r3, #4
 800522e:	4619      	mov	r1, r3
 8005230:	4610      	mov	r0, r2
 8005232:	f7fe f8b0 	bl	8003396 <vListInsert>
 8005236:	e016      	b.n	8005266 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005238:	2300      	movs	r3, #0
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	2300      	movs	r3, #0
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	2100      	movs	r1, #0
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f7ff fd60 	bl	8004d08 <xTimerGenericCommand>
 8005248:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	603b      	str	r3, [r7, #0]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005266:	4b09      	ldr	r3, [pc, #36]	; (800528c <prvSwitchTimerLists+0xc0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1b1      	bne.n	80051d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005270:	4b06      	ldr	r3, [pc, #24]	; (800528c <prvSwitchTimerLists+0xc0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005276:	4b06      	ldr	r3, [pc, #24]	; (8005290 <prvSwitchTimerLists+0xc4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a04      	ldr	r2, [pc, #16]	; (800528c <prvSwitchTimerLists+0xc0>)
 800527c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800527e:	4a04      	ldr	r2, [pc, #16]	; (8005290 <prvSwitchTimerLists+0xc4>)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	6013      	str	r3, [r2, #0]
}
 8005284:	bf00      	nop
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20000d48 	.word	0x20000d48
 8005290:	20000d4c 	.word	0x20000d4c

08005294 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800529a:	f000 f96b 	bl	8005574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800529e:	4b15      	ldr	r3, [pc, #84]	; (80052f4 <prvCheckForValidListAndQueue+0x60>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d120      	bne.n	80052e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80052a6:	4814      	ldr	r0, [pc, #80]	; (80052f8 <prvCheckForValidListAndQueue+0x64>)
 80052a8:	f7fe f824 	bl	80032f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80052ac:	4813      	ldr	r0, [pc, #76]	; (80052fc <prvCheckForValidListAndQueue+0x68>)
 80052ae:	f7fe f821 	bl	80032f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80052b2:	4b13      	ldr	r3, [pc, #76]	; (8005300 <prvCheckForValidListAndQueue+0x6c>)
 80052b4:	4a10      	ldr	r2, [pc, #64]	; (80052f8 <prvCheckForValidListAndQueue+0x64>)
 80052b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80052b8:	4b12      	ldr	r3, [pc, #72]	; (8005304 <prvCheckForValidListAndQueue+0x70>)
 80052ba:	4a10      	ldr	r2, [pc, #64]	; (80052fc <prvCheckForValidListAndQueue+0x68>)
 80052bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80052be:	2300      	movs	r3, #0
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	4b11      	ldr	r3, [pc, #68]	; (8005308 <prvCheckForValidListAndQueue+0x74>)
 80052c4:	4a11      	ldr	r2, [pc, #68]	; (800530c <prvCheckForValidListAndQueue+0x78>)
 80052c6:	2110      	movs	r1, #16
 80052c8:	200a      	movs	r0, #10
 80052ca:	f7fe f92f 	bl	800352c <xQueueGenericCreateStatic>
 80052ce:	4603      	mov	r3, r0
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <prvCheckForValidListAndQueue+0x60>)
 80052d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052d4:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <prvCheckForValidListAndQueue+0x60>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052dc:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <prvCheckForValidListAndQueue+0x60>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	490b      	ldr	r1, [pc, #44]	; (8005310 <prvCheckForValidListAndQueue+0x7c>)
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fe fda0 	bl	8003e28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052e8:	f000 f974 	bl	80055d4 <vPortExitCritical>
}
 80052ec:	bf00      	nop
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000d50 	.word	0x20000d50
 80052f8:	20000d20 	.word	0x20000d20
 80052fc:	20000d34 	.word	0x20000d34
 8005300:	20000d48 	.word	0x20000d48
 8005304:	20000d4c 	.word	0x20000d4c
 8005308:	20000dfc 	.word	0x20000dfc
 800530c:	20000d5c 	.word	0x20000d5c
 8005310:	080065d8 	.word	0x080065d8

08005314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3b04      	subs	r3, #4
 8005324:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800532c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3b04      	subs	r3, #4
 8005332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f023 0201 	bic.w	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3b04      	subs	r3, #4
 8005342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005344:	4a0c      	ldr	r2, [pc, #48]	; (8005378 <pxPortInitialiseStack+0x64>)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3b14      	subs	r3, #20
 800534e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3b04      	subs	r3, #4
 800535a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f06f 0202 	mvn.w	r2, #2
 8005362:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3b20      	subs	r3, #32
 8005368:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800536a:	68fb      	ldr	r3, [r7, #12]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	0800537d 	.word	0x0800537d

0800537c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005386:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <prvTaskExitError+0x54>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d00a      	beq.n	80053a6 <prvTaskExitError+0x2a>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60fb      	str	r3, [r7, #12]
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <prvTaskExitError+0x28>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	60bb      	str	r3, [r7, #8]
}
 80053b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053ba:	bf00      	nop
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0fc      	beq.n	80053bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	2000000c 	.word	0x2000000c
	...

080053e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053e0:	4b07      	ldr	r3, [pc, #28]	; (8005400 <pxCurrentTCBConst2>)
 80053e2:	6819      	ldr	r1, [r3, #0]
 80053e4:	6808      	ldr	r0, [r1, #0]
 80053e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ea:	f380 8809 	msr	PSP, r0
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8811 	msr	BASEPRI, r0
 80053fa:	4770      	bx	lr
 80053fc:	f3af 8000 	nop.w

08005400 <pxCurrentTCBConst2>:
 8005400:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop

08005408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005408:	4808      	ldr	r0, [pc, #32]	; (800542c <prvPortStartFirstTask+0x24>)
 800540a:	6800      	ldr	r0, [r0, #0]
 800540c:	6800      	ldr	r0, [r0, #0]
 800540e:	f380 8808 	msr	MSP, r0
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f380 8814 	msr	CONTROL, r0
 800541a:	b662      	cpsie	i
 800541c:	b661      	cpsie	f
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	df00      	svc	0
 8005428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800542a:	bf00      	nop
 800542c:	e000ed08 	.word	0xe000ed08

08005430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005436:	4b46      	ldr	r3, [pc, #280]	; (8005550 <xPortStartScheduler+0x120>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a46      	ldr	r2, [pc, #280]	; (8005554 <xPortStartScheduler+0x124>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d10a      	bne.n	8005456 <xPortStartScheduler+0x26>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	613b      	str	r3, [r7, #16]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005456:	4b3e      	ldr	r3, [pc, #248]	; (8005550 <xPortStartScheduler+0x120>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a3f      	ldr	r2, [pc, #252]	; (8005558 <xPortStartScheduler+0x128>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10a      	bne.n	8005476 <xPortStartScheduler+0x46>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60fb      	str	r3, [r7, #12]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005476:	4b39      	ldr	r3, [pc, #228]	; (800555c <xPortStartScheduler+0x12c>)
 8005478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	22ff      	movs	r2, #255	; 0xff
 8005486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005498:	b2da      	uxtb	r2, r3
 800549a:	4b31      	ldr	r3, [pc, #196]	; (8005560 <xPortStartScheduler+0x130>)
 800549c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800549e:	4b31      	ldr	r3, [pc, #196]	; (8005564 <xPortStartScheduler+0x134>)
 80054a0:	2207      	movs	r2, #7
 80054a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054a4:	e009      	b.n	80054ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80054a6:	4b2f      	ldr	r3, [pc, #188]	; (8005564 <xPortStartScheduler+0x134>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	4a2d      	ldr	r2, [pc, #180]	; (8005564 <xPortStartScheduler+0x134>)
 80054ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d0ef      	beq.n	80054a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054c6:	4b27      	ldr	r3, [pc, #156]	; (8005564 <xPortStartScheduler+0x134>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f1c3 0307 	rsb	r3, r3, #7
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d00a      	beq.n	80054e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60bb      	str	r3, [r7, #8]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054e8:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <xPortStartScheduler+0x134>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <xPortStartScheduler+0x134>)
 80054f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054f2:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <xPortStartScheduler+0x134>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054fa:	4a1a      	ldr	r2, [pc, #104]	; (8005564 <xPortStartScheduler+0x134>)
 80054fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005506:	4b18      	ldr	r3, [pc, #96]	; (8005568 <xPortStartScheduler+0x138>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a17      	ldr	r2, [pc, #92]	; (8005568 <xPortStartScheduler+0x138>)
 800550c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <xPortStartScheduler+0x138>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a14      	ldr	r2, [pc, #80]	; (8005568 <xPortStartScheduler+0x138>)
 8005518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800551c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800551e:	f000 f8dd 	bl	80056dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <xPortStartScheduler+0x13c>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005528:	f000 f8fc 	bl	8005724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800552c:	4b10      	ldr	r3, [pc, #64]	; (8005570 <xPortStartScheduler+0x140>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0f      	ldr	r2, [pc, #60]	; (8005570 <xPortStartScheduler+0x140>)
 8005532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005538:	f7ff ff66 	bl	8005408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800553c:	f7ff f850 	bl	80045e0 <vTaskSwitchContext>
	prvTaskExitError();
 8005540:	f7ff ff1c 	bl	800537c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	e000ed00 	.word	0xe000ed00
 8005554:	410fc271 	.word	0x410fc271
 8005558:	410fc270 	.word	0x410fc270
 800555c:	e000e400 	.word	0xe000e400
 8005560:	20000e4c 	.word	0x20000e4c
 8005564:	20000e50 	.word	0x20000e50
 8005568:	e000ed20 	.word	0xe000ed20
 800556c:	2000000c 	.word	0x2000000c
 8005570:	e000ef34 	.word	0xe000ef34

08005574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	607b      	str	r3, [r7, #4]
}
 800558c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800558e:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <vPortEnterCritical+0x58>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	4a0d      	ldr	r2, [pc, #52]	; (80055cc <vPortEnterCritical+0x58>)
 8005596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005598:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <vPortEnterCritical+0x58>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d10f      	bne.n	80055c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <vPortEnterCritical+0x5c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	603b      	str	r3, [r7, #0]
}
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <vPortEnterCritical+0x4a>
	}
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	2000000c 	.word	0x2000000c
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055da:	4b12      	ldr	r3, [pc, #72]	; (8005624 <vPortExitCritical+0x50>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <vPortExitCritical+0x24>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	607b      	str	r3, [r7, #4]
}
 80055f4:	bf00      	nop
 80055f6:	e7fe      	b.n	80055f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <vPortExitCritical+0x50>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	4a09      	ldr	r2, [pc, #36]	; (8005624 <vPortExitCritical+0x50>)
 8005600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005602:	4b08      	ldr	r3, [pc, #32]	; (8005624 <vPortExitCritical+0x50>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d105      	bne.n	8005616 <vPortExitCritical+0x42>
 800560a:	2300      	movs	r3, #0
 800560c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	f383 8811 	msr	BASEPRI, r3
}
 8005614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	2000000c 	.word	0x2000000c
	...

08005630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005630:	f3ef 8009 	mrs	r0, PSP
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	4b15      	ldr	r3, [pc, #84]	; (8005690 <pxCurrentTCBConst>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	f01e 0f10 	tst.w	lr, #16
 8005640:	bf08      	it	eq
 8005642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564a:	6010      	str	r0, [r2, #0]
 800564c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005654:	f380 8811 	msr	BASEPRI, r0
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f7fe ffbe 	bl	80045e0 <vTaskSwitchContext>
 8005664:	f04f 0000 	mov.w	r0, #0
 8005668:	f380 8811 	msr	BASEPRI, r0
 800566c:	bc09      	pop	{r0, r3}
 800566e:	6819      	ldr	r1, [r3, #0]
 8005670:	6808      	ldr	r0, [r1, #0]
 8005672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005676:	f01e 0f10 	tst.w	lr, #16
 800567a:	bf08      	it	eq
 800567c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005680:	f380 8809 	msr	PSP, r0
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	f3af 8000 	nop.w

08005690 <pxCurrentTCBConst>:
 8005690:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop

08005698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	607b      	str	r3, [r7, #4]
}
 80056b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056b2:	f7fe fedb 	bl	800446c <xTaskIncrementTick>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <xPortSysTickHandler+0x40>)
 80056be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	2300      	movs	r3, #0
 80056c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f383 8811 	msr	BASEPRI, r3
}
 80056ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <vPortSetupTimerInterrupt+0x34>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <vPortSetupTimerInterrupt+0x38>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <vPortSetupTimerInterrupt+0x3c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a0a      	ldr	r2, [pc, #40]	; (800571c <vPortSetupTimerInterrupt+0x40>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	099b      	lsrs	r3, r3, #6
 80056f8:	4a09      	ldr	r2, [pc, #36]	; (8005720 <vPortSetupTimerInterrupt+0x44>)
 80056fa:	3b01      	subs	r3, #1
 80056fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056fe:	4b04      	ldr	r3, [pc, #16]	; (8005710 <vPortSetupTimerInterrupt+0x34>)
 8005700:	2207      	movs	r2, #7
 8005702:	601a      	str	r2, [r3, #0]
}
 8005704:	bf00      	nop
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	e000e010 	.word	0xe000e010
 8005714:	e000e018 	.word	0xe000e018
 8005718:	20000000 	.word	0x20000000
 800571c:	10624dd3 	.word	0x10624dd3
 8005720:	e000e014 	.word	0xe000e014

08005724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005734 <vPortEnableVFP+0x10>
 8005728:	6801      	ldr	r1, [r0, #0]
 800572a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800572e:	6001      	str	r1, [r0, #0]
 8005730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005732:	bf00      	nop
 8005734:	e000ed88 	.word	0xe000ed88

08005738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800573e:	f3ef 8305 	mrs	r3, IPSR
 8005742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b0f      	cmp	r3, #15
 8005748:	d914      	bls.n	8005774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <vPortValidateInterruptPriority+0x70>)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005754:	4b15      	ldr	r3, [pc, #84]	; (80057ac <vPortValidateInterruptPriority+0x74>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	7afa      	ldrb	r2, [r7, #11]
 800575a:	429a      	cmp	r2, r3
 800575c:	d20a      	bcs.n	8005774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	607b      	str	r3, [r7, #4]
}
 8005770:	bf00      	nop
 8005772:	e7fe      	b.n	8005772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005774:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <vPortValidateInterruptPriority+0x78>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800577c:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <vPortValidateInterruptPriority+0x7c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d90a      	bls.n	800579a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	603b      	str	r3, [r7, #0]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <vPortValidateInterruptPriority+0x60>
	}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	e000e3f0 	.word	0xe000e3f0
 80057ac:	20000e4c 	.word	0x20000e4c
 80057b0:	e000ed0c 	.word	0xe000ed0c
 80057b4:	20000e50 	.word	0x20000e50

080057b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	; 0x28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057c4:	f7fe fd96 	bl	80042f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057c8:	4b5b      	ldr	r3, [pc, #364]	; (8005938 <pvPortMalloc+0x180>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057d0:	f000 f920 	bl	8005a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057d4:	4b59      	ldr	r3, [pc, #356]	; (800593c <pvPortMalloc+0x184>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4013      	ands	r3, r2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f040 8093 	bne.w	8005908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01d      	beq.n	8005824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057e8:	2208      	movs	r2, #8
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d014      	beq.n	8005824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f023 0307 	bic.w	r3, r3, #7
 8005800:	3308      	adds	r3, #8
 8005802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <pvPortMalloc+0x6c>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	617b      	str	r3, [r7, #20]
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d06e      	beq.n	8005908 <pvPortMalloc+0x150>
 800582a:	4b45      	ldr	r3, [pc, #276]	; (8005940 <pvPortMalloc+0x188>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	429a      	cmp	r2, r3
 8005832:	d869      	bhi.n	8005908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005834:	4b43      	ldr	r3, [pc, #268]	; (8005944 <pvPortMalloc+0x18c>)
 8005836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005838:	4b42      	ldr	r3, [pc, #264]	; (8005944 <pvPortMalloc+0x18c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800583e:	e004      	b.n	800584a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	429a      	cmp	r2, r3
 8005852:	d903      	bls.n	800585c <pvPortMalloc+0xa4>
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f1      	bne.n	8005840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800585c:	4b36      	ldr	r3, [pc, #216]	; (8005938 <pvPortMalloc+0x180>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005862:	429a      	cmp	r2, r3
 8005864:	d050      	beq.n	8005908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2208      	movs	r2, #8
 800586c:	4413      	add	r3, r2
 800586e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	1ad2      	subs	r2, r2, r3
 8005880:	2308      	movs	r3, #8
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	429a      	cmp	r2, r3
 8005886:	d91f      	bls.n	80058c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <pvPortMalloc+0xf8>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	613b      	str	r3, [r7, #16]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	1ad2      	subs	r2, r2, r3
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058c2:	69b8      	ldr	r0, [r7, #24]
 80058c4:	f000 f908 	bl	8005ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058c8:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <pvPortMalloc+0x188>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	4a1b      	ldr	r2, [pc, #108]	; (8005940 <pvPortMalloc+0x188>)
 80058d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058d6:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <pvPortMalloc+0x188>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b1b      	ldr	r3, [pc, #108]	; (8005948 <pvPortMalloc+0x190>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d203      	bcs.n	80058ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058e2:	4b17      	ldr	r3, [pc, #92]	; (8005940 <pvPortMalloc+0x188>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a18      	ldr	r2, [pc, #96]	; (8005948 <pvPortMalloc+0x190>)
 80058e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	4b13      	ldr	r3, [pc, #76]	; (800593c <pvPortMalloc+0x184>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058fe:	4b13      	ldr	r3, [pc, #76]	; (800594c <pvPortMalloc+0x194>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	4a11      	ldr	r2, [pc, #68]	; (800594c <pvPortMalloc+0x194>)
 8005906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005908:	f7fe fd02 	bl	8004310 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <pvPortMalloc+0x174>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	60fb      	str	r3, [r7, #12]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <pvPortMalloc+0x172>
	return pvReturn;
 800592c:	69fb      	ldr	r3, [r7, #28]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3728      	adds	r7, #40	; 0x28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20004a5c 	.word	0x20004a5c
 800593c:	20004a70 	.word	0x20004a70
 8005940:	20004a60 	.word	0x20004a60
 8005944:	20004a54 	.word	0x20004a54
 8005948:	20004a64 	.word	0x20004a64
 800594c:	20004a68 	.word	0x20004a68

08005950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d04d      	beq.n	80059fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005962:	2308      	movs	r3, #8
 8005964:	425b      	negs	r3, r3
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4413      	add	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	4b24      	ldr	r3, [pc, #144]	; (8005a08 <vPortFree+0xb8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <vPortFree+0x44>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	60fb      	str	r3, [r7, #12]
}
 8005990:	bf00      	nop
 8005992:	e7fe      	b.n	8005992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <vPortFree+0x62>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	60bb      	str	r3, [r7, #8]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <vPortFree+0xb8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01e      	beq.n	80059fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d11a      	bne.n	80059fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <vPortFree+0xb8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	43db      	mvns	r3, r3
 80059d2:	401a      	ands	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059d8:	f7fe fc8c 	bl	80042f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <vPortFree+0xbc>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4413      	add	r3, r2
 80059e6:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <vPortFree+0xbc>)
 80059e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059ea:	6938      	ldr	r0, [r7, #16]
 80059ec:	f000 f874 	bl	8005ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <vPortFree+0xc0>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3301      	adds	r3, #1
 80059f6:	4a06      	ldr	r2, [pc, #24]	; (8005a10 <vPortFree+0xc0>)
 80059f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059fa:	f7fe fc89 	bl	8004310 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20004a70 	.word	0x20004a70
 8005a0c:	20004a60 	.word	0x20004a60
 8005a10:	20004a6c 	.word	0x20004a6c

08005a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a20:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <prvHeapInit+0xac>)
 8005a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00c      	beq.n	8005a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3307      	adds	r3, #7
 8005a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0307 	bic.w	r3, r3, #7
 8005a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	4a1f      	ldr	r2, [pc, #124]	; (8005ac0 <prvHeapInit+0xac>)
 8005a44:	4413      	add	r3, r2
 8005a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <prvHeapInit+0xb0>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a52:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <prvHeapInit+0xb0>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a60:	2208      	movs	r2, #8
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1a9b      	subs	r3, r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0307 	bic.w	r3, r3, #7
 8005a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a76:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a7e:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	1ad2      	subs	r2, r2, r3
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <prvHeapInit+0xb8>)
 8005aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <prvHeapInit+0xbc>)
 8005aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005aac:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <prvHeapInit+0xc0>)
 8005aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ab2:	601a      	str	r2, [r3, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	20000e54 	.word	0x20000e54
 8005ac4:	20004a54 	.word	0x20004a54
 8005ac8:	20004a5c 	.word	0x20004a5c
 8005acc:	20004a64 	.word	0x20004a64
 8005ad0:	20004a60 	.word	0x20004a60
 8005ad4:	20004a70 	.word	0x20004a70

08005ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ae0:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <prvInsertBlockIntoFreeList+0xac>)
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	e002      	b.n	8005aec <prvInsertBlockIntoFreeList+0x14>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d8f7      	bhi.n	8005ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4413      	add	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d108      	bne.n	8005b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	441a      	add	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d118      	bne.n	8005b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <prvInsertBlockIntoFreeList+0xb0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d00d      	beq.n	8005b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	441a      	add	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	e008      	b.n	8005b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b56:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <prvInsertBlockIntoFreeList+0xb0>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	e003      	b.n	8005b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d002      	beq.n	8005b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20004a54 	.word	0x20004a54
 8005b88:	20004a5c 	.word	0x20004a5c

08005b8c <__errno>:
 8005b8c:	4b01      	ldr	r3, [pc, #4]	; (8005b94 <__errno+0x8>)
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	20000010 	.word	0x20000010

08005b98 <__libc_init_array>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	4d0d      	ldr	r5, [pc, #52]	; (8005bd0 <__libc_init_array+0x38>)
 8005b9c:	4c0d      	ldr	r4, [pc, #52]	; (8005bd4 <__libc_init_array+0x3c>)
 8005b9e:	1b64      	subs	r4, r4, r5
 8005ba0:	10a4      	asrs	r4, r4, #2
 8005ba2:	2600      	movs	r6, #0
 8005ba4:	42a6      	cmp	r6, r4
 8005ba6:	d109      	bne.n	8005bbc <__libc_init_array+0x24>
 8005ba8:	4d0b      	ldr	r5, [pc, #44]	; (8005bd8 <__libc_init_array+0x40>)
 8005baa:	4c0c      	ldr	r4, [pc, #48]	; (8005bdc <__libc_init_array+0x44>)
 8005bac:	f000 fc8e 	bl	80064cc <_init>
 8005bb0:	1b64      	subs	r4, r4, r5
 8005bb2:	10a4      	asrs	r4, r4, #2
 8005bb4:	2600      	movs	r6, #0
 8005bb6:	42a6      	cmp	r6, r4
 8005bb8:	d105      	bne.n	8005bc6 <__libc_init_array+0x2e>
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc0:	4798      	blx	r3
 8005bc2:	3601      	adds	r6, #1
 8005bc4:	e7ee      	b.n	8005ba4 <__libc_init_array+0xc>
 8005bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bca:	4798      	blx	r3
 8005bcc:	3601      	adds	r6, #1
 8005bce:	e7f2      	b.n	8005bb6 <__libc_init_array+0x1e>
 8005bd0:	08006638 	.word	0x08006638
 8005bd4:	08006638 	.word	0x08006638
 8005bd8:	08006638 	.word	0x08006638
 8005bdc:	0800663c 	.word	0x0800663c

08005be0 <memcpy>:
 8005be0:	440a      	add	r2, r1
 8005be2:	4291      	cmp	r1, r2
 8005be4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005be8:	d100      	bne.n	8005bec <memcpy+0xc>
 8005bea:	4770      	bx	lr
 8005bec:	b510      	push	{r4, lr}
 8005bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bf6:	4291      	cmp	r1, r2
 8005bf8:	d1f9      	bne.n	8005bee <memcpy+0xe>
 8005bfa:	bd10      	pop	{r4, pc}

08005bfc <memset>:
 8005bfc:	4402      	add	r2, r0
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d100      	bne.n	8005c06 <memset+0xa>
 8005c04:	4770      	bx	lr
 8005c06:	f803 1b01 	strb.w	r1, [r3], #1
 8005c0a:	e7f9      	b.n	8005c00 <memset+0x4>

08005c0c <siprintf>:
 8005c0c:	b40e      	push	{r1, r2, r3}
 8005c0e:	b500      	push	{lr}
 8005c10:	b09c      	sub	sp, #112	; 0x70
 8005c12:	ab1d      	add	r3, sp, #116	; 0x74
 8005c14:	9002      	str	r0, [sp, #8]
 8005c16:	9006      	str	r0, [sp, #24]
 8005c18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c1c:	4809      	ldr	r0, [pc, #36]	; (8005c44 <siprintf+0x38>)
 8005c1e:	9107      	str	r1, [sp, #28]
 8005c20:	9104      	str	r1, [sp, #16]
 8005c22:	4909      	ldr	r1, [pc, #36]	; (8005c48 <siprintf+0x3c>)
 8005c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c28:	9105      	str	r1, [sp, #20]
 8005c2a:	6800      	ldr	r0, [r0, #0]
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	a902      	add	r1, sp, #8
 8005c30:	f000 f868 	bl	8005d04 <_svfiprintf_r>
 8005c34:	9b02      	ldr	r3, [sp, #8]
 8005c36:	2200      	movs	r2, #0
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	b01c      	add	sp, #112	; 0x70
 8005c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c40:	b003      	add	sp, #12
 8005c42:	4770      	bx	lr
 8005c44:	20000010 	.word	0x20000010
 8005c48:	ffff0208 	.word	0xffff0208

08005c4c <__ssputs_r>:
 8005c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c50:	688e      	ldr	r6, [r1, #8]
 8005c52:	429e      	cmp	r6, r3
 8005c54:	4682      	mov	sl, r0
 8005c56:	460c      	mov	r4, r1
 8005c58:	4690      	mov	r8, r2
 8005c5a:	461f      	mov	r7, r3
 8005c5c:	d838      	bhi.n	8005cd0 <__ssputs_r+0x84>
 8005c5e:	898a      	ldrh	r2, [r1, #12]
 8005c60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c64:	d032      	beq.n	8005ccc <__ssputs_r+0x80>
 8005c66:	6825      	ldr	r5, [r4, #0]
 8005c68:	6909      	ldr	r1, [r1, #16]
 8005c6a:	eba5 0901 	sub.w	r9, r5, r1
 8005c6e:	6965      	ldr	r5, [r4, #20]
 8005c70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c78:	3301      	adds	r3, #1
 8005c7a:	444b      	add	r3, r9
 8005c7c:	106d      	asrs	r5, r5, #1
 8005c7e:	429d      	cmp	r5, r3
 8005c80:	bf38      	it	cc
 8005c82:	461d      	movcc	r5, r3
 8005c84:	0553      	lsls	r3, r2, #21
 8005c86:	d531      	bpl.n	8005cec <__ssputs_r+0xa0>
 8005c88:	4629      	mov	r1, r5
 8005c8a:	f000 fb55 	bl	8006338 <_malloc_r>
 8005c8e:	4606      	mov	r6, r0
 8005c90:	b950      	cbnz	r0, 8005ca8 <__ssputs_r+0x5c>
 8005c92:	230c      	movs	r3, #12
 8005c94:	f8ca 3000 	str.w	r3, [sl]
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c9e:	81a3      	strh	r3, [r4, #12]
 8005ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca8:	6921      	ldr	r1, [r4, #16]
 8005caa:	464a      	mov	r2, r9
 8005cac:	f7ff ff98 	bl	8005be0 <memcpy>
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cba:	81a3      	strh	r3, [r4, #12]
 8005cbc:	6126      	str	r6, [r4, #16]
 8005cbe:	6165      	str	r5, [r4, #20]
 8005cc0:	444e      	add	r6, r9
 8005cc2:	eba5 0509 	sub.w	r5, r5, r9
 8005cc6:	6026      	str	r6, [r4, #0]
 8005cc8:	60a5      	str	r5, [r4, #8]
 8005cca:	463e      	mov	r6, r7
 8005ccc:	42be      	cmp	r6, r7
 8005cce:	d900      	bls.n	8005cd2 <__ssputs_r+0x86>
 8005cd0:	463e      	mov	r6, r7
 8005cd2:	6820      	ldr	r0, [r4, #0]
 8005cd4:	4632      	mov	r2, r6
 8005cd6:	4641      	mov	r1, r8
 8005cd8:	f000 faa8 	bl	800622c <memmove>
 8005cdc:	68a3      	ldr	r3, [r4, #8]
 8005cde:	1b9b      	subs	r3, r3, r6
 8005ce0:	60a3      	str	r3, [r4, #8]
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	4433      	add	r3, r6
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	2000      	movs	r0, #0
 8005cea:	e7db      	b.n	8005ca4 <__ssputs_r+0x58>
 8005cec:	462a      	mov	r2, r5
 8005cee:	f000 fb97 	bl	8006420 <_realloc_r>
 8005cf2:	4606      	mov	r6, r0
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d1e1      	bne.n	8005cbc <__ssputs_r+0x70>
 8005cf8:	6921      	ldr	r1, [r4, #16]
 8005cfa:	4650      	mov	r0, sl
 8005cfc:	f000 fab0 	bl	8006260 <_free_r>
 8005d00:	e7c7      	b.n	8005c92 <__ssputs_r+0x46>
	...

08005d04 <_svfiprintf_r>:
 8005d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d08:	4698      	mov	r8, r3
 8005d0a:	898b      	ldrh	r3, [r1, #12]
 8005d0c:	061b      	lsls	r3, r3, #24
 8005d0e:	b09d      	sub	sp, #116	; 0x74
 8005d10:	4607      	mov	r7, r0
 8005d12:	460d      	mov	r5, r1
 8005d14:	4614      	mov	r4, r2
 8005d16:	d50e      	bpl.n	8005d36 <_svfiprintf_r+0x32>
 8005d18:	690b      	ldr	r3, [r1, #16]
 8005d1a:	b963      	cbnz	r3, 8005d36 <_svfiprintf_r+0x32>
 8005d1c:	2140      	movs	r1, #64	; 0x40
 8005d1e:	f000 fb0b 	bl	8006338 <_malloc_r>
 8005d22:	6028      	str	r0, [r5, #0]
 8005d24:	6128      	str	r0, [r5, #16]
 8005d26:	b920      	cbnz	r0, 8005d32 <_svfiprintf_r+0x2e>
 8005d28:	230c      	movs	r3, #12
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	e0d1      	b.n	8005ed6 <_svfiprintf_r+0x1d2>
 8005d32:	2340      	movs	r3, #64	; 0x40
 8005d34:	616b      	str	r3, [r5, #20]
 8005d36:	2300      	movs	r3, #0
 8005d38:	9309      	str	r3, [sp, #36]	; 0x24
 8005d3a:	2320      	movs	r3, #32
 8005d3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d40:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d44:	2330      	movs	r3, #48	; 0x30
 8005d46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ef0 <_svfiprintf_r+0x1ec>
 8005d4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d4e:	f04f 0901 	mov.w	r9, #1
 8005d52:	4623      	mov	r3, r4
 8005d54:	469a      	mov	sl, r3
 8005d56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d5a:	b10a      	cbz	r2, 8005d60 <_svfiprintf_r+0x5c>
 8005d5c:	2a25      	cmp	r2, #37	; 0x25
 8005d5e:	d1f9      	bne.n	8005d54 <_svfiprintf_r+0x50>
 8005d60:	ebba 0b04 	subs.w	fp, sl, r4
 8005d64:	d00b      	beq.n	8005d7e <_svfiprintf_r+0x7a>
 8005d66:	465b      	mov	r3, fp
 8005d68:	4622      	mov	r2, r4
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	4638      	mov	r0, r7
 8005d6e:	f7ff ff6d 	bl	8005c4c <__ssputs_r>
 8005d72:	3001      	adds	r0, #1
 8005d74:	f000 80aa 	beq.w	8005ecc <_svfiprintf_r+0x1c8>
 8005d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d7a:	445a      	add	r2, fp
 8005d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 80a2 	beq.w	8005ecc <_svfiprintf_r+0x1c8>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d92:	f10a 0a01 	add.w	sl, sl, #1
 8005d96:	9304      	str	r3, [sp, #16]
 8005d98:	9307      	str	r3, [sp, #28]
 8005d9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d9e:	931a      	str	r3, [sp, #104]	; 0x68
 8005da0:	4654      	mov	r4, sl
 8005da2:	2205      	movs	r2, #5
 8005da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da8:	4851      	ldr	r0, [pc, #324]	; (8005ef0 <_svfiprintf_r+0x1ec>)
 8005daa:	f7fa fa19 	bl	80001e0 <memchr>
 8005dae:	9a04      	ldr	r2, [sp, #16]
 8005db0:	b9d8      	cbnz	r0, 8005dea <_svfiprintf_r+0xe6>
 8005db2:	06d0      	lsls	r0, r2, #27
 8005db4:	bf44      	itt	mi
 8005db6:	2320      	movmi	r3, #32
 8005db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dbc:	0711      	lsls	r1, r2, #28
 8005dbe:	bf44      	itt	mi
 8005dc0:	232b      	movmi	r3, #43	; 0x2b
 8005dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dca:	2b2a      	cmp	r3, #42	; 0x2a
 8005dcc:	d015      	beq.n	8005dfa <_svfiprintf_r+0xf6>
 8005dce:	9a07      	ldr	r2, [sp, #28]
 8005dd0:	4654      	mov	r4, sl
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	f04f 0c0a 	mov.w	ip, #10
 8005dd8:	4621      	mov	r1, r4
 8005dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dde:	3b30      	subs	r3, #48	; 0x30
 8005de0:	2b09      	cmp	r3, #9
 8005de2:	d94e      	bls.n	8005e82 <_svfiprintf_r+0x17e>
 8005de4:	b1b0      	cbz	r0, 8005e14 <_svfiprintf_r+0x110>
 8005de6:	9207      	str	r2, [sp, #28]
 8005de8:	e014      	b.n	8005e14 <_svfiprintf_r+0x110>
 8005dea:	eba0 0308 	sub.w	r3, r0, r8
 8005dee:	fa09 f303 	lsl.w	r3, r9, r3
 8005df2:	4313      	orrs	r3, r2
 8005df4:	9304      	str	r3, [sp, #16]
 8005df6:	46a2      	mov	sl, r4
 8005df8:	e7d2      	b.n	8005da0 <_svfiprintf_r+0x9c>
 8005dfa:	9b03      	ldr	r3, [sp, #12]
 8005dfc:	1d19      	adds	r1, r3, #4
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	9103      	str	r1, [sp, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	bfbb      	ittet	lt
 8005e06:	425b      	neglt	r3, r3
 8005e08:	f042 0202 	orrlt.w	r2, r2, #2
 8005e0c:	9307      	strge	r3, [sp, #28]
 8005e0e:	9307      	strlt	r3, [sp, #28]
 8005e10:	bfb8      	it	lt
 8005e12:	9204      	strlt	r2, [sp, #16]
 8005e14:	7823      	ldrb	r3, [r4, #0]
 8005e16:	2b2e      	cmp	r3, #46	; 0x2e
 8005e18:	d10c      	bne.n	8005e34 <_svfiprintf_r+0x130>
 8005e1a:	7863      	ldrb	r3, [r4, #1]
 8005e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e1e:	d135      	bne.n	8005e8c <_svfiprintf_r+0x188>
 8005e20:	9b03      	ldr	r3, [sp, #12]
 8005e22:	1d1a      	adds	r2, r3, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	9203      	str	r2, [sp, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	bfb8      	it	lt
 8005e2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e30:	3402      	adds	r4, #2
 8005e32:	9305      	str	r3, [sp, #20]
 8005e34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f00 <_svfiprintf_r+0x1fc>
 8005e38:	7821      	ldrb	r1, [r4, #0]
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	4650      	mov	r0, sl
 8005e3e:	f7fa f9cf 	bl	80001e0 <memchr>
 8005e42:	b140      	cbz	r0, 8005e56 <_svfiprintf_r+0x152>
 8005e44:	2340      	movs	r3, #64	; 0x40
 8005e46:	eba0 000a 	sub.w	r0, r0, sl
 8005e4a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e4e:	9b04      	ldr	r3, [sp, #16]
 8005e50:	4303      	orrs	r3, r0
 8005e52:	3401      	adds	r4, #1
 8005e54:	9304      	str	r3, [sp, #16]
 8005e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e5a:	4826      	ldr	r0, [pc, #152]	; (8005ef4 <_svfiprintf_r+0x1f0>)
 8005e5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e60:	2206      	movs	r2, #6
 8005e62:	f7fa f9bd 	bl	80001e0 <memchr>
 8005e66:	2800      	cmp	r0, #0
 8005e68:	d038      	beq.n	8005edc <_svfiprintf_r+0x1d8>
 8005e6a:	4b23      	ldr	r3, [pc, #140]	; (8005ef8 <_svfiprintf_r+0x1f4>)
 8005e6c:	bb1b      	cbnz	r3, 8005eb6 <_svfiprintf_r+0x1b2>
 8005e6e:	9b03      	ldr	r3, [sp, #12]
 8005e70:	3307      	adds	r3, #7
 8005e72:	f023 0307 	bic.w	r3, r3, #7
 8005e76:	3308      	adds	r3, #8
 8005e78:	9303      	str	r3, [sp, #12]
 8005e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e7c:	4433      	add	r3, r6
 8005e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e80:	e767      	b.n	8005d52 <_svfiprintf_r+0x4e>
 8005e82:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e86:	460c      	mov	r4, r1
 8005e88:	2001      	movs	r0, #1
 8005e8a:	e7a5      	b.n	8005dd8 <_svfiprintf_r+0xd4>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	3401      	adds	r4, #1
 8005e90:	9305      	str	r3, [sp, #20]
 8005e92:	4619      	mov	r1, r3
 8005e94:	f04f 0c0a 	mov.w	ip, #10
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e9e:	3a30      	subs	r2, #48	; 0x30
 8005ea0:	2a09      	cmp	r2, #9
 8005ea2:	d903      	bls.n	8005eac <_svfiprintf_r+0x1a8>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0c5      	beq.n	8005e34 <_svfiprintf_r+0x130>
 8005ea8:	9105      	str	r1, [sp, #20]
 8005eaa:	e7c3      	b.n	8005e34 <_svfiprintf_r+0x130>
 8005eac:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e7f0      	b.n	8005e98 <_svfiprintf_r+0x194>
 8005eb6:	ab03      	add	r3, sp, #12
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	462a      	mov	r2, r5
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <_svfiprintf_r+0x1f8>)
 8005ebe:	a904      	add	r1, sp, #16
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	f3af 8000 	nop.w
 8005ec6:	1c42      	adds	r2, r0, #1
 8005ec8:	4606      	mov	r6, r0
 8005eca:	d1d6      	bne.n	8005e7a <_svfiprintf_r+0x176>
 8005ecc:	89ab      	ldrh	r3, [r5, #12]
 8005ece:	065b      	lsls	r3, r3, #25
 8005ed0:	f53f af2c 	bmi.w	8005d2c <_svfiprintf_r+0x28>
 8005ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ed6:	b01d      	add	sp, #116	; 0x74
 8005ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005edc:	ab03      	add	r3, sp, #12
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	462a      	mov	r2, r5
 8005ee2:	4b06      	ldr	r3, [pc, #24]	; (8005efc <_svfiprintf_r+0x1f8>)
 8005ee4:	a904      	add	r1, sp, #16
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	f000 f87a 	bl	8005fe0 <_printf_i>
 8005eec:	e7eb      	b.n	8005ec6 <_svfiprintf_r+0x1c2>
 8005eee:	bf00      	nop
 8005ef0:	080065fc 	.word	0x080065fc
 8005ef4:	08006606 	.word	0x08006606
 8005ef8:	00000000 	.word	0x00000000
 8005efc:	08005c4d 	.word	0x08005c4d
 8005f00:	08006602 	.word	0x08006602

08005f04 <_printf_common>:
 8005f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	4616      	mov	r6, r2
 8005f0a:	4699      	mov	r9, r3
 8005f0c:	688a      	ldr	r2, [r1, #8]
 8005f0e:	690b      	ldr	r3, [r1, #16]
 8005f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f14:	4293      	cmp	r3, r2
 8005f16:	bfb8      	it	lt
 8005f18:	4613      	movlt	r3, r2
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f20:	4607      	mov	r7, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	b10a      	cbz	r2, 8005f2a <_printf_common+0x26>
 8005f26:	3301      	adds	r3, #1
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	0699      	lsls	r1, r3, #26
 8005f2e:	bf42      	ittt	mi
 8005f30:	6833      	ldrmi	r3, [r6, #0]
 8005f32:	3302      	addmi	r3, #2
 8005f34:	6033      	strmi	r3, [r6, #0]
 8005f36:	6825      	ldr	r5, [r4, #0]
 8005f38:	f015 0506 	ands.w	r5, r5, #6
 8005f3c:	d106      	bne.n	8005f4c <_printf_common+0x48>
 8005f3e:	f104 0a19 	add.w	sl, r4, #25
 8005f42:	68e3      	ldr	r3, [r4, #12]
 8005f44:	6832      	ldr	r2, [r6, #0]
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	42ab      	cmp	r3, r5
 8005f4a:	dc26      	bgt.n	8005f9a <_printf_common+0x96>
 8005f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f50:	1e13      	subs	r3, r2, #0
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	bf18      	it	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	0692      	lsls	r2, r2, #26
 8005f5a:	d42b      	bmi.n	8005fb4 <_printf_common+0xb0>
 8005f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f60:	4649      	mov	r1, r9
 8005f62:	4638      	mov	r0, r7
 8005f64:	47c0      	blx	r8
 8005f66:	3001      	adds	r0, #1
 8005f68:	d01e      	beq.n	8005fa8 <_printf_common+0xa4>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	68e5      	ldr	r5, [r4, #12]
 8005f6e:	6832      	ldr	r2, [r6, #0]
 8005f70:	f003 0306 	and.w	r3, r3, #6
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	bf08      	it	eq
 8005f78:	1aad      	subeq	r5, r5, r2
 8005f7a:	68a3      	ldr	r3, [r4, #8]
 8005f7c:	6922      	ldr	r2, [r4, #16]
 8005f7e:	bf0c      	ite	eq
 8005f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f84:	2500      	movne	r5, #0
 8005f86:	4293      	cmp	r3, r2
 8005f88:	bfc4      	itt	gt
 8005f8a:	1a9b      	subgt	r3, r3, r2
 8005f8c:	18ed      	addgt	r5, r5, r3
 8005f8e:	2600      	movs	r6, #0
 8005f90:	341a      	adds	r4, #26
 8005f92:	42b5      	cmp	r5, r6
 8005f94:	d11a      	bne.n	8005fcc <_printf_common+0xc8>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e008      	b.n	8005fac <_printf_common+0xa8>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	4652      	mov	r2, sl
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	47c0      	blx	r8
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d103      	bne.n	8005fb0 <_printf_common+0xac>
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	e7c6      	b.n	8005f42 <_printf_common+0x3e>
 8005fb4:	18e1      	adds	r1, r4, r3
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	2030      	movs	r0, #48	; 0x30
 8005fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fbe:	4422      	add	r2, r4
 8005fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fc8:	3302      	adds	r3, #2
 8005fca:	e7c7      	b.n	8005f5c <_printf_common+0x58>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	4622      	mov	r2, r4
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	47c0      	blx	r8
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d0e6      	beq.n	8005fa8 <_printf_common+0xa4>
 8005fda:	3601      	adds	r6, #1
 8005fdc:	e7d9      	b.n	8005f92 <_printf_common+0x8e>
	...

08005fe0 <_printf_i>:
 8005fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	7e0f      	ldrb	r7, [r1, #24]
 8005fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fe8:	2f78      	cmp	r7, #120	; 0x78
 8005fea:	4691      	mov	r9, r2
 8005fec:	4680      	mov	r8, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	469a      	mov	sl, r3
 8005ff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ff6:	d807      	bhi.n	8006008 <_printf_i+0x28>
 8005ff8:	2f62      	cmp	r7, #98	; 0x62
 8005ffa:	d80a      	bhi.n	8006012 <_printf_i+0x32>
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	f000 80d8 	beq.w	80061b2 <_printf_i+0x1d2>
 8006002:	2f58      	cmp	r7, #88	; 0x58
 8006004:	f000 80a3 	beq.w	800614e <_printf_i+0x16e>
 8006008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800600c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006010:	e03a      	b.n	8006088 <_printf_i+0xa8>
 8006012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006016:	2b15      	cmp	r3, #21
 8006018:	d8f6      	bhi.n	8006008 <_printf_i+0x28>
 800601a:	a101      	add	r1, pc, #4	; (adr r1, 8006020 <_printf_i+0x40>)
 800601c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006020:	08006079 	.word	0x08006079
 8006024:	0800608d 	.word	0x0800608d
 8006028:	08006009 	.word	0x08006009
 800602c:	08006009 	.word	0x08006009
 8006030:	08006009 	.word	0x08006009
 8006034:	08006009 	.word	0x08006009
 8006038:	0800608d 	.word	0x0800608d
 800603c:	08006009 	.word	0x08006009
 8006040:	08006009 	.word	0x08006009
 8006044:	08006009 	.word	0x08006009
 8006048:	08006009 	.word	0x08006009
 800604c:	08006199 	.word	0x08006199
 8006050:	080060bd 	.word	0x080060bd
 8006054:	0800617b 	.word	0x0800617b
 8006058:	08006009 	.word	0x08006009
 800605c:	08006009 	.word	0x08006009
 8006060:	080061bb 	.word	0x080061bb
 8006064:	08006009 	.word	0x08006009
 8006068:	080060bd 	.word	0x080060bd
 800606c:	08006009 	.word	0x08006009
 8006070:	08006009 	.word	0x08006009
 8006074:	08006183 	.word	0x08006183
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	602a      	str	r2, [r5, #0]
 8006080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006088:	2301      	movs	r3, #1
 800608a:	e0a3      	b.n	80061d4 <_printf_i+0x1f4>
 800608c:	6820      	ldr	r0, [r4, #0]
 800608e:	6829      	ldr	r1, [r5, #0]
 8006090:	0606      	lsls	r6, r0, #24
 8006092:	f101 0304 	add.w	r3, r1, #4
 8006096:	d50a      	bpl.n	80060ae <_printf_i+0xce>
 8006098:	680e      	ldr	r6, [r1, #0]
 800609a:	602b      	str	r3, [r5, #0]
 800609c:	2e00      	cmp	r6, #0
 800609e:	da03      	bge.n	80060a8 <_printf_i+0xc8>
 80060a0:	232d      	movs	r3, #45	; 0x2d
 80060a2:	4276      	negs	r6, r6
 80060a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060a8:	485e      	ldr	r0, [pc, #376]	; (8006224 <_printf_i+0x244>)
 80060aa:	230a      	movs	r3, #10
 80060ac:	e019      	b.n	80060e2 <_printf_i+0x102>
 80060ae:	680e      	ldr	r6, [r1, #0]
 80060b0:	602b      	str	r3, [r5, #0]
 80060b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060b6:	bf18      	it	ne
 80060b8:	b236      	sxthne	r6, r6
 80060ba:	e7ef      	b.n	800609c <_printf_i+0xbc>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	6820      	ldr	r0, [r4, #0]
 80060c0:	1d19      	adds	r1, r3, #4
 80060c2:	6029      	str	r1, [r5, #0]
 80060c4:	0601      	lsls	r1, r0, #24
 80060c6:	d501      	bpl.n	80060cc <_printf_i+0xec>
 80060c8:	681e      	ldr	r6, [r3, #0]
 80060ca:	e002      	b.n	80060d2 <_printf_i+0xf2>
 80060cc:	0646      	lsls	r6, r0, #25
 80060ce:	d5fb      	bpl.n	80060c8 <_printf_i+0xe8>
 80060d0:	881e      	ldrh	r6, [r3, #0]
 80060d2:	4854      	ldr	r0, [pc, #336]	; (8006224 <_printf_i+0x244>)
 80060d4:	2f6f      	cmp	r7, #111	; 0x6f
 80060d6:	bf0c      	ite	eq
 80060d8:	2308      	moveq	r3, #8
 80060da:	230a      	movne	r3, #10
 80060dc:	2100      	movs	r1, #0
 80060de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060e2:	6865      	ldr	r5, [r4, #4]
 80060e4:	60a5      	str	r5, [r4, #8]
 80060e6:	2d00      	cmp	r5, #0
 80060e8:	bfa2      	ittt	ge
 80060ea:	6821      	ldrge	r1, [r4, #0]
 80060ec:	f021 0104 	bicge.w	r1, r1, #4
 80060f0:	6021      	strge	r1, [r4, #0]
 80060f2:	b90e      	cbnz	r6, 80060f8 <_printf_i+0x118>
 80060f4:	2d00      	cmp	r5, #0
 80060f6:	d04d      	beq.n	8006194 <_printf_i+0x1b4>
 80060f8:	4615      	mov	r5, r2
 80060fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80060fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006102:	5dc7      	ldrb	r7, [r0, r7]
 8006104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006108:	4637      	mov	r7, r6
 800610a:	42bb      	cmp	r3, r7
 800610c:	460e      	mov	r6, r1
 800610e:	d9f4      	bls.n	80060fa <_printf_i+0x11a>
 8006110:	2b08      	cmp	r3, #8
 8006112:	d10b      	bne.n	800612c <_printf_i+0x14c>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	07de      	lsls	r6, r3, #31
 8006118:	d508      	bpl.n	800612c <_printf_i+0x14c>
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	6861      	ldr	r1, [r4, #4]
 800611e:	4299      	cmp	r1, r3
 8006120:	bfde      	ittt	le
 8006122:	2330      	movle	r3, #48	; 0x30
 8006124:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006128:	f105 35ff 	addle.w	r5, r5, #4294967295
 800612c:	1b52      	subs	r2, r2, r5
 800612e:	6122      	str	r2, [r4, #16]
 8006130:	f8cd a000 	str.w	sl, [sp]
 8006134:	464b      	mov	r3, r9
 8006136:	aa03      	add	r2, sp, #12
 8006138:	4621      	mov	r1, r4
 800613a:	4640      	mov	r0, r8
 800613c:	f7ff fee2 	bl	8005f04 <_printf_common>
 8006140:	3001      	adds	r0, #1
 8006142:	d14c      	bne.n	80061de <_printf_i+0x1fe>
 8006144:	f04f 30ff 	mov.w	r0, #4294967295
 8006148:	b004      	add	sp, #16
 800614a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614e:	4835      	ldr	r0, [pc, #212]	; (8006224 <_printf_i+0x244>)
 8006150:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006154:	6829      	ldr	r1, [r5, #0]
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	f851 6b04 	ldr.w	r6, [r1], #4
 800615c:	6029      	str	r1, [r5, #0]
 800615e:	061d      	lsls	r5, r3, #24
 8006160:	d514      	bpl.n	800618c <_printf_i+0x1ac>
 8006162:	07df      	lsls	r7, r3, #31
 8006164:	bf44      	itt	mi
 8006166:	f043 0320 	orrmi.w	r3, r3, #32
 800616a:	6023      	strmi	r3, [r4, #0]
 800616c:	b91e      	cbnz	r6, 8006176 <_printf_i+0x196>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	f023 0320 	bic.w	r3, r3, #32
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	2310      	movs	r3, #16
 8006178:	e7b0      	b.n	80060dc <_printf_i+0xfc>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	f043 0320 	orr.w	r3, r3, #32
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	2378      	movs	r3, #120	; 0x78
 8006184:	4828      	ldr	r0, [pc, #160]	; (8006228 <_printf_i+0x248>)
 8006186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800618a:	e7e3      	b.n	8006154 <_printf_i+0x174>
 800618c:	0659      	lsls	r1, r3, #25
 800618e:	bf48      	it	mi
 8006190:	b2b6      	uxthmi	r6, r6
 8006192:	e7e6      	b.n	8006162 <_printf_i+0x182>
 8006194:	4615      	mov	r5, r2
 8006196:	e7bb      	b.n	8006110 <_printf_i+0x130>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	6826      	ldr	r6, [r4, #0]
 800619c:	6961      	ldr	r1, [r4, #20]
 800619e:	1d18      	adds	r0, r3, #4
 80061a0:	6028      	str	r0, [r5, #0]
 80061a2:	0635      	lsls	r5, r6, #24
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	d501      	bpl.n	80061ac <_printf_i+0x1cc>
 80061a8:	6019      	str	r1, [r3, #0]
 80061aa:	e002      	b.n	80061b2 <_printf_i+0x1d2>
 80061ac:	0670      	lsls	r0, r6, #25
 80061ae:	d5fb      	bpl.n	80061a8 <_printf_i+0x1c8>
 80061b0:	8019      	strh	r1, [r3, #0]
 80061b2:	2300      	movs	r3, #0
 80061b4:	6123      	str	r3, [r4, #16]
 80061b6:	4615      	mov	r5, r2
 80061b8:	e7ba      	b.n	8006130 <_printf_i+0x150>
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	1d1a      	adds	r2, r3, #4
 80061be:	602a      	str	r2, [r5, #0]
 80061c0:	681d      	ldr	r5, [r3, #0]
 80061c2:	6862      	ldr	r2, [r4, #4]
 80061c4:	2100      	movs	r1, #0
 80061c6:	4628      	mov	r0, r5
 80061c8:	f7fa f80a 	bl	80001e0 <memchr>
 80061cc:	b108      	cbz	r0, 80061d2 <_printf_i+0x1f2>
 80061ce:	1b40      	subs	r0, r0, r5
 80061d0:	6060      	str	r0, [r4, #4]
 80061d2:	6863      	ldr	r3, [r4, #4]
 80061d4:	6123      	str	r3, [r4, #16]
 80061d6:	2300      	movs	r3, #0
 80061d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061dc:	e7a8      	b.n	8006130 <_printf_i+0x150>
 80061de:	6923      	ldr	r3, [r4, #16]
 80061e0:	462a      	mov	r2, r5
 80061e2:	4649      	mov	r1, r9
 80061e4:	4640      	mov	r0, r8
 80061e6:	47d0      	blx	sl
 80061e8:	3001      	adds	r0, #1
 80061ea:	d0ab      	beq.n	8006144 <_printf_i+0x164>
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	079b      	lsls	r3, r3, #30
 80061f0:	d413      	bmi.n	800621a <_printf_i+0x23a>
 80061f2:	68e0      	ldr	r0, [r4, #12]
 80061f4:	9b03      	ldr	r3, [sp, #12]
 80061f6:	4298      	cmp	r0, r3
 80061f8:	bfb8      	it	lt
 80061fa:	4618      	movlt	r0, r3
 80061fc:	e7a4      	b.n	8006148 <_printf_i+0x168>
 80061fe:	2301      	movs	r3, #1
 8006200:	4632      	mov	r2, r6
 8006202:	4649      	mov	r1, r9
 8006204:	4640      	mov	r0, r8
 8006206:	47d0      	blx	sl
 8006208:	3001      	adds	r0, #1
 800620a:	d09b      	beq.n	8006144 <_printf_i+0x164>
 800620c:	3501      	adds	r5, #1
 800620e:	68e3      	ldr	r3, [r4, #12]
 8006210:	9903      	ldr	r1, [sp, #12]
 8006212:	1a5b      	subs	r3, r3, r1
 8006214:	42ab      	cmp	r3, r5
 8006216:	dcf2      	bgt.n	80061fe <_printf_i+0x21e>
 8006218:	e7eb      	b.n	80061f2 <_printf_i+0x212>
 800621a:	2500      	movs	r5, #0
 800621c:	f104 0619 	add.w	r6, r4, #25
 8006220:	e7f5      	b.n	800620e <_printf_i+0x22e>
 8006222:	bf00      	nop
 8006224:	0800660d 	.word	0x0800660d
 8006228:	0800661e 	.word	0x0800661e

0800622c <memmove>:
 800622c:	4288      	cmp	r0, r1
 800622e:	b510      	push	{r4, lr}
 8006230:	eb01 0402 	add.w	r4, r1, r2
 8006234:	d902      	bls.n	800623c <memmove+0x10>
 8006236:	4284      	cmp	r4, r0
 8006238:	4623      	mov	r3, r4
 800623a:	d807      	bhi.n	800624c <memmove+0x20>
 800623c:	1e43      	subs	r3, r0, #1
 800623e:	42a1      	cmp	r1, r4
 8006240:	d008      	beq.n	8006254 <memmove+0x28>
 8006242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800624a:	e7f8      	b.n	800623e <memmove+0x12>
 800624c:	4402      	add	r2, r0
 800624e:	4601      	mov	r1, r0
 8006250:	428a      	cmp	r2, r1
 8006252:	d100      	bne.n	8006256 <memmove+0x2a>
 8006254:	bd10      	pop	{r4, pc}
 8006256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800625a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800625e:	e7f7      	b.n	8006250 <memmove+0x24>

08006260 <_free_r>:
 8006260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006262:	2900      	cmp	r1, #0
 8006264:	d044      	beq.n	80062f0 <_free_r+0x90>
 8006266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800626a:	9001      	str	r0, [sp, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f1a1 0404 	sub.w	r4, r1, #4
 8006272:	bfb8      	it	lt
 8006274:	18e4      	addlt	r4, r4, r3
 8006276:	f000 f913 	bl	80064a0 <__malloc_lock>
 800627a:	4a1e      	ldr	r2, [pc, #120]	; (80062f4 <_free_r+0x94>)
 800627c:	9801      	ldr	r0, [sp, #4]
 800627e:	6813      	ldr	r3, [r2, #0]
 8006280:	b933      	cbnz	r3, 8006290 <_free_r+0x30>
 8006282:	6063      	str	r3, [r4, #4]
 8006284:	6014      	str	r4, [r2, #0]
 8006286:	b003      	add	sp, #12
 8006288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800628c:	f000 b90e 	b.w	80064ac <__malloc_unlock>
 8006290:	42a3      	cmp	r3, r4
 8006292:	d908      	bls.n	80062a6 <_free_r+0x46>
 8006294:	6825      	ldr	r5, [r4, #0]
 8006296:	1961      	adds	r1, r4, r5
 8006298:	428b      	cmp	r3, r1
 800629a:	bf01      	itttt	eq
 800629c:	6819      	ldreq	r1, [r3, #0]
 800629e:	685b      	ldreq	r3, [r3, #4]
 80062a0:	1949      	addeq	r1, r1, r5
 80062a2:	6021      	streq	r1, [r4, #0]
 80062a4:	e7ed      	b.n	8006282 <_free_r+0x22>
 80062a6:	461a      	mov	r2, r3
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	b10b      	cbz	r3, 80062b0 <_free_r+0x50>
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	d9fa      	bls.n	80062a6 <_free_r+0x46>
 80062b0:	6811      	ldr	r1, [r2, #0]
 80062b2:	1855      	adds	r5, r2, r1
 80062b4:	42a5      	cmp	r5, r4
 80062b6:	d10b      	bne.n	80062d0 <_free_r+0x70>
 80062b8:	6824      	ldr	r4, [r4, #0]
 80062ba:	4421      	add	r1, r4
 80062bc:	1854      	adds	r4, r2, r1
 80062be:	42a3      	cmp	r3, r4
 80062c0:	6011      	str	r1, [r2, #0]
 80062c2:	d1e0      	bne.n	8006286 <_free_r+0x26>
 80062c4:	681c      	ldr	r4, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	6053      	str	r3, [r2, #4]
 80062ca:	4421      	add	r1, r4
 80062cc:	6011      	str	r1, [r2, #0]
 80062ce:	e7da      	b.n	8006286 <_free_r+0x26>
 80062d0:	d902      	bls.n	80062d8 <_free_r+0x78>
 80062d2:	230c      	movs	r3, #12
 80062d4:	6003      	str	r3, [r0, #0]
 80062d6:	e7d6      	b.n	8006286 <_free_r+0x26>
 80062d8:	6825      	ldr	r5, [r4, #0]
 80062da:	1961      	adds	r1, r4, r5
 80062dc:	428b      	cmp	r3, r1
 80062de:	bf04      	itt	eq
 80062e0:	6819      	ldreq	r1, [r3, #0]
 80062e2:	685b      	ldreq	r3, [r3, #4]
 80062e4:	6063      	str	r3, [r4, #4]
 80062e6:	bf04      	itt	eq
 80062e8:	1949      	addeq	r1, r1, r5
 80062ea:	6021      	streq	r1, [r4, #0]
 80062ec:	6054      	str	r4, [r2, #4]
 80062ee:	e7ca      	b.n	8006286 <_free_r+0x26>
 80062f0:	b003      	add	sp, #12
 80062f2:	bd30      	pop	{r4, r5, pc}
 80062f4:	20004a74 	.word	0x20004a74

080062f8 <sbrk_aligned>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	4e0e      	ldr	r6, [pc, #56]	; (8006334 <sbrk_aligned+0x3c>)
 80062fc:	460c      	mov	r4, r1
 80062fe:	6831      	ldr	r1, [r6, #0]
 8006300:	4605      	mov	r5, r0
 8006302:	b911      	cbnz	r1, 800630a <sbrk_aligned+0x12>
 8006304:	f000 f8bc 	bl	8006480 <_sbrk_r>
 8006308:	6030      	str	r0, [r6, #0]
 800630a:	4621      	mov	r1, r4
 800630c:	4628      	mov	r0, r5
 800630e:	f000 f8b7 	bl	8006480 <_sbrk_r>
 8006312:	1c43      	adds	r3, r0, #1
 8006314:	d00a      	beq.n	800632c <sbrk_aligned+0x34>
 8006316:	1cc4      	adds	r4, r0, #3
 8006318:	f024 0403 	bic.w	r4, r4, #3
 800631c:	42a0      	cmp	r0, r4
 800631e:	d007      	beq.n	8006330 <sbrk_aligned+0x38>
 8006320:	1a21      	subs	r1, r4, r0
 8006322:	4628      	mov	r0, r5
 8006324:	f000 f8ac 	bl	8006480 <_sbrk_r>
 8006328:	3001      	adds	r0, #1
 800632a:	d101      	bne.n	8006330 <sbrk_aligned+0x38>
 800632c:	f04f 34ff 	mov.w	r4, #4294967295
 8006330:	4620      	mov	r0, r4
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	20004a78 	.word	0x20004a78

08006338 <_malloc_r>:
 8006338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633c:	1ccd      	adds	r5, r1, #3
 800633e:	f025 0503 	bic.w	r5, r5, #3
 8006342:	3508      	adds	r5, #8
 8006344:	2d0c      	cmp	r5, #12
 8006346:	bf38      	it	cc
 8006348:	250c      	movcc	r5, #12
 800634a:	2d00      	cmp	r5, #0
 800634c:	4607      	mov	r7, r0
 800634e:	db01      	blt.n	8006354 <_malloc_r+0x1c>
 8006350:	42a9      	cmp	r1, r5
 8006352:	d905      	bls.n	8006360 <_malloc_r+0x28>
 8006354:	230c      	movs	r3, #12
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	2600      	movs	r6, #0
 800635a:	4630      	mov	r0, r6
 800635c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006360:	4e2e      	ldr	r6, [pc, #184]	; (800641c <_malloc_r+0xe4>)
 8006362:	f000 f89d 	bl	80064a0 <__malloc_lock>
 8006366:	6833      	ldr	r3, [r6, #0]
 8006368:	461c      	mov	r4, r3
 800636a:	bb34      	cbnz	r4, 80063ba <_malloc_r+0x82>
 800636c:	4629      	mov	r1, r5
 800636e:	4638      	mov	r0, r7
 8006370:	f7ff ffc2 	bl	80062f8 <sbrk_aligned>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	4604      	mov	r4, r0
 8006378:	d14d      	bne.n	8006416 <_malloc_r+0xde>
 800637a:	6834      	ldr	r4, [r6, #0]
 800637c:	4626      	mov	r6, r4
 800637e:	2e00      	cmp	r6, #0
 8006380:	d140      	bne.n	8006404 <_malloc_r+0xcc>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	4631      	mov	r1, r6
 8006386:	4638      	mov	r0, r7
 8006388:	eb04 0803 	add.w	r8, r4, r3
 800638c:	f000 f878 	bl	8006480 <_sbrk_r>
 8006390:	4580      	cmp	r8, r0
 8006392:	d13a      	bne.n	800640a <_malloc_r+0xd2>
 8006394:	6821      	ldr	r1, [r4, #0]
 8006396:	3503      	adds	r5, #3
 8006398:	1a6d      	subs	r5, r5, r1
 800639a:	f025 0503 	bic.w	r5, r5, #3
 800639e:	3508      	adds	r5, #8
 80063a0:	2d0c      	cmp	r5, #12
 80063a2:	bf38      	it	cc
 80063a4:	250c      	movcc	r5, #12
 80063a6:	4629      	mov	r1, r5
 80063a8:	4638      	mov	r0, r7
 80063aa:	f7ff ffa5 	bl	80062f8 <sbrk_aligned>
 80063ae:	3001      	adds	r0, #1
 80063b0:	d02b      	beq.n	800640a <_malloc_r+0xd2>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	442b      	add	r3, r5
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	e00e      	b.n	80063d8 <_malloc_r+0xa0>
 80063ba:	6822      	ldr	r2, [r4, #0]
 80063bc:	1b52      	subs	r2, r2, r5
 80063be:	d41e      	bmi.n	80063fe <_malloc_r+0xc6>
 80063c0:	2a0b      	cmp	r2, #11
 80063c2:	d916      	bls.n	80063f2 <_malloc_r+0xba>
 80063c4:	1961      	adds	r1, r4, r5
 80063c6:	42a3      	cmp	r3, r4
 80063c8:	6025      	str	r5, [r4, #0]
 80063ca:	bf18      	it	ne
 80063cc:	6059      	strne	r1, [r3, #4]
 80063ce:	6863      	ldr	r3, [r4, #4]
 80063d0:	bf08      	it	eq
 80063d2:	6031      	streq	r1, [r6, #0]
 80063d4:	5162      	str	r2, [r4, r5]
 80063d6:	604b      	str	r3, [r1, #4]
 80063d8:	4638      	mov	r0, r7
 80063da:	f104 060b 	add.w	r6, r4, #11
 80063de:	f000 f865 	bl	80064ac <__malloc_unlock>
 80063e2:	f026 0607 	bic.w	r6, r6, #7
 80063e6:	1d23      	adds	r3, r4, #4
 80063e8:	1af2      	subs	r2, r6, r3
 80063ea:	d0b6      	beq.n	800635a <_malloc_r+0x22>
 80063ec:	1b9b      	subs	r3, r3, r6
 80063ee:	50a3      	str	r3, [r4, r2]
 80063f0:	e7b3      	b.n	800635a <_malloc_r+0x22>
 80063f2:	6862      	ldr	r2, [r4, #4]
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	bf0c      	ite	eq
 80063f8:	6032      	streq	r2, [r6, #0]
 80063fa:	605a      	strne	r2, [r3, #4]
 80063fc:	e7ec      	b.n	80063d8 <_malloc_r+0xa0>
 80063fe:	4623      	mov	r3, r4
 8006400:	6864      	ldr	r4, [r4, #4]
 8006402:	e7b2      	b.n	800636a <_malloc_r+0x32>
 8006404:	4634      	mov	r4, r6
 8006406:	6876      	ldr	r6, [r6, #4]
 8006408:	e7b9      	b.n	800637e <_malloc_r+0x46>
 800640a:	230c      	movs	r3, #12
 800640c:	603b      	str	r3, [r7, #0]
 800640e:	4638      	mov	r0, r7
 8006410:	f000 f84c 	bl	80064ac <__malloc_unlock>
 8006414:	e7a1      	b.n	800635a <_malloc_r+0x22>
 8006416:	6025      	str	r5, [r4, #0]
 8006418:	e7de      	b.n	80063d8 <_malloc_r+0xa0>
 800641a:	bf00      	nop
 800641c:	20004a74 	.word	0x20004a74

08006420 <_realloc_r>:
 8006420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006424:	4680      	mov	r8, r0
 8006426:	4614      	mov	r4, r2
 8006428:	460e      	mov	r6, r1
 800642a:	b921      	cbnz	r1, 8006436 <_realloc_r+0x16>
 800642c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006430:	4611      	mov	r1, r2
 8006432:	f7ff bf81 	b.w	8006338 <_malloc_r>
 8006436:	b92a      	cbnz	r2, 8006444 <_realloc_r+0x24>
 8006438:	f7ff ff12 	bl	8006260 <_free_r>
 800643c:	4625      	mov	r5, r4
 800643e:	4628      	mov	r0, r5
 8006440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006444:	f000 f838 	bl	80064b8 <_malloc_usable_size_r>
 8006448:	4284      	cmp	r4, r0
 800644a:	4607      	mov	r7, r0
 800644c:	d802      	bhi.n	8006454 <_realloc_r+0x34>
 800644e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006452:	d812      	bhi.n	800647a <_realloc_r+0x5a>
 8006454:	4621      	mov	r1, r4
 8006456:	4640      	mov	r0, r8
 8006458:	f7ff ff6e 	bl	8006338 <_malloc_r>
 800645c:	4605      	mov	r5, r0
 800645e:	2800      	cmp	r0, #0
 8006460:	d0ed      	beq.n	800643e <_realloc_r+0x1e>
 8006462:	42bc      	cmp	r4, r7
 8006464:	4622      	mov	r2, r4
 8006466:	4631      	mov	r1, r6
 8006468:	bf28      	it	cs
 800646a:	463a      	movcs	r2, r7
 800646c:	f7ff fbb8 	bl	8005be0 <memcpy>
 8006470:	4631      	mov	r1, r6
 8006472:	4640      	mov	r0, r8
 8006474:	f7ff fef4 	bl	8006260 <_free_r>
 8006478:	e7e1      	b.n	800643e <_realloc_r+0x1e>
 800647a:	4635      	mov	r5, r6
 800647c:	e7df      	b.n	800643e <_realloc_r+0x1e>
	...

08006480 <_sbrk_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4d06      	ldr	r5, [pc, #24]	; (800649c <_sbrk_r+0x1c>)
 8006484:	2300      	movs	r3, #0
 8006486:	4604      	mov	r4, r0
 8006488:	4608      	mov	r0, r1
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	f7fa fb84 	bl	8000b98 <_sbrk>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_sbrk_r+0x1a>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b103      	cbz	r3, 800649a <_sbrk_r+0x1a>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	20004a7c 	.word	0x20004a7c

080064a0 <__malloc_lock>:
 80064a0:	4801      	ldr	r0, [pc, #4]	; (80064a8 <__malloc_lock+0x8>)
 80064a2:	f000 b811 	b.w	80064c8 <__retarget_lock_acquire_recursive>
 80064a6:	bf00      	nop
 80064a8:	20004a80 	.word	0x20004a80

080064ac <__malloc_unlock>:
 80064ac:	4801      	ldr	r0, [pc, #4]	; (80064b4 <__malloc_unlock+0x8>)
 80064ae:	f000 b80c 	b.w	80064ca <__retarget_lock_release_recursive>
 80064b2:	bf00      	nop
 80064b4:	20004a80 	.word	0x20004a80

080064b8 <_malloc_usable_size_r>:
 80064b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064bc:	1f18      	subs	r0, r3, #4
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bfbc      	itt	lt
 80064c2:	580b      	ldrlt	r3, [r1, r0]
 80064c4:	18c0      	addlt	r0, r0, r3
 80064c6:	4770      	bx	lr

080064c8 <__retarget_lock_acquire_recursive>:
 80064c8:	4770      	bx	lr

080064ca <__retarget_lock_release_recursive>:
 80064ca:	4770      	bx	lr

080064cc <_init>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr

080064d8 <_fini>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr
