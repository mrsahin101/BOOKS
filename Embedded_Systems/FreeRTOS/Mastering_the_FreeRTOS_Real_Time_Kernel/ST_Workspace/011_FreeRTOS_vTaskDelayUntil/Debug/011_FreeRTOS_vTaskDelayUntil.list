
011_FreeRTOS_vTaskDelayUntil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005888  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a80  08005a80  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005a80  08005a80  00015a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a88  08005a88  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a88  08005a88  00015a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a8c  08005a8c  00015a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000049f8  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a10  20004a10  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017bf2  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031a0  00000000  00000000  00037c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  0003ade0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001308  00000000  00000000  0003c200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035cd  00000000  00000000  0003d508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d3b  00000000  00000000  00040ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3e06  00000000  00000000  00056810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a616  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000551c  00000000  00000000  0012a668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a00 	.word	0x08005a00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08005a00 	.word	0x08005a00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vTaskFunction>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vTaskFunction(void *pvParameters)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	char *pcTaskName;
	TickType_t xLastWakeTime;
	pcTaskName = (char *)pvParameters;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 80004f0:	f003 feb0 	bl	8004254 <xTaskGetTickCount>
 80004f4:	4603      	mov	r3, r0
 80004f6:	60bb      	str	r3, [r7, #8]

	for(;;)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)pcTaskName, strlen(pcTaskName), HAL_MAX_DELAY);
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	f7ff fe69 	bl	80001d0 <strlen>
 80004fe:	4603      	mov	r3, r0
 8000500:	b29a      	uxth	r2, r3
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	68f9      	ldr	r1, [r7, #12]
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <vTaskFunction+0x38>)
 800050a:	f001 fdc6 	bl	800209a <HAL_UART_Transmit>
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(250));
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	21fa      	movs	r1, #250	; 0xfa
 8000514:	4618      	mov	r0, r3
 8000516:	f003 fd0d 	bl	8003f34 <vTaskDelayUntil>
		HAL_UART_Transmit(&huart2, (uint8_t *)pcTaskName, strlen(pcTaskName), HAL_MAX_DELAY);
 800051a:	e7ed      	b.n	80004f8 <vTaskFunction+0x14>
 800051c:	20000034 	.word	0x20000034

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000526:	f000 fa87 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 f829 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052e:	f000 f8bb 	bl	80006a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000532:	f000 f88f 	bl	8000654 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(vTaskFunction, "Task1", 1000, (void *)pcTextForTask1, 1, NULL);
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <main+0x4c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2200      	movs	r2, #0
 800053c:	9201      	str	r2, [sp, #4]
 800053e:	2201      	movs	r2, #1
 8000540:	9200      	str	r2, [sp, #0]
 8000542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000546:	490a      	ldr	r1, [pc, #40]	; (8000570 <main+0x50>)
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <main+0x54>)
 800054a:	f003 fbae 	bl	8003caa <xTaskCreate>
  xTaskCreate(vTaskFunction, "Task2", 1000, (void *)pcTextForTask2, 1, NULL);
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <main+0x58>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2200      	movs	r2, #0
 8000554:	9201      	str	r2, [sp, #4]
 8000556:	2201      	movs	r2, #1
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800055e:	4907      	ldr	r1, [pc, #28]	; (800057c <main+0x5c>)
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <main+0x54>)
 8000562:	f003 fba2 	bl	8003caa <xTaskCreate>

  vTaskStartScheduler();
 8000566:	f003 fd63 	bl	8004030 <vTaskStartScheduler>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	e7fe      	b.n	800056a <main+0x4a>
 800056c:	20000000 	.word	0x20000000
 8000570:	08005a18 	.word	0x08005a18
 8000574:	080004e5 	.word	0x080004e5
 8000578:	20000004 	.word	0x20000004
 800057c:	08005a20 	.word	0x08005a20

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fa2e 	bl	80059f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b28      	ldr	r3, [pc, #160]	; (800064c <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a27      	ldr	r2, [pc, #156]	; (800064c <SystemClock_Config+0xcc>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b25      	ldr	r3, [pc, #148]	; (800064c <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd0>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f0:	2308      	movs	r3, #8
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fe:	2307      	movs	r3, #7
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fd82 	bl	8001110 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000612:	f000 f8ad 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000622:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2105      	movs	r1, #5
 8000634:	4618      	mov	r0, r3
 8000636:	f000 ffe3 	bl	8001600 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000640:	f000 f896 	bl	8000770 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	; 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_USART2_UART_Init+0x4c>)
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_USART2_UART_Init+0x50>)
 800065c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_USART2_UART_Init+0x4c>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_USART2_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_USART2_UART_Init+0x4c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_USART2_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_USART2_UART_Init+0x4c>)
 800068c:	f001 fcb8 	bl	8002000 <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000696:	f000 f86b 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000034 	.word	0x20000034
 80006a4:	40004400 	.word	0x40004400

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a1f      	ldr	r2, [pc, #124]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a11      	ldr	r2, [pc, #68]	; (8000744 <MX_GPIO_Init+0x9c>)
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_GPIO_Init+0x9c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <MX_GPIO_Init+0xa0>)
 800071a:	f000 fcdf 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800071e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4619      	mov	r1, r3
 8000736:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_GPIO_Init+0xa0>)
 8000738:	f000 fb34 	bl	8000da4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800073c:	bf00      	nop
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40020c00 	.word	0x40020c00

0800074c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a04      	ldr	r2, [pc, #16]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d101      	bne.n	8000762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800075e:	f000 f98d 	bl	8000a7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40002000 	.word	0x40002000

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_MspInit+0x54>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <HAL_MspInit+0x54>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_MspInit+0x54>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <HAL_MspInit+0x54>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <HAL_MspInit+0x54>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_MspInit+0x54>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	210f      	movs	r1, #15
 80007be:	f06f 0001 	mvn.w	r0, #1
 80007c2:	f000 fa33 	bl	8000c2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <HAL_UART_MspInit+0x94>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d133      	bne.n	800085e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <HAL_UART_MspInit+0x98>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a1b      	ldr	r2, [pc, #108]	; (800086c <HAL_UART_MspInit+0x98>)
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <HAL_UART_MspInit+0x98>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_UART_MspInit+0x98>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <HAL_UART_MspInit+0x98>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_UART_MspInit+0x98>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800082e:	230c      	movs	r3, #12
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083e:	2307      	movs	r3, #7
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <HAL_UART_MspInit+0x9c>)
 800084a:	f000 faab 	bl	8000da4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	2026      	movs	r0, #38	; 0x26
 8000854:	f000 f9ea 	bl	8000c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000858:	2026      	movs	r0, #38	; 0x26
 800085a:	f000 fa03 	bl	8000c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	; 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40004400 	.word	0x40004400
 800086c:	40023800 	.word	0x40023800
 8000870:	40020000 	.word	0x40020000

08000874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	; 0x38
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4b33      	ldr	r3, [pc, #204]	; (8000958 <HAL_InitTick+0xe4>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a32      	ldr	r2, [pc, #200]	; (8000958 <HAL_InitTick+0xe4>)
 800088e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b30      	ldr	r3, [pc, #192]	; (8000958 <HAL_InitTick+0xe4>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a0:	f107 0210 	add.w	r2, r7, #16
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 f8c8 	bl	8001a40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d103      	bne.n	80008c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008ba:	f001 f899 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 80008be:	6378      	str	r0, [r7, #52]	; 0x34
 80008c0:	e004      	b.n	80008cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008c2:	f001 f895 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 80008c6:	4603      	mov	r3, r0
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ce:	4a23      	ldr	r2, [pc, #140]	; (800095c <HAL_InitTick+0xe8>)
 80008d0:	fba2 2303 	umull	r2, r3, r2, r3
 80008d4:	0c9b      	lsrs	r3, r3, #18
 80008d6:	3b01      	subs	r3, #1
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <HAL_InitTick+0xec>)
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <HAL_InitTick+0xf0>)
 80008de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <HAL_InitTick+0xec>)
 80008e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <HAL_InitTick+0xec>)
 80008ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ec:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_InitTick+0xec>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <HAL_InitTick+0xec>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_InitTick+0xec>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000900:	4817      	ldr	r0, [pc, #92]	; (8000960 <HAL_InitTick+0xec>)
 8000902:	f001 f8cf 	bl	8001aa4 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800090c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11b      	bne.n	800094c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000914:	4812      	ldr	r0, [pc, #72]	; (8000960 <HAL_InitTick+0xec>)
 8000916:	f001 f91f 	bl	8001b58 <HAL_TIM_Base_Start_IT>
 800091a:	4603      	mov	r3, r0
 800091c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000924:	2b00      	cmp	r3, #0
 8000926:	d111      	bne.n	800094c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000928:	202d      	movs	r0, #45	; 0x2d
 800092a:	f000 f99b 	bl	8000c64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d808      	bhi.n	8000946 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	202d      	movs	r0, #45	; 0x2d
 800093a:	f000 f977 	bl	8000c2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_InitTick+0xf4>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e002      	b.n	800094c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800094c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000950:	4618      	mov	r0, r3
 8000952:	3738      	adds	r7, #56	; 0x38
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	431bde83 	.word	0x431bde83
 8000960:	20000078 	.word	0x20000078
 8000964:	40002000 	.word	0x40002000
 8000968:	2000000c 	.word	0x2000000c

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <USART2_IRQHandler+0x10>)
 800099e:	f001 fc0f 	bl	80021c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000034 	.word	0x20000034

080009ac <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80009b2:	f001 f941 	bl	8001c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000078 	.word	0x20000078

080009c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0e:	f7ff ffd7 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f004 ffbb 	bl	800598c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fd83 	bl	8000520 <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000a28:	08005a90 	.word	0x08005a90
  ldr r2, =_sbss
 8000a2c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000a30:	20004a10 	.word	0x20004a10

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <HAL_Init+0x40>)
 8000a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_Init+0x40>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x40>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f8d8 	bl	8000c16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	200f      	movs	r0, #15
 8000a68:	f7ff ff04 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff fe86 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023c00 	.word	0x40023c00

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000010 	.word	0x20000010
 8000aa0:	200000c0 	.word	0x200000c0

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200000c0 	.word	0x200000c0

08000abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aee:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	60d3      	str	r3, [r2, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <__NVIC_GetPriorityGrouping+0x18>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0307 	and.w	r3, r3, #7
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	db0b      	blt.n	8000b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	f003 021f 	and.w	r2, r3, #31
 8000b38:	4907      	ldr	r1, [pc, #28]	; (8000b58 <__NVIC_EnableIRQ+0x38>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	095b      	lsrs	r3, r3, #5
 8000b40:	2001      	movs	r0, #1
 8000b42:	fa00 f202 	lsl.w	r2, r0, r2
 8000b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000e100 	.word	0xe000e100

08000b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	db0a      	blt.n	8000b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	490c      	ldr	r1, [pc, #48]	; (8000ba8 <__NVIC_SetPriority+0x4c>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	440b      	add	r3, r1
 8000b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b84:	e00a      	b.n	8000b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4908      	ldr	r1, [pc, #32]	; (8000bac <__NVIC_SetPriority+0x50>)
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	3b04      	subs	r3, #4
 8000b94:	0112      	lsls	r2, r2, #4
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	440b      	add	r3, r1
 8000b9a:	761a      	strb	r2, [r3, #24]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000e100 	.word	0xe000e100
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	f1c3 0307 	rsb	r3, r3, #7
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	bf28      	it	cs
 8000bce:	2304      	movcs	r3, #4
 8000bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d902      	bls.n	8000be0 <NVIC_EncodePriority+0x30>
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	e000      	b.n	8000be2 <NVIC_EncodePriority+0x32>
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	43d9      	mvns	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	4313      	orrs	r3, r2
         );
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3724      	adds	r7, #36	; 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ff4c 	bl	8000abc <__NVIC_SetPriorityGrouping>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3e:	f7ff ff61 	bl	8000b04 <__NVIC_GetPriorityGrouping>
 8000c42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	68b9      	ldr	r1, [r7, #8]
 8000c48:	6978      	ldr	r0, [r7, #20]
 8000c4a:	f7ff ffb1 	bl	8000bb0 <NVIC_EncodePriority>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff80 	bl	8000b5c <__NVIC_SetPriority>
}
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff54 	bl	8000b20 <__NVIC_EnableIRQ>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c8e:	f7ff ff09 	bl	8000aa4 <HAL_GetTick>
 8000c92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d008      	beq.n	8000cb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e052      	b.n	8000d58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0216 	bic.w	r2, r2, #22
 8000cc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	695a      	ldr	r2, [r3, #20]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d103      	bne.n	8000ce2 <HAL_DMA_Abort+0x62>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d007      	beq.n	8000cf2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0208 	bic.w	r2, r2, #8
 8000cf0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 0201 	bic.w	r2, r2, #1
 8000d00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d02:	e013      	b.n	8000d2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d04:	f7ff fece 	bl	8000aa4 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b05      	cmp	r3, #5
 8000d10:	d90c      	bls.n	8000d2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2220      	movs	r2, #32
 8000d16:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e015      	b.n	8000d58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1e4      	bne.n	8000d04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d3e:	223f      	movs	r2, #63	; 0x3f
 8000d40:	409a      	lsls	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d004      	beq.n	8000d7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00c      	b.n	8000d98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2205      	movs	r2, #5
 8000d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0201 	bic.w	r2, r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
 8000dbe:	e16b      	b.n	8001098 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	f040 815a 	bne.w	8001092 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d005      	beq.n	8000df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d130      	bne.n	8000e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	2203      	movs	r2, #3
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	091b      	lsrs	r3, r3, #4
 8000e42:	f003 0201 	and.w	r2, r3, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d017      	beq.n	8000e94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d123      	bne.n	8000ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	08da      	lsrs	r2, r3, #3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	691a      	ldr	r2, [r3, #16]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	08da      	lsrs	r2, r3, #3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3208      	adds	r2, #8
 8000ee2:	69b9      	ldr	r1, [r7, #24]
 8000ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0203 	and.w	r2, r3, #3
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 80b4 	beq.w	8001092 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b60      	ldr	r3, [pc, #384]	; (80010b0 <HAL_GPIO_Init+0x30c>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a5f      	ldr	r2, [pc, #380]	; (80010b0 <HAL_GPIO_Init+0x30c>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b5d      	ldr	r3, [pc, #372]	; (80010b0 <HAL_GPIO_Init+0x30c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f46:	4a5b      	ldr	r2, [pc, #364]	; (80010b4 <HAL_GPIO_Init+0x310>)
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a52      	ldr	r2, [pc, #328]	; (80010b8 <HAL_GPIO_Init+0x314>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d02b      	beq.n	8000fca <HAL_GPIO_Init+0x226>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a51      	ldr	r2, [pc, #324]	; (80010bc <HAL_GPIO_Init+0x318>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d025      	beq.n	8000fc6 <HAL_GPIO_Init+0x222>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a50      	ldr	r2, [pc, #320]	; (80010c0 <HAL_GPIO_Init+0x31c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d01f      	beq.n	8000fc2 <HAL_GPIO_Init+0x21e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4f      	ldr	r2, [pc, #316]	; (80010c4 <HAL_GPIO_Init+0x320>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d019      	beq.n	8000fbe <HAL_GPIO_Init+0x21a>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4e      	ldr	r2, [pc, #312]	; (80010c8 <HAL_GPIO_Init+0x324>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x216>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4d      	ldr	r2, [pc, #308]	; (80010cc <HAL_GPIO_Init+0x328>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x212>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4c      	ldr	r2, [pc, #304]	; (80010d0 <HAL_GPIO_Init+0x32c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x20e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <HAL_GPIO_Init+0x330>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x20a>
 8000faa:	2307      	movs	r3, #7
 8000fac:	e00e      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fae:	2308      	movs	r3, #8
 8000fb0:	e00c      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	e00a      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	e008      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fba:	2304      	movs	r3, #4
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e004      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e002      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	f002 0203 	and.w	r2, r2, #3
 8000fd2:	0092      	lsls	r2, r2, #2
 8000fd4:	4093      	lsls	r3, r2
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fdc:	4935      	ldr	r1, [pc, #212]	; (80010b4 <HAL_GPIO_Init+0x310>)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fea:	4b3b      	ldr	r3, [pc, #236]	; (80010d8 <HAL_GPIO_Init+0x334>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100e:	4a32      	ldr	r2, [pc, #200]	; (80010d8 <HAL_GPIO_Init+0x334>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001014:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <HAL_GPIO_Init+0x334>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001038:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <HAL_GPIO_Init+0x334>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <HAL_GPIO_Init+0x334>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001062:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_GPIO_Init+0x334>)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_GPIO_Init+0x334>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <HAL_GPIO_Init+0x334>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3301      	adds	r3, #1
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	f67f ae90 	bls.w	8000dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40013800 	.word	0x40013800
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40020400 	.word	0x40020400
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020c00 	.word	0x40020c00
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40021400 	.word	0x40021400
 80010d0:	40021800 	.word	0x40021800
 80010d4:	40021c00 	.word	0x40021c00
 80010d8:	40013c00 	.word	0x40013c00

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f8:	e003      	b.n	8001102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	041a      	lsls	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	619a      	str	r2, [r3, #24]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e267      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d075      	beq.n	800121a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112e:	4b88      	ldr	r3, [pc, #544]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b04      	cmp	r3, #4
 8001138:	d00c      	beq.n	8001154 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113a:	4b85      	ldr	r3, [pc, #532]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001142:	2b08      	cmp	r3, #8
 8001144:	d112      	bne.n	800116c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001146:	4b82      	ldr	r3, [pc, #520]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001152:	d10b      	bne.n	800116c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	4b7e      	ldr	r3, [pc, #504]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d05b      	beq.n	8001218 <HAL_RCC_OscConfig+0x108>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d157      	bne.n	8001218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e242      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001174:	d106      	bne.n	8001184 <HAL_RCC_OscConfig+0x74>
 8001176:	4b76      	ldr	r3, [pc, #472]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a75      	ldr	r2, [pc, #468]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e01d      	b.n	80011c0 <HAL_RCC_OscConfig+0xb0>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x98>
 800118e:	4b70      	ldr	r3, [pc, #448]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a6f      	ldr	r2, [pc, #444]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	4b6d      	ldr	r3, [pc, #436]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a6c      	ldr	r2, [pc, #432]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e00b      	b.n	80011c0 <HAL_RCC_OscConfig+0xb0>
 80011a8:	4b69      	ldr	r3, [pc, #420]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a68      	ldr	r2, [pc, #416]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80011ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b66      	ldr	r3, [pc, #408]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a65      	ldr	r2, [pc, #404]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80011ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fc6c 	bl	8000aa4 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fc68 	bl	8000aa4 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e207      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	4b5b      	ldr	r3, [pc, #364]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0xc0>
 80011ee:	e014      	b.n	800121a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc58 	bl	8000aa4 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fc54 	bl	8000aa4 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	; 0x64
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e1f3      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	4b51      	ldr	r3, [pc, #324]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0xe8>
 8001216:	e000      	b.n	800121a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d063      	beq.n	80012ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001226:	4b4a      	ldr	r3, [pc, #296]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00b      	beq.n	800124a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001232:	4b47      	ldr	r3, [pc, #284]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123a:	2b08      	cmp	r3, #8
 800123c:	d11c      	bne.n	8001278 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d116      	bne.n	8001278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124a:	4b41      	ldr	r3, [pc, #260]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <HAL_RCC_OscConfig+0x152>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d001      	beq.n	8001262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e1c7      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4937      	ldr	r1, [pc, #220]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001276:	e03a      	b.n	80012ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d020      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001280:	4b34      	ldr	r3, [pc, #208]	; (8001354 <HAL_RCC_OscConfig+0x244>)
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001286:	f7ff fc0d 	bl	8000aa4 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128e:	f7ff fc09 	bl	8000aa4 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e1a8      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4925      	ldr	r1, [pc, #148]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
 80012c0:	e015      	b.n	80012ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <HAL_RCC_OscConfig+0x244>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fbec 	bl	8000aa4 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff fbe8 	bl	8000aa4 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e187      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d036      	beq.n	8001368 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d016      	beq.n	8001330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_RCC_OscConfig+0x248>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001308:	f7ff fbcc 	bl	8000aa4 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001310:	f7ff fbc8 	bl	8000aa4 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e167      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x200>
 800132e:	e01b      	b.n	8001368 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_RCC_OscConfig+0x248>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff fbb5 	bl	8000aa4 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	e00e      	b.n	800135c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800133e:	f7ff fbb1 	bl	8000aa4 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d907      	bls.n	800135c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e150      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
 8001350:	40023800 	.word	0x40023800
 8001354:	42470000 	.word	0x42470000
 8001358:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135c:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800135e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1ea      	bne.n	800133e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 8097 	beq.w	80014a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137a:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10f      	bne.n	80013a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b7d      	ldr	r3, [pc, #500]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a7c      	ldr	r2, [pc, #496]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b7a      	ldr	r3, [pc, #488]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013a2:	2301      	movs	r3, #1
 80013a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a6:	4b77      	ldr	r3, [pc, #476]	; (8001584 <HAL_RCC_OscConfig+0x474>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d118      	bne.n	80013e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b2:	4b74      	ldr	r3, [pc, #464]	; (8001584 <HAL_RCC_OscConfig+0x474>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a73      	ldr	r2, [pc, #460]	; (8001584 <HAL_RCC_OscConfig+0x474>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013be:	f7ff fb71 	bl	8000aa4 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c6:	f7ff fb6d 	bl	8000aa4 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e10c      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	4b6a      	ldr	r3, [pc, #424]	; (8001584 <HAL_RCC_OscConfig+0x474>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x2ea>
 80013ec:	4b64      	ldr	r3, [pc, #400]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 80013ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f0:	4a63      	ldr	r2, [pc, #396]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6713      	str	r3, [r2, #112]	; 0x70
 80013f8:	e01c      	b.n	8001434 <HAL_RCC_OscConfig+0x324>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b05      	cmp	r3, #5
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x30c>
 8001402:	4b5f      	ldr	r3, [pc, #380]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001406:	4a5e      	ldr	r2, [pc, #376]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6713      	str	r3, [r2, #112]	; 0x70
 800140e:	4b5c      	ldr	r3, [pc, #368]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001412:	4a5b      	ldr	r2, [pc, #364]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6713      	str	r3, [r2, #112]	; 0x70
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0x324>
 800141c:	4b58      	ldr	r3, [pc, #352]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	4a57      	ldr	r2, [pc, #348]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	6713      	str	r3, [r2, #112]	; 0x70
 8001428:	4b55      	ldr	r3, [pc, #340]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142c:	4a54      	ldr	r2, [pc, #336]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800142e:	f023 0304 	bic.w	r3, r3, #4
 8001432:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d015      	beq.n	8001468 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fb32 	bl	8000aa4 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001442:	e00a      	b.n	800145a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001444:	f7ff fb2e 	bl	8000aa4 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001452:	4293      	cmp	r3, r2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e0cb      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145a:	4b49      	ldr	r3, [pc, #292]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800145c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0ee      	beq.n	8001444 <HAL_RCC_OscConfig+0x334>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001468:	f7ff fb1c 	bl	8000aa4 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146e:	e00a      	b.n	8001486 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001470:	f7ff fb18 	bl	8000aa4 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	; 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e0b5      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001486:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1ee      	bne.n	8001470 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001492:	7dfb      	ldrb	r3, [r7, #23]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d105      	bne.n	80014a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	4a38      	ldr	r2, [pc, #224]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800149e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80a1 	beq.w	80015f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d05c      	beq.n	8001574 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d141      	bne.n	8001546 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c2:	4b31      	ldr	r3, [pc, #196]	; (8001588 <HAL_RCC_OscConfig+0x478>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff faec 	bl	8000aa4 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d0:	f7ff fae8 	bl	8000aa4 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e087      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69da      	ldr	r2, [r3, #28]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	019b      	lsls	r3, r3, #6
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	085b      	lsrs	r3, r3, #1
 8001506:	3b01      	subs	r3, #1
 8001508:	041b      	lsls	r3, r3, #16
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	491b      	ldr	r1, [pc, #108]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_RCC_OscConfig+0x478>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fac1 	bl	8000aa4 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff fabd 	bl	8000aa4 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e05c      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x416>
 8001544:	e054      	b.n	80015f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_RCC_OscConfig+0x478>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff faaa 	bl	8000aa4 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff faa6 	bl	8000aa4 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e045      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x444>
 8001572:	e03d      	b.n	80015f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d107      	bne.n	800158c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e038      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
 8001580:	40023800 	.word	0x40023800
 8001584:	40007000 	.word	0x40007000
 8001588:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_RCC_OscConfig+0x4ec>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d028      	beq.n	80015ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d121      	bne.n	80015ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d11a      	bne.n	80015ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015bc:	4013      	ands	r3, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d111      	bne.n	80015ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	085b      	lsrs	r3, r3, #1
 80015d4:	3b01      	subs	r3, #1
 80015d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d107      	bne.n	80015ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0cc      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001614:	4b68      	ldr	r3, [pc, #416]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d90c      	bls.n	800163c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b65      	ldr	r3, [pc, #404]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0b8      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d020      	beq.n	800168a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001654:	4b59      	ldr	r3, [pc, #356]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	4a58      	ldr	r2, [pc, #352]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800165e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800166c:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4a52      	ldr	r2, [pc, #328]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001676:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	494d      	ldr	r1, [pc, #308]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	4313      	orrs	r3, r2
 8001688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d044      	beq.n	8001720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b47      	ldr	r3, [pc, #284]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d119      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e07f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d003      	beq.n	80016be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016be:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e06f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ce:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e067      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016de:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f023 0203 	bic.w	r2, r3, #3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4934      	ldr	r1, [pc, #208]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f0:	f7ff f9d8 	bl	8000aa4 <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f6:	e00a      	b.n	800170e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f8:	f7ff f9d4 	bl	8000aa4 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e04f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 020c 	and.w	r2, r3, #12
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	429a      	cmp	r2, r3
 800171e:	d1eb      	bne.n	80016f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001720:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d20c      	bcs.n	8001748 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e032      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4916      	ldr	r1, [pc, #88]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d009      	beq.n	8001786 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	490e      	ldr	r1, [pc, #56]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001786:	f000 f821 	bl	80017cc <HAL_RCC_GetSysClockFreq>
 800178a:	4602      	mov	r2, r0
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	490a      	ldr	r1, [pc, #40]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	5ccb      	ldrb	r3, [r1, r3]
 800179a:	fa22 f303 	lsr.w	r3, r2, r3
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_RCC_ClockConfig+0x1c8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f864 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023c00 	.word	0x40023c00
 80017bc:	40023800 	.word	0x40023800
 80017c0:	08005a68 	.word	0x08005a68
 80017c4:	20000008 	.word	0x20000008
 80017c8:	2000000c 	.word	0x2000000c

080017cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d0:	b094      	sub	sp, #80	; 0x50
 80017d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	647b      	str	r3, [r7, #68]	; 0x44
 80017d8:	2300      	movs	r3, #0
 80017da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017dc:	2300      	movs	r3, #0
 80017de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e4:	4b79      	ldr	r3, [pc, #484]	; (80019cc <HAL_RCC_GetSysClockFreq+0x200>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d00d      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0x40>
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	f200 80e1 	bhi.w	80019b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x34>
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d003      	beq.n	8001806 <HAL_RCC_GetSysClockFreq+0x3a>
 80017fe:	e0db      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001800:	4b73      	ldr	r3, [pc, #460]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001802:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001804:	e0db      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001806:	4b73      	ldr	r3, [pc, #460]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001808:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800180a:	e0d8      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800180c:	4b6f      	ldr	r3, [pc, #444]	; (80019cc <HAL_RCC_GetSysClockFreq+0x200>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001814:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001816:	4b6d      	ldr	r3, [pc, #436]	; (80019cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d063      	beq.n	80018ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001822:	4b6a      	ldr	r3, [pc, #424]	; (80019cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	099b      	lsrs	r3, r3, #6
 8001828:	2200      	movs	r2, #0
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38
 800182c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800182e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
 8001836:	2300      	movs	r3, #0
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
 800183a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800183e:	4622      	mov	r2, r4
 8001840:	462b      	mov	r3, r5
 8001842:	f04f 0000 	mov.w	r0, #0
 8001846:	f04f 0100 	mov.w	r1, #0
 800184a:	0159      	lsls	r1, r3, #5
 800184c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001850:	0150      	lsls	r0, r2, #5
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4621      	mov	r1, r4
 8001858:	1a51      	subs	r1, r2, r1
 800185a:	6139      	str	r1, [r7, #16]
 800185c:	4629      	mov	r1, r5
 800185e:	eb63 0301 	sbc.w	r3, r3, r1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001870:	4659      	mov	r1, fp
 8001872:	018b      	lsls	r3, r1, #6
 8001874:	4651      	mov	r1, sl
 8001876:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800187a:	4651      	mov	r1, sl
 800187c:	018a      	lsls	r2, r1, #6
 800187e:	4651      	mov	r1, sl
 8001880:	ebb2 0801 	subs.w	r8, r2, r1
 8001884:	4659      	mov	r1, fp
 8001886:	eb63 0901 	sbc.w	r9, r3, r1
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800189a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800189e:	4690      	mov	r8, r2
 80018a0:	4699      	mov	r9, r3
 80018a2:	4623      	mov	r3, r4
 80018a4:	eb18 0303 	adds.w	r3, r8, r3
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	462b      	mov	r3, r5
 80018ac:	eb49 0303 	adc.w	r3, r9, r3
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018be:	4629      	mov	r1, r5
 80018c0:	024b      	lsls	r3, r1, #9
 80018c2:	4621      	mov	r1, r4
 80018c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018c8:	4621      	mov	r1, r4
 80018ca:	024a      	lsls	r2, r1, #9
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d2:	2200      	movs	r2, #0
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018dc:	f7fe fc80 	bl	80001e0 <__aeabi_uldivmod>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4613      	mov	r3, r2
 80018e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018e8:	e058      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ea:	4b38      	ldr	r3, [pc, #224]	; (80019cc <HAL_RCC_GetSysClockFreq+0x200>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	099b      	lsrs	r3, r3, #6
 80018f0:	2200      	movs	r2, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	4611      	mov	r1, r2
 80018f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018fa:	623b      	str	r3, [r7, #32]
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001900:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001904:	4642      	mov	r2, r8
 8001906:	464b      	mov	r3, r9
 8001908:	f04f 0000 	mov.w	r0, #0
 800190c:	f04f 0100 	mov.w	r1, #0
 8001910:	0159      	lsls	r1, r3, #5
 8001912:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001916:	0150      	lsls	r0, r2, #5
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4641      	mov	r1, r8
 800191e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001922:	4649      	mov	r1, r9
 8001924:	eb63 0b01 	sbc.w	fp, r3, r1
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001934:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001938:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800193c:	ebb2 040a 	subs.w	r4, r2, sl
 8001940:	eb63 050b 	sbc.w	r5, r3, fp
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	00eb      	lsls	r3, r5, #3
 800194e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001952:	00e2      	lsls	r2, r4, #3
 8001954:	4614      	mov	r4, r2
 8001956:	461d      	mov	r5, r3
 8001958:	4643      	mov	r3, r8
 800195a:	18e3      	adds	r3, r4, r3
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	464b      	mov	r3, r9
 8001960:	eb45 0303 	adc.w	r3, r5, r3
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001972:	4629      	mov	r1, r5
 8001974:	028b      	lsls	r3, r1, #10
 8001976:	4621      	mov	r1, r4
 8001978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800197c:	4621      	mov	r1, r4
 800197e:	028a      	lsls	r2, r1, #10
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001986:	2200      	movs	r2, #0
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	61fa      	str	r2, [r7, #28]
 800198c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001990:	f7fe fc26 	bl	80001e0 <__aeabi_uldivmod>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4613      	mov	r3, r2
 800199a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_RCC_GetSysClockFreq+0x200>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	0c1b      	lsrs	r3, r3, #16
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	3301      	adds	r3, #1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019b6:	e002      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3750      	adds	r7, #80	; 0x50
 80019c4:	46bd      	mov	sp, r7
 80019c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	00f42400 	.word	0x00f42400
 80019d4:	007a1200 	.word	0x007a1200

080019d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <HAL_RCC_GetHCLKFreq+0x14>)
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008

080019f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019f4:	f7ff fff0 	bl	80019d8 <HAL_RCC_GetHCLKFreq>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	0a9b      	lsrs	r3, r3, #10
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	4903      	ldr	r1, [pc, #12]	; (8001a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a06:	5ccb      	ldrb	r3, [r1, r3]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40023800 	.word	0x40023800
 8001a14:	08005a78 	.word	0x08005a78

08001a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a1c:	f7ff ffdc 	bl	80019d8 <HAL_RCC_GetHCLKFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	0b5b      	lsrs	r3, r3, #13
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	4903      	ldr	r1, [pc, #12]	; (8001a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	08005a78 	.word	0x08005a78

08001a40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_RCC_GetClockConfig+0x5c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <HAL_RCC_GetClockConfig+0x5c>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_RCC_GetClockConfig+0x5c>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_GetClockConfig+0x5c>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	08db      	lsrs	r3, r3, #3
 8001a7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <HAL_RCC_GetClockConfig+0x60>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0207 	and.w	r2, r3, #7
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	601a      	str	r2, [r3, #0]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40023c00 	.word	0x40023c00

08001aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e041      	b.n	8001b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f839 	bl	8001b42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3304      	adds	r3, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	f000 f9d8 	bl	8001e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d001      	beq.n	8001b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e04e      	b.n	8001c0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a23      	ldr	r2, [pc, #140]	; (8001c1c <HAL_TIM_Base_Start_IT+0xc4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d022      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9a:	d01d      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d018      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d013      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00e      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1b      	ldr	r2, [pc, #108]	; (8001c2c <HAL_TIM_Base_Start_IT+0xd4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d009      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d004      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d111      	bne.n	8001bfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d010      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0201 	orr.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfa:	e007      	b.n	8001c0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	40000400 	.word	0x40000400
 8001c24:	40000800 	.word	0x40000800
 8001c28:	40000c00 	.word	0x40000c00
 8001c2c:	40010400 	.word	0x40010400
 8001c30:	40014000 	.word	0x40014000
 8001c34:	40001800 	.word	0x40001800

08001c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d122      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d11b      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0202 	mvn.w	r2, #2
 8001c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8ee 	bl	8001e5c <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8e0 	bl	8001e48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f8f1 	bl	8001e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d122      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d11b      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0204 	mvn.w	r2, #4
 8001cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8c4 	bl	8001e5c <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8b6 	bl	8001e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f8c7 	bl	8001e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d122      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d11b      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0208 	mvn.w	r2, #8
 8001d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2204      	movs	r2, #4
 8001d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f89a 	bl	8001e5c <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f88c 	bl	8001e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f89d 	bl	8001e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d122      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b10      	cmp	r3, #16
 8001d56:	d11b      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0210 	mvn.w	r2, #16
 8001d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2208      	movs	r2, #8
 8001d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f870 	bl	8001e5c <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f862 	bl	8001e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f873 	bl	8001e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10e      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d107      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0201 	mvn.w	r2, #1
 8001db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7fe fcc8 	bl	800074c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	2b80      	cmp	r3, #128	; 0x80
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	d107      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f902 	bl	8001fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df2:	2b40      	cmp	r3, #64	; 0x40
 8001df4:	d10e      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e00:	2b40      	cmp	r3, #64	; 0x40
 8001e02:	d107      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f838 	bl	8001e84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	d10e      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d107      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0220 	mvn.w	r2, #32
 8001e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8cc 	bl	8001fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a40      	ldr	r2, [pc, #256]	; (8001fac <TIM_Base_SetConfig+0x114>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d013      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb6:	d00f      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3d      	ldr	r2, [pc, #244]	; (8001fb0 <TIM_Base_SetConfig+0x118>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00b      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3c      	ldr	r2, [pc, #240]	; (8001fb4 <TIM_Base_SetConfig+0x11c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d007      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3b      	ldr	r2, [pc, #236]	; (8001fb8 <TIM_Base_SetConfig+0x120>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d003      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3a      	ldr	r2, [pc, #232]	; (8001fbc <TIM_Base_SetConfig+0x124>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d108      	bne.n	8001eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <TIM_Base_SetConfig+0x114>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d02b      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef8:	d027      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2c      	ldr	r2, [pc, #176]	; (8001fb0 <TIM_Base_SetConfig+0x118>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d023      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <TIM_Base_SetConfig+0x11c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01f      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a2a      	ldr	r2, [pc, #168]	; (8001fb8 <TIM_Base_SetConfig+0x120>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01b      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <TIM_Base_SetConfig+0x124>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d017      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <TIM_Base_SetConfig+0x128>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <TIM_Base_SetConfig+0x12c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00f      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a26      	ldr	r2, [pc, #152]	; (8001fc8 <TIM_Base_SetConfig+0x130>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00b      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <TIM_Base_SetConfig+0x134>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a24      	ldr	r2, [pc, #144]	; (8001fd0 <TIM_Base_SetConfig+0x138>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d003      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a23      	ldr	r2, [pc, #140]	; (8001fd4 <TIM_Base_SetConfig+0x13c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d108      	bne.n	8001f5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <TIM_Base_SetConfig+0x114>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d003      	beq.n	8001f90 <TIM_Base_SetConfig+0xf8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <TIM_Base_SetConfig+0x124>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d103      	bne.n	8001f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	615a      	str	r2, [r3, #20]
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40000800 	.word	0x40000800
 8001fb8:	40000c00 	.word	0x40000c00
 8001fbc:	40010400 	.word	0x40010400
 8001fc0:	40014000 	.word	0x40014000
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40014800 	.word	0x40014800
 8001fcc:	40001800 	.word	0x40001800
 8001fd0:	40001c00 	.word	0x40001c00
 8001fd4:	40002000 	.word	0x40002000

08001fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e03f      	b.n	8002092 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fbd4 	bl	80007d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2224      	movs	r2, #36	; 0x24
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002042:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fd7b 	bl	8002b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002068:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002078:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b08a      	sub	sp, #40	; 0x28
 800209e:	af02      	add	r7, sp, #8
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	4613      	mov	r3, r2
 80020a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d17c      	bne.n	80021b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <HAL_UART_Transmit+0x2c>
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e075      	b.n	80021b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_UART_Transmit+0x3e>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e06e      	b.n	80021b6 <HAL_UART_Transmit+0x11c>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2221      	movs	r2, #33	; 0x21
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020ee:	f7fe fcd9 	bl	8000aa4 <HAL_GetTick>
 80020f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	88fa      	ldrh	r2, [r7, #6]
 80020f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	88fa      	ldrh	r2, [r7, #6]
 80020fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002108:	d108      	bne.n	800211c <HAL_UART_Transmit+0x82>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d104      	bne.n	800211c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	e003      	b.n	8002124 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800212c:	e02a      	b.n	8002184 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2200      	movs	r2, #0
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 faf9 	bl	8002730 <UART_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e036      	b.n	80021b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10b      	bne.n	8002166 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800215c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	3302      	adds	r3, #2
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	e007      	b.n	8002176 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	781a      	ldrb	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	3301      	adds	r3, #1
 8002174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1cf      	bne.n	800212e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2200      	movs	r2, #0
 8002196:	2140      	movs	r1, #64	; 0x40
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 fac9 	bl	8002730 <UART_WaitOnFlagUntilTimeout>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e006      	b.n	80021b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0ba      	sub	sp, #232	; 0xe8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10f      	bne.n	8002226 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_UART_IRQHandler+0x66>
 8002212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fbd3 	bl	80029ca <UART_Receive_IT>
      return;
 8002224:	e256      	b.n	80026d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80de 	beq.w	80023ec <HAL_UART_IRQHandler+0x22c>
 8002230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800223c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002240:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80d1 	beq.w	80023ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800224a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <HAL_UART_IRQHandler+0xae>
 8002256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800226e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_UART_IRQHandler+0xd2>
 800227a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f043 0202 	orr.w	r2, r3, #2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_UART_IRQHandler+0xf6>
 800229e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f043 0204 	orr.w	r2, r3, #4
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d011      	beq.n	80022e6 <HAL_UART_IRQHandler+0x126>
 80022c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f043 0208 	orr.w	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 81ed 	beq.w	80026ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_UART_IRQHandler+0x14e>
 80022fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fb5e 	bl	80029ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002318:	2b40      	cmp	r3, #64	; 0x40
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d103      	bne.n	800233a <HAL_UART_IRQHandler+0x17a>
 8002332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d04f      	beq.n	80023da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fa66 	bl	800280c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b40      	cmp	r3, #64	; 0x40
 800234c:	d141      	bne.n	80023d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3314      	adds	r3, #20
 8002354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800235c:	e853 3f00 	ldrex	r3, [r3]
 8002360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800236c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3314      	adds	r3, #20
 8002376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800237a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800237e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002382:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800238a:	e841 2300 	strex	r3, r2, [r1]
 800238e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1d9      	bne.n	800234e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d013      	beq.n	80023ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	4a7d      	ldr	r2, [pc, #500]	; (800259c <HAL_UART_IRQHandler+0x3dc>)
 80023a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fcd6 	bl	8000d60 <HAL_DMA_Abort_IT>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d016      	beq.n	80023e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023c4:	4610      	mov	r0, r2
 80023c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c8:	e00e      	b.n	80023e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f99a 	bl	8002704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d0:	e00a      	b.n	80023e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f996 	bl	8002704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d8:	e006      	b.n	80023e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f992 	bl	8002704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023e6:	e170      	b.n	80026ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e8:	bf00      	nop
    return;
 80023ea:	e16e      	b.n	80026ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	f040 814a 	bne.w	800268a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8143 	beq.w	800268a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 813c 	beq.w	800268a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002432:	2b40      	cmp	r3, #64	; 0x40
 8002434:	f040 80b4 	bne.w	80025a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8140 	beq.w	80026ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002456:	429a      	cmp	r2, r3
 8002458:	f080 8139 	bcs.w	80026ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002462:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800246e:	f000 8088 	beq.w	8002582 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	330c      	adds	r3, #12
 8002478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002480:	e853 3f00 	ldrex	r3, [r3]
 8002484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800248c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002490:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	330c      	adds	r3, #12
 800249a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800249e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80024aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024ae:	e841 2300 	strex	r3, r2, [r1]
 80024b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1d9      	bne.n	8002472 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3314      	adds	r3, #20
 80024c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c8:	e853 3f00 	ldrex	r3, [r3]
 80024cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3314      	adds	r3, #20
 80024de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024ee:	e841 2300 	strex	r3, r2, [r1]
 80024f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1e1      	bne.n	80024be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3314      	adds	r3, #20
 8002500:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002504:	e853 3f00 	ldrex	r3, [r3]
 8002508:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800250a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800250c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	3314      	adds	r3, #20
 800251a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800251e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002520:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002522:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002524:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002526:	e841 2300 	strex	r3, r2, [r1]
 800252a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800252c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1e3      	bne.n	80024fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	330c      	adds	r3, #12
 8002546:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254a:	e853 3f00 	ldrex	r3, [r3]
 800254e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002552:	f023 0310 	bic.w	r3, r3, #16
 8002556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	330c      	adds	r3, #12
 8002560:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002564:	65ba      	str	r2, [r7, #88]	; 0x58
 8002566:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002568:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800256a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800256c:	e841 2300 	strex	r3, r2, [r1]
 8002570:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e3      	bne.n	8002540 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fb7f 	bl	8000c80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800258a:	b29b      	uxth	r3, r3
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	b29b      	uxth	r3, r3
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f8c0 	bl	8002718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002598:	e099      	b.n	80026ce <HAL_UART_IRQHandler+0x50e>
 800259a:	bf00      	nop
 800259c:	080028d3 	.word	0x080028d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 808b 	beq.w	80026d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80025bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8086 	beq.w	80026d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	330c      	adds	r3, #12
 80025cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d0:	e853 3f00 	ldrex	r3, [r3]
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	330c      	adds	r3, #12
 80025e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025ea:	647a      	str	r2, [r7, #68]	; 0x44
 80025ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025f2:	e841 2300 	strex	r3, r2, [r1]
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1e3      	bne.n	80025c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3314      	adds	r3, #20
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	e853 3f00 	ldrex	r3, [r3]
 800260c:	623b      	str	r3, [r7, #32]
   return(result);
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3314      	adds	r3, #20
 800261e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002622:	633a      	str	r2, [r7, #48]	; 0x30
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800262a:	e841 2300 	strex	r3, r2, [r1]
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1e3      	bne.n	80025fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	330c      	adds	r3, #12
 800264a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	e853 3f00 	ldrex	r3, [r3]
 8002652:	60fb      	str	r3, [r7, #12]
   return(result);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0310 	bic.w	r3, r3, #16
 800265a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	330c      	adds	r3, #12
 8002664:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002668:	61fa      	str	r2, [r7, #28]
 800266a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266c:	69b9      	ldr	r1, [r7, #24]
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	e841 2300 	strex	r3, r2, [r1]
 8002674:	617b      	str	r3, [r7, #20]
   return(result);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e3      	bne.n	8002644 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800267c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f848 	bl	8002718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002688:	e023      	b.n	80026d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800268a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_UART_IRQHandler+0x4ea>
 8002696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800269a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f929 	bl	80028fa <UART_Transmit_IT>
    return;
 80026a8:	e014      	b.n	80026d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00e      	beq.n	80026d4 <HAL_UART_IRQHandler+0x514>
 80026b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d008      	beq.n	80026d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f969 	bl	800299a <UART_EndTransmit_IT>
    return;
 80026c8:	e004      	b.n	80026d4 <HAL_UART_IRQHandler+0x514>
    return;
 80026ca:	bf00      	nop
 80026cc:	e002      	b.n	80026d4 <HAL_UART_IRQHandler+0x514>
      return;
 80026ce:	bf00      	nop
 80026d0:	e000      	b.n	80026d4 <HAL_UART_IRQHandler+0x514>
      return;
 80026d2:	bf00      	nop
  }
}
 80026d4:	37e8      	adds	r7, #232	; 0xe8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop

080026dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b090      	sub	sp, #64	; 0x40
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002740:	e050      	b.n	80027e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d04c      	beq.n	80027e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800274a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <UART_WaitOnFlagUntilTimeout+0x30>
 8002750:	f7fe f9a8 	bl	8000aa4 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800275c:	429a      	cmp	r2, r3
 800275e:	d241      	bcs.n	80027e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	330c      	adds	r3, #12
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	e853 3f00 	ldrex	r3, [r3]
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002780:	637a      	str	r2, [r7, #52]	; 0x34
 8002782:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002788:	e841 2300 	strex	r3, r2, [r1]
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1e5      	bne.n	8002760 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3314      	adds	r3, #20
 800279a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	e853 3f00 	ldrex	r3, [r3]
 80027a2:	613b      	str	r3, [r7, #16]
   return(result);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3314      	adds	r3, #20
 80027b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027b4:	623a      	str	r2, [r7, #32]
 80027b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b8:	69f9      	ldr	r1, [r7, #28]
 80027ba:	6a3a      	ldr	r2, [r7, #32]
 80027bc:	e841 2300 	strex	r3, r2, [r1]
 80027c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1e5      	bne.n	8002794 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e00f      	b.n	8002804 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	4013      	ands	r3, r2
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d09f      	beq.n	8002742 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3740      	adds	r7, #64	; 0x40
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800280c:	b480      	push	{r7}
 800280e:	b095      	sub	sp, #84	; 0x54
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	330c      	adds	r3, #12
 800281a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281e:	e853 3f00 	ldrex	r3, [r3]
 8002822:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800282a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	330c      	adds	r3, #12
 8002832:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002834:	643a      	str	r2, [r7, #64]	; 0x40
 8002836:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800283a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800283c:	e841 2300 	strex	r3, r2, [r1]
 8002840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e5      	bne.n	8002814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3314      	adds	r3, #20
 800284e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	e853 3f00 	ldrex	r3, [r3]
 8002856:	61fb      	str	r3, [r7, #28]
   return(result);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	3314      	adds	r3, #20
 8002866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002868:	62fa      	str	r2, [r7, #44]	; 0x2c
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800286e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002870:	e841 2300 	strex	r3, r2, [r1]
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1e5      	bne.n	8002848 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	2b01      	cmp	r3, #1
 8002882:	d119      	bne.n	80028b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	330c      	adds	r3, #12
 800288a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	e853 3f00 	ldrex	r3, [r3]
 8002892:	60bb      	str	r3, [r7, #8]
   return(result);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f023 0310 	bic.w	r3, r3, #16
 800289a:	647b      	str	r3, [r7, #68]	; 0x44
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	330c      	adds	r3, #12
 80028a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028a4:	61ba      	str	r2, [r7, #24]
 80028a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	6979      	ldr	r1, [r7, #20]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	e841 2300 	strex	r3, r2, [r1]
 80028b0:	613b      	str	r3, [r7, #16]
   return(result);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e5      	bne.n	8002884 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028c6:	bf00      	nop
 80028c8:	3754      	adds	r7, #84	; 0x54
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff ff09 	bl	8002704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b21      	cmp	r3, #33	; 0x21
 800290c:	d13e      	bne.n	800298c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002916:	d114      	bne.n	8002942 <UART_Transmit_IT+0x48>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d110      	bne.n	8002942 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002934:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	1c9a      	adds	r2, r3, #2
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	621a      	str	r2, [r3, #32]
 8002940:	e008      	b.n	8002954 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	1c59      	adds	r1, r3, #1
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6211      	str	r1, [r2, #32]
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29b      	uxth	r3, r3
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4619      	mov	r1, r3
 8002962:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10f      	bne.n	8002988 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002976:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002986:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	e000      	b.n	800298e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800298c:	2302      	movs	r3, #2
  }
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff fe8e 	bl	80026dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b08c      	sub	sp, #48	; 0x30
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b22      	cmp	r3, #34	; 0x22
 80029dc:	f040 80ab 	bne.w	8002b36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e8:	d117      	bne.n	8002a1a <UART_Receive_IT+0x50>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d113      	bne.n	8002a1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	1c9a      	adds	r2, r3, #2
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
 8002a18:	e026      	b.n	8002a68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2c:	d007      	beq.n	8002a3e <UART_Receive_IT+0x74>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10a      	bne.n	8002a4c <UART_Receive_IT+0x82>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e008      	b.n	8002a5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4619      	mov	r1, r3
 8002a76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d15a      	bne.n	8002b32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0220 	bic.w	r2, r2, #32
 8002a8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d135      	bne.n	8002b28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	330c      	adds	r3, #12
 8002ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	e853 3f00 	ldrex	r3, [r3]
 8002ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f023 0310 	bic.w	r3, r3, #16
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	330c      	adds	r3, #12
 8002ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae2:	623a      	str	r2, [r7, #32]
 8002ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae6:	69f9      	ldr	r1, [r7, #28]
 8002ae8:	6a3a      	ldr	r2, [r7, #32]
 8002aea:	e841 2300 	strex	r3, r2, [r1]
 8002aee:	61bb      	str	r3, [r7, #24]
   return(result);
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1e5      	bne.n	8002ac2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d10a      	bne.n	8002b1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff fdf9 	bl	8002718 <HAL_UARTEx_RxEventCallback>
 8002b26:	e002      	b.n	8002b2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff fde1 	bl	80026f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e002      	b.n	8002b38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e000      	b.n	8002b38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
  }
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3730      	adds	r7, #48	; 0x30
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b44:	b0c0      	sub	sp, #256	; 0x100
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5c:	68d9      	ldr	r1, [r3, #12]
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	ea40 0301 	orr.w	r3, r0, r1
 8002b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b98:	f021 010c 	bic.w	r1, r1, #12
 8002b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bba:	6999      	ldr	r1, [r3, #24]
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	ea40 0301 	orr.w	r3, r0, r1
 8002bc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b8f      	ldr	r3, [pc, #572]	; (8002e0c <UART_SetConfig+0x2cc>)
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d005      	beq.n	8002be0 <UART_SetConfig+0xa0>
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <UART_SetConfig+0x2d0>)
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d104      	bne.n	8002bea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002be0:	f7fe ff1a 	bl	8001a18 <HAL_RCC_GetPCLK2Freq>
 8002be4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002be8:	e003      	b.n	8002bf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bea:	f7fe ff01 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 8002bee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfc:	f040 810c 	bne.w	8002e18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c12:	4622      	mov	r2, r4
 8002c14:	462b      	mov	r3, r5
 8002c16:	1891      	adds	r1, r2, r2
 8002c18:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c1a:	415b      	adcs	r3, r3
 8002c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c22:	4621      	mov	r1, r4
 8002c24:	eb12 0801 	adds.w	r8, r2, r1
 8002c28:	4629      	mov	r1, r5
 8002c2a:	eb43 0901 	adc.w	r9, r3, r1
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c42:	4690      	mov	r8, r2
 8002c44:	4699      	mov	r9, r3
 8002c46:	4623      	mov	r3, r4
 8002c48:	eb18 0303 	adds.w	r3, r8, r3
 8002c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c50:	462b      	mov	r3, r5
 8002c52:	eb49 0303 	adc.w	r3, r9, r3
 8002c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c6e:	460b      	mov	r3, r1
 8002c70:	18db      	adds	r3, r3, r3
 8002c72:	653b      	str	r3, [r7, #80]	; 0x50
 8002c74:	4613      	mov	r3, r2
 8002c76:	eb42 0303 	adc.w	r3, r2, r3
 8002c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c84:	f7fd faac 	bl	80001e0 <__aeabi_uldivmod>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4b61      	ldr	r3, [pc, #388]	; (8002e14 <UART_SetConfig+0x2d4>)
 8002c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	011c      	lsls	r4, r3, #4
 8002c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ca0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ca8:	4642      	mov	r2, r8
 8002caa:	464b      	mov	r3, r9
 8002cac:	1891      	adds	r1, r2, r2
 8002cae:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cb0:	415b      	adcs	r3, r3
 8002cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cb8:	4641      	mov	r1, r8
 8002cba:	eb12 0a01 	adds.w	sl, r2, r1
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cd8:	4692      	mov	sl, r2
 8002cda:	469b      	mov	fp, r3
 8002cdc:	4643      	mov	r3, r8
 8002cde:	eb1a 0303 	adds.w	r3, sl, r3
 8002ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8002cec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d04:	460b      	mov	r3, r1
 8002d06:	18db      	adds	r3, r3, r3
 8002d08:	643b      	str	r3, [r7, #64]	; 0x40
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	eb42 0303 	adc.w	r3, r2, r3
 8002d10:	647b      	str	r3, [r7, #68]	; 0x44
 8002d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d1a:	f7fd fa61 	bl	80001e0 <__aeabi_uldivmod>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4611      	mov	r1, r2
 8002d24:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <UART_SetConfig+0x2d4>)
 8002d26:	fba3 2301 	umull	r2, r3, r3, r1
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2264      	movs	r2, #100	; 0x64
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	1acb      	subs	r3, r1, r3
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d3a:	4b36      	ldr	r3, [pc, #216]	; (8002e14 <UART_SetConfig+0x2d4>)
 8002d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d48:	441c      	add	r4, r3
 8002d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d5c:	4642      	mov	r2, r8
 8002d5e:	464b      	mov	r3, r9
 8002d60:	1891      	adds	r1, r2, r2
 8002d62:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d64:	415b      	adcs	r3, r3
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	1851      	adds	r1, r2, r1
 8002d70:	6339      	str	r1, [r7, #48]	; 0x30
 8002d72:	4649      	mov	r1, r9
 8002d74:	414b      	adcs	r3, r1
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d84:	4659      	mov	r1, fp
 8002d86:	00cb      	lsls	r3, r1, #3
 8002d88:	4651      	mov	r1, sl
 8002d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d8e:	4651      	mov	r1, sl
 8002d90:	00ca      	lsls	r2, r1, #3
 8002d92:	4610      	mov	r0, r2
 8002d94:	4619      	mov	r1, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	4642      	mov	r2, r8
 8002d9a:	189b      	adds	r3, r3, r2
 8002d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002da0:	464b      	mov	r3, r9
 8002da2:	460a      	mov	r2, r1
 8002da4:	eb42 0303 	adc.w	r3, r2, r3
 8002da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002db8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	18db      	adds	r3, r3, r3
 8002dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	eb42 0303 	adc.w	r3, r2, r3
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dd6:	f7fd fa03 	bl	80001e0 <__aeabi_uldivmod>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <UART_SetConfig+0x2d4>)
 8002de0:	fba3 1302 	umull	r1, r3, r3, r2
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	2164      	movs	r1, #100	; 0x64
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	3332      	adds	r3, #50	; 0x32
 8002df2:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <UART_SetConfig+0x2d4>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	f003 0207 	and.w	r2, r3, #7
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4422      	add	r2, r4
 8002e06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e08:	e105      	b.n	8003016 <UART_SetConfig+0x4d6>
 8002e0a:	bf00      	nop
 8002e0c:	40011000 	.word	0x40011000
 8002e10:	40011400 	.word	0x40011400
 8002e14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e2a:	4642      	mov	r2, r8
 8002e2c:	464b      	mov	r3, r9
 8002e2e:	1891      	adds	r1, r2, r2
 8002e30:	6239      	str	r1, [r7, #32]
 8002e32:	415b      	adcs	r3, r3
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
 8002e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e3a:	4641      	mov	r1, r8
 8002e3c:	1854      	adds	r4, r2, r1
 8002e3e:	4649      	mov	r1, r9
 8002e40:	eb43 0501 	adc.w	r5, r3, r1
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	00eb      	lsls	r3, r5, #3
 8002e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e52:	00e2      	lsls	r2, r4, #3
 8002e54:	4614      	mov	r4, r2
 8002e56:	461d      	mov	r5, r3
 8002e58:	4643      	mov	r3, r8
 8002e5a:	18e3      	adds	r3, r4, r3
 8002e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e60:	464b      	mov	r3, r9
 8002e62:	eb45 0303 	adc.w	r3, r5, r3
 8002e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e86:	4629      	mov	r1, r5
 8002e88:	008b      	lsls	r3, r1, #2
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e90:	4621      	mov	r1, r4
 8002e92:	008a      	lsls	r2, r1, #2
 8002e94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e98:	f7fd f9a2 	bl	80001e0 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4b60      	ldr	r3, [pc, #384]	; (8003024 <UART_SetConfig+0x4e4>)
 8002ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	011c      	lsls	r4, r3, #4
 8002eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002eb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002eb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ebc:	4642      	mov	r2, r8
 8002ebe:	464b      	mov	r3, r9
 8002ec0:	1891      	adds	r1, r2, r2
 8002ec2:	61b9      	str	r1, [r7, #24]
 8002ec4:	415b      	adcs	r3, r3
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ecc:	4641      	mov	r1, r8
 8002ece:	1851      	adds	r1, r2, r1
 8002ed0:	6139      	str	r1, [r7, #16]
 8002ed2:	4649      	mov	r1, r9
 8002ed4:	414b      	adcs	r3, r1
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ee4:	4659      	mov	r1, fp
 8002ee6:	00cb      	lsls	r3, r1, #3
 8002ee8:	4651      	mov	r1, sl
 8002eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eee:	4651      	mov	r1, sl
 8002ef0:	00ca      	lsls	r2, r1, #3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4642      	mov	r2, r8
 8002efa:	189b      	adds	r3, r3, r2
 8002efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f00:	464b      	mov	r3, r9
 8002f02:	460a      	mov	r2, r1
 8002f04:	eb42 0303 	adc.w	r3, r2, r3
 8002f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f24:	4649      	mov	r1, r9
 8002f26:	008b      	lsls	r3, r1, #2
 8002f28:	4641      	mov	r1, r8
 8002f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f2e:	4641      	mov	r1, r8
 8002f30:	008a      	lsls	r2, r1, #2
 8002f32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f36:	f7fd f953 	bl	80001e0 <__aeabi_uldivmod>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4b39      	ldr	r3, [pc, #228]	; (8003024 <UART_SetConfig+0x4e4>)
 8002f40:	fba3 1302 	umull	r1, r3, r3, r2
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	2164      	movs	r1, #100	; 0x64
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	3332      	adds	r3, #50	; 0x32
 8002f52:	4a34      	ldr	r2, [pc, #208]	; (8003024 <UART_SetConfig+0x4e4>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5e:	441c      	add	r4, r3
 8002f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f64:	2200      	movs	r2, #0
 8002f66:	673b      	str	r3, [r7, #112]	; 0x70
 8002f68:	677a      	str	r2, [r7, #116]	; 0x74
 8002f6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f6e:	4642      	mov	r2, r8
 8002f70:	464b      	mov	r3, r9
 8002f72:	1891      	adds	r1, r2, r2
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	415b      	adcs	r3, r3
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f7e:	4641      	mov	r1, r8
 8002f80:	1851      	adds	r1, r2, r1
 8002f82:	6039      	str	r1, [r7, #0]
 8002f84:	4649      	mov	r1, r9
 8002f86:	414b      	adcs	r3, r1
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f96:	4659      	mov	r1, fp
 8002f98:	00cb      	lsls	r3, r1, #3
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fa0:	4651      	mov	r1, sl
 8002fa2:	00ca      	lsls	r2, r1, #3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4642      	mov	r2, r8
 8002fac:	189b      	adds	r3, r3, r2
 8002fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fb0:	464b      	mov	r3, r9
 8002fb2:	460a      	mov	r2, r1
 8002fb4:	eb42 0303 	adc.w	r3, r2, r3
 8002fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	663b      	str	r3, [r7, #96]	; 0x60
 8002fc4:	667a      	str	r2, [r7, #100]	; 0x64
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fd2:	4649      	mov	r1, r9
 8002fd4:	008b      	lsls	r3, r1, #2
 8002fd6:	4641      	mov	r1, r8
 8002fd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fdc:	4641      	mov	r1, r8
 8002fde:	008a      	lsls	r2, r1, #2
 8002fe0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fe4:	f7fd f8fc 	bl	80001e0 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <UART_SetConfig+0x4e4>)
 8002fee:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	2164      	movs	r1, #100	; 0x64
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	3332      	adds	r3, #50	; 0x32
 8003000:	4a08      	ldr	r2, [pc, #32]	; (8003024 <UART_SetConfig+0x4e4>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	f003 020f 	and.w	r2, r3, #15
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4422      	add	r2, r4
 8003014:	609a      	str	r2, [r3, #8]
}
 8003016:	bf00      	nop
 8003018:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800301c:	46bd      	mov	sp, r7
 800301e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003022:	bf00      	nop
 8003024:	51eb851f 	.word	0x51eb851f

08003028 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <SysTick_Handler+0x1c>)
 800302e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003030:	f001 fc46 	bl	80048c0 <xTaskGetSchedulerState>
 8003034:	4603      	mov	r3, r0
 8003036:	2b01      	cmp	r3, #1
 8003038:	d001      	beq.n	800303e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800303a:	f002 fa2d 	bl	8005498 <xPortSysTickHandler>
  }
}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000e010 	.word	0xe000e010

08003048 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4a07      	ldr	r2, [pc, #28]	; (8003074 <vApplicationGetIdleTaskMemory+0x2c>)
 8003058:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	4a06      	ldr	r2, [pc, #24]	; (8003078 <vApplicationGetIdleTaskMemory+0x30>)
 800305e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	601a      	str	r2, [r3, #0]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	200000c4 	.word	0x200000c4
 8003078:	20000120 	.word	0x20000120

0800307c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800308c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	4a06      	ldr	r2, [pc, #24]	; (80030ac <vApplicationGetTimerTaskMemory+0x30>)
 8003092:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800309a:	601a      	str	r2, [r3, #0]
}
 800309c:	bf00      	nop
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	20000320 	.word	0x20000320
 80030ac:	2000037c 	.word	0x2000037c

080030b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f103 0208 	add.w	r2, r3, #8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f103 0208 	add.w	r2, r3, #8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f103 0208 	add.w	r2, r3, #8
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	601a      	str	r2, [r3, #0]
}
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003152:	b480      	push	{r7}
 8003154:	b085      	sub	sp, #20
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d103      	bne.n	8003172 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	e00c      	b.n	800318c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3308      	adds	r3, #8
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	e002      	b.n	8003180 <vListInsert+0x2e>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	d2f6      	bcs.n	800317a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	601a      	str	r2, [r3, #0]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6892      	ldr	r2, [r2, #8]
 80031da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6852      	ldr	r2, [r2, #4]
 80031e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d103      	bne.n	80031f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	1e5a      	subs	r2, r3, #1
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003242:	f002 f897 	bl	8005374 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	441a      	add	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	3b01      	subs	r3, #1
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	441a      	add	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	22ff      	movs	r2, #255	; 0xff
 8003286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	22ff      	movs	r2, #255	; 0xff
 800328e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d114      	bne.n	80032c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01a      	beq.n	80032d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3310      	adds	r3, #16
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 f94d 	bl	8004544 <xTaskRemoveFromEventList>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d012      	beq.n	80032d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <xQueueGenericReset+0xcc>)
 80032b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	e009      	b.n	80032d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3310      	adds	r3, #16
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fef2 	bl	80030b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3324      	adds	r3, #36	; 0x24
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff feed 	bl	80030b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032d6:	f002 f87d 	bl	80053d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	e000ed04 	.word	0xe000ed04

080032e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08e      	sub	sp, #56	; 0x38
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800330e:	bf00      	nop
 8003310:	e7fe      	b.n	8003310 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
}
 800332a:	bf00      	nop
 800332c:	e7fe      	b.n	800332c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <xQueueGenericCreateStatic+0x52>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <xQueueGenericCreateStatic+0x56>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <xQueueGenericCreateStatic+0x58>
 800333e:	2300      	movs	r3, #0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	623b      	str	r3, [r7, #32]
}
 8003356:	bf00      	nop
 8003358:	e7fe      	b.n	8003358 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <xQueueGenericCreateStatic+0x7e>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <xQueueGenericCreateStatic+0x82>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <xQueueGenericCreateStatic+0x84>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10a      	bne.n	8003386 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	61fb      	str	r3, [r7, #28]
}
 8003382:	bf00      	nop
 8003384:	e7fe      	b.n	8003384 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003386:	2350      	movs	r3, #80	; 0x50
 8003388:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b50      	cmp	r3, #80	; 0x50
 800338e:	d00a      	beq.n	80033a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003394:	f383 8811 	msr	BASEPRI, r3
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	61bb      	str	r3, [r7, #24]
}
 80033a2:	bf00      	nop
 80033a4:	e7fe      	b.n	80033a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80033be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	4613      	mov	r3, r2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f805 	bl	80033d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3730      	adds	r7, #48	; 0x30
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d103      	bne.n	80033f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e002      	b.n	80033fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003406:	2101      	movs	r1, #1
 8003408:	69b8      	ldr	r0, [r7, #24]
 800340a:	f7ff ff05 	bl	8003218 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08e      	sub	sp, #56	; 0x38
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800342e:	2300      	movs	r3, #0
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <xQueueGenericSend+0x32>
	__asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800344e:	bf00      	nop
 8003450:	e7fe      	b.n	8003450 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d103      	bne.n	8003460 <xQueueGenericSend+0x40>
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <xQueueGenericSend+0x44>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <xQueueGenericSend+0x46>
 8003464:	2300      	movs	r3, #0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <xQueueGenericSend+0x60>
	__asm volatile
 800346a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346e:	f383 8811 	msr	BASEPRI, r3
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800347c:	bf00      	nop
 800347e:	e7fe      	b.n	800347e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d103      	bne.n	800348e <xQueueGenericSend+0x6e>
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <xQueueGenericSend+0x72>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <xQueueGenericSend+0x74>
 8003492:	2300      	movs	r3, #0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <xQueueGenericSend+0x8e>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	623b      	str	r3, [r7, #32]
}
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ae:	f001 fa07 	bl	80048c0 <xTaskGetSchedulerState>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <xQueueGenericSend+0x9e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <xQueueGenericSend+0xa2>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <xQueueGenericSend+0xa4>
 80034c2:	2300      	movs	r3, #0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <xQueueGenericSend+0xbe>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	61fb      	str	r3, [r7, #28]
}
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034de:	f001 ff49 	bl	8005374 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d302      	bcc.n	80034f4 <xQueueGenericSend+0xd4>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d129      	bne.n	8003548 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034fa:	f000 fa0b 	bl	8003914 <prvCopyDataToQueue>
 80034fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	3324      	adds	r3, #36	; 0x24
 800350c:	4618      	mov	r0, r3
 800350e:	f001 f819 	bl	8004544 <xTaskRemoveFromEventList>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d013      	beq.n	8003540 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003518:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <xQueueGenericSend+0x1f8>)
 800351a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	e00a      	b.n	8003540 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003530:	4b39      	ldr	r3, [pc, #228]	; (8003618 <xQueueGenericSend+0x1f8>)
 8003532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003540:	f001 ff48 	bl	80053d4 <vPortExitCritical>
				return pdPASS;
 8003544:	2301      	movs	r3, #1
 8003546:	e063      	b.n	8003610 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800354e:	f001 ff41 	bl	80053d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003552:	2300      	movs	r3, #0
 8003554:	e05c      	b.n	8003610 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003558:	2b00      	cmp	r3, #0
 800355a:	d106      	bne.n	800356a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	4618      	mov	r0, r3
 8003562:	f001 f853 	bl	800460c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003566:	2301      	movs	r3, #1
 8003568:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800356a:	f001 ff33 	bl	80053d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800356e:	f000 fdc5 	bl	80040fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003572:	f001 feff 	bl	8005374 <vPortEnterCritical>
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800357c:	b25b      	sxtb	r3, r3
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d103      	bne.n	800358c <xQueueGenericSend+0x16c>
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003592:	b25b      	sxtb	r3, r3
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d103      	bne.n	80035a2 <xQueueGenericSend+0x182>
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a2:	f001 ff17 	bl	80053d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035a6:	1d3a      	adds	r2, r7, #4
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f001 f842 	bl	8004638 <xTaskCheckForTimeOut>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d124      	bne.n	8003604 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035bc:	f000 faa2 	bl	8003b04 <prvIsQueueFull>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d018      	beq.n	80035f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	3310      	adds	r3, #16
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 ff68 	bl	80044a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035d6:	f000 fa2d 	bl	8003a34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035da:	f000 fd9d 	bl	8004118 <xTaskResumeAll>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f47f af7c 	bne.w	80034de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <xQueueGenericSend+0x1f8>)
 80035e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	e772      	b.n	80034de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035fa:	f000 fa1b 	bl	8003a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035fe:	f000 fd8b 	bl	8004118 <xTaskResumeAll>
 8003602:	e76c      	b.n	80034de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003606:	f000 fa15 	bl	8003a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800360a:	f000 fd85 	bl	8004118 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800360e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003610:	4618      	mov	r0, r3
 8003612:	3738      	adds	r7, #56	; 0x38
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	e000ed04 	.word	0xe000ed04

0800361c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b090      	sub	sp, #64	; 0x40
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d103      	bne.n	8003658 <xQueueGenericSendFromISR+0x3c>
 8003650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <xQueueGenericSendFromISR+0x40>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <xQueueGenericSendFromISR+0x42>
 800365c:	2300      	movs	r3, #0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d103      	bne.n	8003686 <xQueueGenericSendFromISR+0x6a>
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <xQueueGenericSendFromISR+0x6e>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <xQueueGenericSendFromISR+0x70>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	623b      	str	r3, [r7, #32]
}
 80036a2:	bf00      	nop
 80036a4:	e7fe      	b.n	80036a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036a6:	f001 ff47 	bl	8005538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036aa:	f3ef 8211 	mrs	r2, BASEPRI
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	61fa      	str	r2, [r7, #28]
 80036c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <xQueueGenericSendFromISR+0xbc>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d12f      	bne.n	8003738 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036ee:	f000 f911 	bl	8003914 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fa:	d112      	bne.n	8003722 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	2b00      	cmp	r3, #0
 8003702:	d016      	beq.n	8003732 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	3324      	adds	r3, #36	; 0x24
 8003708:	4618      	mov	r0, r3
 800370a:	f000 ff1b 	bl	8004544 <xTaskRemoveFromEventList>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00e      	beq.n	8003732 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	e007      	b.n	8003732 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003722:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003726:	3301      	adds	r3, #1
 8003728:	b2db      	uxtb	r3, r3
 800372a:	b25a      	sxtb	r2, r3
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003732:	2301      	movs	r3, #1
 8003734:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003736:	e001      	b.n	800373c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003738:	2300      	movs	r3, #0
 800373a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800373c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003746:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800374a:	4618      	mov	r0, r3
 800374c:	3740      	adds	r7, #64	; 0x40
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	; 0x30
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003760:	2300      	movs	r3, #0
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <xQueueReceive+0x30>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	623b      	str	r3, [r7, #32]
}
 8003780:	bf00      	nop
 8003782:	e7fe      	b.n	8003782 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d103      	bne.n	8003792 <xQueueReceive+0x3e>
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <xQueueReceive+0x42>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <xQueueReceive+0x44>
 8003796:	2300      	movs	r3, #0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <xQueueReceive+0x5e>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	61fb      	str	r3, [r7, #28]
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037b2:	f001 f885 	bl	80048c0 <xTaskGetSchedulerState>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <xQueueReceive+0x6e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <xQueueReceive+0x72>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <xQueueReceive+0x74>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <xQueueReceive+0x8e>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	61bb      	str	r3, [r7, #24]
}
 80037de:	bf00      	nop
 80037e0:	e7fe      	b.n	80037e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037e2:	f001 fdc7 	bl	8005374 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01f      	beq.n	8003832 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f6:	f000 f8f7 	bl	80039e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	1e5a      	subs	r2, r3, #1
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00f      	beq.n	800382a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	3310      	adds	r3, #16
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fe98 	bl	8004544 <xTaskRemoveFromEventList>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800381a:	4b3d      	ldr	r3, [pc, #244]	; (8003910 <xQueueReceive+0x1bc>)
 800381c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800382a:	f001 fdd3 	bl	80053d4 <vPortExitCritical>
				return pdPASS;
 800382e:	2301      	movs	r3, #1
 8003830:	e069      	b.n	8003906 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d103      	bne.n	8003840 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003838:	f001 fdcc 	bl	80053d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800383c:	2300      	movs	r3, #0
 800383e:	e062      	b.n	8003906 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003846:	f107 0310 	add.w	r3, r7, #16
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fede 	bl	800460c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003850:	2301      	movs	r3, #1
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003854:	f001 fdbe 	bl	80053d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003858:	f000 fc50 	bl	80040fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800385c:	f001 fd8a 	bl	8005374 <vPortEnterCritical>
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003866:	b25b      	sxtb	r3, r3
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d103      	bne.n	8003876 <xQueueReceive+0x122>
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800387c:	b25b      	sxtb	r3, r3
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	d103      	bne.n	800388c <xQueueReceive+0x138>
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800388c:	f001 fda2 	bl	80053d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003890:	1d3a      	adds	r2, r7, #4
 8003892:	f107 0310 	add.w	r3, r7, #16
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fecd 	bl	8004638 <xTaskCheckForTimeOut>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d123      	bne.n	80038ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038a6:	f000 f917 	bl	8003ad8 <prvIsQueueEmpty>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	3324      	adds	r3, #36	; 0x24
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fdf3 	bl	80044a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c0:	f000 f8b8 	bl	8003a34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038c4:	f000 fc28 	bl	8004118 <xTaskResumeAll>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d189      	bne.n	80037e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <xQueueReceive+0x1bc>)
 80038d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	e780      	b.n	80037e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038e2:	f000 f8a7 	bl	8003a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038e6:	f000 fc17 	bl	8004118 <xTaskResumeAll>
 80038ea:	e77a      	b.n	80037e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ee:	f000 f8a1 	bl	8003a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038f2:	f000 fc11 	bl	8004118 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038f8:	f000 f8ee 	bl	8003ad8 <prvIsQueueEmpty>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f43f af6f 	beq.w	80037e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003904:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003906:	4618      	mov	r0, r3
 8003908:	3730      	adds	r7, #48	; 0x30
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	e000ed04 	.word	0xe000ed04

08003914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10d      	bne.n	800394e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d14d      	bne.n	80039d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 ffdc 	bl	80048fc <xTaskPriorityDisinherit>
 8003944:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	e043      	b.n	80039d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d119      	bne.n	8003988 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6858      	ldr	r0, [r3, #4]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	461a      	mov	r2, r3
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	f002 f838 	bl	80059d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	441a      	add	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	429a      	cmp	r2, r3
 800397c:	d32b      	bcc.n	80039d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	e026      	b.n	80039d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68d8      	ldr	r0, [r3, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	461a      	mov	r2, r3
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	f002 f81e 	bl	80059d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	425b      	negs	r3, r3
 80039a2:	441a      	add	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d207      	bcs.n	80039c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	425b      	negs	r3, r3
 80039be:	441a      	add	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d105      	bne.n	80039d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80039de:	697b      	ldr	r3, [r7, #20]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d018      	beq.n	8003a2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	441a      	add	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d303      	bcc.n	8003a1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68d9      	ldr	r1, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	461a      	mov	r2, r3
 8003a26:	6838      	ldr	r0, [r7, #0]
 8003a28:	f001 ffd4 	bl	80059d4 <memcpy>
	}
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a3c:	f001 fc9a 	bl	8005374 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a48:	e011      	b.n	8003a6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d012      	beq.n	8003a78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3324      	adds	r3, #36	; 0x24
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fd74 	bl	8004544 <xTaskRemoveFromEventList>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a62:	f000 fe4b 	bl	80046fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	dce9      	bgt.n	8003a4a <prvUnlockQueue+0x16>
 8003a76:	e000      	b.n	8003a7a <prvUnlockQueue+0x46>
					break;
 8003a78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	22ff      	movs	r2, #255	; 0xff
 8003a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a82:	f001 fca7 	bl	80053d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a86:	f001 fc75 	bl	8005374 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a92:	e011      	b.n	8003ab8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d012      	beq.n	8003ac2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3310      	adds	r3, #16
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fd4f 	bl	8004544 <xTaskRemoveFromEventList>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003aac:	f000 fe26 	bl	80046fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ab0:	7bbb      	ldrb	r3, [r7, #14]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	dce9      	bgt.n	8003a94 <prvUnlockQueue+0x60>
 8003ac0:	e000      	b.n	8003ac4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ac2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	22ff      	movs	r2, #255	; 0xff
 8003ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003acc:	f001 fc82 	bl	80053d4 <vPortExitCritical>
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ae0:	f001 fc48 	bl	8005374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d102      	bne.n	8003af2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003aec:	2301      	movs	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e001      	b.n	8003af6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003af6:	f001 fc6d 	bl	80053d4 <vPortExitCritical>

	return xReturn;
 8003afa:	68fb      	ldr	r3, [r7, #12]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b0c:	f001 fc32 	bl	8005374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d102      	bne.n	8003b22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	e001      	b.n	8003b26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b26:	f001 fc55 	bl	80053d4 <vPortExitCritical>

	return xReturn;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	e014      	b.n	8003b6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b44:	4a0f      	ldr	r2, [pc, #60]	; (8003b84 <vQueueAddToRegistry+0x50>)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b50:	490c      	ldr	r1, [pc, #48]	; (8003b84 <vQueueAddToRegistry+0x50>)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <vQueueAddToRegistry+0x50>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b66:	e006      	b.n	8003b76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b07      	cmp	r3, #7
 8003b72:	d9e7      	bls.n	8003b44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	2000077c 	.word	0x2000077c

08003b88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b98:	f001 fbec 	bl	8005374 <vPortEnterCritical>
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ba2:	b25b      	sxtb	r3, r3
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d103      	bne.n	8003bb2 <vQueueWaitForMessageRestricted+0x2a>
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bb8:	b25b      	sxtb	r3, r3
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	d103      	bne.n	8003bc8 <vQueueWaitForMessageRestricted+0x40>
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bc8:	f001 fc04 	bl	80053d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	3324      	adds	r3, #36	; 0x24
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fc85 	bl	80044ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003be2:	6978      	ldr	r0, [r7, #20]
 8003be4:	f7ff ff26 	bl	8003a34 <prvUnlockQueue>
	}
 8003be8:	bf00      	nop
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08e      	sub	sp, #56	; 0x38
 8003bf4:	af04      	add	r7, sp, #16
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	623b      	str	r3, [r7, #32]
}
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <xTaskCreateStatic+0x46>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	61fb      	str	r3, [r7, #28]
}
 8003c32:	bf00      	nop
 8003c34:	e7fe      	b.n	8003c34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c36:	235c      	movs	r3, #92	; 0x5c
 8003c38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b5c      	cmp	r3, #92	; 0x5c
 8003c3e:	d00a      	beq.n	8003c56 <xTaskCreateStatic+0x66>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	61bb      	str	r3, [r7, #24]
}
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01e      	beq.n	8003c9c <xTaskCreateStatic+0xac>
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01b      	beq.n	8003c9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	2202      	movs	r2, #2
 8003c72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c76:	2300      	movs	r3, #0
 8003c78:	9303      	str	r3, [sp, #12]
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	9302      	str	r3, [sp, #8]
 8003c7e:	f107 0314 	add.w	r3, r7, #20
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f850 	bl	8003d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c96:	f000 f8dd 	bl	8003e54 <prvAddNewTaskToReadyList>
 8003c9a:	e001      	b.n	8003ca0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ca0:	697b      	ldr	r3, [r7, #20]
	}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3728      	adds	r7, #40	; 0x28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b08c      	sub	sp, #48	; 0x30
 8003cae:	af04      	add	r7, sp, #16
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f001 fc7a 	bl	80055b8 <pvPortMalloc>
 8003cc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00e      	beq.n	8003cea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ccc:	205c      	movs	r0, #92	; 0x5c
 8003cce:	f001 fc73 	bl	80055b8 <pvPortMalloc>
 8003cd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce0:	e005      	b.n	8003cee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ce2:	6978      	ldr	r0, [r7, #20]
 8003ce4:	f001 fd34 	bl	8005750 <vPortFree>
 8003ce8:	e001      	b.n	8003cee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d017      	beq.n	8003d24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	9303      	str	r3, [sp, #12]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	9302      	str	r3, [sp, #8]
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	9301      	str	r3, [sp, #4]
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f80e 	bl	8003d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d18:	69f8      	ldr	r0, [r7, #28]
 8003d1a:	f000 f89b 	bl	8003e54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	e002      	b.n	8003d2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295
 8003d28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d2a:	69bb      	ldr	r3, [r7, #24]
	}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	21a5      	movs	r1, #165	; 0xa5
 8003d4e:	f001 fe4f 	bl	80059f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	f023 0307 	bic.w	r3, r3, #7
 8003d6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	617b      	str	r3, [r7, #20]
}
 8003d88:	bf00      	nop
 8003d8a:	e7fe      	b.n	8003d8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01f      	beq.n	8003dd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	e012      	b.n	8003dbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	7819      	ldrb	r1, [r3, #0]
 8003da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	3334      	adds	r3, #52	; 0x34
 8003da8:	460a      	mov	r2, r1
 8003daa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d006      	beq.n	8003dc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	2b0f      	cmp	r3, #15
 8003dc2:	d9e9      	bls.n	8003d98 <prvInitialiseNewTask+0x64>
 8003dc4:	e000      	b.n	8003dc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8003dc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dd0:	e003      	b.n	8003dda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	2b37      	cmp	r3, #55	; 0x37
 8003dde:	d901      	bls.n	8003de4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003de0:	2337      	movs	r3, #55	; 0x37
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	2200      	movs	r2, #0
 8003df4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff f978 	bl	80030f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	3318      	adds	r3, #24
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff f973 	bl	80030f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	2200      	movs	r2, #0
 8003e24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	68f9      	ldr	r1, [r7, #12]
 8003e32:	69b8      	ldr	r0, [r7, #24]
 8003e34:	f001 f972 	bl	800511c <pxPortInitialiseStack>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e4a:	bf00      	nop
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e5c:	f001 fa8a 	bl	8005374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e60:	4b2d      	ldr	r3, [pc, #180]	; (8003f18 <prvAddNewTaskToReadyList+0xc4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3301      	adds	r3, #1
 8003e66:	4a2c      	ldr	r2, [pc, #176]	; (8003f18 <prvAddNewTaskToReadyList+0xc4>)
 8003e68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e6a:	4b2c      	ldr	r3, [pc, #176]	; (8003f1c <prvAddNewTaskToReadyList+0xc8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e72:	4a2a      	ldr	r2, [pc, #168]	; (8003f1c <prvAddNewTaskToReadyList+0xc8>)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e78:	4b27      	ldr	r3, [pc, #156]	; (8003f18 <prvAddNewTaskToReadyList+0xc4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d110      	bne.n	8003ea2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e80:	f000 fc60 	bl	8004744 <prvInitialiseTaskLists>
 8003e84:	e00d      	b.n	8003ea2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e86:	4b26      	ldr	r3, [pc, #152]	; (8003f20 <prvAddNewTaskToReadyList+0xcc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e8e:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <prvAddNewTaskToReadyList+0xc8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d802      	bhi.n	8003ea2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <prvAddNewTaskToReadyList+0xc8>)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ea2:	4b20      	ldr	r3, [pc, #128]	; (8003f24 <prvAddNewTaskToReadyList+0xd0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	4a1e      	ldr	r2, [pc, #120]	; (8003f24 <prvAddNewTaskToReadyList+0xd0>)
 8003eaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003eac:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <prvAddNewTaskToReadyList+0xd0>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb8:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <prvAddNewTaskToReadyList+0xd4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d903      	bls.n	8003ec8 <prvAddNewTaskToReadyList+0x74>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <prvAddNewTaskToReadyList+0xd4>)
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <prvAddNewTaskToReadyList+0xd8>)
 8003ed6:	441a      	add	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	4619      	mov	r1, r3
 8003ede:	4610      	mov	r0, r2
 8003ee0:	f7ff f913 	bl	800310a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ee4:	f001 fa76 	bl	80053d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ee8:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <prvAddNewTaskToReadyList+0xcc>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00e      	beq.n	8003f0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <prvAddNewTaskToReadyList+0xc8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d207      	bcs.n	8003f0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <prvAddNewTaskToReadyList+0xdc>)
 8003f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000c90 	.word	0x20000c90
 8003f1c:	200007bc 	.word	0x200007bc
 8003f20:	20000c9c 	.word	0x20000c9c
 8003f24:	20000cac 	.word	0x20000cac
 8003f28:	20000c98 	.word	0x20000c98
 8003f2c:	200007c0 	.word	0x200007c0
 8003f30:	e000ed04 	.word	0xe000ed04

08003f34 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <vTaskDelayUntil+0x2a>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	617b      	str	r3, [r7, #20]
}
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <vTaskDelayUntil+0x46>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	613b      	str	r3, [r7, #16]
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8003f7a:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <vTaskDelayUntil+0xf0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <vTaskDelayUntil+0x64>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	60fb      	str	r3, [r7, #12]
}
 8003f94:	bf00      	nop
 8003f96:	e7fe      	b.n	8003f96 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8003f98:	f000 f8b0 	bl	80040fc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003f9c:	4b22      	ldr	r3, [pc, #136]	; (8004028 <vTaskDelayUntil+0xf4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	4413      	add	r3, r2
 8003faa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6a3a      	ldr	r2, [r7, #32]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d20b      	bcs.n	8003fce <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d211      	bcs.n	8003fe4 <vTaskDelayUntil+0xb0>
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d90d      	bls.n	8003fe4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
 8003fcc:	e00a      	b.n	8003fe4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d303      	bcc.n	8003fe0 <vTaskDelayUntil+0xac>
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d901      	bls.n	8003fe4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d006      	beq.n	8003ffe <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fced 	bl	80049d8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003ffe:	f000 f88b 	bl	8004118 <xTaskResumeAll>
 8004002:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d107      	bne.n	800401a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800400a:	4b08      	ldr	r3, [pc, #32]	; (800402c <vTaskDelayUntil+0xf8>)
 800400c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800401a:	bf00      	nop
 800401c:	3728      	adds	r7, #40	; 0x28
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000cb8 	.word	0x20000cb8
 8004028:	20000c94 	.word	0x20000c94
 800402c:	e000ed04 	.word	0xe000ed04

08004030 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800403e:	463a      	mov	r2, r7
 8004040:	1d39      	adds	r1, r7, #4
 8004042:	f107 0308 	add.w	r3, r7, #8
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fffe 	bl	8003048 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800404c:	6839      	ldr	r1, [r7, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	9202      	str	r2, [sp, #8]
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	2300      	movs	r3, #0
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2300      	movs	r3, #0
 800405c:	460a      	mov	r2, r1
 800405e:	4921      	ldr	r1, [pc, #132]	; (80040e4 <vTaskStartScheduler+0xb4>)
 8004060:	4821      	ldr	r0, [pc, #132]	; (80040e8 <vTaskStartScheduler+0xb8>)
 8004062:	f7ff fdc5 	bl	8003bf0 <xTaskCreateStatic>
 8004066:	4603      	mov	r3, r0
 8004068:	4a20      	ldr	r2, [pc, #128]	; (80040ec <vTaskStartScheduler+0xbc>)
 800406a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800406c:	4b1f      	ldr	r3, [pc, #124]	; (80040ec <vTaskStartScheduler+0xbc>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004074:	2301      	movs	r3, #1
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	e001      	b.n	800407e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d102      	bne.n	800408a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004084:	f000 fcfc 	bl	8004a80 <xTimerCreateTimerTask>
 8004088:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d116      	bne.n	80040be <vTaskStartScheduler+0x8e>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	613b      	str	r3, [r7, #16]
}
 80040a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040a4:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <vTaskStartScheduler+0xc0>)
 80040a6:	f04f 32ff 	mov.w	r2, #4294967295
 80040aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <vTaskStartScheduler+0xc4>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040b2:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <vTaskStartScheduler+0xc8>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040b8:	f001 f8ba 	bl	8005230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040bc:	e00e      	b.n	80040dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d10a      	bne.n	80040dc <vTaskStartScheduler+0xac>
	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	60fb      	str	r3, [r7, #12]
}
 80040d8:	bf00      	nop
 80040da:	e7fe      	b.n	80040da <vTaskStartScheduler+0xaa>
}
 80040dc:	bf00      	nop
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	08005a50 	.word	0x08005a50
 80040e8:	08004715 	.word	0x08004715
 80040ec:	20000cb4 	.word	0x20000cb4
 80040f0:	20000cb0 	.word	0x20000cb0
 80040f4:	20000c9c 	.word	0x20000c9c
 80040f8:	20000c94 	.word	0x20000c94

080040fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <vTaskSuspendAll+0x18>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3301      	adds	r3, #1
 8004106:	4a03      	ldr	r2, [pc, #12]	; (8004114 <vTaskSuspendAll+0x18>)
 8004108:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	20000cb8 	.word	0x20000cb8

08004118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004126:	4b42      	ldr	r3, [pc, #264]	; (8004230 <xTaskResumeAll+0x118>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <xTaskResumeAll+0x2c>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	603b      	str	r3, [r7, #0]
}
 8004140:	bf00      	nop
 8004142:	e7fe      	b.n	8004142 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004144:	f001 f916 	bl	8005374 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004148:	4b39      	ldr	r3, [pc, #228]	; (8004230 <xTaskResumeAll+0x118>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3b01      	subs	r3, #1
 800414e:	4a38      	ldr	r2, [pc, #224]	; (8004230 <xTaskResumeAll+0x118>)
 8004150:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004152:	4b37      	ldr	r3, [pc, #220]	; (8004230 <xTaskResumeAll+0x118>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d162      	bne.n	8004220 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800415a:	4b36      	ldr	r3, [pc, #216]	; (8004234 <xTaskResumeAll+0x11c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d05e      	beq.n	8004220 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004162:	e02f      	b.n	80041c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004164:	4b34      	ldr	r3, [pc, #208]	; (8004238 <xTaskResumeAll+0x120>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3318      	adds	r3, #24
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff f827 	bl	80031c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3304      	adds	r3, #4
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff f822 	bl	80031c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004184:	4b2d      	ldr	r3, [pc, #180]	; (800423c <xTaskResumeAll+0x124>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d903      	bls.n	8004194 <xTaskResumeAll+0x7c>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	4a2a      	ldr	r2, [pc, #168]	; (800423c <xTaskResumeAll+0x124>)
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4a27      	ldr	r2, [pc, #156]	; (8004240 <xTaskResumeAll+0x128>)
 80041a2:	441a      	add	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f7fe ffad 	bl	800310a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	4b23      	ldr	r3, [pc, #140]	; (8004244 <xTaskResumeAll+0x12c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80041be:	4b22      	ldr	r3, [pc, #136]	; (8004248 <xTaskResumeAll+0x130>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041c4:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <xTaskResumeAll+0x120>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1cb      	bne.n	8004164 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041d2:	f000 fb55 	bl	8004880 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <xTaskResumeAll+0x134>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d010      	beq.n	8004204 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041e2:	f000 f847 	bl	8004274 <xTaskIncrementTick>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80041ec:	4b16      	ldr	r3, [pc, #88]	; (8004248 <xTaskResumeAll+0x130>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f1      	bne.n	80041e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <xTaskResumeAll+0x134>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004204:	4b10      	ldr	r3, [pc, #64]	; (8004248 <xTaskResumeAll+0x130>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800420c:	2301      	movs	r3, #1
 800420e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004210:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <xTaskResumeAll+0x138>)
 8004212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004220:	f001 f8d8 	bl	80053d4 <vPortExitCritical>

	return xAlreadyYielded;
 8004224:	68bb      	ldr	r3, [r7, #8]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000cb8 	.word	0x20000cb8
 8004234:	20000c90 	.word	0x20000c90
 8004238:	20000c50 	.word	0x20000c50
 800423c:	20000c98 	.word	0x20000c98
 8004240:	200007c0 	.word	0x200007c0
 8004244:	200007bc 	.word	0x200007bc
 8004248:	20000ca4 	.word	0x20000ca4
 800424c:	20000ca0 	.word	0x20000ca0
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <xTaskGetTickCount+0x1c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004260:	687b      	ldr	r3, [r7, #4]
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000c94 	.word	0x20000c94

08004274 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800427e:	4b4f      	ldr	r3, [pc, #316]	; (80043bc <xTaskIncrementTick+0x148>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 808f 	bne.w	80043a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004288:	4b4d      	ldr	r3, [pc, #308]	; (80043c0 <xTaskIncrementTick+0x14c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3301      	adds	r3, #1
 800428e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004290:	4a4b      	ldr	r2, [pc, #300]	; (80043c0 <xTaskIncrementTick+0x14c>)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d120      	bne.n	80042de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800429c:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <xTaskIncrementTick+0x150>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <xTaskIncrementTick+0x48>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	603b      	str	r3, [r7, #0]
}
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <xTaskIncrementTick+0x46>
 80042bc:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <xTaskIncrementTick+0x150>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	4b41      	ldr	r3, [pc, #260]	; (80043c8 <xTaskIncrementTick+0x154>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a3f      	ldr	r2, [pc, #252]	; (80043c4 <xTaskIncrementTick+0x150>)
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4a3f      	ldr	r2, [pc, #252]	; (80043c8 <xTaskIncrementTick+0x154>)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b3e      	ldr	r3, [pc, #248]	; (80043cc <xTaskIncrementTick+0x158>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	4a3d      	ldr	r2, [pc, #244]	; (80043cc <xTaskIncrementTick+0x158>)
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	f000 fad1 	bl	8004880 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042de:	4b3c      	ldr	r3, [pc, #240]	; (80043d0 <xTaskIncrementTick+0x15c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d349      	bcc.n	800437c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042e8:	4b36      	ldr	r3, [pc, #216]	; (80043c4 <xTaskIncrementTick+0x150>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d104      	bne.n	80042fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f2:	4b37      	ldr	r3, [pc, #220]	; (80043d0 <xTaskIncrementTick+0x15c>)
 80042f4:	f04f 32ff 	mov.w	r2, #4294967295
 80042f8:	601a      	str	r2, [r3, #0]
					break;
 80042fa:	e03f      	b.n	800437c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042fc:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <xTaskIncrementTick+0x150>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	429a      	cmp	r2, r3
 8004312:	d203      	bcs.n	800431c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004314:	4a2e      	ldr	r2, [pc, #184]	; (80043d0 <xTaskIncrementTick+0x15c>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800431a:	e02f      	b.n	800437c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	3304      	adds	r3, #4
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe ff4f 	bl	80031c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	3318      	adds	r3, #24
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe ff46 	bl	80031c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433c:	4b25      	ldr	r3, [pc, #148]	; (80043d4 <xTaskIncrementTick+0x160>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d903      	bls.n	800434c <xTaskIncrementTick+0xd8>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	4a22      	ldr	r2, [pc, #136]	; (80043d4 <xTaskIncrementTick+0x160>)
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4a1f      	ldr	r2, [pc, #124]	; (80043d8 <xTaskIncrementTick+0x164>)
 800435a:	441a      	add	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	3304      	adds	r3, #4
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f7fe fed1 	bl	800310a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <xTaskIncrementTick+0x168>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	429a      	cmp	r2, r3
 8004374:	d3b8      	bcc.n	80042e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004376:	2301      	movs	r3, #1
 8004378:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800437a:	e7b5      	b.n	80042e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800437c:	4b17      	ldr	r3, [pc, #92]	; (80043dc <xTaskIncrementTick+0x168>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004382:	4915      	ldr	r1, [pc, #84]	; (80043d8 <xTaskIncrementTick+0x164>)
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d901      	bls.n	8004398 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004394:	2301      	movs	r3, #1
 8004396:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <xTaskIncrementTick+0x16c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80043a0:	2301      	movs	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e004      	b.n	80043b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043a6:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <xTaskIncrementTick+0x170>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3301      	adds	r3, #1
 80043ac:	4a0d      	ldr	r2, [pc, #52]	; (80043e4 <xTaskIncrementTick+0x170>)
 80043ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043b0:	697b      	ldr	r3, [r7, #20]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000cb8 	.word	0x20000cb8
 80043c0:	20000c94 	.word	0x20000c94
 80043c4:	20000c48 	.word	0x20000c48
 80043c8:	20000c4c 	.word	0x20000c4c
 80043cc:	20000ca8 	.word	0x20000ca8
 80043d0:	20000cb0 	.word	0x20000cb0
 80043d4:	20000c98 	.word	0x20000c98
 80043d8:	200007c0 	.word	0x200007c0
 80043dc:	200007bc 	.word	0x200007bc
 80043e0:	20000ca4 	.word	0x20000ca4
 80043e4:	20000ca0 	.word	0x20000ca0

080043e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043ee:	4b28      	ldr	r3, [pc, #160]	; (8004490 <vTaskSwitchContext+0xa8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043f6:	4b27      	ldr	r3, [pc, #156]	; (8004494 <vTaskSwitchContext+0xac>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043fc:	e041      	b.n	8004482 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80043fe:	4b25      	ldr	r3, [pc, #148]	; (8004494 <vTaskSwitchContext+0xac>)
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004404:	4b24      	ldr	r3, [pc, #144]	; (8004498 <vTaskSwitchContext+0xb0>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e010      	b.n	800442e <vTaskSwitchContext+0x46>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <vTaskSwitchContext+0x40>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	607b      	str	r3, [r7, #4]
}
 8004424:	bf00      	nop
 8004426:	e7fe      	b.n	8004426 <vTaskSwitchContext+0x3e>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3b01      	subs	r3, #1
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	491b      	ldr	r1, [pc, #108]	; (800449c <vTaskSwitchContext+0xb4>)
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0e4      	beq.n	800440c <vTaskSwitchContext+0x24>
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4a13      	ldr	r2, [pc, #76]	; (800449c <vTaskSwitchContext+0xb4>)
 800444e:	4413      	add	r3, r2
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	3308      	adds	r3, #8
 8004464:	429a      	cmp	r2, r3
 8004466:	d104      	bne.n	8004472 <vTaskSwitchContext+0x8a>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <vTaskSwitchContext+0xb8>)
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	4a06      	ldr	r2, [pc, #24]	; (8004498 <vTaskSwitchContext+0xb0>)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6013      	str	r3, [r2, #0]
}
 8004482:	bf00      	nop
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20000cb8 	.word	0x20000cb8
 8004494:	20000ca4 	.word	0x20000ca4
 8004498:	20000c98 	.word	0x20000c98
 800449c:	200007c0 	.word	0x200007c0
 80044a0:	200007bc 	.word	0x200007bc

080044a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	60fb      	str	r3, [r7, #12]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044ca:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <vTaskPlaceOnEventList+0x44>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3318      	adds	r3, #24
 80044d0:	4619      	mov	r1, r3
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fe fe3d 	bl	8003152 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044d8:	2101      	movs	r1, #1
 80044da:	6838      	ldr	r0, [r7, #0]
 80044dc:	f000 fa7c 	bl	80049d8 <prvAddCurrentTaskToDelayedList>
}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	200007bc 	.word	0x200007bc

080044ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	617b      	str	r3, [r7, #20]
}
 8004510:	bf00      	nop
 8004512:	e7fe      	b.n	8004512 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <vTaskPlaceOnEventListRestricted+0x54>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3318      	adds	r3, #24
 800451a:	4619      	mov	r1, r3
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7fe fdf4 	bl	800310a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004528:	f04f 33ff 	mov.w	r3, #4294967295
 800452c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	68b8      	ldr	r0, [r7, #8]
 8004532:	f000 fa51 	bl	80049d8 <prvAddCurrentTaskToDelayedList>
	}
 8004536:	bf00      	nop
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	200007bc 	.word	0x200007bc

08004544 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10a      	bne.n	8004570 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	60fb      	str	r3, [r7, #12]
}
 800456c:	bf00      	nop
 800456e:	e7fe      	b.n	800456e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	3318      	adds	r3, #24
 8004574:	4618      	mov	r0, r3
 8004576:	f7fe fe25 	bl	80031c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800457a:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <xTaskRemoveFromEventList+0xb0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d11d      	bne.n	80045be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	3304      	adds	r3, #4
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fe1c 	bl	80031c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <xTaskRemoveFromEventList+0xb4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d903      	bls.n	80045a0 <xTaskRemoveFromEventList+0x5c>
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	4a16      	ldr	r2, [pc, #88]	; (80045f8 <xTaskRemoveFromEventList+0xb4>)
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4a13      	ldr	r2, [pc, #76]	; (80045fc <xTaskRemoveFromEventList+0xb8>)
 80045ae:	441a      	add	r2, r3
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7fe fda7 	bl	800310a <vListInsertEnd>
 80045bc:	e005      	b.n	80045ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3318      	adds	r3, #24
 80045c2:	4619      	mov	r1, r3
 80045c4:	480e      	ldr	r0, [pc, #56]	; (8004600 <xTaskRemoveFromEventList+0xbc>)
 80045c6:	f7fe fda0 	bl	800310a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <xTaskRemoveFromEventList+0xc0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d905      	bls.n	80045e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80045d8:	2301      	movs	r3, #1
 80045da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <xTaskRemoveFromEventList+0xc4>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	e001      	b.n	80045e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80045e8:	697b      	ldr	r3, [r7, #20]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000cb8 	.word	0x20000cb8
 80045f8:	20000c98 	.word	0x20000c98
 80045fc:	200007c0 	.word	0x200007c0
 8004600:	20000c50 	.word	0x20000c50
 8004604:	200007bc 	.word	0x200007bc
 8004608:	20000ca4 	.word	0x20000ca4

0800460c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <vTaskInternalSetTimeOutState+0x24>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <vTaskInternalSetTimeOutState+0x28>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	605a      	str	r2, [r3, #4]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	20000ca8 	.word	0x20000ca8
 8004634:	20000c94 	.word	0x20000c94

08004638 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	613b      	str	r3, [r7, #16]
}
 800465a:	bf00      	nop
 800465c:	e7fe      	b.n	800465c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	60fb      	str	r3, [r7, #12]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800467a:	f000 fe7b 	bl	8005374 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800467e:	4b1d      	ldr	r3, [pc, #116]	; (80046f4 <xTaskCheckForTimeOut+0xbc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d102      	bne.n	800469e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004698:	2300      	movs	r3, #0
 800469a:	61fb      	str	r3, [r7, #28]
 800469c:	e023      	b.n	80046e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <xTaskCheckForTimeOut+0xc0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d007      	beq.n	80046ba <xTaskCheckForTimeOut+0x82>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d302      	bcc.n	80046ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	61fb      	str	r3, [r7, #28]
 80046b8:	e015      	b.n	80046e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d20b      	bcs.n	80046dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	1ad2      	subs	r2, r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff ff9b 	bl	800460c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	e004      	b.n	80046e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80046e2:	2301      	movs	r3, #1
 80046e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80046e6:	f000 fe75 	bl	80053d4 <vPortExitCritical>

	return xReturn;
 80046ea:	69fb      	ldr	r3, [r7, #28]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3720      	adds	r7, #32
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000c94 	.word	0x20000c94
 80046f8:	20000ca8 	.word	0x20000ca8

080046fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <vTaskMissedYield+0x14>)
 8004702:	2201      	movs	r2, #1
 8004704:	601a      	str	r2, [r3, #0]
}
 8004706:	bf00      	nop
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	20000ca4 	.word	0x20000ca4

08004714 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800471c:	f000 f852 	bl	80047c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <prvIdleTask+0x28>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d9f9      	bls.n	800471c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <prvIdleTask+0x2c>)
 800472a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004738:	e7f0      	b.n	800471c <prvIdleTask+0x8>
 800473a:	bf00      	nop
 800473c:	200007c0 	.word	0x200007c0
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800474a:	2300      	movs	r3, #0
 800474c:	607b      	str	r3, [r7, #4]
 800474e:	e00c      	b.n	800476a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4a12      	ldr	r2, [pc, #72]	; (80047a4 <prvInitialiseTaskLists+0x60>)
 800475c:	4413      	add	r3, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fca6 	bl	80030b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3301      	adds	r3, #1
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b37      	cmp	r3, #55	; 0x37
 800476e:	d9ef      	bls.n	8004750 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004770:	480d      	ldr	r0, [pc, #52]	; (80047a8 <prvInitialiseTaskLists+0x64>)
 8004772:	f7fe fc9d 	bl	80030b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004776:	480d      	ldr	r0, [pc, #52]	; (80047ac <prvInitialiseTaskLists+0x68>)
 8004778:	f7fe fc9a 	bl	80030b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800477c:	480c      	ldr	r0, [pc, #48]	; (80047b0 <prvInitialiseTaskLists+0x6c>)
 800477e:	f7fe fc97 	bl	80030b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004782:	480c      	ldr	r0, [pc, #48]	; (80047b4 <prvInitialiseTaskLists+0x70>)
 8004784:	f7fe fc94 	bl	80030b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004788:	480b      	ldr	r0, [pc, #44]	; (80047b8 <prvInitialiseTaskLists+0x74>)
 800478a:	f7fe fc91 	bl	80030b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800478e:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <prvInitialiseTaskLists+0x78>)
 8004790:	4a05      	ldr	r2, [pc, #20]	; (80047a8 <prvInitialiseTaskLists+0x64>)
 8004792:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <prvInitialiseTaskLists+0x7c>)
 8004796:	4a05      	ldr	r2, [pc, #20]	; (80047ac <prvInitialiseTaskLists+0x68>)
 8004798:	601a      	str	r2, [r3, #0]
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	200007c0 	.word	0x200007c0
 80047a8:	20000c20 	.word	0x20000c20
 80047ac:	20000c34 	.word	0x20000c34
 80047b0:	20000c50 	.word	0x20000c50
 80047b4:	20000c64 	.word	0x20000c64
 80047b8:	20000c7c 	.word	0x20000c7c
 80047bc:	20000c48 	.word	0x20000c48
 80047c0:	20000c4c 	.word	0x20000c4c

080047c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047ca:	e019      	b.n	8004800 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047cc:	f000 fdd2 	bl	8005374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d0:	4b10      	ldr	r3, [pc, #64]	; (8004814 <prvCheckTasksWaitingTermination+0x50>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe fcf1 	bl	80031c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <prvCheckTasksWaitingTermination+0x54>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	4a0b      	ldr	r2, [pc, #44]	; (8004818 <prvCheckTasksWaitingTermination+0x54>)
 80047ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <prvCheckTasksWaitingTermination+0x58>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	4a0a      	ldr	r2, [pc, #40]	; (800481c <prvCheckTasksWaitingTermination+0x58>)
 80047f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047f6:	f000 fded 	bl	80053d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f810 	bl	8004820 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <prvCheckTasksWaitingTermination+0x58>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e1      	bne.n	80047cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004808:	bf00      	nop
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20000c64 	.word	0x20000c64
 8004818:	20000c90 	.word	0x20000c90
 800481c:	20000c78 	.word	0x20000c78

08004820 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800482e:	2b00      	cmp	r3, #0
 8004830:	d108      	bne.n	8004844 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	4618      	mov	r0, r3
 8004838:	f000 ff8a 	bl	8005750 <vPortFree>
				vPortFree( pxTCB );
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 ff87 	bl	8005750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004842:	e018      	b.n	8004876 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800484a:	2b01      	cmp	r3, #1
 800484c:	d103      	bne.n	8004856 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 ff7e 	bl	8005750 <vPortFree>
	}
 8004854:	e00f      	b.n	8004876 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800485c:	2b02      	cmp	r3, #2
 800485e:	d00a      	beq.n	8004876 <prvDeleteTCB+0x56>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	60fb      	str	r3, [r7, #12]
}
 8004872:	bf00      	nop
 8004874:	e7fe      	b.n	8004874 <prvDeleteTCB+0x54>
	}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <prvResetNextTaskUnblockTime+0x38>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004890:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <prvResetNextTaskUnblockTime+0x3c>)
 8004892:	f04f 32ff 	mov.w	r2, #4294967295
 8004896:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004898:	e008      	b.n	80048ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800489a:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <prvResetNextTaskUnblockTime+0x38>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4a04      	ldr	r2, [pc, #16]	; (80048bc <prvResetNextTaskUnblockTime+0x3c>)
 80048aa:	6013      	str	r3, [r2, #0]
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	20000c48 	.word	0x20000c48
 80048bc:	20000cb0 	.word	0x20000cb0

080048c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <xTaskGetSchedulerState+0x34>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048ce:	2301      	movs	r3, #1
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	e008      	b.n	80048e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <xTaskGetSchedulerState+0x38>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d102      	bne.n	80048e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048dc:	2302      	movs	r3, #2
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	e001      	b.n	80048e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048e2:	2300      	movs	r3, #0
 80048e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048e6:	687b      	ldr	r3, [r7, #4]
	}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	20000c9c 	.word	0x20000c9c
 80048f8:	20000cb8 	.word	0x20000cb8

080048fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d056      	beq.n	80049c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004912:	4b2e      	ldr	r3, [pc, #184]	; (80049cc <xTaskPriorityDisinherit+0xd0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	429a      	cmp	r2, r3
 800491a:	d00a      	beq.n	8004932 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	60fb      	str	r3, [r7, #12]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	60bb      	str	r3, [r7, #8]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004954:	1e5a      	subs	r2, r3, #1
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004962:	429a      	cmp	r2, r3
 8004964:	d02c      	beq.n	80049c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496a:	2b00      	cmp	r3, #0
 800496c:	d128      	bne.n	80049c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	3304      	adds	r3, #4
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fc26 	bl	80031c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <xTaskPriorityDisinherit+0xd4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d903      	bls.n	80049a0 <xTaskPriorityDisinherit+0xa4>
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	4a0c      	ldr	r2, [pc, #48]	; (80049d0 <xTaskPriorityDisinherit+0xd4>)
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <xTaskPriorityDisinherit+0xd8>)
 80049ae:	441a      	add	r2, r3
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f7fe fba7 	bl	800310a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049bc:	2301      	movs	r3, #1
 80049be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049c0:	697b      	ldr	r3, [r7, #20]
	}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	200007bc 	.word	0x200007bc
 80049d0:	20000c98 	.word	0x20000c98
 80049d4:	200007c0 	.word	0x200007c0

080049d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049e2:	4b21      	ldr	r3, [pc, #132]	; (8004a68 <prvAddCurrentTaskToDelayedList+0x90>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049e8:	4b20      	ldr	r3, [pc, #128]	; (8004a6c <prvAddCurrentTaskToDelayedList+0x94>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe fbe8 	bl	80031c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	d10a      	bne.n	8004a12 <prvAddCurrentTaskToDelayedList+0x3a>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d007      	beq.n	8004a12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a02:	4b1a      	ldr	r3, [pc, #104]	; (8004a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4819      	ldr	r0, [pc, #100]	; (8004a70 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a0c:	f7fe fb7d 	bl	800310a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a10:	e026      	b.n	8004a60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4413      	add	r3, r2
 8004a18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a1a:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d209      	bcs.n	8004a3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f7fe fb8b 	bl	8003152 <vListInsert>
}
 8004a3c:	e010      	b.n	8004a60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a3e:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f7fe fb81 	bl	8003152 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d202      	bcs.n	8004a60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a5a:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6013      	str	r3, [r2, #0]
}
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000c94 	.word	0x20000c94
 8004a6c:	200007bc 	.word	0x200007bc
 8004a70:	20000c7c 	.word	0x20000c7c
 8004a74:	20000c4c 	.word	0x20000c4c
 8004a78:	20000c48 	.word	0x20000c48
 8004a7c:	20000cb0 	.word	0x20000cb0

08004a80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	; 0x28
 8004a84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a8a:	f000 fb07 	bl	800509c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a8e:	4b1c      	ldr	r3, [pc, #112]	; (8004b00 <xTimerCreateTimerTask+0x80>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d021      	beq.n	8004ada <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a9e:	1d3a      	adds	r2, r7, #4
 8004aa0:	f107 0108 	add.w	r1, r7, #8
 8004aa4:	f107 030c 	add.w	r3, r7, #12
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fe fae7 	bl	800307c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	9202      	str	r2, [sp, #8]
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	2302      	movs	r3, #2
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2300      	movs	r3, #0
 8004abe:	460a      	mov	r2, r1
 8004ac0:	4910      	ldr	r1, [pc, #64]	; (8004b04 <xTimerCreateTimerTask+0x84>)
 8004ac2:	4811      	ldr	r0, [pc, #68]	; (8004b08 <xTimerCreateTimerTask+0x88>)
 8004ac4:	f7ff f894 	bl	8003bf0 <xTaskCreateStatic>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <xTimerCreateTimerTask+0x8c>)
 8004acc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ace:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <xTimerCreateTimerTask+0x8c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	613b      	str	r3, [r7, #16]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004af6:	697b      	ldr	r3, [r7, #20]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000cec 	.word	0x20000cec
 8004b04:	08005a58 	.word	0x08005a58
 8004b08:	08004c45 	.word	0x08004c45
 8004b0c:	20000cf0 	.word	0x20000cf0

08004b10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	623b      	str	r3, [r7, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <xTimerGenericCommand+0x98>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d02a      	beq.n	8004b9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b05      	cmp	r3, #5
 8004b56:	dc18      	bgt.n	8004b8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b58:	f7ff feb2 	bl	80048c0 <xTaskGetSchedulerState>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d109      	bne.n	8004b76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b62:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <xTimerGenericCommand+0x98>)
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	f107 0110 	add.w	r1, r7, #16
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b6e:	f7fe fc57 	bl	8003420 <xQueueGenericSend>
 8004b72:	6278      	str	r0, [r7, #36]	; 0x24
 8004b74:	e012      	b.n	8004b9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <xTimerGenericCommand+0x98>)
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	f107 0110 	add.w	r1, r7, #16
 8004b7e:	2300      	movs	r3, #0
 8004b80:	2200      	movs	r2, #0
 8004b82:	f7fe fc4d 	bl	8003420 <xQueueGenericSend>
 8004b86:	6278      	str	r0, [r7, #36]	; 0x24
 8004b88:	e008      	b.n	8004b9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b8a:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <xTimerGenericCommand+0x98>)
 8004b8c:	6818      	ldr	r0, [r3, #0]
 8004b8e:	f107 0110 	add.w	r1, r7, #16
 8004b92:	2300      	movs	r3, #0
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	f7fe fd41 	bl	800361c <xQueueGenericSendFromISR>
 8004b9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3728      	adds	r7, #40	; 0x28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000cec 	.word	0x20000cec

08004bac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb6:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <prvProcessExpiredTimer+0x94>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fafd 	bl	80031c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d022      	beq.n	8004c1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	699a      	ldr	r2, [r3, #24]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	18d1      	adds	r1, r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	6978      	ldr	r0, [r7, #20]
 8004be6:	f000 f8d1 	bl	8004d8c <prvInsertTimerInActiveList>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01f      	beq.n	8004c30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	6978      	ldr	r0, [r7, #20]
 8004bfc:	f7ff ff88 	bl	8004b10 <xTimerGenericCommand>
 8004c00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d113      	bne.n	8004c30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	60fb      	str	r3, [r7, #12]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	6978      	ldr	r0, [r7, #20]
 8004c36:	4798      	blx	r3
}
 8004c38:	bf00      	nop
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000ce4 	.word	0x20000ce4

08004c44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c4c:	f107 0308 	add.w	r3, r7, #8
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 f857 	bl	8004d04 <prvGetNextExpireTime>
 8004c56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f803 	bl	8004c68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c62:	f000 f8d5 	bl	8004e10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c66:	e7f1      	b.n	8004c4c <prvTimerTask+0x8>

08004c68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c72:	f7ff fa43 	bl	80040fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c76:	f107 0308 	add.w	r3, r7, #8
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 f866 	bl	8004d4c <prvSampleTimeNow>
 8004c80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d130      	bne.n	8004cea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <prvProcessTimerOrBlockTask+0x3c>
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d806      	bhi.n	8004ca4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c96:	f7ff fa3f 	bl	8004118 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c9a:	68f9      	ldr	r1, [r7, #12]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff ff85 	bl	8004bac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ca2:	e024      	b.n	8004cee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d008      	beq.n	8004cbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004caa:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <prvProcessTimerOrBlockTask+0x90>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <prvProcessTimerOrBlockTask+0x50>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <prvProcessTimerOrBlockTask+0x52>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <prvProcessTimerOrBlockTask+0x94>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f7fe ff5d 	bl	8003b88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004cce:	f7ff fa23 	bl	8004118 <xTaskResumeAll>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004cd8:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <prvProcessTimerOrBlockTask+0x98>)
 8004cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	f3bf 8f6f 	isb	sy
}
 8004ce8:	e001      	b.n	8004cee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004cea:	f7ff fa15 	bl	8004118 <xTaskResumeAll>
}
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000ce8 	.word	0x20000ce8
 8004cfc:	20000cec 	.word	0x20000cec
 8004d00:	e000ed04 	.word	0xe000ed04

08004d04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <prvGetNextExpireTime+0x44>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <prvGetNextExpireTime+0x16>
 8004d16:	2201      	movs	r2, #1
 8004d18:	e000      	b.n	8004d1c <prvGetNextExpireTime+0x18>
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d28:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <prvGetNextExpireTime+0x44>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	e001      	b.n	8004d38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d38:	68fb      	ldr	r3, [r7, #12]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000ce4 	.word	0x20000ce4

08004d4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d54:	f7ff fa7e 	bl	8004254 <xTaskGetTickCount>
 8004d58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <prvSampleTimeNow+0x3c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d205      	bcs.n	8004d70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d64:	f000 f936 	bl	8004fd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	e002      	b.n	8004d76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d76:	4a04      	ldr	r2, [pc, #16]	; (8004d88 <prvSampleTimeNow+0x3c>)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000cf4 	.word	0x20000cf4

08004d8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d812      	bhi.n	8004dd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	1ad2      	subs	r2, r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d302      	bcc.n	8004dc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e01b      	b.n	8004dfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <prvInsertTimerInActiveList+0x7c>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	f7fe f9be 	bl	8003152 <vListInsert>
 8004dd6:	e012      	b.n	8004dfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d206      	bcs.n	8004dee <prvInsertTimerInActiveList+0x62>
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d302      	bcc.n	8004dee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004de8:	2301      	movs	r3, #1
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	e007      	b.n	8004dfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dee:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <prvInsertTimerInActiveList+0x80>)
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f7fe f9aa 	bl	8003152 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004dfe:	697b      	ldr	r3, [r7, #20]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000ce8 	.word	0x20000ce8
 8004e0c:	20000ce4 	.word	0x20000ce4

08004e10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08e      	sub	sp, #56	; 0x38
 8004e14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e16:	e0ca      	b.n	8004fae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	da18      	bge.n	8004e50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e1e:	1d3b      	adds	r3, r7, #4
 8004e20:	3304      	adds	r3, #4
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	61fb      	str	r3, [r7, #28]
}
 8004e3c:	bf00      	nop
 8004e3e:	e7fe      	b.n	8004e3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e46:	6850      	ldr	r0, [r2, #4]
 8004e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e4a:	6892      	ldr	r2, [r2, #8]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f2c0 80aa 	blt.w	8004fac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	3304      	adds	r3, #4
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fe f9ab 	bl	80031c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e6e:	463b      	mov	r3, r7
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff ff6b 	bl	8004d4c <prvSampleTimeNow>
 8004e76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b09      	cmp	r3, #9
 8004e7c:	f200 8097 	bhi.w	8004fae <prvProcessReceivedCommands+0x19e>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <prvProcessReceivedCommands+0x78>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004eb1 	.word	0x08004eb1
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004eb1 	.word	0x08004eb1
 8004e94:	08004f25 	.word	0x08004f25
 8004e98:	08004f39 	.word	0x08004f39
 8004e9c:	08004f83 	.word	0x08004f83
 8004ea0:	08004eb1 	.word	0x08004eb1
 8004ea4:	08004eb1 	.word	0x08004eb1
 8004ea8:	08004f25 	.word	0x08004f25
 8004eac:	08004f39 	.word	0x08004f39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	18d1      	adds	r1, r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed0:	f7ff ff5c 	bl	8004d8c <prvInsertTimerInActiveList>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d069      	beq.n	8004fae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d05e      	beq.n	8004fae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	441a      	add	r2, r3
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	2300      	movs	r3, #0
 8004efe:	2100      	movs	r1, #0
 8004f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f02:	f7ff fe05 	bl	8004b10 <xTimerGenericCommand>
 8004f06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d14f      	bne.n	8004fae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	61bb      	str	r3, [r7, #24]
}
 8004f20:	bf00      	nop
 8004f22:	e7fe      	b.n	8004f22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f2a:	f023 0301 	bic.w	r3, r3, #1
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004f36:	e03a      	b.n	8004fae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	617b      	str	r3, [r7, #20]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	18d1      	adds	r1, r2, r3
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f7c:	f7ff ff06 	bl	8004d8c <prvInsertTimerInActiveList>
					break;
 8004f80:	e015      	b.n	8004fae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d103      	bne.n	8004f98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f92:	f000 fbdd 	bl	8005750 <vPortFree>
 8004f96:	e00a      	b.n	8004fae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004faa:	e000      	b.n	8004fae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004fac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fae:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <prvProcessReceivedCommands+0x1c0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	1d39      	adds	r1, r7, #4
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe fbcc 	bl	8003754 <xQueueReceive>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f47f af2a 	bne.w	8004e18 <prvProcessReceivedCommands+0x8>
	}
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	3730      	adds	r7, #48	; 0x30
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000cec 	.word	0x20000cec

08004fd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fda:	e048      	b.n	800506e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <prvSwitchTimerLists+0xc0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe6:	4b2b      	ldr	r3, [pc, #172]	; (8005094 <prvSwitchTimerLists+0xc0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe f8e5 	bl	80031c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d02e      	beq.n	800506e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	429a      	cmp	r2, r3
 8005020:	d90e      	bls.n	8005040 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800502e:	4b19      	ldr	r3, [pc, #100]	; (8005094 <prvSwitchTimerLists+0xc0>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3304      	adds	r3, #4
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f7fe f88a 	bl	8003152 <vListInsert>
 800503e:	e016      	b.n	800506e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005040:	2300      	movs	r3, #0
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	2300      	movs	r3, #0
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	2100      	movs	r1, #0
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f7ff fd60 	bl	8004b10 <xTimerGenericCommand>
 8005050:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10a      	bne.n	800506e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	603b      	str	r3, [r7, #0]
}
 800506a:	bf00      	nop
 800506c:	e7fe      	b.n	800506c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800506e:	4b09      	ldr	r3, [pc, #36]	; (8005094 <prvSwitchTimerLists+0xc0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1b1      	bne.n	8004fdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <prvSwitchTimerLists+0xc0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800507e:	4b06      	ldr	r3, [pc, #24]	; (8005098 <prvSwitchTimerLists+0xc4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a04      	ldr	r2, [pc, #16]	; (8005094 <prvSwitchTimerLists+0xc0>)
 8005084:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005086:	4a04      	ldr	r2, [pc, #16]	; (8005098 <prvSwitchTimerLists+0xc4>)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	6013      	str	r3, [r2, #0]
}
 800508c:	bf00      	nop
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20000ce4 	.word	0x20000ce4
 8005098:	20000ce8 	.word	0x20000ce8

0800509c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050a2:	f000 f967 	bl	8005374 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050a6:	4b15      	ldr	r3, [pc, #84]	; (80050fc <prvCheckForValidListAndQueue+0x60>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d120      	bne.n	80050f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80050ae:	4814      	ldr	r0, [pc, #80]	; (8005100 <prvCheckForValidListAndQueue+0x64>)
 80050b0:	f7fd fffe 	bl	80030b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80050b4:	4813      	ldr	r0, [pc, #76]	; (8005104 <prvCheckForValidListAndQueue+0x68>)
 80050b6:	f7fd fffb 	bl	80030b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80050ba:	4b13      	ldr	r3, [pc, #76]	; (8005108 <prvCheckForValidListAndQueue+0x6c>)
 80050bc:	4a10      	ldr	r2, [pc, #64]	; (8005100 <prvCheckForValidListAndQueue+0x64>)
 80050be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80050c0:	4b12      	ldr	r3, [pc, #72]	; (800510c <prvCheckForValidListAndQueue+0x70>)
 80050c2:	4a10      	ldr	r2, [pc, #64]	; (8005104 <prvCheckForValidListAndQueue+0x68>)
 80050c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80050c6:	2300      	movs	r3, #0
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	4b11      	ldr	r3, [pc, #68]	; (8005110 <prvCheckForValidListAndQueue+0x74>)
 80050cc:	4a11      	ldr	r2, [pc, #68]	; (8005114 <prvCheckForValidListAndQueue+0x78>)
 80050ce:	2110      	movs	r1, #16
 80050d0:	200a      	movs	r0, #10
 80050d2:	f7fe f909 	bl	80032e8 <xQueueGenericCreateStatic>
 80050d6:	4603      	mov	r3, r0
 80050d8:	4a08      	ldr	r2, [pc, #32]	; (80050fc <prvCheckForValidListAndQueue+0x60>)
 80050da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80050dc:	4b07      	ldr	r3, [pc, #28]	; (80050fc <prvCheckForValidListAndQueue+0x60>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <prvCheckForValidListAndQueue+0x60>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	490b      	ldr	r1, [pc, #44]	; (8005118 <prvCheckForValidListAndQueue+0x7c>)
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fe fd22 	bl	8003b34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050f0:	f000 f970 	bl	80053d4 <vPortExitCritical>
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000cec 	.word	0x20000cec
 8005100:	20000cbc 	.word	0x20000cbc
 8005104:	20000cd0 	.word	0x20000cd0
 8005108:	20000ce4 	.word	0x20000ce4
 800510c:	20000ce8 	.word	0x20000ce8
 8005110:	20000d98 	.word	0x20000d98
 8005114:	20000cf8 	.word	0x20000cf8
 8005118:	08005a60 	.word	0x08005a60

0800511c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3b04      	subs	r3, #4
 800512c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3b04      	subs	r3, #4
 800513a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f023 0201 	bic.w	r2, r3, #1
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3b04      	subs	r3, #4
 800514a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800514c:	4a0c      	ldr	r2, [pc, #48]	; (8005180 <pxPortInitialiseStack+0x64>)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3b14      	subs	r3, #20
 8005156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3b04      	subs	r3, #4
 8005162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f06f 0202 	mvn.w	r2, #2
 800516a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3b20      	subs	r3, #32
 8005170:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005172:	68fb      	ldr	r3, [r7, #12]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	08005185 	.word	0x08005185

08005184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800518e:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <prvTaskExitError+0x54>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005196:	d00a      	beq.n	80051ae <prvTaskExitError+0x2a>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	60fb      	str	r3, [r7, #12]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <prvTaskExitError+0x28>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	60bb      	str	r3, [r7, #8]
}
 80051c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051c2:	bf00      	nop
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0fc      	beq.n	80051c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	20000014 	.word	0x20000014
 80051dc:	00000000 	.word	0x00000000

080051e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051e0:	4b07      	ldr	r3, [pc, #28]	; (8005200 <pxCurrentTCBConst2>)
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	6808      	ldr	r0, [r1, #0]
 80051e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ea:	f380 8809 	msr	PSP, r0
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f380 8811 	msr	BASEPRI, r0
 80051fa:	4770      	bx	lr
 80051fc:	f3af 8000 	nop.w

08005200 <pxCurrentTCBConst2>:
 8005200:	200007bc 	.word	0x200007bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005208:	4808      	ldr	r0, [pc, #32]	; (800522c <prvPortStartFirstTask+0x24>)
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	6800      	ldr	r0, [r0, #0]
 800520e:	f380 8808 	msr	MSP, r0
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8814 	msr	CONTROL, r0
 800521a:	b662      	cpsie	i
 800521c:	b661      	cpsie	f
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	df00      	svc	0
 8005228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800522a:	bf00      	nop
 800522c:	e000ed08 	.word	0xe000ed08

08005230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005236:	4b46      	ldr	r3, [pc, #280]	; (8005350 <xPortStartScheduler+0x120>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a46      	ldr	r2, [pc, #280]	; (8005354 <xPortStartScheduler+0x124>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10a      	bne.n	8005256 <xPortStartScheduler+0x26>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	613b      	str	r3, [r7, #16]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005256:	4b3e      	ldr	r3, [pc, #248]	; (8005350 <xPortStartScheduler+0x120>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a3f      	ldr	r2, [pc, #252]	; (8005358 <xPortStartScheduler+0x128>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d10a      	bne.n	8005276 <xPortStartScheduler+0x46>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	60fb      	str	r3, [r7, #12]
}
 8005272:	bf00      	nop
 8005274:	e7fe      	b.n	8005274 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005276:	4b39      	ldr	r3, [pc, #228]	; (800535c <xPortStartScheduler+0x12c>)
 8005278:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	22ff      	movs	r2, #255	; 0xff
 8005286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005298:	b2da      	uxtb	r2, r3
 800529a:	4b31      	ldr	r3, [pc, #196]	; (8005360 <xPortStartScheduler+0x130>)
 800529c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800529e:	4b31      	ldr	r3, [pc, #196]	; (8005364 <xPortStartScheduler+0x134>)
 80052a0:	2207      	movs	r2, #7
 80052a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052a4:	e009      	b.n	80052ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80052a6:	4b2f      	ldr	r3, [pc, #188]	; (8005364 <xPortStartScheduler+0x134>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	4a2d      	ldr	r2, [pc, #180]	; (8005364 <xPortStartScheduler+0x134>)
 80052ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ba:	78fb      	ldrb	r3, [r7, #3]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c2:	2b80      	cmp	r3, #128	; 0x80
 80052c4:	d0ef      	beq.n	80052a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052c6:	4b27      	ldr	r3, [pc, #156]	; (8005364 <xPortStartScheduler+0x134>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f1c3 0307 	rsb	r3, r3, #7
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d00a      	beq.n	80052e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	60bb      	str	r3, [r7, #8]
}
 80052e4:	bf00      	nop
 80052e6:	e7fe      	b.n	80052e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052e8:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <xPortStartScheduler+0x134>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	4a1d      	ldr	r2, [pc, #116]	; (8005364 <xPortStartScheduler+0x134>)
 80052f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052f2:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <xPortStartScheduler+0x134>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052fa:	4a1a      	ldr	r2, [pc, #104]	; (8005364 <xPortStartScheduler+0x134>)
 80052fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005306:	4b18      	ldr	r3, [pc, #96]	; (8005368 <xPortStartScheduler+0x138>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a17      	ldr	r2, [pc, #92]	; (8005368 <xPortStartScheduler+0x138>)
 800530c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005312:	4b15      	ldr	r3, [pc, #84]	; (8005368 <xPortStartScheduler+0x138>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a14      	ldr	r2, [pc, #80]	; (8005368 <xPortStartScheduler+0x138>)
 8005318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800531c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800531e:	f000 f8dd 	bl	80054dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <xPortStartScheduler+0x13c>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005328:	f000 f8fc 	bl	8005524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800532c:	4b10      	ldr	r3, [pc, #64]	; (8005370 <xPortStartScheduler+0x140>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0f      	ldr	r2, [pc, #60]	; (8005370 <xPortStartScheduler+0x140>)
 8005332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005338:	f7ff ff66 	bl	8005208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800533c:	f7ff f854 	bl	80043e8 <vTaskSwitchContext>
	prvTaskExitError();
 8005340:	f7ff ff20 	bl	8005184 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	e000ed00 	.word	0xe000ed00
 8005354:	410fc271 	.word	0x410fc271
 8005358:	410fc270 	.word	0x410fc270
 800535c:	e000e400 	.word	0xe000e400
 8005360:	20000de8 	.word	0x20000de8
 8005364:	20000dec 	.word	0x20000dec
 8005368:	e000ed20 	.word	0xe000ed20
 800536c:	20000014 	.word	0x20000014
 8005370:	e000ef34 	.word	0xe000ef34

08005374 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	607b      	str	r3, [r7, #4]
}
 800538c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800538e:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <vPortEnterCritical+0x58>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3301      	adds	r3, #1
 8005394:	4a0d      	ldr	r2, [pc, #52]	; (80053cc <vPortEnterCritical+0x58>)
 8005396:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005398:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <vPortEnterCritical+0x58>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d10f      	bne.n	80053c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <vPortEnterCritical+0x5c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	603b      	str	r3, [r7, #0]
}
 80053bc:	bf00      	nop
 80053be:	e7fe      	b.n	80053be <vPortEnterCritical+0x4a>
	}
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	20000014 	.word	0x20000014
 80053d0:	e000ed04 	.word	0xe000ed04

080053d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053da:	4b12      	ldr	r3, [pc, #72]	; (8005424 <vPortExitCritical+0x50>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <vPortExitCritical+0x24>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	607b      	str	r3, [r7, #4]
}
 80053f4:	bf00      	nop
 80053f6:	e7fe      	b.n	80053f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <vPortExitCritical+0x50>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	4a09      	ldr	r2, [pc, #36]	; (8005424 <vPortExitCritical+0x50>)
 8005400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005402:	4b08      	ldr	r3, [pc, #32]	; (8005424 <vPortExitCritical+0x50>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d105      	bne.n	8005416 <vPortExitCritical+0x42>
 800540a:	2300      	movs	r3, #0
 800540c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f383 8811 	msr	BASEPRI, r3
}
 8005414:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000014 	.word	0x20000014
	...

08005430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005430:	f3ef 8009 	mrs	r0, PSP
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	4b15      	ldr	r3, [pc, #84]	; (8005490 <pxCurrentTCBConst>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	f01e 0f10 	tst.w	lr, #16
 8005440:	bf08      	it	eq
 8005442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544a:	6010      	str	r0, [r2, #0]
 800544c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005454:	f380 8811 	msr	BASEPRI, r0
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f7fe ffc2 	bl	80043e8 <vTaskSwitchContext>
 8005464:	f04f 0000 	mov.w	r0, #0
 8005468:	f380 8811 	msr	BASEPRI, r0
 800546c:	bc09      	pop	{r0, r3}
 800546e:	6819      	ldr	r1, [r3, #0]
 8005470:	6808      	ldr	r0, [r1, #0]
 8005472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005476:	f01e 0f10 	tst.w	lr, #16
 800547a:	bf08      	it	eq
 800547c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005480:	f380 8809 	msr	PSP, r0
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	f3af 8000 	nop.w

08005490 <pxCurrentTCBConst>:
 8005490:	200007bc 	.word	0x200007bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop

08005498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	607b      	str	r3, [r7, #4]
}
 80054b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054b2:	f7fe fedf 	bl	8004274 <xTaskIncrementTick>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <xPortSysTickHandler+0x40>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	2300      	movs	r3, #0
 80054c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f383 8811 	msr	BASEPRI, r3
}
 80054ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054e0:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <vPortSetupTimerInterrupt+0x34>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054e6:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <vPortSetupTimerInterrupt+0x38>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054ec:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <vPortSetupTimerInterrupt+0x3c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a0a      	ldr	r2, [pc, #40]	; (800551c <vPortSetupTimerInterrupt+0x40>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	099b      	lsrs	r3, r3, #6
 80054f8:	4a09      	ldr	r2, [pc, #36]	; (8005520 <vPortSetupTimerInterrupt+0x44>)
 80054fa:	3b01      	subs	r3, #1
 80054fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054fe:	4b04      	ldr	r3, [pc, #16]	; (8005510 <vPortSetupTimerInterrupt+0x34>)
 8005500:	2207      	movs	r2, #7
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	e000e010 	.word	0xe000e010
 8005514:	e000e018 	.word	0xe000e018
 8005518:	20000008 	.word	0x20000008
 800551c:	10624dd3 	.word	0x10624dd3
 8005520:	e000e014 	.word	0xe000e014

08005524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005534 <vPortEnableVFP+0x10>
 8005528:	6801      	ldr	r1, [r0, #0]
 800552a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800552e:	6001      	str	r1, [r0, #0]
 8005530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005532:	bf00      	nop
 8005534:	e000ed88 	.word	0xe000ed88

08005538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800553e:	f3ef 8305 	mrs	r3, IPSR
 8005542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b0f      	cmp	r3, #15
 8005548:	d914      	bls.n	8005574 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800554a:	4a17      	ldr	r2, [pc, #92]	; (80055a8 <vPortValidateInterruptPriority+0x70>)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005554:	4b15      	ldr	r3, [pc, #84]	; (80055ac <vPortValidateInterruptPriority+0x74>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	7afa      	ldrb	r2, [r7, #11]
 800555a:	429a      	cmp	r2, r3
 800555c:	d20a      	bcs.n	8005574 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	607b      	str	r3, [r7, #4]
}
 8005570:	bf00      	nop
 8005572:	e7fe      	b.n	8005572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005574:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <vPortValidateInterruptPriority+0x78>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <vPortValidateInterruptPriority+0x7c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d90a      	bls.n	800559a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	603b      	str	r3, [r7, #0]
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <vPortValidateInterruptPriority+0x60>
	}
 800559a:	bf00      	nop
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	e000e3f0 	.word	0xe000e3f0
 80055ac:	20000de8 	.word	0x20000de8
 80055b0:	e000ed0c 	.word	0xe000ed0c
 80055b4:	20000dec 	.word	0x20000dec

080055b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	; 0x28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055c4:	f7fe fd9a 	bl	80040fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055c8:	4b5b      	ldr	r3, [pc, #364]	; (8005738 <pvPortMalloc+0x180>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055d0:	f000 f920 	bl	8005814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055d4:	4b59      	ldr	r3, [pc, #356]	; (800573c <pvPortMalloc+0x184>)
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4013      	ands	r3, r2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f040 8093 	bne.w	8005708 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01d      	beq.n	8005624 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80055e8:	2208      	movs	r2, #8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4413      	add	r3, r2
 80055ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d014      	beq.n	8005624 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f023 0307 	bic.w	r3, r3, #7
 8005600:	3308      	adds	r3, #8
 8005602:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <pvPortMalloc+0x6c>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	617b      	str	r3, [r7, #20]
}
 8005620:	bf00      	nop
 8005622:	e7fe      	b.n	8005622 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d06e      	beq.n	8005708 <pvPortMalloc+0x150>
 800562a:	4b45      	ldr	r3, [pc, #276]	; (8005740 <pvPortMalloc+0x188>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	429a      	cmp	r2, r3
 8005632:	d869      	bhi.n	8005708 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005634:	4b43      	ldr	r3, [pc, #268]	; (8005744 <pvPortMalloc+0x18c>)
 8005636:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005638:	4b42      	ldr	r3, [pc, #264]	; (8005744 <pvPortMalloc+0x18c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800563e:	e004      	b.n	800564a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d903      	bls.n	800565c <pvPortMalloc+0xa4>
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f1      	bne.n	8005640 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800565c:	4b36      	ldr	r3, [pc, #216]	; (8005738 <pvPortMalloc+0x180>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005662:	429a      	cmp	r2, r3
 8005664:	d050      	beq.n	8005708 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2208      	movs	r2, #8
 800566c:	4413      	add	r3, r2
 800566e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	1ad2      	subs	r2, r2, r3
 8005680:	2308      	movs	r3, #8
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	429a      	cmp	r2, r3
 8005686:	d91f      	bls.n	80056c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <pvPortMalloc+0xf8>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	613b      	str	r3, [r7, #16]
}
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	1ad2      	subs	r2, r2, r3
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056c2:	69b8      	ldr	r0, [r7, #24]
 80056c4:	f000 f908 	bl	80058d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056c8:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <pvPortMalloc+0x188>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	4a1b      	ldr	r2, [pc, #108]	; (8005740 <pvPortMalloc+0x188>)
 80056d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056d6:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <pvPortMalloc+0x188>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	4b1b      	ldr	r3, [pc, #108]	; (8005748 <pvPortMalloc+0x190>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d203      	bcs.n	80056ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056e2:	4b17      	ldr	r3, [pc, #92]	; (8005740 <pvPortMalloc+0x188>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a18      	ldr	r2, [pc, #96]	; (8005748 <pvPortMalloc+0x190>)
 80056e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	4b13      	ldr	r3, [pc, #76]	; (800573c <pvPortMalloc+0x184>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056fe:	4b13      	ldr	r3, [pc, #76]	; (800574c <pvPortMalloc+0x194>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3301      	adds	r3, #1
 8005704:	4a11      	ldr	r2, [pc, #68]	; (800574c <pvPortMalloc+0x194>)
 8005706:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005708:	f7fe fd06 	bl	8004118 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <pvPortMalloc+0x174>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	60fb      	str	r3, [r7, #12]
}
 8005728:	bf00      	nop
 800572a:	e7fe      	b.n	800572a <pvPortMalloc+0x172>
	return pvReturn;
 800572c:	69fb      	ldr	r3, [r7, #28]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3728      	adds	r7, #40	; 0x28
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	200049f8 	.word	0x200049f8
 800573c:	20004a0c 	.word	0x20004a0c
 8005740:	200049fc 	.word	0x200049fc
 8005744:	200049f0 	.word	0x200049f0
 8005748:	20004a00 	.word	0x20004a00
 800574c:	20004a04 	.word	0x20004a04

08005750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d04d      	beq.n	80057fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005762:	2308      	movs	r3, #8
 8005764:	425b      	negs	r3, r3
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4413      	add	r3, r2
 800576a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	4b24      	ldr	r3, [pc, #144]	; (8005808 <vPortFree+0xb8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4013      	ands	r3, r2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <vPortFree+0x44>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60fb      	str	r3, [r7, #12]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <vPortFree+0x62>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	60bb      	str	r3, [r7, #8]
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	4b14      	ldr	r3, [pc, #80]	; (8005808 <vPortFree+0xb8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01e      	beq.n	80057fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d11a      	bne.n	80057fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <vPortFree+0xb8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	43db      	mvns	r3, r3
 80057d2:	401a      	ands	r2, r3
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057d8:	f7fe fc90 	bl	80040fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <vPortFree+0xbc>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4413      	add	r3, r2
 80057e6:	4a09      	ldr	r2, [pc, #36]	; (800580c <vPortFree+0xbc>)
 80057e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057ea:	6938      	ldr	r0, [r7, #16]
 80057ec:	f000 f874 	bl	80058d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057f0:	4b07      	ldr	r3, [pc, #28]	; (8005810 <vPortFree+0xc0>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3301      	adds	r3, #1
 80057f6:	4a06      	ldr	r2, [pc, #24]	; (8005810 <vPortFree+0xc0>)
 80057f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057fa:	f7fe fc8d 	bl	8004118 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057fe:	bf00      	nop
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20004a0c 	.word	0x20004a0c
 800580c:	200049fc 	.word	0x200049fc
 8005810:	20004a08 	.word	0x20004a08

08005814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800581a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800581e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005820:	4b27      	ldr	r3, [pc, #156]	; (80058c0 <prvHeapInit+0xac>)
 8005822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00c      	beq.n	8005848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3307      	adds	r3, #7
 8005832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0307 	bic.w	r3, r3, #7
 800583a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	4a1f      	ldr	r2, [pc, #124]	; (80058c0 <prvHeapInit+0xac>)
 8005844:	4413      	add	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800584c:	4a1d      	ldr	r2, [pc, #116]	; (80058c4 <prvHeapInit+0xb0>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005852:	4b1c      	ldr	r3, [pc, #112]	; (80058c4 <prvHeapInit+0xb0>)
 8005854:	2200      	movs	r2, #0
 8005856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4413      	add	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005860:	2208      	movs	r2, #8
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0307 	bic.w	r3, r3, #7
 800586e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a15      	ldr	r2, [pc, #84]	; (80058c8 <prvHeapInit+0xb4>)
 8005874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <prvHeapInit+0xb4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800587e:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <prvHeapInit+0xb4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	1ad2      	subs	r2, r2, r3
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005894:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <prvHeapInit+0xb4>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <prvHeapInit+0xb8>)
 80058a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <prvHeapInit+0xbc>)
 80058aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058ac:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <prvHeapInit+0xc0>)
 80058ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058b2:	601a      	str	r2, [r3, #0]
}
 80058b4:	bf00      	nop
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	20000df0 	.word	0x20000df0
 80058c4:	200049f0 	.word	0x200049f0
 80058c8:	200049f8 	.word	0x200049f8
 80058cc:	20004a00 	.word	0x20004a00
 80058d0:	200049fc 	.word	0x200049fc
 80058d4:	20004a0c 	.word	0x20004a0c

080058d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058e0:	4b28      	ldr	r3, [pc, #160]	; (8005984 <prvInsertBlockIntoFreeList+0xac>)
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	e002      	b.n	80058ec <prvInsertBlockIntoFreeList+0x14>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d8f7      	bhi.n	80058e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4413      	add	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	429a      	cmp	r2, r3
 8005906:	d108      	bne.n	800591a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	441a      	add	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	441a      	add	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d118      	bne.n	8005960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b15      	ldr	r3, [pc, #84]	; (8005988 <prvInsertBlockIntoFreeList+0xb0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d00d      	beq.n	8005956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	441a      	add	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	e008      	b.n	8005968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005956:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <prvInsertBlockIntoFreeList+0xb0>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	e003      	b.n	8005968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	429a      	cmp	r2, r3
 800596e:	d002      	beq.n	8005976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005976:	bf00      	nop
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	200049f0 	.word	0x200049f0
 8005988:	200049f8 	.word	0x200049f8

0800598c <__libc_init_array>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	4d0d      	ldr	r5, [pc, #52]	; (80059c4 <__libc_init_array+0x38>)
 8005990:	4c0d      	ldr	r4, [pc, #52]	; (80059c8 <__libc_init_array+0x3c>)
 8005992:	1b64      	subs	r4, r4, r5
 8005994:	10a4      	asrs	r4, r4, #2
 8005996:	2600      	movs	r6, #0
 8005998:	42a6      	cmp	r6, r4
 800599a:	d109      	bne.n	80059b0 <__libc_init_array+0x24>
 800599c:	4d0b      	ldr	r5, [pc, #44]	; (80059cc <__libc_init_array+0x40>)
 800599e:	4c0c      	ldr	r4, [pc, #48]	; (80059d0 <__libc_init_array+0x44>)
 80059a0:	f000 f82e 	bl	8005a00 <_init>
 80059a4:	1b64      	subs	r4, r4, r5
 80059a6:	10a4      	asrs	r4, r4, #2
 80059a8:	2600      	movs	r6, #0
 80059aa:	42a6      	cmp	r6, r4
 80059ac:	d105      	bne.n	80059ba <__libc_init_array+0x2e>
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b4:	4798      	blx	r3
 80059b6:	3601      	adds	r6, #1
 80059b8:	e7ee      	b.n	8005998 <__libc_init_array+0xc>
 80059ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80059be:	4798      	blx	r3
 80059c0:	3601      	adds	r6, #1
 80059c2:	e7f2      	b.n	80059aa <__libc_init_array+0x1e>
 80059c4:	08005a88 	.word	0x08005a88
 80059c8:	08005a88 	.word	0x08005a88
 80059cc:	08005a88 	.word	0x08005a88
 80059d0:	08005a8c 	.word	0x08005a8c

080059d4 <memcpy>:
 80059d4:	440a      	add	r2, r1
 80059d6:	4291      	cmp	r1, r2
 80059d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80059dc:	d100      	bne.n	80059e0 <memcpy+0xc>
 80059de:	4770      	bx	lr
 80059e0:	b510      	push	{r4, lr}
 80059e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ea:	4291      	cmp	r1, r2
 80059ec:	d1f9      	bne.n	80059e2 <memcpy+0xe>
 80059ee:	bd10      	pop	{r4, pc}

080059f0 <memset>:
 80059f0:	4402      	add	r2, r0
 80059f2:	4603      	mov	r3, r0
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d100      	bne.n	80059fa <memset+0xa>
 80059f8:	4770      	bx	lr
 80059fa:	f803 1b01 	strb.w	r1, [r3], #1
 80059fe:	e7f9      	b.n	80059f4 <memset+0x4>

08005a00 <_init>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	bf00      	nop
 8005a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a06:	bc08      	pop	{r3}
 8005a08:	469e      	mov	lr, r3
 8005a0a:	4770      	bx	lr

08005a0c <_fini>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	bf00      	nop
 8005a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a12:	bc08      	pop	{r3}
 8005a14:	469e      	mov	lr, r3
 8005a16:	4770      	bx	lr
