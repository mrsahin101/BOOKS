
031_FreeRTOS_MUTEX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08007358  08007358  00017358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007528  08007528  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007528  08007528  00017528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007530  08007530  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007534  08007534  00017534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ad0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b44  20004b44  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019d6b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e4  00000000  00000000  00039e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f8  00000000  00000000  0003d2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013c0  00000000  00000000  0003e7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004679  00000000  00000000  0003fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c65  00000000  00000000  00044229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6e62  00000000  00000000  0005ae8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131cf0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061ec  00000000  00000000  00131d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007340 	.word	0x08007340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007340 	.word	0x08007340

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <prvNewPrintString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void prvNewPrintString(const char *pcString)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(xMutex, portMAX_DELAY);
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <prvNewPrintString+0x44>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f04f 31ff 	mov.w	r1, #4294967295
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fbaf 	bl	8003cf8 <xQueueSemaphoreTake>
	{
		HAL_UART_Transmit(&huart2,(uint8_t *)pcString, strlen(pcString), HAL_MAX_DELAY);
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f7ff fe18 	bl	80001d0 <strlen>
 80005a0:	4603      	mov	r3, r0
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	4808      	ldr	r0, [pc, #32]	; (80005cc <prvNewPrintString+0x48>)
 80005ac:	f001 fefb 	bl	80023a6 <HAL_UART_Transmit>
	}
	xSemaphoreGive(xMutex);
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <prvNewPrintString+0x44>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	f003 f923 	bl	8003804 <xQueueGenericSend>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000d4 	.word	0x200000d4
 80005cc:	20000090 	.word	0x20000090

080005d0 <prvPrintTask>:
static void prvPrintTask(void *pvParameters)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	char *pcStringToPrint;
	const TickType_t xMaxBlockTimeTicks = 0x20;
 80005d8:	2320      	movs	r3, #32
 80005da:	60fb      	str	r3, [r7, #12]
	pcStringToPrint = (char *)pvParameters;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	60bb      	str	r3, [r7, #8]

	for(;;)
	{
		prvNewPrintString(pcStringToPrint);
 80005e0:	68b8      	ldr	r0, [r7, #8]
 80005e2:	f7ff ffcf 	bl	8000584 <prvNewPrintString>
		vTaskDelay((rand() % xMaxBlockTimeTicks));
 80005e6:	f005 ff97 	bl	8006518 <rand>
 80005ea:	4603      	mov	r3, r0
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80005f2:	68f9      	ldr	r1, [r7, #12]
 80005f4:	fb01 f202 	mul.w	r2, r1, r2
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 ffc6 	bl	800458c <vTaskDelay>
		prvNewPrintString(pcStringToPrint);
 8000600:	e7ee      	b.n	80005e0 <prvPrintTask+0x10>
	...

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fb77 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f833 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 f8c5 	bl	80007a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000616:	f000 f899 	bl	800074c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xMutex = xSemaphoreCreateMutex();
 800061a:	2001      	movs	r0, #1
 800061c:	f003 f8d9 	bl	80037d2 <xQueueCreateMutex>
 8000620:	4603      	mov	r3, r0
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <main+0x5c>)
 8000624:	6013      	str	r3, [r2, #0]
  if(xMutex != NULL)
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <main+0x5c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d017      	beq.n	800065e <main+0x5a>
  {
	  xTaskCreate(prvPrintTask, "Print1", 1000, "Task-1 ***********************\r\n", 1, NULL);
 800062e:	2300      	movs	r3, #0
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <main+0x60>)
 8000638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800063c:	490a      	ldr	r1, [pc, #40]	; (8000668 <main+0x64>)
 800063e:	480b      	ldr	r0, [pc, #44]	; (800066c <main+0x68>)
 8000640:	f003 fe49 	bl	80042d6 <xTaskCreate>
	  xTaskCreate(prvPrintTask, "Print2", 1000, "Task-2 ***********************\r\n", 2, NULL);
 8000644:	2300      	movs	r3, #0
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	2302      	movs	r3, #2
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <main+0x6c>)
 800064e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000652:	4908      	ldr	r1, [pc, #32]	; (8000674 <main+0x70>)
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <main+0x68>)
 8000656:	f003 fe3e 	bl	80042d6 <xTaskCreate>
	  vTaskStartScheduler();
 800065a:	f003 ffcb 	bl	80045f4 <vTaskStartScheduler>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x5a>
 8000660:	200000d4 	.word	0x200000d4
 8000664:	08007358 	.word	0x08007358
 8000668:	0800737c 	.word	0x0800737c
 800066c:	080005d1 	.word	0x080005d1
 8000670:	08007384 	.word	0x08007384
 8000674:	080073a8 	.word	0x080073a8

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 fea9 	bl	80063de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a27      	ldr	r2, [pc, #156]	; (8000744 <SystemClock_Config+0xcc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xd0>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e8:	2308      	movs	r3, #8
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f6:	2307      	movs	r3, #7
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fe8c 	bl	800141c <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800070a:	f000 f8c5 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000724:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2105      	movs	r1, #5
 800072c:	4618      	mov	r0, r3
 800072e:	f001 f8ed 	bl	800190c <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000738:	f000 f8ae 	bl	8000898 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3750      	adds	r7, #80	; 0x50
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <MX_USART2_UART_Init+0x50>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000784:	f001 fdc2 	bl	800230c <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800078e:	f000 f883 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000090 	.word	0x20000090
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a23      	ldr	r2, [pc, #140]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_GPIO_Init+0xc8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000810:	4816      	ldr	r0, [pc, #88]	; (800086c <MX_GPIO_Init+0xcc>)
 8000812:	f000 fdc5 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000816:	2301      	movs	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4811      	ldr	r0, [pc, #68]	; (8000870 <MX_GPIO_Init+0xd0>)
 800082c:	f000 fc1c 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000830:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <MX_GPIO_Init+0xcc>)
 800084a:	f000 fc0d 	bl	8001068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	2006      	movs	r0, #6
 8000854:	f000 fb4c 	bl	8000ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000858:	2006      	movs	r0, #6
 800085a:	f000 fb65 	bl	8000f28 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40020c00 	.word	0x40020c00
 8000870:	40020000 	.word	0x40020000

08000874 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d101      	bne.n	800088a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000886:	f000 fa5b 	bl	8000d40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40002000 	.word	0x40002000

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_MspInit+0x54>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <HAL_MspInit+0x54>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x54>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_MspInit+0x54>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <HAL_MspInit+0x54>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_MspInit+0x54>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	210f      	movs	r1, #15
 80008e6:	f06f 0001 	mvn.w	r0, #1
 80008ea:	f000 fb01 	bl	8000ef0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a1d      	ldr	r2, [pc, #116]	; (8000990 <HAL_UART_MspInit+0x94>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d133      	bne.n	8000986 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <HAL_UART_MspInit+0x98>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <HAL_UART_MspInit+0x98>)
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <HAL_UART_MspInit+0x98>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_UART_MspInit+0x98>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a14      	ldr	r2, [pc, #80]	; (8000994 <HAL_UART_MspInit+0x98>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_UART_MspInit+0x98>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000956:	230c      	movs	r3, #12
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000966:	2307      	movs	r3, #7
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <HAL_UART_MspInit+0x9c>)
 8000972:	f000 fb79 	bl	8001068 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2105      	movs	r1, #5
 800097a:	2026      	movs	r0, #38	; 0x26
 800097c:	f000 fab8 	bl	8000ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000980:	2026      	movs	r0, #38	; 0x26
 8000982:	f000 fad1 	bl	8000f28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	; 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40004400 	.word	0x40004400
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <HAL_InitTick+0xe4>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <HAL_InitTick+0xe4>)
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <HAL_InitTick+0xe4>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c8:	f107 0210 	add.w	r2, r7, #16
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 f9ba 	bl	8001d4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d103      	bne.n	80009ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009e2:	f001 f98b 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 80009e6:	6378      	str	r0, [r7, #52]	; 0x34
 80009e8:	e004      	b.n	80009f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ea:	f001 f987 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 80009ee:	4603      	mov	r3, r0
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f6:	4a23      	ldr	r2, [pc, #140]	; (8000a84 <HAL_InitTick+0xe8>)
 80009f8:	fba2 2303 	umull	r2, r3, r2, r3
 80009fc:	0c9b      	lsrs	r3, r3, #18
 80009fe:	3b01      	subs	r3, #1
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <HAL_InitTick+0xec>)
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <HAL_InitTick+0xf0>)
 8000a06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <HAL_InitTick+0xec>)
 8000a0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a0e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a10:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <HAL_InitTick+0xec>)
 8000a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a14:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_InitTick+0xec>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <HAL_InitTick+0xec>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <HAL_InitTick+0xec>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a28:	4817      	ldr	r0, [pc, #92]	; (8000a88 <HAL_InitTick+0xec>)
 8000a2a:	f001 f9c1 	bl	8001db0 <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d11b      	bne.n	8000a74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000a3c:	4812      	ldr	r0, [pc, #72]	; (8000a88 <HAL_InitTick+0xec>)
 8000a3e:	f001 fa11 	bl	8001e64 <HAL_TIM_Base_Start_IT>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d111      	bne.n	8000a74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a50:	202d      	movs	r0, #45	; 0x2d
 8000a52:	f000 fa69 	bl	8000f28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d808      	bhi.n	8000a6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	202d      	movs	r0, #45	; 0x2d
 8000a62:	f000 fa45 	bl	8000ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_InitTick+0xf4>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	e002      	b.n	8000a74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3738      	adds	r7, #56	; 0x38
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	431bde83 	.word	0x431bde83
 8000a88:	200000d8 	.word	0x200000d8
 8000a8c:	40002000 	.word	0x40002000
 8000a90:	20000004 	.word	0x20000004

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f000 fc85 	bl	80013d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <USART2_IRQHandler+0x10>)
 8000ad6:	f001 fcf9 	bl	80024cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000090 	.word	0x20000090

08000ae4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000aea:	f001 fa2b 	bl	8001f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000d8 	.word	0x200000d8

08000af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return 1;
 8000afc:	2301      	movs	r3, #1
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_kill>:

int _kill(int pid, int sig)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b12:	f005 fb33 	bl	800617c <__errno>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2216      	movs	r2, #22
 8000b1a:	601a      	str	r2, [r3, #0]
  return -1;
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_exit>:

void _exit (int status)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ffe7 	bl	8000b08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b3a:	e7fe      	b.n	8000b3a <_exit+0x12>

08000b3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	e00a      	b.n	8000b64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b4e:	f3af 8000 	nop.w
 8000b52:	4601      	mov	r1, r0
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	60ba      	str	r2, [r7, #8]
 8000b5a:	b2ca      	uxtb	r2, r1
 8000b5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbf0      	blt.n	8000b4e <_read+0x12>
  }

  return len;
 8000b6c:	687b      	ldr	r3, [r7, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e009      	b.n	8000b9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbf1      	blt.n	8000b88 <_write+0x12>
  }
  return len;
 8000ba4:	687b      	ldr	r3, [r7, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_close>:

int _close(int file)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_isatty>:

int _isatty(int file)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f005 fa98 	bl	800617c <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20020000 	.word	0x20020000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	20000120 	.word	0x20000120
 8000c80:	20004b48 	.word	0x20004b48

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cae:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc4:	4c0b      	ldr	r4, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd2:	f7ff ffd7 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f005 fb4d 	bl	8006374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc93 	bl	8000604 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cec:	08007538 	.word	0x08007538
  ldr r2, =_sbss
 8000cf0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cf4:	20004b44 	.word	0x20004b44

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f8d8 	bl	8000eda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f7ff fe36 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fdb8 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000124 	.word	0x20000124

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000124 	.word	0x20000124

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db0b      	blt.n	8000e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 021f 	and.w	r2, r3, #31
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <__NVIC_EnableIRQ+0x38>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	2001      	movs	r0, #1
 8000e06:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff4c 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f02:	f7ff ff61 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	6978      	ldr	r0, [r7, #20]
 8000f0e:	f7ff ffb1 	bl	8000e74 <NVIC_EncodePriority>
 8000f12:	4602      	mov	r2, r0
 8000f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff80 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff54 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f52:	f7ff ff09 	bl	8000d68 <HAL_GetTick>
 8000f56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d008      	beq.n	8000f76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e052      	b.n	800101c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0216 	bic.w	r2, r2, #22
 8000f84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	695a      	ldr	r2, [r3, #20]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d103      	bne.n	8000fa6 <HAL_DMA_Abort+0x62>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d007      	beq.n	8000fb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0208 	bic.w	r2, r2, #8
 8000fb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0201 	bic.w	r2, r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fc6:	e013      	b.n	8000ff0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fc8:	f7ff fece 	bl	8000d68 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	d90c      	bls.n	8000ff0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2220      	movs	r2, #32
 8000fda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e015      	b.n	800101c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1e4      	bne.n	8000fc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001002:	223f      	movs	r2, #63	; 0x3f
 8001004:	409a      	lsls	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d004      	beq.n	8001042 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00c      	b.n	800105c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2205      	movs	r2, #5
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	e16b      	b.n	800135c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 815a 	bne.w	8001356 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d005      	beq.n	80010ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d130      	bne.n	800111c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 0201 	and.w	r2, r3, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b03      	cmp	r3, #3
 8001126:	d017      	beq.n	8001158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d123      	bne.n	80011ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	220f      	movs	r2, #15
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	69b9      	ldr	r1, [r7, #24]
 80011a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0203 	and.w	r2, r3, #3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80b4 	beq.w	8001356 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b60      	ldr	r3, [pc, #384]	; (8001374 <HAL_GPIO_Init+0x30c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a5f      	ldr	r2, [pc, #380]	; (8001374 <HAL_GPIO_Init+0x30c>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <HAL_GPIO_Init+0x30c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120a:	4a5b      	ldr	r2, [pc, #364]	; (8001378 <HAL_GPIO_Init+0x310>)
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a52      	ldr	r2, [pc, #328]	; (800137c <HAL_GPIO_Init+0x314>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d02b      	beq.n	800128e <HAL_GPIO_Init+0x226>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a51      	ldr	r2, [pc, #324]	; (8001380 <HAL_GPIO_Init+0x318>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d025      	beq.n	800128a <HAL_GPIO_Init+0x222>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a50      	ldr	r2, [pc, #320]	; (8001384 <HAL_GPIO_Init+0x31c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d01f      	beq.n	8001286 <HAL_GPIO_Init+0x21e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4f      	ldr	r2, [pc, #316]	; (8001388 <HAL_GPIO_Init+0x320>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d019      	beq.n	8001282 <HAL_GPIO_Init+0x21a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4e      	ldr	r2, [pc, #312]	; (800138c <HAL_GPIO_Init+0x324>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0x216>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4d      	ldr	r2, [pc, #308]	; (8001390 <HAL_GPIO_Init+0x328>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00d      	beq.n	800127a <HAL_GPIO_Init+0x212>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4c      	ldr	r2, [pc, #304]	; (8001394 <HAL_GPIO_Init+0x32c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0x20e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4b      	ldr	r2, [pc, #300]	; (8001398 <HAL_GPIO_Init+0x330>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_GPIO_Init+0x20a>
 800126e:	2307      	movs	r3, #7
 8001270:	e00e      	b.n	8001290 <HAL_GPIO_Init+0x228>
 8001272:	2308      	movs	r3, #8
 8001274:	e00c      	b.n	8001290 <HAL_GPIO_Init+0x228>
 8001276:	2306      	movs	r3, #6
 8001278:	e00a      	b.n	8001290 <HAL_GPIO_Init+0x228>
 800127a:	2305      	movs	r3, #5
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x228>
 800127e:	2304      	movs	r3, #4
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x228>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x228>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x228>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x228>
 800128e:	2300      	movs	r3, #0
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	f002 0203 	and.w	r2, r2, #3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a0:	4935      	ldr	r1, [pc, #212]	; (8001378 <HAL_GPIO_Init+0x310>)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <HAL_GPIO_Init+0x334>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d2:	4a32      	ldr	r2, [pc, #200]	; (800139c <HAL_GPIO_Init+0x334>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d8:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_GPIO_Init+0x334>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012fc:	4a27      	ldr	r2, [pc, #156]	; (800139c <HAL_GPIO_Init+0x334>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_GPIO_Init+0x334>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001326:	4a1d      	ldr	r2, [pc, #116]	; (800139c <HAL_GPIO_Init+0x334>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <HAL_GPIO_Init+0x334>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <HAL_GPIO_Init+0x334>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	f67f ae90 	bls.w	8001084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40013800 	.word	0x40013800
 800137c:	40020000 	.word	0x40020000
 8001380:	40020400 	.word	0x40020400
 8001384:	40020800 	.word	0x40020800
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40021000 	.word	0x40021000
 8001390:	40021400 	.word	0x40021400
 8001394:	40021800 	.word	0x40021800
 8001398:	40021c00 	.word	0x40021c00
 800139c:	40013c00 	.word	0x40013c00

080013a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013bc:	e003      	b.n	80013c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	041a      	lsls	r2, r3, #16
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	619a      	str	r2, [r3, #24]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f806 	bl	8001404 <HAL_GPIO_EXTI_Callback>
  }
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e267      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d075      	beq.n	8001526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143a:	4b88      	ldr	r3, [pc, #544]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b04      	cmp	r3, #4
 8001444:	d00c      	beq.n	8001460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001446:	4b85      	ldr	r3, [pc, #532]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144e:	2b08      	cmp	r3, #8
 8001450:	d112      	bne.n	8001478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001452:	4b82      	ldr	r3, [pc, #520]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800145e:	d10b      	bne.n	8001478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	4b7e      	ldr	r3, [pc, #504]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d05b      	beq.n	8001524 <HAL_RCC_OscConfig+0x108>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d157      	bne.n	8001524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e242      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x74>
 8001482:	4b76      	ldr	r3, [pc, #472]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a75      	ldr	r2, [pc, #468]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e01d      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x98>
 800149a:	4b70      	ldr	r3, [pc, #448]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a6f      	ldr	r2, [pc, #444]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b6d      	ldr	r3, [pc, #436]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6c      	ldr	r2, [pc, #432]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 80014b4:	4b69      	ldr	r3, [pc, #420]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a68      	ldr	r2, [pc, #416]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b66      	ldr	r3, [pc, #408]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a65      	ldr	r2, [pc, #404]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fc48 	bl	8000d68 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fc44 	bl	8000d68 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e207      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b5b      	ldr	r3, [pc, #364]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0xc0>
 80014fa:	e014      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fc34 	bl	8000d68 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fc30 	bl	8000d68 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e1f3      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	4b51      	ldr	r3, [pc, #324]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0xe8>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d063      	beq.n	80015fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001532:	4b4a      	ldr	r3, [pc, #296]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001546:	2b08      	cmp	r3, #8
 8001548:	d11c      	bne.n	8001584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154a:	4b44      	ldr	r3, [pc, #272]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d116      	bne.n	8001584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_RCC_OscConfig+0x152>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e1c7      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4937      	ldr	r1, [pc, #220]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	e03a      	b.n	80015fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158c:	4b34      	ldr	r3, [pc, #208]	; (8001660 <HAL_RCC_OscConfig+0x244>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fbe9 	bl	8000d68 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fbe5 	bl	8000d68 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1a8      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4925      	ldr	r1, [pc, #148]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_OscConfig+0x244>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fbc8 	bl	8000d68 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff fbc4 	bl	8000d68 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e187      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d036      	beq.n	8001674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d016      	beq.n	800163c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_RCC_OscConfig+0x248>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fba8 	bl	8000d68 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fba4 	bl	8000d68 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e167      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x200>
 800163a:	e01b      	b.n	8001674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_OscConfig+0x248>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff fb91 	bl	8000d68 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	e00e      	b.n	8001668 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164a:	f7ff fb8d 	bl	8000d68 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d907      	bls.n	8001668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e150      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
 800165c:	40023800 	.word	0x40023800
 8001660:	42470000 	.word	0x42470000
 8001664:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	4b88      	ldr	r3, [pc, #544]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800166a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ea      	bne.n	800164a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8097 	beq.w	80017b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001686:	4b81      	ldr	r3, [pc, #516]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10f      	bne.n	80016b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b7d      	ldr	r3, [pc, #500]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a7c      	ldr	r2, [pc, #496]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b7a      	ldr	r3, [pc, #488]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	4b77      	ldr	r3, [pc, #476]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016be:	4b74      	ldr	r3, [pc, #464]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a73      	ldr	r2, [pc, #460]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb4d 	bl	8000d68 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff fb49 	bl	8000d68 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e10c      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	4b6a      	ldr	r3, [pc, #424]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x2ea>
 80016f8:	4b64      	ldr	r3, [pc, #400]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	4a63      	ldr	r2, [pc, #396]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6713      	str	r3, [r2, #112]	; 0x70
 8001704:	e01c      	b.n	8001740 <HAL_RCC_OscConfig+0x324>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b05      	cmp	r3, #5
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x30c>
 800170e:	4b5f      	ldr	r3, [pc, #380]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a5e      	ldr	r2, [pc, #376]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6713      	str	r3, [r2, #112]	; 0x70
 800171a:	4b5c      	ldr	r3, [pc, #368]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a5b      	ldr	r2, [pc, #364]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0x324>
 8001728:	4b58      	ldr	r3, [pc, #352]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	4a57      	ldr	r2, [pc, #348]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6713      	str	r3, [r2, #112]	; 0x70
 8001734:	4b55      	ldr	r3, [pc, #340]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	4a54      	ldr	r2, [pc, #336]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800173a:	f023 0304 	bic.w	r3, r3, #4
 800173e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d015      	beq.n	8001774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001748:	f7ff fb0e 	bl	8000d68 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174e:	e00a      	b.n	8001766 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f7ff fb0a 	bl	8000d68 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0cb      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	4b49      	ldr	r3, [pc, #292]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0ee      	beq.n	8001750 <HAL_RCC_OscConfig+0x334>
 8001772:	e014      	b.n	800179e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7ff faf8 	bl	8000d68 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177a:	e00a      	b.n	8001792 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7ff faf4 	bl	8000d68 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0b5      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001792:	4b3e      	ldr	r3, [pc, #248]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1ee      	bne.n	800177c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a4:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	4a38      	ldr	r2, [pc, #224]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a1 	beq.w	80018fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d05c      	beq.n	8001880 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d141      	bne.n	8001852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ce:	4b31      	ldr	r3, [pc, #196]	; (8001894 <HAL_RCC_OscConfig+0x478>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fac8 	bl	8000d68 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff fac4 	bl	8000d68 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e087      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	4b27      	ldr	r3, [pc, #156]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	019b      	lsls	r3, r3, #6
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	3b01      	subs	r3, #1
 8001814:	041b      	lsls	r3, r3, #16
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	491b      	ldr	r1, [pc, #108]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x478>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fa9d 	bl	8000d68 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff fa99 	bl	8000d68 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e05c      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x416>
 8001850:	e054      	b.n	80018fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_RCC_OscConfig+0x478>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fa86 	bl	8000d68 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fa82 	bl	8000d68 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e045      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x444>
 800187e:	e03d      	b.n	80018fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e038      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
 800188c:	40023800 	.word	0x40023800
 8001890:	40007000 	.word	0x40007000
 8001894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_RCC_OscConfig+0x4ec>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d028      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d121      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d11a      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d111      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	3b01      	subs	r3, #1
 80018e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d107      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0cc      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d90c      	bls.n	8001948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b65      	ldr	r3, [pc, #404]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b8      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800196a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	494d      	ldr	r1, [pc, #308]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d044      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d119      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e07f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d003      	beq.n	80019ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e06f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e067      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4934      	ldr	r1, [pc, #208]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019fc:	f7ff f9b4 	bl	8000d68 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a04:	f7ff f9b0 	bl	8000d68 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e04f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 020c 	and.w	r2, r3, #12
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1eb      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d20c      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e032      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4916      	ldr	r1, [pc, #88]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a92:	f000 f821 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	490a      	ldr	r1, [pc, #40]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	5ccb      	ldrb	r3, [r1, r3]
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe ff72 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	080073c8 	.word	0x080073c8
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001adc:	b094      	sub	sp, #80	; 0x50
 8001ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ae8:	2300      	movs	r3, #0
 8001aea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af0:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d00d      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x40>
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	f200 80e1 	bhi.w	8001cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x34>
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b0a:	e0db      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b10:	e0db      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b12:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b16:	e0d8      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b18:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b22:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d063      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2e:	4b6a      	ldr	r3, [pc, #424]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	2200      	movs	r2, #0
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
 8001b46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	462b      	mov	r3, r5
 8001b4e:	f04f 0000 	mov.w	r0, #0
 8001b52:	f04f 0100 	mov.w	r1, #0
 8001b56:	0159      	lsls	r1, r3, #5
 8001b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b5c:	0150      	lsls	r0, r2, #5
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4621      	mov	r1, r4
 8001b64:	1a51      	subs	r1, r2, r1
 8001b66:	6139      	str	r1, [r7, #16]
 8001b68:	4629      	mov	r1, r5
 8001b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b7c:	4659      	mov	r1, fp
 8001b7e:	018b      	lsls	r3, r1, #6
 8001b80:	4651      	mov	r1, sl
 8001b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b86:	4651      	mov	r1, sl
 8001b88:	018a      	lsls	r2, r1, #6
 8001b8a:	4651      	mov	r1, sl
 8001b8c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b90:	4659      	mov	r1, fp
 8001b92:	eb63 0901 	sbc.w	r9, r3, r1
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001baa:	4690      	mov	r8, r2
 8001bac:	4699      	mov	r9, r3
 8001bae:	4623      	mov	r3, r4
 8001bb0:	eb18 0303 	adds.w	r3, r8, r3
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	eb49 0303 	adc.w	r3, r9, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bca:	4629      	mov	r1, r5
 8001bcc:	024b      	lsls	r3, r1, #9
 8001bce:	4621      	mov	r1, r4
 8001bd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	024a      	lsls	r2, r1, #9
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bde:	2200      	movs	r2, #0
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001be8:	f7fe fb4a 	bl	8000280 <__aeabi_uldivmod>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bf4:	e058      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf6:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	099b      	lsrs	r3, r3, #6
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	4611      	mov	r1, r2
 8001c02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c06:	623b      	str	r3, [r7, #32]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c10:	4642      	mov	r2, r8
 8001c12:	464b      	mov	r3, r9
 8001c14:	f04f 0000 	mov.w	r0, #0
 8001c18:	f04f 0100 	mov.w	r1, #0
 8001c1c:	0159      	lsls	r1, r3, #5
 8001c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c22:	0150      	lsls	r0, r2, #5
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4641      	mov	r1, r8
 8001c2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c2e:	4649      	mov	r1, r9
 8001c30:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c48:	ebb2 040a 	subs.w	r4, r2, sl
 8001c4c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	00eb      	lsls	r3, r5, #3
 8001c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c5e:	00e2      	lsls	r2, r4, #3
 8001c60:	4614      	mov	r4, r2
 8001c62:	461d      	mov	r5, r3
 8001c64:	4643      	mov	r3, r8
 8001c66:	18e3      	adds	r3, r4, r3
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	eb45 0303 	adc.w	r3, r5, r3
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7e:	4629      	mov	r1, r5
 8001c80:	028b      	lsls	r3, r1, #10
 8001c82:	4621      	mov	r1, r4
 8001c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c88:	4621      	mov	r1, r4
 8001c8a:	028a      	lsls	r2, r1, #10
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c92:	2200      	movs	r2, #0
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	61fa      	str	r2, [r7, #28]
 8001c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c9c:	f7fe faf0 	bl	8000280 <__aeabi_uldivmod>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	0c1b      	lsrs	r3, r3, #16
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cc2:	e002      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001cc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3750      	adds	r7, #80	; 0x50
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	00f42400 	.word	0x00f42400
 8001ce0:	007a1200 	.word	0x007a1200

08001ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000000 	.word	0x20000000

08001cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d00:	f7ff fff0 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0a9b      	lsrs	r3, r3, #10
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4903      	ldr	r1, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	080073d8 	.word	0x080073d8

08001d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d28:	f7ff ffdc 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0b5b      	lsrs	r3, r3, #13
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4903      	ldr	r1, [pc, #12]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	080073d8 	.word	0x080073d8

08001d4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	220f      	movs	r2, #15
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0203 	and.w	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	08db      	lsrs	r3, r3, #3
 8001d86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <HAL_RCC_GetClockConfig+0x60>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0207 	and.w	r2, r3, #7
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	601a      	str	r2, [r3, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e041      	b.n	8001e46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f839 	bl	8001e4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3304      	adds	r3, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	4610      	mov	r0, r2
 8001df0:	f000 f9d8 	bl	80021a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d001      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e04e      	b.n	8001f1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d022      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea6:	d01d      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <HAL_TIM_Base_Start_IT+0xc8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d018      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <HAL_TIM_Base_Start_IT+0xcc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00e      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d009      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d004      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d111      	bne.n	8001f08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d010      	beq.n	8001f18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f06:	e007      	b.n	8001f18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	40000800 	.word	0x40000800
 8001f34:	40000c00 	.word	0x40000c00
 8001f38:	40010400 	.word	0x40010400
 8001f3c:	40014000 	.word	0x40014000
 8001f40:	40001800 	.word	0x40001800

08001f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d122      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d11b      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0202 	mvn.w	r2, #2
 8001f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8ee 	bl	8002168 <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8e0 	bl	8002154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f8f1 	bl	800217c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d122      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d11b      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0204 	mvn.w	r2, #4
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8c4 	bl	8002168 <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8b6 	bl	8002154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f8c7 	bl	800217c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d122      	bne.n	8002048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b08      	cmp	r3, #8
 800200e:	d11b      	bne.n	8002048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0208 	mvn.w	r2, #8
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2204      	movs	r2, #4
 800201e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f89a 	bl	8002168 <HAL_TIM_IC_CaptureCallback>
 8002034:	e005      	b.n	8002042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f88c 	bl	8002154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f89d 	bl	800217c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b10      	cmp	r3, #16
 8002054:	d122      	bne.n	800209c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b10      	cmp	r3, #16
 8002062:	d11b      	bne.n	800209c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0210 	mvn.w	r2, #16
 800206c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2208      	movs	r2, #8
 8002072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f870 	bl	8002168 <HAL_TIM_IC_CaptureCallback>
 8002088:	e005      	b.n	8002096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f862 	bl	8002154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f873 	bl	800217c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10e      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d107      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0201 	mvn.w	r2, #1
 80020c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe fbd6 	bl	8000874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	2b80      	cmp	r3, #128	; 0x80
 80020d4:	d10e      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e0:	2b80      	cmp	r3, #128	; 0x80
 80020e2:	d107      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f902 	bl	80022f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fe:	2b40      	cmp	r3, #64	; 0x40
 8002100:	d10e      	bne.n	8002120 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210c:	2b40      	cmp	r3, #64	; 0x40
 800210e:	d107      	bne.n	8002120 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f838 	bl	8002190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b20      	cmp	r3, #32
 800212c:	d10e      	bne.n	800214c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b20      	cmp	r3, #32
 800213a:	d107      	bne.n	800214c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0220 	mvn.w	r2, #32
 8002144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8cc 	bl	80022e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a40      	ldr	r2, [pc, #256]	; (80022b8 <TIM_Base_SetConfig+0x114>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c2:	d00f      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3d      	ldr	r2, [pc, #244]	; (80022bc <TIM_Base_SetConfig+0x118>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00b      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3c      	ldr	r2, [pc, #240]	; (80022c0 <TIM_Base_SetConfig+0x11c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3b      	ldr	r2, [pc, #236]	; (80022c4 <TIM_Base_SetConfig+0x120>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d003      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a3a      	ldr	r2, [pc, #232]	; (80022c8 <TIM_Base_SetConfig+0x124>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d108      	bne.n	80021f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a2f      	ldr	r2, [pc, #188]	; (80022b8 <TIM_Base_SetConfig+0x114>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d02b      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002204:	d027      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a2c      	ldr	r2, [pc, #176]	; (80022bc <TIM_Base_SetConfig+0x118>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d023      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a2b      	ldr	r2, [pc, #172]	; (80022c0 <TIM_Base_SetConfig+0x11c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01f      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a2a      	ldr	r2, [pc, #168]	; (80022c4 <TIM_Base_SetConfig+0x120>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01b      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a29      	ldr	r2, [pc, #164]	; (80022c8 <TIM_Base_SetConfig+0x124>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d017      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a28      	ldr	r2, [pc, #160]	; (80022cc <TIM_Base_SetConfig+0x128>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <TIM_Base_SetConfig+0x12c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00f      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <TIM_Base_SetConfig+0x130>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00b      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a25      	ldr	r2, [pc, #148]	; (80022d8 <TIM_Base_SetConfig+0x134>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a24      	ldr	r2, [pc, #144]	; (80022dc <TIM_Base_SetConfig+0x138>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d003      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a23      	ldr	r2, [pc, #140]	; (80022e0 <TIM_Base_SetConfig+0x13c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d108      	bne.n	8002268 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800225c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <TIM_Base_SetConfig+0x114>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d003      	beq.n	800229c <TIM_Base_SetConfig+0xf8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <TIM_Base_SetConfig+0x124>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d103      	bne.n	80022a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	615a      	str	r2, [r3, #20]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40010000 	.word	0x40010000
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40000800 	.word	0x40000800
 80022c4:	40000c00 	.word	0x40000c00
 80022c8:	40010400 	.word	0x40010400
 80022cc:	40014000 	.word	0x40014000
 80022d0:	40014400 	.word	0x40014400
 80022d4:	40014800 	.word	0x40014800
 80022d8:	40001800 	.word	0x40001800
 80022dc:	40001c00 	.word	0x40001c00
 80022e0:	40002000 	.word	0x40002000

080022e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e03f      	b.n	800239e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe fae2 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2224      	movs	r2, #36	; 0x24
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800234e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 fd7b 	bl	8002e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b08a      	sub	sp, #40	; 0x28
 80023aa:	af02      	add	r7, sp, #8
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b20      	cmp	r3, #32
 80023c4:	d17c      	bne.n	80024c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_UART_Transmit+0x2c>
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e075      	b.n	80024c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_UART_Transmit+0x3e>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e06e      	b.n	80024c2 <HAL_UART_Transmit+0x11c>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2221      	movs	r2, #33	; 0x21
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023fa:	f7fe fcb5 	bl	8000d68 <HAL_GetTick>
 80023fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	88fa      	ldrh	r2, [r7, #6]
 8002404:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002414:	d108      	bne.n	8002428 <HAL_UART_Transmit+0x82>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d104      	bne.n	8002428 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	e003      	b.n	8002430 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800242c:	2300      	movs	r3, #0
 800242e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002438:	e02a      	b.n	8002490 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2200      	movs	r2, #0
 8002442:	2180      	movs	r1, #128	; 0x80
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 faf9 	bl	8002a3c <UART_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e036      	b.n	80024c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10b      	bne.n	8002472 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002468:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	3302      	adds	r3, #2
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	e007      	b.n	8002482 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	781a      	ldrb	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3301      	adds	r3, #1
 8002480:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1cf      	bne.n	800243a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2200      	movs	r2, #0
 80024a2:	2140      	movs	r1, #64	; 0x40
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fac9 	bl	8002a3c <UART_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e006      	b.n	80024c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b0ba      	sub	sp, #232	; 0xe8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800250a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10f      	bne.n	8002532 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_UART_IRQHandler+0x66>
 800251e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fbd3 	bl	8002cd6 <UART_Receive_IT>
      return;
 8002530:	e256      	b.n	80029e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80de 	beq.w	80026f8 <HAL_UART_IRQHandler+0x22c>
 800253c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d106      	bne.n	8002556 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800254c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80d1 	beq.w	80026f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_UART_IRQHandler+0xae>
 8002562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f043 0201 	orr.w	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800257a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_UART_IRQHandler+0xd2>
 8002586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f043 0202 	orr.w	r2, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_UART_IRQHandler+0xf6>
 80025aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f043 0204 	orr.w	r2, r3, #4
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d011      	beq.n	80025f2 <HAL_UART_IRQHandler+0x126>
 80025ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f043 0208 	orr.w	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 81ed 	beq.w	80029d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_UART_IRQHandler+0x14e>
 8002608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fb5e 	bl	8002cd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002624:	2b40      	cmp	r3, #64	; 0x40
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <HAL_UART_IRQHandler+0x17a>
 800263e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d04f      	beq.n	80026e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fa66 	bl	8002b18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	d141      	bne.n	80026de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3314      	adds	r3, #20
 8002660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002664:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002668:	e853 3f00 	ldrex	r3, [r3]
 800266c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3314      	adds	r3, #20
 8002682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002686:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800268a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002696:	e841 2300 	strex	r3, r2, [r1]
 800269a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800269e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1d9      	bne.n	800265a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d013      	beq.n	80026d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b2:	4a7d      	ldr	r2, [pc, #500]	; (80028a8 <HAL_UART_IRQHandler+0x3dc>)
 80026b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fcb2 	bl	8001024 <HAL_DMA_Abort_IT>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d016      	beq.n	80026f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026d0:	4610      	mov	r0, r2
 80026d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	e00e      	b.n	80026f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f99a 	bl	8002a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	e00a      	b.n	80026f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f996 	bl	8002a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e4:	e006      	b.n	80026f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f992 	bl	8002a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026f2:	e170      	b.n	80029d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f4:	bf00      	nop
    return;
 80026f6:	e16e      	b.n	80029d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f040 814a 	bne.w	8002996 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8143 	beq.w	8002996 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 813c 	beq.w	8002996 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	f040 80b4 	bne.w	80028ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002750:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8140 	beq.w	80029da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800275e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002762:	429a      	cmp	r2, r3
 8002764:	f080 8139 	bcs.w	80029da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800276e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277a:	f000 8088 	beq.w	800288e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	330c      	adds	r3, #12
 8002784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002788:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800278c:	e853 3f00 	ldrex	r3, [r3]
 8002790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800279c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330c      	adds	r3, #12
 80027a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027ba:	e841 2300 	strex	r3, r2, [r1]
 80027be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1d9      	bne.n	800277e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3314      	adds	r3, #20
 80027d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d4:	e853 3f00 	ldrex	r3, [r3]
 80027d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3314      	adds	r3, #20
 80027ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027fa:	e841 2300 	strex	r3, r2, [r1]
 80027fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1e1      	bne.n	80027ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3314      	adds	r3, #20
 800280c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002810:	e853 3f00 	ldrex	r3, [r3]
 8002814:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800281c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3314      	adds	r3, #20
 8002826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800282a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800282c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002830:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002832:	e841 2300 	strex	r3, r2, [r1]
 8002836:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1e3      	bne.n	8002806 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	330c      	adds	r3, #12
 8002852:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002856:	e853 3f00 	ldrex	r3, [r3]
 800285a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800285c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285e:	f023 0310 	bic.w	r3, r3, #16
 8002862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330c      	adds	r3, #12
 800286c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002870:	65ba      	str	r2, [r7, #88]	; 0x58
 8002872:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002874:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002876:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002878:	e841 2300 	strex	r3, r2, [r1]
 800287c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800287e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e3      	bne.n	800284c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fb5b 	bl	8000f44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002896:	b29b      	uxth	r3, r3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	b29b      	uxth	r3, r3
 800289c:	4619      	mov	r1, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f8c0 	bl	8002a24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028a4:	e099      	b.n	80029da <HAL_UART_IRQHandler+0x50e>
 80028a6:	bf00      	nop
 80028a8:	08002bdf 	.word	0x08002bdf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 808b 	beq.w	80029de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80028c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8086 	beq.w	80029de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	e853 3f00 	ldrex	r3, [r3]
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028f6:	647a      	str	r2, [r7, #68]	; 0x44
 80028f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028fe:	e841 2300 	strex	r3, r2, [r1]
 8002902:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1e3      	bne.n	80028d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3314      	adds	r3, #20
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	e853 3f00 	ldrex	r3, [r3]
 8002918:	623b      	str	r3, [r7, #32]
   return(result);
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800292e:	633a      	str	r2, [r7, #48]	; 0x30
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1e3      	bne.n	800290a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	e853 3f00 	ldrex	r3, [r3]
 800295e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0310 	bic.w	r3, r3, #16
 8002966:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002974:	61fa      	str	r2, [r7, #28]
 8002976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	69b9      	ldr	r1, [r7, #24]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	e841 2300 	strex	r3, r2, [r1]
 8002980:	617b      	str	r3, [r7, #20]
   return(result);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e3      	bne.n	8002950 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f848 	bl	8002a24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002994:	e023      	b.n	80029de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_UART_IRQHandler+0x4ea>
 80029a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f929 	bl	8002c06 <UART_Transmit_IT>
    return;
 80029b4:	e014      	b.n	80029e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00e      	beq.n	80029e0 <HAL_UART_IRQHandler+0x514>
 80029c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f969 	bl	8002ca6 <UART_EndTransmit_IT>
    return;
 80029d4:	e004      	b.n	80029e0 <HAL_UART_IRQHandler+0x514>
    return;
 80029d6:	bf00      	nop
 80029d8:	e002      	b.n	80029e0 <HAL_UART_IRQHandler+0x514>
      return;
 80029da:	bf00      	nop
 80029dc:	e000      	b.n	80029e0 <HAL_UART_IRQHandler+0x514>
      return;
 80029de:	bf00      	nop
  }
}
 80029e0:	37e8      	adds	r7, #232	; 0xe8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop

080029e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b090      	sub	sp, #64	; 0x40
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a4c:	e050      	b.n	8002af0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d04c      	beq.n	8002af0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a5c:	f7fe f984 	bl	8000d68 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d241      	bcs.n	8002af0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	330c      	adds	r3, #12
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	e853 3f00 	ldrex	r3, [r3]
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	330c      	adds	r3, #12
 8002a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a8c:	637a      	str	r2, [r7, #52]	; 0x34
 8002a8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a94:	e841 2300 	strex	r3, r2, [r1]
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e5      	bne.n	8002a6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3314      	adds	r3, #20
 8002aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	e853 3f00 	ldrex	r3, [r3]
 8002aae:	613b      	str	r3, [r7, #16]
   return(result);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3314      	adds	r3, #20
 8002abe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ac0:	623a      	str	r2, [r7, #32]
 8002ac2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	69f9      	ldr	r1, [r7, #28]
 8002ac6:	6a3a      	ldr	r2, [r7, #32]
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e5      	bne.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e00f      	b.n	8002b10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4013      	ands	r3, r2
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d09f      	beq.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3740      	adds	r7, #64	; 0x40
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b095      	sub	sp, #84	; 0x54
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	330c      	adds	r3, #12
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2a:	e853 3f00 	ldrex	r3, [r3]
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b40:	643a      	str	r2, [r7, #64]	; 0x40
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b48:	e841 2300 	strex	r3, r2, [r1]
 8002b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e5      	bne.n	8002b20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3314      	adds	r3, #20
 8002b5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	e853 3f00 	ldrex	r3, [r3]
 8002b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3314      	adds	r3, #20
 8002b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7c:	e841 2300 	strex	r3, r2, [r1]
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1e5      	bne.n	8002b54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d119      	bne.n	8002bc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	330c      	adds	r3, #12
 8002b96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	e853 3f00 	ldrex	r3, [r3]
 8002b9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f023 0310 	bic.w	r3, r3, #16
 8002ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	330c      	adds	r3, #12
 8002bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bb0:	61ba      	str	r2, [r7, #24]
 8002bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb4:	6979      	ldr	r1, [r7, #20]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	e841 2300 	strex	r3, r2, [r1]
 8002bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1e5      	bne.n	8002b90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bd2:	bf00      	nop
 8002bd4:	3754      	adds	r7, #84	; 0x54
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff ff09 	bl	8002a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b21      	cmp	r3, #33	; 0x21
 8002c18:	d13e      	bne.n	8002c98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c22:	d114      	bne.n	8002c4e <UART_Transmit_IT+0x48>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d110      	bne.n	8002c4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	1c9a      	adds	r2, r3, #2
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	621a      	str	r2, [r3, #32]
 8002c4c:	e008      	b.n	8002c60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	1c59      	adds	r1, r3, #1
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6211      	str	r1, [r2, #32]
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10f      	bne.n	8002c94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e000      	b.n	8002c9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c98:	2302      	movs	r3, #2
  }
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fe8e 	bl	80029e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b08c      	sub	sp, #48	; 0x30
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b22      	cmp	r3, #34	; 0x22
 8002ce8:	f040 80ab 	bne.w	8002e42 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf4:	d117      	bne.n	8002d26 <UART_Receive_IT+0x50>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d113      	bne.n	8002d26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	1c9a      	adds	r2, r3, #2
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	629a      	str	r2, [r3, #40]	; 0x28
 8002d24:	e026      	b.n	8002d74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d38:	d007      	beq.n	8002d4a <UART_Receive_IT+0x74>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <UART_Receive_IT+0x82>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e008      	b.n	8002d6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4619      	mov	r1, r3
 8002d82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d15a      	bne.n	8002e3e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0220 	bic.w	r2, r2, #32
 8002d96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002da6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d135      	bne.n	8002e34 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	330c      	adds	r3, #12
 8002dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f023 0310 	bic.w	r3, r3, #16
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	330c      	adds	r3, #12
 8002dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dee:	623a      	str	r2, [r7, #32]
 8002df0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	69f9      	ldr	r1, [r7, #28]
 8002df4:	6a3a      	ldr	r2, [r7, #32]
 8002df6:	e841 2300 	strex	r3, r2, [r1]
 8002dfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e5      	bne.n	8002dce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d10a      	bne.n	8002e26 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff fdf9 	bl	8002a24 <HAL_UARTEx_RxEventCallback>
 8002e32:	e002      	b.n	8002e3a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff fde1 	bl	80029fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e002      	b.n	8002e44 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
  }
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3730      	adds	r7, #48	; 0x30
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e50:	b0c0      	sub	sp, #256	; 0x100
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e68:	68d9      	ldr	r1, [r3, #12]
 8002e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	ea40 0301 	orr.w	r3, r0, r1
 8002e74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ea4:	f021 010c 	bic.w	r1, r1, #12
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	6999      	ldr	r1, [r3, #24]
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	ea40 0301 	orr.w	r3, r0, r1
 8002ed2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b8f      	ldr	r3, [pc, #572]	; (8003118 <UART_SetConfig+0x2cc>)
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d005      	beq.n	8002eec <UART_SetConfig+0xa0>
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4b8d      	ldr	r3, [pc, #564]	; (800311c <UART_SetConfig+0x2d0>)
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d104      	bne.n	8002ef6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eec:	f7fe ff1a 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8002ef0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ef4:	e003      	b.n	8002efe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ef6:	f7fe ff01 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 8002efa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f08:	f040 810c 	bne.w	8003124 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f10:	2200      	movs	r2, #0
 8002f12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f1e:	4622      	mov	r2, r4
 8002f20:	462b      	mov	r3, r5
 8002f22:	1891      	adds	r1, r2, r2
 8002f24:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f26:	415b      	adcs	r3, r3
 8002f28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f2e:	4621      	mov	r1, r4
 8002f30:	eb12 0801 	adds.w	r8, r2, r1
 8002f34:	4629      	mov	r1, r5
 8002f36:	eb43 0901 	adc.w	r9, r3, r1
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4e:	4690      	mov	r8, r2
 8002f50:	4699      	mov	r9, r3
 8002f52:	4623      	mov	r3, r4
 8002f54:	eb18 0303 	adds.w	r3, r8, r3
 8002f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f5c:	462b      	mov	r3, r5
 8002f5e:	eb49 0303 	adc.w	r3, r9, r3
 8002f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	18db      	adds	r3, r3, r3
 8002f7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f80:	4613      	mov	r3, r2
 8002f82:	eb42 0303 	adc.w	r3, r2, r3
 8002f86:	657b      	str	r3, [r7, #84]	; 0x54
 8002f88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f90:	f7fd f976 	bl	8000280 <__aeabi_uldivmod>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4b61      	ldr	r3, [pc, #388]	; (8003120 <UART_SetConfig+0x2d4>)
 8002f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	011c      	lsls	r4, r3, #4
 8002fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	1891      	adds	r1, r2, r2
 8002fba:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fbc:	415b      	adcs	r3, r3
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	eb12 0a01 	adds.w	sl, r2, r1
 8002fca:	4649      	mov	r1, r9
 8002fcc:	eb43 0b01 	adc.w	fp, r3, r1
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fe4:	4692      	mov	sl, r2
 8002fe6:	469b      	mov	fp, r3
 8002fe8:	4643      	mov	r3, r8
 8002fea:	eb1a 0303 	adds.w	r3, sl, r3
 8002fee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003008:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800300c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003010:	460b      	mov	r3, r1
 8003012:	18db      	adds	r3, r3, r3
 8003014:	643b      	str	r3, [r7, #64]	; 0x40
 8003016:	4613      	mov	r3, r2
 8003018:	eb42 0303 	adc.w	r3, r2, r3
 800301c:	647b      	str	r3, [r7, #68]	; 0x44
 800301e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003022:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003026:	f7fd f92b 	bl	8000280 <__aeabi_uldivmod>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4611      	mov	r1, r2
 8003030:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <UART_SetConfig+0x2d4>)
 8003032:	fba3 2301 	umull	r2, r3, r3, r1
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2264      	movs	r2, #100	; 0x64
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	1acb      	subs	r3, r1, r3
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003046:	4b36      	ldr	r3, [pc, #216]	; (8003120 <UART_SetConfig+0x2d4>)
 8003048:	fba3 2302 	umull	r2, r3, r3, r2
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003054:	441c      	add	r4, r3
 8003056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305a:	2200      	movs	r2, #0
 800305c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003060:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003064:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	1891      	adds	r1, r2, r2
 800306e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003070:	415b      	adcs	r3, r3
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003078:	4641      	mov	r1, r8
 800307a:	1851      	adds	r1, r2, r1
 800307c:	6339      	str	r1, [r7, #48]	; 0x30
 800307e:	4649      	mov	r1, r9
 8003080:	414b      	adcs	r3, r1
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003090:	4659      	mov	r1, fp
 8003092:	00cb      	lsls	r3, r1, #3
 8003094:	4651      	mov	r1, sl
 8003096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800309a:	4651      	mov	r1, sl
 800309c:	00ca      	lsls	r2, r1, #3
 800309e:	4610      	mov	r0, r2
 80030a0:	4619      	mov	r1, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	4642      	mov	r2, r8
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030ac:	464b      	mov	r3, r9
 80030ae:	460a      	mov	r2, r1
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030cc:	460b      	mov	r3, r1
 80030ce:	18db      	adds	r3, r3, r3
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d2:	4613      	mov	r3, r2
 80030d4:	eb42 0303 	adc.w	r3, r2, r3
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030e2:	f7fd f8cd 	bl	8000280 <__aeabi_uldivmod>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <UART_SetConfig+0x2d4>)
 80030ec:	fba3 1302 	umull	r1, r3, r3, r2
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	2164      	movs	r1, #100	; 0x64
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	3332      	adds	r3, #50	; 0x32
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <UART_SetConfig+0x2d4>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	f003 0207 	and.w	r2, r3, #7
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4422      	add	r2, r4
 8003112:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003114:	e105      	b.n	8003322 <UART_SetConfig+0x4d6>
 8003116:	bf00      	nop
 8003118:	40011000 	.word	0x40011000
 800311c:	40011400 	.word	0x40011400
 8003120:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003128:	2200      	movs	r2, #0
 800312a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800312e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003132:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003136:	4642      	mov	r2, r8
 8003138:	464b      	mov	r3, r9
 800313a:	1891      	adds	r1, r2, r2
 800313c:	6239      	str	r1, [r7, #32]
 800313e:	415b      	adcs	r3, r3
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
 8003142:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003146:	4641      	mov	r1, r8
 8003148:	1854      	adds	r4, r2, r1
 800314a:	4649      	mov	r1, r9
 800314c:	eb43 0501 	adc.w	r5, r3, r1
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	00eb      	lsls	r3, r5, #3
 800315a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800315e:	00e2      	lsls	r2, r4, #3
 8003160:	4614      	mov	r4, r2
 8003162:	461d      	mov	r5, r3
 8003164:	4643      	mov	r3, r8
 8003166:	18e3      	adds	r3, r4, r3
 8003168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800316c:	464b      	mov	r3, r9
 800316e:	eb45 0303 	adc.w	r3, r5, r3
 8003172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003182:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003192:	4629      	mov	r1, r5
 8003194:	008b      	lsls	r3, r1, #2
 8003196:	4621      	mov	r1, r4
 8003198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800319c:	4621      	mov	r1, r4
 800319e:	008a      	lsls	r2, r1, #2
 80031a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031a4:	f7fd f86c 	bl	8000280 <__aeabi_uldivmod>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4b60      	ldr	r3, [pc, #384]	; (8003330 <UART_SetConfig+0x4e4>)
 80031ae:	fba3 2302 	umull	r2, r3, r3, r2
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	011c      	lsls	r4, r3, #4
 80031b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031c8:	4642      	mov	r2, r8
 80031ca:	464b      	mov	r3, r9
 80031cc:	1891      	adds	r1, r2, r2
 80031ce:	61b9      	str	r1, [r7, #24]
 80031d0:	415b      	adcs	r3, r3
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d8:	4641      	mov	r1, r8
 80031da:	1851      	adds	r1, r2, r1
 80031dc:	6139      	str	r1, [r7, #16]
 80031de:	4649      	mov	r1, r9
 80031e0:	414b      	adcs	r3, r1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031f0:	4659      	mov	r1, fp
 80031f2:	00cb      	lsls	r3, r1, #3
 80031f4:	4651      	mov	r1, sl
 80031f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fa:	4651      	mov	r1, sl
 80031fc:	00ca      	lsls	r2, r1, #3
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	4603      	mov	r3, r0
 8003204:	4642      	mov	r2, r8
 8003206:	189b      	adds	r3, r3, r2
 8003208:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800320c:	464b      	mov	r3, r9
 800320e:	460a      	mov	r2, r1
 8003210:	eb42 0303 	adc.w	r3, r2, r3
 8003214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	67bb      	str	r3, [r7, #120]	; 0x78
 8003222:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003230:	4649      	mov	r1, r9
 8003232:	008b      	lsls	r3, r1, #2
 8003234:	4641      	mov	r1, r8
 8003236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800323a:	4641      	mov	r1, r8
 800323c:	008a      	lsls	r2, r1, #2
 800323e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003242:	f7fd f81d 	bl	8000280 <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4b39      	ldr	r3, [pc, #228]	; (8003330 <UART_SetConfig+0x4e4>)
 800324c:	fba3 1302 	umull	r1, r3, r3, r2
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	2164      	movs	r1, #100	; 0x64
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	3332      	adds	r3, #50	; 0x32
 800325e:	4a34      	ldr	r2, [pc, #208]	; (8003330 <UART_SetConfig+0x4e4>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326a:	441c      	add	r4, r3
 800326c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003270:	2200      	movs	r2, #0
 8003272:	673b      	str	r3, [r7, #112]	; 0x70
 8003274:	677a      	str	r2, [r7, #116]	; 0x74
 8003276:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800327a:	4642      	mov	r2, r8
 800327c:	464b      	mov	r3, r9
 800327e:	1891      	adds	r1, r2, r2
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	415b      	adcs	r3, r3
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800328a:	4641      	mov	r1, r8
 800328c:	1851      	adds	r1, r2, r1
 800328e:	6039      	str	r1, [r7, #0]
 8003290:	4649      	mov	r1, r9
 8003292:	414b      	adcs	r3, r1
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032a2:	4659      	mov	r1, fp
 80032a4:	00cb      	lsls	r3, r1, #3
 80032a6:	4651      	mov	r1, sl
 80032a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ac:	4651      	mov	r1, sl
 80032ae:	00ca      	lsls	r2, r1, #3
 80032b0:	4610      	mov	r0, r2
 80032b2:	4619      	mov	r1, r3
 80032b4:	4603      	mov	r3, r0
 80032b6:	4642      	mov	r2, r8
 80032b8:	189b      	adds	r3, r3, r2
 80032ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80032bc:	464b      	mov	r3, r9
 80032be:	460a      	mov	r2, r1
 80032c0:	eb42 0303 	adc.w	r3, r2, r3
 80032c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	663b      	str	r3, [r7, #96]	; 0x60
 80032d0:	667a      	str	r2, [r7, #100]	; 0x64
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032de:	4649      	mov	r1, r9
 80032e0:	008b      	lsls	r3, r1, #2
 80032e2:	4641      	mov	r1, r8
 80032e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032e8:	4641      	mov	r1, r8
 80032ea:	008a      	lsls	r2, r1, #2
 80032ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032f0:	f7fc ffc6 	bl	8000280 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <UART_SetConfig+0x4e4>)
 80032fa:	fba3 1302 	umull	r1, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2164      	movs	r1, #100	; 0x64
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	3332      	adds	r3, #50	; 0x32
 800330c:	4a08      	ldr	r2, [pc, #32]	; (8003330 <UART_SetConfig+0x4e4>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4422      	add	r2, r4
 8003320:	609a      	str	r2, [r3, #8]
}
 8003322:	bf00      	nop
 8003324:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003328:	46bd      	mov	sp, r7
 800332a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800332e:	bf00      	nop
 8003330:	51eb851f 	.word	0x51eb851f

08003334 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <SysTick_Handler+0x1c>)
 800333a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800333c:	f001 fdb6 	bl	8004eac <xTaskGetSchedulerState>
 8003340:	4603      	mov	r3, r0
 8003342:	2b01      	cmp	r3, #1
 8003344:	d001      	beq.n	800334a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003346:	f002 fc9f 	bl	8005c88 <xPortSysTickHandler>
  }
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	e000e010 	.word	0xe000e010

08003354 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4a07      	ldr	r2, [pc, #28]	; (8003380 <vApplicationGetIdleTaskMemory+0x2c>)
 8003364:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4a06      	ldr	r2, [pc, #24]	; (8003384 <vApplicationGetIdleTaskMemory+0x30>)
 800336a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2280      	movs	r2, #128	; 0x80
 8003370:	601a      	str	r2, [r3, #0]
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	20000128 	.word	0x20000128
 8003384:	200001e4 	.word	0x200001e4

08003388 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003398:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4a06      	ldr	r2, [pc, #24]	; (80033b8 <vApplicationGetTimerTaskMemory+0x30>)
 800339e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033a6:	601a      	str	r2, [r3, #0]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	200003e4 	.word	0x200003e4
 80033b8:	200004a0 	.word	0x200004a0

080033bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f103 0208 	add.w	r2, r3, #8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295
 80033d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f103 0208 	add.w	r2, r3, #8
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f103 0208 	add.w	r2, r3, #8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003416:	b480      	push	{r7}
 8003418:	b085      	sub	sp, #20
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	601a      	str	r2, [r3, #0]
}
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d103      	bne.n	800347e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e00c      	b.n	8003498 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3308      	adds	r3, #8
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	e002      	b.n	800348c <vListInsert+0x2e>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	429a      	cmp	r2, r3
 8003496:	d2f6      	bcs.n	8003486 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	601a      	str	r2, [r3, #0]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6892      	ldr	r2, [r2, #8]
 80034e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6852      	ldr	r2, [r2, #4]
 80034f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d103      	bne.n	8003504 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	1e5a      	subs	r2, r3, #1
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800354e:	f002 fb09 	bl	8005b64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355a:	68f9      	ldr	r1, [r7, #12]
 800355c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	441a      	add	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	3b01      	subs	r3, #1
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	441a      	add	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	22ff      	movs	r2, #255	; 0xff
 8003592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	22ff      	movs	r2, #255	; 0xff
 800359a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d114      	bne.n	80035ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01a      	beq.n	80035e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3310      	adds	r3, #16
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 fab9 	bl	8004b28 <xTaskRemoveFromEventList>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d012      	beq.n	80035e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <xQueueGenericReset+0xcc>)
 80035be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	e009      	b.n	80035e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3310      	adds	r3, #16
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fef2 	bl	80033bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3324      	adds	r3, #36	; 0x24
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff feed 	bl	80033bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035e2:	f002 faef 	bl	8005bc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035e6:	2301      	movs	r3, #1
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	e000ed04 	.word	0xe000ed04

080035f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08e      	sub	sp, #56	; 0x38
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003636:	bf00      	nop
 8003638:	e7fe      	b.n	8003638 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <xQueueGenericCreateStatic+0x52>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <xQueueGenericCreateStatic+0x56>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <xQueueGenericCreateStatic+0x58>
 800364a:	2300      	movs	r3, #0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	623b      	str	r3, [r7, #32]
}
 8003662:	bf00      	nop
 8003664:	e7fe      	b.n	8003664 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <xQueueGenericCreateStatic+0x7e>
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <xQueueGenericCreateStatic+0x82>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <xQueueGenericCreateStatic+0x84>
 8003676:	2300      	movs	r3, #0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	61fb      	str	r3, [r7, #28]
}
 800368e:	bf00      	nop
 8003690:	e7fe      	b.n	8003690 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003692:	2350      	movs	r3, #80	; 0x50
 8003694:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b50      	cmp	r3, #80	; 0x50
 800369a:	d00a      	beq.n	80036b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	61bb      	str	r3, [r7, #24]
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80036b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80036b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f83f 	bl	8003758 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80036dc:	4618      	mov	r0, r3
 80036de:	3730      	adds	r7, #48	; 0x30
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <xQueueGenericCreate+0x2a>
	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	613b      	str	r3, [r7, #16]
}
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	fb02 f303 	mul.w	r3, r2, r3
 8003716:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	3350      	adds	r3, #80	; 0x50
 800371c:	4618      	mov	r0, r3
 800371e:	f002 fb43 	bl	8005da8 <pvPortMalloc>
 8003722:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d011      	beq.n	800374e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3350      	adds	r3, #80	; 0x50
 8003732:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800373c:	79fa      	ldrb	r2, [r7, #7]
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	4613      	mov	r3, r2
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f805 	bl	8003758 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800374e:	69bb      	ldr	r3, [r7, #24]
	}
 8003750:	4618      	mov	r0, r3
 8003752:	3720      	adds	r7, #32
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d103      	bne.n	8003774 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e002      	b.n	800377a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003786:	2101      	movs	r1, #1
 8003788:	69b8      	ldr	r0, [r7, #24]
 800378a:	f7ff fecb 	bl	8003524 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80037be:	2300      	movs	r3, #0
 80037c0:	2200      	movs	r2, #0
 80037c2:	2100      	movs	r1, #0
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f81d 	bl	8003804 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b086      	sub	sp, #24
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4603      	mov	r3, r0
 80037da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80037dc:	2301      	movs	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	461a      	mov	r2, r3
 80037e8:	6939      	ldr	r1, [r7, #16]
 80037ea:	6978      	ldr	r0, [r7, #20]
 80037ec:	f7ff ff7a 	bl	80036e4 <xQueueGenericCreate>
 80037f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7ff ffd3 	bl	800379e <prvInitialiseMutex>

		return xNewQueue;
 80037f8:	68fb      	ldr	r3, [r7, #12]
	}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08e      	sub	sp, #56	; 0x38
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003812:	2300      	movs	r3, #0
 8003814:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10a      	bne.n	8003836 <xQueueGenericSend+0x32>
	__asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d103      	bne.n	8003844 <xQueueGenericSend+0x40>
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <xQueueGenericSend+0x44>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <xQueueGenericSend+0x46>
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <xQueueGenericSend+0x60>
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003860:	bf00      	nop
 8003862:	e7fe      	b.n	8003862 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d103      	bne.n	8003872 <xQueueGenericSend+0x6e>
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <xQueueGenericSend+0x72>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <xQueueGenericSend+0x74>
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <xQueueGenericSend+0x8e>
	__asm volatile
 800387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	623b      	str	r3, [r7, #32]
}
 800388e:	bf00      	nop
 8003890:	e7fe      	b.n	8003890 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003892:	f001 fb0b 	bl	8004eac <xTaskGetSchedulerState>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <xQueueGenericSend+0x9e>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <xQueueGenericSend+0xa2>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <xQueueGenericSend+0xa4>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	61fb      	str	r3, [r7, #28]
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038c2:	f002 f94f 	bl	8005b64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <xQueueGenericSend+0xd4>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d129      	bne.n	800392c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038de:	f000 fb2f 	bl	8003f40 <prvCopyDataToQueue>
 80038e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d010      	beq.n	800390e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	3324      	adds	r3, #36	; 0x24
 80038f0:	4618      	mov	r0, r3
 80038f2:	f001 f919 	bl	8004b28 <xTaskRemoveFromEventList>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d013      	beq.n	8003924 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038fc:	4b3f      	ldr	r3, [pc, #252]	; (80039fc <xQueueGenericSend+0x1f8>)
 80038fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	e00a      	b.n	8003924 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003914:	4b39      	ldr	r3, [pc, #228]	; (80039fc <xQueueGenericSend+0x1f8>)
 8003916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003924:	f002 f94e 	bl	8005bc4 <vPortExitCritical>
				return pdPASS;
 8003928:	2301      	movs	r3, #1
 800392a:	e063      	b.n	80039f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d103      	bne.n	800393a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003932:	f002 f947 	bl	8005bc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003936:	2300      	movs	r3, #0
 8003938:	e05c      	b.n	80039f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800393a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393c:	2b00      	cmp	r3, #0
 800393e:	d106      	bne.n	800394e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	4618      	mov	r0, r3
 8003946:	f001 f953 	bl	8004bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800394a:	2301      	movs	r3, #1
 800394c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800394e:	f002 f939 	bl	8005bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003952:	f000 febf 	bl	80046d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003956:	f002 f905 	bl	8005b64 <vPortEnterCritical>
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003960:	b25b      	sxtb	r3, r3
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d103      	bne.n	8003970 <xQueueGenericSend+0x16c>
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003976:	b25b      	sxtb	r3, r3
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d103      	bne.n	8003986 <xQueueGenericSend+0x182>
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003986:	f002 f91d 	bl	8005bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800398a:	1d3a      	adds	r2, r7, #4
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f001 f942 	bl	8004c1c <xTaskCheckForTimeOut>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d124      	bne.n	80039e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800399e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039a0:	f000 fbc6 	bl	8004130 <prvIsQueueFull>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d018      	beq.n	80039dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	3310      	adds	r3, #16
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 f868 	bl	8004a88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ba:	f000 fb51 	bl	8004060 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039be:	f000 fe97 	bl	80046f0 <xTaskResumeAll>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f47f af7c 	bne.w	80038c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <xQueueGenericSend+0x1f8>)
 80039cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	e772      	b.n	80038c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039de:	f000 fb3f 	bl	8004060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039e2:	f000 fe85 	bl	80046f0 <xTaskResumeAll>
 80039e6:	e76c      	b.n	80038c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ea:	f000 fb39 	bl	8004060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039ee:	f000 fe7f 	bl	80046f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3738      	adds	r7, #56	; 0x38
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	e000ed04 	.word	0xe000ed04

08003a00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b090      	sub	sp, #64	; 0x40
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d103      	bne.n	8003a3c <xQueueGenericSendFromISR+0x3c>
 8003a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <xQueueGenericSendFromISR+0x40>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <xQueueGenericSendFromISR+0x42>
 8003a40:	2300      	movs	r3, #0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a58:	bf00      	nop
 8003a5a:	e7fe      	b.n	8003a5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d103      	bne.n	8003a6a <xQueueGenericSendFromISR+0x6a>
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <xQueueGenericSendFromISR+0x6e>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <xQueueGenericSendFromISR+0x70>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10a      	bne.n	8003a8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	623b      	str	r3, [r7, #32]
}
 8003a86:	bf00      	nop
 8003a88:	e7fe      	b.n	8003a88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a8a:	f002 f94d 	bl	8005d28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a8e:	f3ef 8211 	mrs	r2, BASEPRI
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	61fa      	str	r2, [r7, #28]
 8003aa4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003aa8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <xQueueGenericSendFromISR+0xbc>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d12f      	bne.n	8003b1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ad2:	f000 fa35 	bl	8003f40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ad6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d112      	bne.n	8003b06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d016      	beq.n	8003b16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aea:	3324      	adds	r3, #36	; 0x24
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 f81b 	bl	8004b28 <xTaskRemoveFromEventList>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00e      	beq.n	8003b16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	e007      	b.n	8003b16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	b25a      	sxtb	r2, r3
 8003b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b16:	2301      	movs	r3, #1
 8003b18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003b1a:	e001      	b.n	8003b20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3740      	adds	r7, #64	; 0x40
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08c      	sub	sp, #48	; 0x30
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <xQueueReceive+0x30>
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	623b      	str	r3, [r7, #32]
}
 8003b64:	bf00      	nop
 8003b66:	e7fe      	b.n	8003b66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <xQueueReceive+0x3e>
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <xQueueReceive+0x42>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <xQueueReceive+0x44>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <xQueueReceive+0x5e>
	__asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	61fb      	str	r3, [r7, #28]
}
 8003b92:	bf00      	nop
 8003b94:	e7fe      	b.n	8003b94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b96:	f001 f989 	bl	8004eac <xTaskGetSchedulerState>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <xQueueReceive+0x6e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <xQueueReceive+0x72>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <xQueueReceive+0x74>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <xQueueReceive+0x8e>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	61bb      	str	r3, [r7, #24]
}
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bc6:	f001 ffcd 	bl	8005b64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d01f      	beq.n	8003c16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bda:	f000 fa1b 	bl	8004014 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	1e5a      	subs	r2, r3, #1
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00f      	beq.n	8003c0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	3310      	adds	r3, #16
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 ff98 	bl	8004b28 <xTaskRemoveFromEventList>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bfe:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <xQueueReceive+0x1bc>)
 8003c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c0e:	f001 ffd9 	bl	8005bc4 <vPortExitCritical>
				return pdPASS;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e069      	b.n	8003cea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d103      	bne.n	8003c24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c1c:	f001 ffd2 	bl	8005bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e062      	b.n	8003cea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c2a:	f107 0310 	add.w	r3, r7, #16
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 ffde 	bl	8004bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c34:	2301      	movs	r3, #1
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c38:	f001 ffc4 	bl	8005bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c3c:	f000 fd4a 	bl	80046d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c40:	f001 ff90 	bl	8005b64 <vPortEnterCritical>
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c4a:	b25b      	sxtb	r3, r3
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d103      	bne.n	8003c5a <xQueueReceive+0x122>
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c60:	b25b      	sxtb	r3, r3
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d103      	bne.n	8003c70 <xQueueReceive+0x138>
 8003c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c70:	f001 ffa8 	bl	8005bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c74:	1d3a      	adds	r2, r7, #4
 8003c76:	f107 0310 	add.w	r3, r7, #16
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 ffcd 	bl	8004c1c <xTaskCheckForTimeOut>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d123      	bne.n	8003cd0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c8a:	f000 fa3b 	bl	8004104 <prvIsQueueEmpty>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d017      	beq.n	8003cc4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	3324      	adds	r3, #36	; 0x24
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fef3 	bl	8004a88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ca4:	f000 f9dc 	bl	8004060 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ca8:	f000 fd22 	bl	80046f0 <xTaskResumeAll>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d189      	bne.n	8003bc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <xQueueReceive+0x1bc>)
 8003cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	e780      	b.n	8003bc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cc6:	f000 f9cb 	bl	8004060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cca:	f000 fd11 	bl	80046f0 <xTaskResumeAll>
 8003cce:	e77a      	b.n	8003bc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cd2:	f000 f9c5 	bl	8004060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cd6:	f000 fd0b 	bl	80046f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cdc:	f000 fa12 	bl	8004104 <prvIsQueueEmpty>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f43f af6f 	beq.w	8003bc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ce8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3730      	adds	r7, #48	; 0x30
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	e000ed04 	.word	0xe000ed04

08003cf8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08e      	sub	sp, #56	; 0x38
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	623b      	str	r3, [r7, #32]
}
 8003d26:	bf00      	nop
 8003d28:	e7fe      	b.n	8003d28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	61fb      	str	r3, [r7, #28]
}
 8003d44:	bf00      	nop
 8003d46:	e7fe      	b.n	8003d46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d48:	f001 f8b0 	bl	8004eac <xTaskGetSchedulerState>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <xQueueSemaphoreTake+0x60>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <xQueueSemaphoreTake+0x64>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <xQueueSemaphoreTake+0x66>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	61bb      	str	r3, [r7, #24]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d78:	f001 fef4 	bl	8005b64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d024      	beq.n	8003dd2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	1e5a      	subs	r2, r3, #1
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d104      	bne.n	8003da2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003d98:	f001 f9fe 	bl	8005198 <pvTaskIncrementMutexHeldCount>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00f      	beq.n	8003dca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dac:	3310      	adds	r3, #16
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 feba 	bl	8004b28 <xTaskRemoveFromEventList>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dba:	4b54      	ldr	r3, [pc, #336]	; (8003f0c <xQueueSemaphoreTake+0x214>)
 8003dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dca:	f001 fefb 	bl	8005bc4 <vPortExitCritical>
				return pdPASS;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e097      	b.n	8003f02 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d111      	bne.n	8003dfc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	617b      	str	r3, [r7, #20]
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003df4:	f001 fee6 	bl	8005bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e082      	b.n	8003f02 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e02:	f107 030c 	add.w	r3, r7, #12
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fef2 	bl	8004bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e10:	f001 fed8 	bl	8005bc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e14:	f000 fc5e 	bl	80046d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e18:	f001 fea4 	bl	8005b64 <vPortEnterCritical>
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e22:	b25b      	sxtb	r3, r3
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d103      	bne.n	8003e32 <xQueueSemaphoreTake+0x13a>
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e38:	b25b      	sxtb	r3, r3
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d103      	bne.n	8003e48 <xQueueSemaphoreTake+0x150>
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e48:	f001 febc 	bl	8005bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e4c:	463a      	mov	r2, r7
 8003e4e:	f107 030c 	add.w	r3, r7, #12
 8003e52:	4611      	mov	r1, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fee1 	bl	8004c1c <xTaskCheckForTimeOut>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d132      	bne.n	8003ec6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e62:	f000 f94f 	bl	8004104 <prvIsQueueEmpty>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d026      	beq.n	8003eba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003e74:	f001 fe76 	bl	8005b64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f001 f833 	bl	8004ee8 <xTaskPriorityInherit>
 8003e82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003e84:	f001 fe9e 	bl	8005bc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	3324      	adds	r3, #36	; 0x24
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	4611      	mov	r1, r2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fdf9 	bl	8004a88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e98:	f000 f8e2 	bl	8004060 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e9c:	f000 fc28 	bl	80046f0 <xTaskResumeAll>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f47f af68 	bne.w	8003d78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003ea8:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <xQueueSemaphoreTake+0x214>)
 8003eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	e75e      	b.n	8003d78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003eba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ebc:	f000 f8d0 	bl	8004060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ec0:	f000 fc16 	bl	80046f0 <xTaskResumeAll>
 8003ec4:	e758      	b.n	8003d78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003ec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ec8:	f000 f8ca 	bl	8004060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ecc:	f000 fc10 	bl	80046f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ed2:	f000 f917 	bl	8004104 <prvIsQueueEmpty>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f43f af4d 	beq.w	8003d78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00d      	beq.n	8003f00 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003ee4:	f001 fe3e 	bl	8005b64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eea:	f000 f811 	bl	8003f10 <prvGetDisinheritPriorityAfterTimeout>
 8003eee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f8cc 	bl	8005094 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003efc:	f001 fe62 	bl	8005bc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3738      	adds	r7, #56	; 0x38
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	e000ed04 	.word	0xe000ed04

08003f10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d006      	beq.n	8003f2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e001      	b.n	8003f32 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f32:	68fb      	ldr	r3, [r7, #12]
	}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10d      	bne.n	8003f7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d14d      	bne.n	8004002 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 f824 	bl	8004fb8 <xTaskPriorityDisinherit>
 8003f70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	e043      	b.n	8004002 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d119      	bne.n	8003fb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6858      	ldr	r0, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	461a      	mov	r2, r3
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	f002 fa19 	bl	80063c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	441a      	add	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d32b      	bcc.n	8004002 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	e026      	b.n	8004002 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68d8      	ldr	r0, [r3, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	f002 f9ff 	bl	80063c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	425b      	negs	r3, r3
 8003fce:	441a      	add	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d207      	bcs.n	8003ff0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	425b      	negs	r3, r3
 8003fea:	441a      	add	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d105      	bne.n	8004002 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800400a:	697b      	ldr	r3, [r7, #20]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d018      	beq.n	8004058 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	441a      	add	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	429a      	cmp	r2, r3
 800403e:	d303      	bcc.n	8004048 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68d9      	ldr	r1, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	461a      	mov	r2, r3
 8004052:	6838      	ldr	r0, [r7, #0]
 8004054:	f002 f9b5 	bl	80063c2 <memcpy>
	}
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004068:	f001 fd7c 	bl	8005b64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004072:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004074:	e011      	b.n	800409a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2b00      	cmp	r3, #0
 800407c:	d012      	beq.n	80040a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3324      	adds	r3, #36	; 0x24
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fd50 	bl	8004b28 <xTaskRemoveFromEventList>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800408e:	f000 fe27 	bl	8004ce0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	3b01      	subs	r3, #1
 8004096:	b2db      	uxtb	r3, r3
 8004098:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800409a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	dce9      	bgt.n	8004076 <prvUnlockQueue+0x16>
 80040a2:	e000      	b.n	80040a6 <prvUnlockQueue+0x46>
					break;
 80040a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	22ff      	movs	r2, #255	; 0xff
 80040aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040ae:	f001 fd89 	bl	8005bc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040b2:	f001 fd57 	bl	8005b64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040be:	e011      	b.n	80040e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d012      	beq.n	80040ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3310      	adds	r3, #16
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fd2b 	bl	8004b28 <xTaskRemoveFromEventList>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040d8:	f000 fe02 	bl	8004ce0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040dc:	7bbb      	ldrb	r3, [r7, #14]
 80040de:	3b01      	subs	r3, #1
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	dce9      	bgt.n	80040c0 <prvUnlockQueue+0x60>
 80040ec:	e000      	b.n	80040f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	22ff      	movs	r2, #255	; 0xff
 80040f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040f8:	f001 fd64 	bl	8005bc4 <vPortExitCritical>
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800410c:	f001 fd2a 	bl	8005b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004118:	2301      	movs	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e001      	b.n	8004122 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004122:	f001 fd4f 	bl	8005bc4 <vPortExitCritical>

	return xReturn;
 8004126:	68fb      	ldr	r3, [r7, #12]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004138:	f001 fd14 	bl	8005b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004144:	429a      	cmp	r2, r3
 8004146:	d102      	bne.n	800414e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004148:	2301      	movs	r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e001      	b.n	8004152 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004152:	f001 fd37 	bl	8005bc4 <vPortExitCritical>

	return xReturn;
 8004156:	68fb      	ldr	r3, [r7, #12]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	e014      	b.n	800419a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004170:	4a0f      	ldr	r2, [pc, #60]	; (80041b0 <vQueueAddToRegistry+0x50>)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10b      	bne.n	8004194 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800417c:	490c      	ldr	r1, [pc, #48]	; (80041b0 <vQueueAddToRegistry+0x50>)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004186:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <vQueueAddToRegistry+0x50>)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004192:	e006      	b.n	80041a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3301      	adds	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b07      	cmp	r3, #7
 800419e:	d9e7      	bls.n	8004170 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	200008a0 	.word	0x200008a0

080041b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041c4:	f001 fcce 	bl	8005b64 <vPortEnterCritical>
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ce:	b25b      	sxtb	r3, r3
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d4:	d103      	bne.n	80041de <vQueueWaitForMessageRestricted+0x2a>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041e4:	b25b      	sxtb	r3, r3
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d103      	bne.n	80041f4 <vQueueWaitForMessageRestricted+0x40>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041f4:	f001 fce6 	bl	8005bc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d106      	bne.n	800420e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3324      	adds	r3, #36	; 0x24
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fc61 	bl	8004ad0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800420e:	6978      	ldr	r0, [r7, #20]
 8004210:	f7ff ff26 	bl	8004060 <prvUnlockQueue>
	}
 8004214:	bf00      	nop
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08e      	sub	sp, #56	; 0x38
 8004220:	af04      	add	r7, sp, #16
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800422a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	623b      	str	r3, [r7, #32]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <xTaskCreateStatic+0x46>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	61fb      	str	r3, [r7, #28]
}
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004262:	23bc      	movs	r3, #188	; 0xbc
 8004264:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2bbc      	cmp	r3, #188	; 0xbc
 800426a:	d00a      	beq.n	8004282 <xTaskCreateStatic+0x66>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	61bb      	str	r3, [r7, #24]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004282:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	2b00      	cmp	r3, #0
 8004288:	d01e      	beq.n	80042c8 <xTaskCreateStatic+0xac>
 800428a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01b      	beq.n	80042c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004298:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	2202      	movs	r2, #2
 800429e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042a2:	2300      	movs	r3, #0
 80042a4:	9303      	str	r3, [sp, #12]
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	9302      	str	r3, [sp, #8]
 80042aa:	f107 0314 	add.w	r3, r7, #20
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f850 	bl	8004360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042c2:	f000 f8f3 	bl	80044ac <prvAddNewTaskToReadyList>
 80042c6:	e001      	b.n	80042cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042cc:	697b      	ldr	r3, [r7, #20]
	}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3728      	adds	r7, #40	; 0x28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b08c      	sub	sp, #48	; 0x30
 80042da:	af04      	add	r7, sp, #16
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f001 fd5c 	bl	8005da8 <pvPortMalloc>
 80042f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00e      	beq.n	8004316 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042f8:	20bc      	movs	r0, #188	; 0xbc
 80042fa:	f001 fd55 	bl	8005da8 <pvPortMalloc>
 80042fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
 800430c:	e005      	b.n	800431a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800430e:	6978      	ldr	r0, [r7, #20]
 8004310:	f001 fe16 	bl	8005f40 <vPortFree>
 8004314:	e001      	b.n	800431a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d017      	beq.n	8004350 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004328:	88fa      	ldrh	r2, [r7, #6]
 800432a:	2300      	movs	r3, #0
 800432c:	9303      	str	r3, [sp, #12]
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	9302      	str	r3, [sp, #8]
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	9301      	str	r3, [sp, #4]
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f80e 	bl	8004360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004344:	69f8      	ldr	r0, [r7, #28]
 8004346:	f000 f8b1 	bl	80044ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800434a:	2301      	movs	r3, #1
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	e002      	b.n	8004356 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004350:	f04f 33ff 	mov.w	r3, #4294967295
 8004354:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004356:	69bb      	ldr	r3, [r7, #24]
	}
 8004358:	4618      	mov	r0, r3
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	461a      	mov	r2, r3
 8004378:	21a5      	movs	r1, #165	; 0xa5
 800437a:	f002 f830 	bl	80063de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004388:	3b01      	subs	r3, #1
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	f023 0307 	bic.w	r3, r3, #7
 8004396:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	617b      	str	r3, [r7, #20]
}
 80043b4:	bf00      	nop
 80043b6:	e7fe      	b.n	80043b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01f      	beq.n	80043fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	e012      	b.n	80043ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	7819      	ldrb	r1, [r3, #0]
 80043cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	4413      	add	r3, r2
 80043d2:	3334      	adds	r3, #52	; 0x34
 80043d4:	460a      	mov	r2, r1
 80043d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4413      	add	r3, r2
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d006      	beq.n	80043f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	3301      	adds	r3, #1
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	2b0f      	cmp	r3, #15
 80043ee:	d9e9      	bls.n	80043c4 <prvInitialiseNewTask+0x64>
 80043f0:	e000      	b.n	80043f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80043f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043fc:	e003      	b.n	8004406 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	2b37      	cmp	r3, #55	; 0x37
 800440a:	d901      	bls.n	8004410 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800440c:	2337      	movs	r3, #55	; 0x37
 800440e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004414:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800441a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	2200      	movs	r2, #0
 8004420:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	3304      	adds	r3, #4
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe ffe8 	bl	80033fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	3318      	adds	r3, #24
 8004430:	4618      	mov	r0, r3
 8004432:	f7fe ffe3 	bl	80033fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	2200      	movs	r2, #0
 8004450:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	2200      	movs	r2, #0
 8004458:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	3354      	adds	r3, #84	; 0x54
 8004460:	2260      	movs	r2, #96	; 0x60
 8004462:	2100      	movs	r1, #0
 8004464:	4618      	mov	r0, r3
 8004466:	f001 ffba 	bl	80063de <memset>
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	4a0c      	ldr	r2, [pc, #48]	; (80044a0 <prvInitialiseNewTask+0x140>)
 800446e:	659a      	str	r2, [r3, #88]	; 0x58
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	4a0c      	ldr	r2, [pc, #48]	; (80044a4 <prvInitialiseNewTask+0x144>)
 8004474:	65da      	str	r2, [r3, #92]	; 0x5c
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	4a0b      	ldr	r2, [pc, #44]	; (80044a8 <prvInitialiseNewTask+0x148>)
 800447a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	68f9      	ldr	r1, [r7, #12]
 8004480:	69b8      	ldr	r0, [r7, #24]
 8004482:	f001 fa3f 	bl	8005904 <pxPortInitialiseStack>
 8004486:	4602      	mov	r2, r0
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004496:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004498:	bf00      	nop
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	08007400 	.word	0x08007400
 80044a4:	08007420 	.word	0x08007420
 80044a8:	080073e0 	.word	0x080073e0

080044ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044b4:	f001 fb56 	bl	8005b64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044b8:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <prvAddNewTaskToReadyList+0xc4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3301      	adds	r3, #1
 80044be:	4a2c      	ldr	r2, [pc, #176]	; (8004570 <prvAddNewTaskToReadyList+0xc4>)
 80044c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044c2:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <prvAddNewTaskToReadyList+0xc8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044ca:	4a2a      	ldr	r2, [pc, #168]	; (8004574 <prvAddNewTaskToReadyList+0xc8>)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044d0:	4b27      	ldr	r3, [pc, #156]	; (8004570 <prvAddNewTaskToReadyList+0xc4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d110      	bne.n	80044fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044d8:	f000 fc26 	bl	8004d28 <prvInitialiseTaskLists>
 80044dc:	e00d      	b.n	80044fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044de:	4b26      	ldr	r3, [pc, #152]	; (8004578 <prvAddNewTaskToReadyList+0xcc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044e6:	4b23      	ldr	r3, [pc, #140]	; (8004574 <prvAddNewTaskToReadyList+0xc8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d802      	bhi.n	80044fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044f4:	4a1f      	ldr	r2, [pc, #124]	; (8004574 <prvAddNewTaskToReadyList+0xc8>)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044fa:	4b20      	ldr	r3, [pc, #128]	; (800457c <prvAddNewTaskToReadyList+0xd0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3301      	adds	r3, #1
 8004500:	4a1e      	ldr	r2, [pc, #120]	; (800457c <prvAddNewTaskToReadyList+0xd0>)
 8004502:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004504:	4b1d      	ldr	r3, [pc, #116]	; (800457c <prvAddNewTaskToReadyList+0xd0>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004510:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <prvAddNewTaskToReadyList+0xd4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d903      	bls.n	8004520 <prvAddNewTaskToReadyList+0x74>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	4a18      	ldr	r2, [pc, #96]	; (8004580 <prvAddNewTaskToReadyList+0xd4>)
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4a15      	ldr	r2, [pc, #84]	; (8004584 <prvAddNewTaskToReadyList+0xd8>)
 800452e:	441a      	add	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f7fe ff6d 	bl	8003416 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800453c:	f001 fb42 	bl	8005bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <prvAddNewTaskToReadyList+0xcc>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00e      	beq.n	8004566 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <prvAddNewTaskToReadyList+0xc8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	429a      	cmp	r2, r3
 8004554:	d207      	bcs.n	8004566 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004556:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <prvAddNewTaskToReadyList+0xdc>)
 8004558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000db4 	.word	0x20000db4
 8004574:	200008e0 	.word	0x200008e0
 8004578:	20000dc0 	.word	0x20000dc0
 800457c:	20000dd0 	.word	0x20000dd0
 8004580:	20000dbc 	.word	0x20000dbc
 8004584:	200008e4 	.word	0x200008e4
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d017      	beq.n	80045ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <vTaskDelay+0x60>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <vTaskDelay+0x30>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	60bb      	str	r3, [r7, #8]
}
 80045b8:	bf00      	nop
 80045ba:	e7fe      	b.n	80045ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045bc:	f000 f88a 	bl	80046d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045c0:	2100      	movs	r1, #0
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fdfc 	bl	80051c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045c8:	f000 f892 	bl	80046f0 <xTaskResumeAll>
 80045cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d107      	bne.n	80045e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <vTaskDelay+0x64>)
 80045d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20000ddc 	.word	0x20000ddc
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004602:	463a      	mov	r2, r7
 8004604:	1d39      	adds	r1, r7, #4
 8004606:	f107 0308 	add.w	r3, r7, #8
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe fea2 	bl	8003354 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004610:	6839      	ldr	r1, [r7, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	9202      	str	r2, [sp, #8]
 8004618:	9301      	str	r3, [sp, #4]
 800461a:	2300      	movs	r3, #0
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	2300      	movs	r3, #0
 8004620:	460a      	mov	r2, r1
 8004622:	4924      	ldr	r1, [pc, #144]	; (80046b4 <vTaskStartScheduler+0xc0>)
 8004624:	4824      	ldr	r0, [pc, #144]	; (80046b8 <vTaskStartScheduler+0xc4>)
 8004626:	f7ff fdf9 	bl	800421c <xTaskCreateStatic>
 800462a:	4603      	mov	r3, r0
 800462c:	4a23      	ldr	r2, [pc, #140]	; (80046bc <vTaskStartScheduler+0xc8>)
 800462e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004630:	4b22      	ldr	r3, [pc, #136]	; (80046bc <vTaskStartScheduler+0xc8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004638:	2301      	movs	r3, #1
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	e001      	b.n	8004642 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d102      	bne.n	800464e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004648:	f000 fe0e 	bl	8005268 <xTimerCreateTimerTask>
 800464c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d11b      	bne.n	800468c <vTaskStartScheduler+0x98>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	613b      	str	r3, [r7, #16]
}
 8004666:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004668:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <vTaskStartScheduler+0xcc>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3354      	adds	r3, #84	; 0x54
 800466e:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <vTaskStartScheduler+0xd0>)
 8004670:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004672:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <vTaskStartScheduler+0xd4>)
 8004674:	f04f 32ff 	mov.w	r2, #4294967295
 8004678:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800467a:	4b14      	ldr	r3, [pc, #80]	; (80046cc <vTaskStartScheduler+0xd8>)
 800467c:	2201      	movs	r2, #1
 800467e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004680:	4b13      	ldr	r3, [pc, #76]	; (80046d0 <vTaskStartScheduler+0xdc>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004686:	f001 f9cb 	bl	8005a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800468a:	e00e      	b.n	80046aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d10a      	bne.n	80046aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	60fb      	str	r3, [r7, #12]
}
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <vTaskStartScheduler+0xb4>
}
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	080073b0 	.word	0x080073b0
 80046b8:	08004cf9 	.word	0x08004cf9
 80046bc:	20000dd8 	.word	0x20000dd8
 80046c0:	200008e0 	.word	0x200008e0
 80046c4:	20000010 	.word	0x20000010
 80046c8:	20000dd4 	.word	0x20000dd4
 80046cc:	20000dc0 	.word	0x20000dc0
 80046d0:	20000db8 	.word	0x20000db8

080046d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046d8:	4b04      	ldr	r3, [pc, #16]	; (80046ec <vTaskSuspendAll+0x18>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3301      	adds	r3, #1
 80046de:	4a03      	ldr	r2, [pc, #12]	; (80046ec <vTaskSuspendAll+0x18>)
 80046e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046e2:	bf00      	nop
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20000ddc 	.word	0x20000ddc

080046f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046fe:	4b42      	ldr	r3, [pc, #264]	; (8004808 <xTaskResumeAll+0x118>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <xTaskResumeAll+0x2c>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	603b      	str	r3, [r7, #0]
}
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800471c:	f001 fa22 	bl	8005b64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004720:	4b39      	ldr	r3, [pc, #228]	; (8004808 <xTaskResumeAll+0x118>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3b01      	subs	r3, #1
 8004726:	4a38      	ldr	r2, [pc, #224]	; (8004808 <xTaskResumeAll+0x118>)
 8004728:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800472a:	4b37      	ldr	r3, [pc, #220]	; (8004808 <xTaskResumeAll+0x118>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d162      	bne.n	80047f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004732:	4b36      	ldr	r3, [pc, #216]	; (800480c <xTaskResumeAll+0x11c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d05e      	beq.n	80047f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800473a:	e02f      	b.n	800479c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473c:	4b34      	ldr	r3, [pc, #208]	; (8004810 <xTaskResumeAll+0x120>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3318      	adds	r3, #24
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe fec1 	bl	80034d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3304      	adds	r3, #4
 8004752:	4618      	mov	r0, r3
 8004754:	f7fe febc 	bl	80034d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475c:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <xTaskResumeAll+0x124>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d903      	bls.n	800476c <xTaskResumeAll+0x7c>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <xTaskResumeAll+0x124>)
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4a27      	ldr	r2, [pc, #156]	; (8004818 <xTaskResumeAll+0x128>)
 800477a:	441a      	add	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3304      	adds	r3, #4
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f7fe fe47 	bl	8003416 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478c:	4b23      	ldr	r3, [pc, #140]	; (800481c <xTaskResumeAll+0x12c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	429a      	cmp	r2, r3
 8004794:	d302      	bcc.n	800479c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004796:	4b22      	ldr	r3, [pc, #136]	; (8004820 <xTaskResumeAll+0x130>)
 8004798:	2201      	movs	r2, #1
 800479a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800479c:	4b1c      	ldr	r3, [pc, #112]	; (8004810 <xTaskResumeAll+0x120>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1cb      	bne.n	800473c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047aa:	f000 fb5f 	bl	8004e6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <xTaskResumeAll+0x134>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d010      	beq.n	80047dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047ba:	f000 f847 	bl	800484c <xTaskIncrementTick>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80047c4:	4b16      	ldr	r3, [pc, #88]	; (8004820 <xTaskResumeAll+0x130>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f1      	bne.n	80047ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80047d6:	4b13      	ldr	r3, [pc, #76]	; (8004824 <xTaskResumeAll+0x134>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047dc:	4b10      	ldr	r3, [pc, #64]	; (8004820 <xTaskResumeAll+0x130>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d009      	beq.n	80047f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047e4:	2301      	movs	r3, #1
 80047e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <xTaskResumeAll+0x138>)
 80047ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047f8:	f001 f9e4 	bl	8005bc4 <vPortExitCritical>

	return xAlreadyYielded;
 80047fc:	68bb      	ldr	r3, [r7, #8]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000ddc 	.word	0x20000ddc
 800480c:	20000db4 	.word	0x20000db4
 8004810:	20000d74 	.word	0x20000d74
 8004814:	20000dbc 	.word	0x20000dbc
 8004818:	200008e4 	.word	0x200008e4
 800481c:	200008e0 	.word	0x200008e0
 8004820:	20000dc8 	.word	0x20000dc8
 8004824:	20000dc4 	.word	0x20000dc4
 8004828:	e000ed04 	.word	0xe000ed04

0800482c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004832:	4b05      	ldr	r3, [pc, #20]	; (8004848 <xTaskGetTickCount+0x1c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004838:	687b      	ldr	r3, [r7, #4]
}
 800483a:	4618      	mov	r0, r3
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000db8 	.word	0x20000db8

0800484c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004856:	4b4f      	ldr	r3, [pc, #316]	; (8004994 <xTaskIncrementTick+0x148>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 808f 	bne.w	800497e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004860:	4b4d      	ldr	r3, [pc, #308]	; (8004998 <xTaskIncrementTick+0x14c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3301      	adds	r3, #1
 8004866:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004868:	4a4b      	ldr	r2, [pc, #300]	; (8004998 <xTaskIncrementTick+0x14c>)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d120      	bne.n	80048b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004874:	4b49      	ldr	r3, [pc, #292]	; (800499c <xTaskIncrementTick+0x150>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <xTaskIncrementTick+0x48>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	603b      	str	r3, [r7, #0]
}
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <xTaskIncrementTick+0x46>
 8004894:	4b41      	ldr	r3, [pc, #260]	; (800499c <xTaskIncrementTick+0x150>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <xTaskIncrementTick+0x154>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a3f      	ldr	r2, [pc, #252]	; (800499c <xTaskIncrementTick+0x150>)
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	4a3f      	ldr	r2, [pc, #252]	; (80049a0 <xTaskIncrementTick+0x154>)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	4b3e      	ldr	r3, [pc, #248]	; (80049a4 <xTaskIncrementTick+0x158>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3301      	adds	r3, #1
 80048ae:	4a3d      	ldr	r2, [pc, #244]	; (80049a4 <xTaskIncrementTick+0x158>)
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	f000 fadb 	bl	8004e6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048b6:	4b3c      	ldr	r3, [pc, #240]	; (80049a8 <xTaskIncrementTick+0x15c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d349      	bcc.n	8004954 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048c0:	4b36      	ldr	r3, [pc, #216]	; (800499c <xTaskIncrementTick+0x150>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d104      	bne.n	80048d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ca:	4b37      	ldr	r3, [pc, #220]	; (80049a8 <xTaskIncrementTick+0x15c>)
 80048cc:	f04f 32ff 	mov.w	r2, #4294967295
 80048d0:	601a      	str	r2, [r3, #0]
					break;
 80048d2:	e03f      	b.n	8004954 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048d4:	4b31      	ldr	r3, [pc, #196]	; (800499c <xTaskIncrementTick+0x150>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d203      	bcs.n	80048f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048ec:	4a2e      	ldr	r2, [pc, #184]	; (80049a8 <xTaskIncrementTick+0x15c>)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048f2:	e02f      	b.n	8004954 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fe fde9 	bl	80034d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	2b00      	cmp	r3, #0
 8004904:	d004      	beq.n	8004910 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	3318      	adds	r3, #24
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe fde0 	bl	80034d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004914:	4b25      	ldr	r3, [pc, #148]	; (80049ac <xTaskIncrementTick+0x160>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d903      	bls.n	8004924 <xTaskIncrementTick+0xd8>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	4a22      	ldr	r2, [pc, #136]	; (80049ac <xTaskIncrementTick+0x160>)
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <xTaskIncrementTick+0x164>)
 8004932:	441a      	add	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f7fe fd6b 	bl	8003416 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004944:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <xTaskIncrementTick+0x168>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	429a      	cmp	r2, r3
 800494c:	d3b8      	bcc.n	80048c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800494e:	2301      	movs	r3, #1
 8004950:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004952:	e7b5      	b.n	80048c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004954:	4b17      	ldr	r3, [pc, #92]	; (80049b4 <xTaskIncrementTick+0x168>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495a:	4915      	ldr	r1, [pc, #84]	; (80049b0 <xTaskIncrementTick+0x164>)
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d901      	bls.n	8004970 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800496c:	2301      	movs	r3, #1
 800496e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004970:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <xTaskIncrementTick+0x16c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d007      	beq.n	8004988 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004978:	2301      	movs	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e004      	b.n	8004988 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <xTaskIncrementTick+0x170>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	4a0d      	ldr	r2, [pc, #52]	; (80049bc <xTaskIncrementTick+0x170>)
 8004986:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004988:	697b      	ldr	r3, [r7, #20]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000ddc 	.word	0x20000ddc
 8004998:	20000db8 	.word	0x20000db8
 800499c:	20000d6c 	.word	0x20000d6c
 80049a0:	20000d70 	.word	0x20000d70
 80049a4:	20000dcc 	.word	0x20000dcc
 80049a8:	20000dd4 	.word	0x20000dd4
 80049ac:	20000dbc 	.word	0x20000dbc
 80049b0:	200008e4 	.word	0x200008e4
 80049b4:	200008e0 	.word	0x200008e0
 80049b8:	20000dc8 	.word	0x20000dc8
 80049bc:	20000dc4 	.word	0x20000dc4

080049c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049c6:	4b2a      	ldr	r3, [pc, #168]	; (8004a70 <vTaskSwitchContext+0xb0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049ce:	4b29      	ldr	r3, [pc, #164]	; (8004a74 <vTaskSwitchContext+0xb4>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049d4:	e046      	b.n	8004a64 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80049d6:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <vTaskSwitchContext+0xb4>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049dc:	4b26      	ldr	r3, [pc, #152]	; (8004a78 <vTaskSwitchContext+0xb8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	e010      	b.n	8004a06 <vTaskSwitchContext+0x46>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <vTaskSwitchContext+0x40>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	607b      	str	r3, [r7, #4]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <vTaskSwitchContext+0x3e>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	491d      	ldr	r1, [pc, #116]	; (8004a7c <vTaskSwitchContext+0xbc>)
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0e4      	beq.n	80049e4 <vTaskSwitchContext+0x24>
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <vTaskSwitchContext+0xbc>)
 8004a26:	4413      	add	r3, r2
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	605a      	str	r2, [r3, #4]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d104      	bne.n	8004a4a <vTaskSwitchContext+0x8a>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4a0b      	ldr	r2, [pc, #44]	; (8004a80 <vTaskSwitchContext+0xc0>)
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	4a08      	ldr	r2, [pc, #32]	; (8004a78 <vTaskSwitchContext+0xb8>)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a5a:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <vTaskSwitchContext+0xc0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3354      	adds	r3, #84	; 0x54
 8004a60:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <vTaskSwitchContext+0xc4>)
 8004a62:	6013      	str	r3, [r2, #0]
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	20000ddc 	.word	0x20000ddc
 8004a74:	20000dc8 	.word	0x20000dc8
 8004a78:	20000dbc 	.word	0x20000dbc
 8004a7c:	200008e4 	.word	0x200008e4
 8004a80:	200008e0 	.word	0x200008e0
 8004a84:	20000010 	.word	0x20000010

08004a88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	60fb      	str	r3, [r7, #12]
}
 8004aaa:	bf00      	nop
 8004aac:	e7fe      	b.n	8004aac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <vTaskPlaceOnEventList+0x44>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3318      	adds	r3, #24
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fe fcd1 	bl	800345e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004abc:	2101      	movs	r1, #1
 8004abe:	6838      	ldr	r0, [r7, #0]
 8004ac0:	f000 fb7e 	bl	80051c0 <prvAddCurrentTaskToDelayedList>
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	200008e0 	.word	0x200008e0

08004ad0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10a      	bne.n	8004af8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	617b      	str	r3, [r7, #20]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004af8:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <vTaskPlaceOnEventListRestricted+0x54>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3318      	adds	r3, #24
 8004afe:	4619      	mov	r1, r3
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7fe fc88 	bl	8003416 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	68b8      	ldr	r0, [r7, #8]
 8004b16:	f000 fb53 	bl	80051c0 <prvAddCurrentTaskToDelayedList>
	}
 8004b1a:	bf00      	nop
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	200008e0 	.word	0x200008e0

08004b28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	60fb      	str	r3, [r7, #12]
}
 8004b50:	bf00      	nop
 8004b52:	e7fe      	b.n	8004b52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	3318      	adds	r3, #24
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fe fcb9 	bl	80034d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <xTaskRemoveFromEventList+0xb0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d11d      	bne.n	8004ba2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe fcb0 	bl	80034d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b74:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <xTaskRemoveFromEventList+0xb4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d903      	bls.n	8004b84 <xTaskRemoveFromEventList+0x5c>
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <xTaskRemoveFromEventList+0xb4>)
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <xTaskRemoveFromEventList+0xb8>)
 8004b92:	441a      	add	r2, r3
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f7fe fc3b 	bl	8003416 <vListInsertEnd>
 8004ba0:	e005      	b.n	8004bae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	3318      	adds	r3, #24
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	480e      	ldr	r0, [pc, #56]	; (8004be4 <xTaskRemoveFromEventList+0xbc>)
 8004baa:	f7fe fc34 	bl	8003416 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <xTaskRemoveFromEventList+0xc0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d905      	bls.n	8004bc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <xTaskRemoveFromEventList+0xc4>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	e001      	b.n	8004bcc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004bcc:	697b      	ldr	r3, [r7, #20]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000ddc 	.word	0x20000ddc
 8004bdc:	20000dbc 	.word	0x20000dbc
 8004be0:	200008e4 	.word	0x200008e4
 8004be4:	20000d74 	.word	0x20000d74
 8004be8:	200008e0 	.word	0x200008e0
 8004bec:	20000dc8 	.word	0x20000dc8

08004bf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <vTaskInternalSetTimeOutState+0x24>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <vTaskInternalSetTimeOutState+0x28>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	605a      	str	r2, [r3, #4]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	20000dcc 	.word	0x20000dcc
 8004c18:	20000db8 	.word	0x20000db8

08004c1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	613b      	str	r3, [r7, #16]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60fb      	str	r3, [r7, #12]
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c5e:	f000 ff81 	bl	8005b64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c62:	4b1d      	ldr	r3, [pc, #116]	; (8004cd8 <xTaskCheckForTimeOut+0xbc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d102      	bne.n	8004c82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	e023      	b.n	8004cca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b15      	ldr	r3, [pc, #84]	; (8004cdc <xTaskCheckForTimeOut+0xc0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d007      	beq.n	8004c9e <xTaskCheckForTimeOut+0x82>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d302      	bcc.n	8004c9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	e015      	b.n	8004cca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d20b      	bcs.n	8004cc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	1ad2      	subs	r2, r2, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff ff9b 	bl	8004bf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	e004      	b.n	8004cca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cca:	f000 ff7b 	bl	8005bc4 <vPortExitCritical>

	return xReturn;
 8004cce:	69fb      	ldr	r3, [r7, #28]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3720      	adds	r7, #32
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000db8 	.word	0x20000db8
 8004cdc:	20000dcc 	.word	0x20000dcc

08004ce0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <vTaskMissedYield+0x14>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
}
 8004cea:	bf00      	nop
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	20000dc8 	.word	0x20000dc8

08004cf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d00:	f000 f852 	bl	8004da8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <prvIdleTask+0x28>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d9f9      	bls.n	8004d00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <prvIdleTask+0x2c>)
 8004d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d1c:	e7f0      	b.n	8004d00 <prvIdleTask+0x8>
 8004d1e:	bf00      	nop
 8004d20:	200008e4 	.word	0x200008e4
 8004d24:	e000ed04 	.word	0xe000ed04

08004d28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d2e:	2300      	movs	r3, #0
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	e00c      	b.n	8004d4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4a12      	ldr	r2, [pc, #72]	; (8004d88 <prvInitialiseTaskLists+0x60>)
 8004d40:	4413      	add	r3, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe fb3a 	bl	80033bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	607b      	str	r3, [r7, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b37      	cmp	r3, #55	; 0x37
 8004d52:	d9ef      	bls.n	8004d34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d54:	480d      	ldr	r0, [pc, #52]	; (8004d8c <prvInitialiseTaskLists+0x64>)
 8004d56:	f7fe fb31 	bl	80033bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d5a:	480d      	ldr	r0, [pc, #52]	; (8004d90 <prvInitialiseTaskLists+0x68>)
 8004d5c:	f7fe fb2e 	bl	80033bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d60:	480c      	ldr	r0, [pc, #48]	; (8004d94 <prvInitialiseTaskLists+0x6c>)
 8004d62:	f7fe fb2b 	bl	80033bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d66:	480c      	ldr	r0, [pc, #48]	; (8004d98 <prvInitialiseTaskLists+0x70>)
 8004d68:	f7fe fb28 	bl	80033bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d6c:	480b      	ldr	r0, [pc, #44]	; (8004d9c <prvInitialiseTaskLists+0x74>)
 8004d6e:	f7fe fb25 	bl	80033bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <prvInitialiseTaskLists+0x78>)
 8004d74:	4a05      	ldr	r2, [pc, #20]	; (8004d8c <prvInitialiseTaskLists+0x64>)
 8004d76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d78:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <prvInitialiseTaskLists+0x7c>)
 8004d7a:	4a05      	ldr	r2, [pc, #20]	; (8004d90 <prvInitialiseTaskLists+0x68>)
 8004d7c:	601a      	str	r2, [r3, #0]
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	200008e4 	.word	0x200008e4
 8004d8c:	20000d44 	.word	0x20000d44
 8004d90:	20000d58 	.word	0x20000d58
 8004d94:	20000d74 	.word	0x20000d74
 8004d98:	20000d88 	.word	0x20000d88
 8004d9c:	20000da0 	.word	0x20000da0
 8004da0:	20000d6c 	.word	0x20000d6c
 8004da4:	20000d70 	.word	0x20000d70

08004da8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dae:	e019      	b.n	8004de4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004db0:	f000 fed8 	bl	8005b64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004db4:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <prvCheckTasksWaitingTermination+0x50>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fe fb85 	bl	80034d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <prvCheckTasksWaitingTermination+0x54>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	4a0b      	ldr	r2, [pc, #44]	; (8004dfc <prvCheckTasksWaitingTermination+0x54>)
 8004dce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <prvCheckTasksWaitingTermination+0x58>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	4a0a      	ldr	r2, [pc, #40]	; (8004e00 <prvCheckTasksWaitingTermination+0x58>)
 8004dd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dda:	f000 fef3 	bl	8005bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f810 	bl	8004e04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004de4:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <prvCheckTasksWaitingTermination+0x58>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e1      	bne.n	8004db0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000d88 	.word	0x20000d88
 8004dfc:	20000db4 	.word	0x20000db4
 8004e00:	20000d9c 	.word	0x20000d9c

08004e04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3354      	adds	r3, #84	; 0x54
 8004e10:	4618      	mov	r0, r3
 8004e12:	f001 fbcd 	bl	80065b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d108      	bne.n	8004e32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 f88b 	bl	8005f40 <vPortFree>
				vPortFree( pxTCB );
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f001 f888 	bl	8005f40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e30:	e018      	b.n	8004e64 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d103      	bne.n	8004e44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f001 f87f 	bl	8005f40 <vPortFree>
	}
 8004e42:	e00f      	b.n	8004e64 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d00a      	beq.n	8004e64 <prvDeleteTCB+0x60>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	60fb      	str	r3, [r7, #12]
}
 8004e60:	bf00      	nop
 8004e62:	e7fe      	b.n	8004e62 <prvDeleteTCB+0x5e>
	}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e72:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <prvResetNextTaskUnblockTime+0x38>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d104      	bne.n	8004e86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <prvResetNextTaskUnblockTime+0x3c>)
 8004e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e84:	e008      	b.n	8004e98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e86:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <prvResetNextTaskUnblockTime+0x38>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4a04      	ldr	r2, [pc, #16]	; (8004ea8 <prvResetNextTaskUnblockTime+0x3c>)
 8004e96:	6013      	str	r3, [r2, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	20000d6c 	.word	0x20000d6c
 8004ea8:	20000dd4 	.word	0x20000dd4

08004eac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <xTaskGetSchedulerState+0x34>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	607b      	str	r3, [r7, #4]
 8004ebe:	e008      	b.n	8004ed2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ec0:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <xTaskGetSchedulerState+0x38>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ec8:	2302      	movs	r3, #2
 8004eca:	607b      	str	r3, [r7, #4]
 8004ecc:	e001      	b.n	8004ed2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ed2:	687b      	ldr	r3, [r7, #4]
	}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	20000dc0 	.word	0x20000dc0
 8004ee4:	20000ddc 	.word	0x20000ddc

08004ee8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d051      	beq.n	8004fa2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f02:	4b2a      	ldr	r3, [pc, #168]	; (8004fac <xTaskPriorityInherit+0xc4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d241      	bcs.n	8004f90 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db06      	blt.n	8004f22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <xTaskPriorityInherit+0xc4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6959      	ldr	r1, [r3, #20]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <xTaskPriorityInherit+0xc8>)
 8004f34:	4413      	add	r3, r2
 8004f36:	4299      	cmp	r1, r3
 8004f38:	d122      	bne.n	8004f80 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fe fac6 	bl	80034d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <xTaskPriorityInherit+0xc4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f52:	4b18      	ldr	r3, [pc, #96]	; (8004fb4 <xTaskPriorityInherit+0xcc>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d903      	bls.n	8004f62 <xTaskPriorityInherit+0x7a>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	4a15      	ldr	r2, [pc, #84]	; (8004fb4 <xTaskPriorityInherit+0xcc>)
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4a10      	ldr	r2, [pc, #64]	; (8004fb0 <xTaskPriorityInherit+0xc8>)
 8004f70:	441a      	add	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3304      	adds	r3, #4
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7fe fa4c 	bl	8003416 <vListInsertEnd>
 8004f7e:	e004      	b.n	8004f8a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f80:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <xTaskPriorityInherit+0xc4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	e008      	b.n	8004fa2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f94:	4b05      	ldr	r3, [pc, #20]	; (8004fac <xTaskPriorityInherit+0xc4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d201      	bcs.n	8004fa2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
	}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	200008e0 	.word	0x200008e0
 8004fb0:	200008e4 	.word	0x200008e4
 8004fb4:	20000dbc 	.word	0x20000dbc

08004fb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d056      	beq.n	800507c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fce:	4b2e      	ldr	r3, [pc, #184]	; (8005088 <xTaskPriorityDisinherit+0xd0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d00a      	beq.n	8004fee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	60fb      	str	r3, [r7, #12]
}
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	60bb      	str	r3, [r7, #8]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005010:	1e5a      	subs	r2, r3, #1
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501e:	429a      	cmp	r2, r3
 8005020:	d02c      	beq.n	800507c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005026:	2b00      	cmp	r3, #0
 8005028:	d128      	bne.n	800507c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	3304      	adds	r3, #4
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe fa4e 	bl	80034d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <xTaskPriorityDisinherit+0xd4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d903      	bls.n	800505c <xTaskPriorityDisinherit+0xa4>
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	4a0c      	ldr	r2, [pc, #48]	; (800508c <xTaskPriorityDisinherit+0xd4>)
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4a09      	ldr	r2, [pc, #36]	; (8005090 <xTaskPriorityDisinherit+0xd8>)
 800506a:	441a      	add	r2, r3
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	3304      	adds	r3, #4
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f7fe f9cf 	bl	8003416 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005078:	2301      	movs	r3, #1
 800507a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800507c:	697b      	ldr	r3, [r7, #20]
	}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	200008e0 	.word	0x200008e0
 800508c:	20000dbc 	.word	0x20000dbc
 8005090:	200008e4 	.word	0x200008e4

08005094 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80050a2:	2301      	movs	r3, #1
 80050a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d06a      	beq.n	8005182 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10a      	bne.n	80050ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	60fb      	str	r3, [r7, #12]
}
 80050c6:	bf00      	nop
 80050c8:	e7fe      	b.n	80050c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d902      	bls.n	80050da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	e002      	b.n	80050e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d04b      	beq.n	8005182 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d146      	bne.n	8005182 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80050f4:	4b25      	ldr	r3, [pc, #148]	; (800518c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d10a      	bne.n	8005114 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	60bb      	str	r3, [r7, #8]
}
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	db04      	blt.n	8005132 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	6959      	ldr	r1, [r3, #20]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4a13      	ldr	r2, [pc, #76]	; (8005190 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005142:	4413      	add	r3, r2
 8005144:	4299      	cmp	r1, r3
 8005146:	d11c      	bne.n	8005182 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	3304      	adds	r3, #4
 800514c:	4618      	mov	r0, r3
 800514e:	f7fe f9bf 	bl	80034d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005156:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d903      	bls.n	8005166 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	4a0c      	ldr	r2, [pc, #48]	; (8005194 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4a07      	ldr	r2, [pc, #28]	; (8005190 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005174:	441a      	add	r2, r3
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	3304      	adds	r3, #4
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f7fe f94a 	bl	8003416 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005182:	bf00      	nop
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	200008e0 	.word	0x200008e0
 8005190:	200008e4 	.word	0x200008e4
 8005194:	20000dbc 	.word	0x20000dbc

08005198 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800519c:	4b07      	ldr	r3, [pc, #28]	; (80051bc <pvTaskIncrementMutexHeldCount+0x24>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d004      	beq.n	80051ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <pvTaskIncrementMutexHeldCount+0x24>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051aa:	3201      	adds	r2, #1
 80051ac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80051ae:	4b03      	ldr	r3, [pc, #12]	; (80051bc <pvTaskIncrementMutexHeldCount+0x24>)
 80051b0:	681b      	ldr	r3, [r3, #0]
	}
 80051b2:	4618      	mov	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	200008e0 	.word	0x200008e0

080051c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051ca:	4b21      	ldr	r3, [pc, #132]	; (8005250 <prvAddCurrentTaskToDelayedList+0x90>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051d0:	4b20      	ldr	r3, [pc, #128]	; (8005254 <prvAddCurrentTaskToDelayedList+0x94>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3304      	adds	r3, #4
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fe f97a 	bl	80034d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d10a      	bne.n	80051fa <prvAddCurrentTaskToDelayedList+0x3a>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ea:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <prvAddCurrentTaskToDelayedList+0x94>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4619      	mov	r1, r3
 80051f2:	4819      	ldr	r0, [pc, #100]	; (8005258 <prvAddCurrentTaskToDelayedList+0x98>)
 80051f4:	f7fe f90f 	bl	8003416 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051f8:	e026      	b.n	8005248 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4413      	add	r3, r2
 8005200:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005202:	4b14      	ldr	r3, [pc, #80]	; (8005254 <prvAddCurrentTaskToDelayedList+0x94>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	429a      	cmp	r2, r3
 8005210:	d209      	bcs.n	8005226 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <prvAddCurrentTaskToDelayedList+0x94>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f7fe f91d 	bl	800345e <vListInsert>
}
 8005224:	e010      	b.n	8005248 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005226:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <prvAddCurrentTaskToDelayedList+0x94>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3304      	adds	r3, #4
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f7fe f913 	bl	800345e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <prvAddCurrentTaskToDelayedList+0xa4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	429a      	cmp	r2, r3
 8005240:	d202      	bcs.n	8005248 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005242:	4a08      	ldr	r2, [pc, #32]	; (8005264 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	6013      	str	r3, [r2, #0]
}
 8005248:	bf00      	nop
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20000db8 	.word	0x20000db8
 8005254:	200008e0 	.word	0x200008e0
 8005258:	20000da0 	.word	0x20000da0
 800525c:	20000d70 	.word	0x20000d70
 8005260:	20000d6c 	.word	0x20000d6c
 8005264:	20000dd4 	.word	0x20000dd4

08005268 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800526e:	2300      	movs	r3, #0
 8005270:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005272:	f000 fb07 	bl	8005884 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005276:	4b1c      	ldr	r3, [pc, #112]	; (80052e8 <xTimerCreateTimerTask+0x80>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d021      	beq.n	80052c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005286:	1d3a      	adds	r2, r7, #4
 8005288:	f107 0108 	add.w	r1, r7, #8
 800528c:	f107 030c 	add.w	r3, r7, #12
 8005290:	4618      	mov	r0, r3
 8005292:	f7fe f879 	bl	8003388 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	9202      	str	r2, [sp, #8]
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	2302      	movs	r3, #2
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	2300      	movs	r3, #0
 80052a6:	460a      	mov	r2, r1
 80052a8:	4910      	ldr	r1, [pc, #64]	; (80052ec <xTimerCreateTimerTask+0x84>)
 80052aa:	4811      	ldr	r0, [pc, #68]	; (80052f0 <xTimerCreateTimerTask+0x88>)
 80052ac:	f7fe ffb6 	bl	800421c <xTaskCreateStatic>
 80052b0:	4603      	mov	r3, r0
 80052b2:	4a10      	ldr	r2, [pc, #64]	; (80052f4 <xTimerCreateTimerTask+0x8c>)
 80052b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80052b6:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <xTimerCreateTimerTask+0x8c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80052be:	2301      	movs	r3, #1
 80052c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	613b      	str	r3, [r7, #16]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80052de:	697b      	ldr	r3, [r7, #20]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000e10 	.word	0x20000e10
 80052ec:	080073b8 	.word	0x080073b8
 80052f0:	0800542d 	.word	0x0800542d
 80052f4:	20000e14 	.word	0x20000e14

080052f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	; 0x28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005306:	2300      	movs	r3, #0
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10a      	bne.n	8005326 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	623b      	str	r3, [r7, #32]
}
 8005322:	bf00      	nop
 8005324:	e7fe      	b.n	8005324 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005326:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <xTimerGenericCommand+0x98>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d02a      	beq.n	8005384 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b05      	cmp	r3, #5
 800533e:	dc18      	bgt.n	8005372 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005340:	f7ff fdb4 	bl	8004eac <xTaskGetSchedulerState>
 8005344:	4603      	mov	r3, r0
 8005346:	2b02      	cmp	r3, #2
 8005348:	d109      	bne.n	800535e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800534a:	4b11      	ldr	r3, [pc, #68]	; (8005390 <xTimerGenericCommand+0x98>)
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	f107 0110 	add.w	r1, r7, #16
 8005352:	2300      	movs	r3, #0
 8005354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005356:	f7fe fa55 	bl	8003804 <xQueueGenericSend>
 800535a:	6278      	str	r0, [r7, #36]	; 0x24
 800535c:	e012      	b.n	8005384 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800535e:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <xTimerGenericCommand+0x98>)
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	f107 0110 	add.w	r1, r7, #16
 8005366:	2300      	movs	r3, #0
 8005368:	2200      	movs	r2, #0
 800536a:	f7fe fa4b 	bl	8003804 <xQueueGenericSend>
 800536e:	6278      	str	r0, [r7, #36]	; 0x24
 8005370:	e008      	b.n	8005384 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005372:	4b07      	ldr	r3, [pc, #28]	; (8005390 <xTimerGenericCommand+0x98>)
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	f107 0110 	add.w	r1, r7, #16
 800537a:	2300      	movs	r3, #0
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	f7fe fb3f 	bl	8003a00 <xQueueGenericSendFromISR>
 8005382:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005386:	4618      	mov	r0, r3
 8005388:	3728      	adds	r7, #40	; 0x28
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000e10 	.word	0x20000e10

08005394 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af02      	add	r7, sp, #8
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800539e:	4b22      	ldr	r3, [pc, #136]	; (8005428 <prvProcessExpiredTimer+0x94>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe f88f 	bl	80034d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d022      	beq.n	8005406 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	18d1      	adds	r1, r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	6978      	ldr	r0, [r7, #20]
 80053ce:	f000 f8d1 	bl	8005574 <prvInsertTimerInActiveList>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01f      	beq.n	8005418 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053d8:	2300      	movs	r3, #0
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	2300      	movs	r3, #0
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	2100      	movs	r1, #0
 80053e2:	6978      	ldr	r0, [r7, #20]
 80053e4:	f7ff ff88 	bl	80052f8 <xTimerGenericCommand>
 80053e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d113      	bne.n	8005418 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	60fb      	str	r3, [r7, #12]
}
 8005402:	bf00      	nop
 8005404:	e7fe      	b.n	8005404 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	b2da      	uxtb	r2, r3
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	6978      	ldr	r0, [r7, #20]
 800541e:	4798      	blx	r3
}
 8005420:	bf00      	nop
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000e08 	.word	0x20000e08

0800542c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005434:	f107 0308 	add.w	r3, r7, #8
 8005438:	4618      	mov	r0, r3
 800543a:	f000 f857 	bl	80054ec <prvGetNextExpireTime>
 800543e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4619      	mov	r1, r3
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f803 	bl	8005450 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800544a:	f000 f8d5 	bl	80055f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800544e:	e7f1      	b.n	8005434 <prvTimerTask+0x8>

08005450 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800545a:	f7ff f93b 	bl	80046d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800545e:	f107 0308 	add.w	r3, r7, #8
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f866 	bl	8005534 <prvSampleTimeNow>
 8005468:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d130      	bne.n	80054d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <prvProcessTimerOrBlockTask+0x3c>
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	429a      	cmp	r2, r3
 800547c:	d806      	bhi.n	800548c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800547e:	f7ff f937 	bl	80046f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005482:	68f9      	ldr	r1, [r7, #12]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff ff85 	bl	8005394 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800548a:	e024      	b.n	80054d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005492:	4b13      	ldr	r3, [pc, #76]	; (80054e0 <prvProcessTimerOrBlockTask+0x90>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <prvProcessTimerOrBlockTask+0x50>
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <prvProcessTimerOrBlockTask+0x52>
 80054a0:	2300      	movs	r3, #0
 80054a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054a4:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <prvProcessTimerOrBlockTask+0x94>)
 80054a6:	6818      	ldr	r0, [r3, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	4619      	mov	r1, r3
 80054b2:	f7fe fe7f 	bl	80041b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80054b6:	f7ff f91b 	bl	80046f0 <xTaskResumeAll>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80054c0:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <prvProcessTimerOrBlockTask+0x98>)
 80054c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	f3bf 8f6f 	isb	sy
}
 80054d0:	e001      	b.n	80054d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80054d2:	f7ff f90d 	bl	80046f0 <xTaskResumeAll>
}
 80054d6:	bf00      	nop
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000e0c 	.word	0x20000e0c
 80054e4:	20000e10 	.word	0x20000e10
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054f4:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <prvGetNextExpireTime+0x44>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <prvGetNextExpireTime+0x16>
 80054fe:	2201      	movs	r2, #1
 8005500:	e000      	b.n	8005504 <prvGetNextExpireTime+0x18>
 8005502:	2200      	movs	r2, #0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d105      	bne.n	800551c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <prvGetNextExpireTime+0x44>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	e001      	b.n	8005520 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005520:	68fb      	ldr	r3, [r7, #12]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	20000e08 	.word	0x20000e08

08005534 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800553c:	f7ff f976 	bl	800482c <xTaskGetTickCount>
 8005540:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005542:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <prvSampleTimeNow+0x3c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	429a      	cmp	r2, r3
 800554a:	d205      	bcs.n	8005558 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800554c:	f000 f936 	bl	80057bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e002      	b.n	800555e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800555e:	4a04      	ldr	r2, [pc, #16]	; (8005570 <prvSampleTimeNow+0x3c>)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005564:	68fb      	ldr	r3, [r7, #12]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000e18 	.word	0x20000e18

08005574 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d812      	bhi.n	80055c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	1ad2      	subs	r2, r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d302      	bcc.n	80055ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	e01b      	b.n	80055e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <prvInsertTimerInActiveList+0x7c>)
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f7fd ff50 	bl	800345e <vListInsert>
 80055be:	e012      	b.n	80055e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d206      	bcs.n	80055d6 <prvInsertTimerInActiveList+0x62>
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d302      	bcc.n	80055d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80055d0:	2301      	movs	r3, #1
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	e007      	b.n	80055e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055d6:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <prvInsertTimerInActiveList+0x80>)
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3304      	adds	r3, #4
 80055de:	4619      	mov	r1, r3
 80055e0:	4610      	mov	r0, r2
 80055e2:	f7fd ff3c 	bl	800345e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80055e6:	697b      	ldr	r3, [r7, #20]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20000e0c 	.word	0x20000e0c
 80055f4:	20000e08 	.word	0x20000e08

080055f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08e      	sub	sp, #56	; 0x38
 80055fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055fe:	e0ca      	b.n	8005796 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	da18      	bge.n	8005638 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005606:	1d3b      	adds	r3, r7, #4
 8005608:	3304      	adds	r3, #4
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10a      	bne.n	8005628 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	61fb      	str	r3, [r7, #28]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800562e:	6850      	ldr	r0, [r2, #4]
 8005630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005632:	6892      	ldr	r2, [r2, #8]
 8005634:	4611      	mov	r1, r2
 8005636:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	f2c0 80aa 	blt.w	8005794 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d004      	beq.n	8005656 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	3304      	adds	r3, #4
 8005650:	4618      	mov	r0, r3
 8005652:	f7fd ff3d 	bl	80034d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005656:	463b      	mov	r3, r7
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff ff6b 	bl	8005534 <prvSampleTimeNow>
 800565e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b09      	cmp	r3, #9
 8005664:	f200 8097 	bhi.w	8005796 <prvProcessReceivedCommands+0x19e>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <prvProcessReceivedCommands+0x78>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005699 	.word	0x08005699
 8005674:	08005699 	.word	0x08005699
 8005678:	08005699 	.word	0x08005699
 800567c:	0800570d 	.word	0x0800570d
 8005680:	08005721 	.word	0x08005721
 8005684:	0800576b 	.word	0x0800576b
 8005688:	08005699 	.word	0x08005699
 800568c:	08005699 	.word	0x08005699
 8005690:	0800570d 	.word	0x0800570d
 8005694:	08005721 	.word	0x08005721
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	18d1      	adds	r1, r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056b8:	f7ff ff5c 	bl	8005574 <prvInsertTimerInActiveList>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d069      	beq.n	8005796 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d05e      	beq.n	8005796 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	441a      	add	r2, r3
 80056e0:	2300      	movs	r3, #0
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	2300      	movs	r3, #0
 80056e6:	2100      	movs	r1, #0
 80056e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ea:	f7ff fe05 	bl	80052f8 <xTimerGenericCommand>
 80056ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d14f      	bne.n	8005796 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	61bb      	str	r3, [r7, #24]
}
 8005708:	bf00      	nop
 800570a:	e7fe      	b.n	800570a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005712:	f023 0301 	bic.w	r3, r3, #1
 8005716:	b2da      	uxtb	r2, r3
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800571e:	e03a      	b.n	8005796 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	b2da      	uxtb	r2, r3
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	617b      	str	r3, [r7, #20]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	18d1      	adds	r1, r2, r3
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005764:	f7ff ff06 	bl	8005574 <prvInsertTimerInActiveList>
					break;
 8005768:	e015      	b.n	8005796 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d103      	bne.n	8005780 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800577a:	f000 fbe1 	bl	8005f40 <vPortFree>
 800577e:	e00a      	b.n	8005796 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005786:	f023 0301 	bic.w	r3, r3, #1
 800578a:	b2da      	uxtb	r2, r3
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005792:	e000      	b.n	8005796 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005794:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005796:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <prvProcessReceivedCommands+0x1c0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	1d39      	adds	r1, r7, #4
 800579c:	2200      	movs	r2, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe f9ca 	bl	8003b38 <xQueueReceive>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f47f af2a 	bne.w	8005600 <prvProcessReceivedCommands+0x8>
	}
}
 80057ac:	bf00      	nop
 80057ae:	bf00      	nop
 80057b0:	3730      	adds	r7, #48	; 0x30
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000e10 	.word	0x20000e10

080057bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057c2:	e048      	b.n	8005856 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057c4:	4b2d      	ldr	r3, [pc, #180]	; (800587c <prvSwitchTimerLists+0xc0>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ce:	4b2b      	ldr	r3, [pc, #172]	; (800587c <prvSwitchTimerLists+0xc0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3304      	adds	r3, #4
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fd fe77 	bl	80034d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d02e      	beq.n	8005856 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4413      	add	r3, r2
 8005800:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	d90e      	bls.n	8005828 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005816:	4b19      	ldr	r3, [pc, #100]	; (800587c <prvSwitchTimerLists+0xc0>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3304      	adds	r3, #4
 800581e:	4619      	mov	r1, r3
 8005820:	4610      	mov	r0, r2
 8005822:	f7fd fe1c 	bl	800345e <vListInsert>
 8005826:	e016      	b.n	8005856 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005828:	2300      	movs	r3, #0
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	2300      	movs	r3, #0
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	2100      	movs	r1, #0
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7ff fd60 	bl	80052f8 <xTimerGenericCommand>
 8005838:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	603b      	str	r3, [r7, #0]
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005856:	4b09      	ldr	r3, [pc, #36]	; (800587c <prvSwitchTimerLists+0xc0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1b1      	bne.n	80057c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005860:	4b06      	ldr	r3, [pc, #24]	; (800587c <prvSwitchTimerLists+0xc0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005866:	4b06      	ldr	r3, [pc, #24]	; (8005880 <prvSwitchTimerLists+0xc4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a04      	ldr	r2, [pc, #16]	; (800587c <prvSwitchTimerLists+0xc0>)
 800586c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800586e:	4a04      	ldr	r2, [pc, #16]	; (8005880 <prvSwitchTimerLists+0xc4>)
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	6013      	str	r3, [r2, #0]
}
 8005874:	bf00      	nop
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000e08 	.word	0x20000e08
 8005880:	20000e0c 	.word	0x20000e0c

08005884 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800588a:	f000 f96b 	bl	8005b64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800588e:	4b15      	ldr	r3, [pc, #84]	; (80058e4 <prvCheckForValidListAndQueue+0x60>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d120      	bne.n	80058d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005896:	4814      	ldr	r0, [pc, #80]	; (80058e8 <prvCheckForValidListAndQueue+0x64>)
 8005898:	f7fd fd90 	bl	80033bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800589c:	4813      	ldr	r0, [pc, #76]	; (80058ec <prvCheckForValidListAndQueue+0x68>)
 800589e:	f7fd fd8d 	bl	80033bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80058a2:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <prvCheckForValidListAndQueue+0x6c>)
 80058a4:	4a10      	ldr	r2, [pc, #64]	; (80058e8 <prvCheckForValidListAndQueue+0x64>)
 80058a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80058a8:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <prvCheckForValidListAndQueue+0x70>)
 80058aa:	4a10      	ldr	r2, [pc, #64]	; (80058ec <prvCheckForValidListAndQueue+0x68>)
 80058ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80058ae:	2300      	movs	r3, #0
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <prvCheckForValidListAndQueue+0x74>)
 80058b4:	4a11      	ldr	r2, [pc, #68]	; (80058fc <prvCheckForValidListAndQueue+0x78>)
 80058b6:	2110      	movs	r1, #16
 80058b8:	200a      	movs	r0, #10
 80058ba:	f7fd fe9b 	bl	80035f4 <xQueueGenericCreateStatic>
 80058be:	4603      	mov	r3, r0
 80058c0:	4a08      	ldr	r2, [pc, #32]	; (80058e4 <prvCheckForValidListAndQueue+0x60>)
 80058c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80058c4:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <prvCheckForValidListAndQueue+0x60>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80058cc:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <prvCheckForValidListAndQueue+0x60>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	490b      	ldr	r1, [pc, #44]	; (8005900 <prvCheckForValidListAndQueue+0x7c>)
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe fc44 	bl	8004160 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058d8:	f000 f974 	bl	8005bc4 <vPortExitCritical>
}
 80058dc:	bf00      	nop
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000e10 	.word	0x20000e10
 80058e8:	20000de0 	.word	0x20000de0
 80058ec:	20000df4 	.word	0x20000df4
 80058f0:	20000e08 	.word	0x20000e08
 80058f4:	20000e0c 	.word	0x20000e0c
 80058f8:	20000ebc 	.word	0x20000ebc
 80058fc:	20000e1c 	.word	0x20000e1c
 8005900:	080073c0 	.word	0x080073c0

08005904 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3b04      	subs	r3, #4
 8005914:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800591c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3b04      	subs	r3, #4
 8005922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f023 0201 	bic.w	r2, r3, #1
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3b04      	subs	r3, #4
 8005932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005934:	4a0c      	ldr	r2, [pc, #48]	; (8005968 <pxPortInitialiseStack+0x64>)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3b14      	subs	r3, #20
 800593e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3b04      	subs	r3, #4
 800594a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f06f 0202 	mvn.w	r2, #2
 8005952:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3b20      	subs	r3, #32
 8005958:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800595a:	68fb      	ldr	r3, [r7, #12]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	0800596d 	.word	0x0800596d

0800596c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005976:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <prvTaskExitError+0x54>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597e:	d00a      	beq.n	8005996 <prvTaskExitError+0x2a>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	60fb      	str	r3, [r7, #12]
}
 8005992:	bf00      	nop
 8005994:	e7fe      	b.n	8005994 <prvTaskExitError+0x28>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	60bb      	str	r3, [r7, #8]
}
 80059a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059aa:	bf00      	nop
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0fc      	beq.n	80059ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059b2:	bf00      	nop
 80059b4:	bf00      	nop
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	2000000c 	.word	0x2000000c
	...

080059d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059d0:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <pxCurrentTCBConst2>)
 80059d2:	6819      	ldr	r1, [r3, #0]
 80059d4:	6808      	ldr	r0, [r1, #0]
 80059d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059da:	f380 8809 	msr	PSP, r0
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f04f 0000 	mov.w	r0, #0
 80059e6:	f380 8811 	msr	BASEPRI, r0
 80059ea:	4770      	bx	lr
 80059ec:	f3af 8000 	nop.w

080059f0 <pxCurrentTCBConst2>:
 80059f0:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop

080059f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059f8:	4808      	ldr	r0, [pc, #32]	; (8005a1c <prvPortStartFirstTask+0x24>)
 80059fa:	6800      	ldr	r0, [r0, #0]
 80059fc:	6800      	ldr	r0, [r0, #0]
 80059fe:	f380 8808 	msr	MSP, r0
 8005a02:	f04f 0000 	mov.w	r0, #0
 8005a06:	f380 8814 	msr	CONTROL, r0
 8005a0a:	b662      	cpsie	i
 8005a0c:	b661      	cpsie	f
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	df00      	svc	0
 8005a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a1a:	bf00      	nop
 8005a1c:	e000ed08 	.word	0xe000ed08

08005a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a26:	4b46      	ldr	r3, [pc, #280]	; (8005b40 <xPortStartScheduler+0x120>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a46      	ldr	r2, [pc, #280]	; (8005b44 <xPortStartScheduler+0x124>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d10a      	bne.n	8005a46 <xPortStartScheduler+0x26>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	613b      	str	r3, [r7, #16]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a46:	4b3e      	ldr	r3, [pc, #248]	; (8005b40 <xPortStartScheduler+0x120>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a3f      	ldr	r2, [pc, #252]	; (8005b48 <xPortStartScheduler+0x128>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d10a      	bne.n	8005a66 <xPortStartScheduler+0x46>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	60fb      	str	r3, [r7, #12]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a66:	4b39      	ldr	r3, [pc, #228]	; (8005b4c <xPortStartScheduler+0x12c>)
 8005a68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	22ff      	movs	r2, #255	; 0xff
 8005a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	4b31      	ldr	r3, [pc, #196]	; (8005b50 <xPortStartScheduler+0x130>)
 8005a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a8e:	4b31      	ldr	r3, [pc, #196]	; (8005b54 <xPortStartScheduler+0x134>)
 8005a90:	2207      	movs	r2, #7
 8005a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a94:	e009      	b.n	8005aaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005a96:	4b2f      	ldr	r3, [pc, #188]	; (8005b54 <xPortStartScheduler+0x134>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	4a2d      	ldr	r2, [pc, #180]	; (8005b54 <xPortStartScheduler+0x134>)
 8005a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b80      	cmp	r3, #128	; 0x80
 8005ab4:	d0ef      	beq.n	8005a96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ab6:	4b27      	ldr	r3, [pc, #156]	; (8005b54 <xPortStartScheduler+0x134>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f1c3 0307 	rsb	r3, r3, #7
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d00a      	beq.n	8005ad8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	60bb      	str	r3, [r7, #8]
}
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ad8:	4b1e      	ldr	r3, [pc, #120]	; (8005b54 <xPortStartScheduler+0x134>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	4a1d      	ldr	r2, [pc, #116]	; (8005b54 <xPortStartScheduler+0x134>)
 8005ae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ae2:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <xPortStartScheduler+0x134>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aea:	4a1a      	ldr	r2, [pc, #104]	; (8005b54 <xPortStartScheduler+0x134>)
 8005aec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005af6:	4b18      	ldr	r3, [pc, #96]	; (8005b58 <xPortStartScheduler+0x138>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <xPortStartScheduler+0x138>)
 8005afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b02:	4b15      	ldr	r3, [pc, #84]	; (8005b58 <xPortStartScheduler+0x138>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a14      	ldr	r2, [pc, #80]	; (8005b58 <xPortStartScheduler+0x138>)
 8005b08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b0e:	f000 f8dd 	bl	8005ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b12:	4b12      	ldr	r3, [pc, #72]	; (8005b5c <xPortStartScheduler+0x13c>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b18:	f000 f8fc 	bl	8005d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b1c:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <xPortStartScheduler+0x140>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a0f      	ldr	r2, [pc, #60]	; (8005b60 <xPortStartScheduler+0x140>)
 8005b22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b28:	f7ff ff66 	bl	80059f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b2c:	f7fe ff48 	bl	80049c0 <vTaskSwitchContext>
	prvTaskExitError();
 8005b30:	f7ff ff1c 	bl	800596c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	e000ed00 	.word	0xe000ed00
 8005b44:	410fc271 	.word	0x410fc271
 8005b48:	410fc270 	.word	0x410fc270
 8005b4c:	e000e400 	.word	0xe000e400
 8005b50:	20000f0c 	.word	0x20000f0c
 8005b54:	20000f10 	.word	0x20000f10
 8005b58:	e000ed20 	.word	0xe000ed20
 8005b5c:	2000000c 	.word	0x2000000c
 8005b60:	e000ef34 	.word	0xe000ef34

08005b64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	607b      	str	r3, [r7, #4]
}
 8005b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b7e:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <vPortEnterCritical+0x58>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3301      	adds	r3, #1
 8005b84:	4a0d      	ldr	r2, [pc, #52]	; (8005bbc <vPortEnterCritical+0x58>)
 8005b86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b88:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <vPortEnterCritical+0x58>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d10f      	bne.n	8005bb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <vPortEnterCritical+0x5c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	603b      	str	r3, [r7, #0]
}
 8005bac:	bf00      	nop
 8005bae:	e7fe      	b.n	8005bae <vPortEnterCritical+0x4a>
	}
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	2000000c 	.word	0x2000000c
 8005bc0:	e000ed04 	.word	0xe000ed04

08005bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bca:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <vPortExitCritical+0x50>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10a      	bne.n	8005be8 <vPortExitCritical+0x24>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	607b      	str	r3, [r7, #4]
}
 8005be4:	bf00      	nop
 8005be6:	e7fe      	b.n	8005be6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <vPortExitCritical+0x50>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <vPortExitCritical+0x50>)
 8005bf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bf2:	4b08      	ldr	r3, [pc, #32]	; (8005c14 <vPortExitCritical+0x50>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d105      	bne.n	8005c06 <vPortExitCritical+0x42>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	f383 8811 	msr	BASEPRI, r3
}
 8005c04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	2000000c 	.word	0x2000000c
	...

08005c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c20:	f3ef 8009 	mrs	r0, PSP
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <pxCurrentTCBConst>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	f01e 0f10 	tst.w	lr, #16
 8005c30:	bf08      	it	eq
 8005c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3a:	6010      	str	r0, [r2, #0]
 8005c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c44:	f380 8811 	msr	BASEPRI, r0
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f7fe feb6 	bl	80049c0 <vTaskSwitchContext>
 8005c54:	f04f 0000 	mov.w	r0, #0
 8005c58:	f380 8811 	msr	BASEPRI, r0
 8005c5c:	bc09      	pop	{r0, r3}
 8005c5e:	6819      	ldr	r1, [r3, #0]
 8005c60:	6808      	ldr	r0, [r1, #0]
 8005c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c66:	f01e 0f10 	tst.w	lr, #16
 8005c6a:	bf08      	it	eq
 8005c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c70:	f380 8809 	msr	PSP, r0
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	f3af 8000 	nop.w

08005c80 <pxCurrentTCBConst>:
 8005c80:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop

08005c88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	607b      	str	r3, [r7, #4]
}
 8005ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ca2:	f7fe fdd3 	bl	800484c <xTaskIncrementTick>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cac:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <xPortSysTickHandler+0x40>)
 8005cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	f383 8811 	msr	BASEPRI, r3
}
 8005cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cc0:	bf00      	nop
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <vPortSetupTimerInterrupt+0x34>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <vPortSetupTimerInterrupt+0x38>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <vPortSetupTimerInterrupt+0x3c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0a      	ldr	r2, [pc, #40]	; (8005d0c <vPortSetupTimerInterrupt+0x40>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	099b      	lsrs	r3, r3, #6
 8005ce8:	4a09      	ldr	r2, [pc, #36]	; (8005d10 <vPortSetupTimerInterrupt+0x44>)
 8005cea:	3b01      	subs	r3, #1
 8005cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cee:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <vPortSetupTimerInterrupt+0x34>)
 8005cf0:	2207      	movs	r2, #7
 8005cf2:	601a      	str	r2, [r3, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	e000e010 	.word	0xe000e010
 8005d04:	e000e018 	.word	0xe000e018
 8005d08:	20000000 	.word	0x20000000
 8005d0c:	10624dd3 	.word	0x10624dd3
 8005d10:	e000e014 	.word	0xe000e014

08005d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d24 <vPortEnableVFP+0x10>
 8005d18:	6801      	ldr	r1, [r0, #0]
 8005d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d1e:	6001      	str	r1, [r0, #0]
 8005d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d22:	bf00      	nop
 8005d24:	e000ed88 	.word	0xe000ed88

08005d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d2e:	f3ef 8305 	mrs	r3, IPSR
 8005d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b0f      	cmp	r3, #15
 8005d38:	d914      	bls.n	8005d64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d3a:	4a17      	ldr	r2, [pc, #92]	; (8005d98 <vPortValidateInterruptPriority+0x70>)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d44:	4b15      	ldr	r3, [pc, #84]	; (8005d9c <vPortValidateInterruptPriority+0x74>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	7afa      	ldrb	r2, [r7, #11]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d20a      	bcs.n	8005d64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	607b      	str	r3, [r7, #4]
}
 8005d60:	bf00      	nop
 8005d62:	e7fe      	b.n	8005d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d64:	4b0e      	ldr	r3, [pc, #56]	; (8005da0 <vPortValidateInterruptPriority+0x78>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d6c:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <vPortValidateInterruptPriority+0x7c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d90a      	bls.n	8005d8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	603b      	str	r3, [r7, #0]
}
 8005d86:	bf00      	nop
 8005d88:	e7fe      	b.n	8005d88 <vPortValidateInterruptPriority+0x60>
	}
 8005d8a:	bf00      	nop
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	e000e3f0 	.word	0xe000e3f0
 8005d9c:	20000f0c 	.word	0x20000f0c
 8005da0:	e000ed0c 	.word	0xe000ed0c
 8005da4:	20000f10 	.word	0x20000f10

08005da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	; 0x28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005db0:	2300      	movs	r3, #0
 8005db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005db4:	f7fe fc8e 	bl	80046d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005db8:	4b5b      	ldr	r3, [pc, #364]	; (8005f28 <pvPortMalloc+0x180>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005dc0:	f000 f920 	bl	8006004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005dc4:	4b59      	ldr	r3, [pc, #356]	; (8005f2c <pvPortMalloc+0x184>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f040 8093 	bne.w	8005ef8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01d      	beq.n	8005e14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005dd8:	2208      	movs	r2, #8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4413      	add	r3, r2
 8005dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d014      	beq.n	8005e14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f023 0307 	bic.w	r3, r3, #7
 8005df0:	3308      	adds	r3, #8
 8005df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <pvPortMalloc+0x6c>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	617b      	str	r3, [r7, #20]
}
 8005e10:	bf00      	nop
 8005e12:	e7fe      	b.n	8005e12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d06e      	beq.n	8005ef8 <pvPortMalloc+0x150>
 8005e1a:	4b45      	ldr	r3, [pc, #276]	; (8005f30 <pvPortMalloc+0x188>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d869      	bhi.n	8005ef8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e24:	4b43      	ldr	r3, [pc, #268]	; (8005f34 <pvPortMalloc+0x18c>)
 8005e26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e28:	4b42      	ldr	r3, [pc, #264]	; (8005f34 <pvPortMalloc+0x18c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e2e:	e004      	b.n	8005e3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d903      	bls.n	8005e4c <pvPortMalloc+0xa4>
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f1      	bne.n	8005e30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e4c:	4b36      	ldr	r3, [pc, #216]	; (8005f28 <pvPortMalloc+0x180>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d050      	beq.n	8005ef8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	4413      	add	r3, r2
 8005e5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	1ad2      	subs	r2, r2, r3
 8005e70:	2308      	movs	r3, #8
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d91f      	bls.n	8005eb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <pvPortMalloc+0xf8>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	613b      	str	r3, [r7, #16]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	1ad2      	subs	r2, r2, r3
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005eb2:	69b8      	ldr	r0, [r7, #24]
 8005eb4:	f000 f908 	bl	80060c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005eb8:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <pvPortMalloc+0x188>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	4a1b      	ldr	r2, [pc, #108]	; (8005f30 <pvPortMalloc+0x188>)
 8005ec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ec6:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <pvPortMalloc+0x188>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <pvPortMalloc+0x190>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d203      	bcs.n	8005eda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ed2:	4b17      	ldr	r3, [pc, #92]	; (8005f30 <pvPortMalloc+0x188>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <pvPortMalloc+0x190>)
 8005ed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	4b13      	ldr	r3, [pc, #76]	; (8005f2c <pvPortMalloc+0x184>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005eee:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <pvPortMalloc+0x194>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	4a11      	ldr	r2, [pc, #68]	; (8005f3c <pvPortMalloc+0x194>)
 8005ef6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ef8:	f7fe fbfa 	bl	80046f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <pvPortMalloc+0x174>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	60fb      	str	r3, [r7, #12]
}
 8005f18:	bf00      	nop
 8005f1a:	e7fe      	b.n	8005f1a <pvPortMalloc+0x172>
	return pvReturn;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3728      	adds	r7, #40	; 0x28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20004b1c 	.word	0x20004b1c
 8005f2c:	20004b30 	.word	0x20004b30
 8005f30:	20004b20 	.word	0x20004b20
 8005f34:	20004b14 	.word	0x20004b14
 8005f38:	20004b24 	.word	0x20004b24
 8005f3c:	20004b28 	.word	0x20004b28

08005f40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d04d      	beq.n	8005fee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f52:	2308      	movs	r3, #8
 8005f54:	425b      	negs	r3, r3
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4413      	add	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	4b24      	ldr	r3, [pc, #144]	; (8005ff8 <vPortFree+0xb8>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <vPortFree+0x44>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	60fb      	str	r3, [r7, #12]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <vPortFree+0x62>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	60bb      	str	r3, [r7, #8]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <vPortFree+0xb8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01e      	beq.n	8005fee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d11a      	bne.n	8005fee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <vPortFree+0xb8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	401a      	ands	r2, r3
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fc8:	f7fe fb84 	bl	80046d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <vPortFree+0xbc>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	4a09      	ldr	r2, [pc, #36]	; (8005ffc <vPortFree+0xbc>)
 8005fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fda:	6938      	ldr	r0, [r7, #16]
 8005fdc:	f000 f874 	bl	80060c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <vPortFree+0xc0>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	4a06      	ldr	r2, [pc, #24]	; (8006000 <vPortFree+0xc0>)
 8005fe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005fea:	f7fe fb81 	bl	80046f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fee:	bf00      	nop
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20004b30 	.word	0x20004b30
 8005ffc:	20004b20 	.word	0x20004b20
 8006000:	20004b2c 	.word	0x20004b2c

08006004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800600a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800600e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006010:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <prvHeapInit+0xac>)
 8006012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00c      	beq.n	8006038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3307      	adds	r3, #7
 8006022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0307 	bic.w	r3, r3, #7
 800602a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	4a1f      	ldr	r2, [pc, #124]	; (80060b0 <prvHeapInit+0xac>)
 8006034:	4413      	add	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800603c:	4a1d      	ldr	r2, [pc, #116]	; (80060b4 <prvHeapInit+0xb0>)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006042:	4b1c      	ldr	r3, [pc, #112]	; (80060b4 <prvHeapInit+0xb0>)
 8006044:	2200      	movs	r2, #0
 8006046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	4413      	add	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006050:	2208      	movs	r2, #8
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0307 	bic.w	r3, r3, #7
 800605e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4a15      	ldr	r2, [pc, #84]	; (80060b8 <prvHeapInit+0xb4>)
 8006064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006066:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <prvHeapInit+0xb4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2200      	movs	r2, #0
 800606c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800606e:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <prvHeapInit+0xb4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006084:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvHeapInit+0xb4>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	4a0a      	ldr	r2, [pc, #40]	; (80060bc <prvHeapInit+0xb8>)
 8006092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	4a09      	ldr	r2, [pc, #36]	; (80060c0 <prvHeapInit+0xbc>)
 800609a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800609c:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <prvHeapInit+0xc0>)
 800609e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060a2:	601a      	str	r2, [r3, #0]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20000f14 	.word	0x20000f14
 80060b4:	20004b14 	.word	0x20004b14
 80060b8:	20004b1c 	.word	0x20004b1c
 80060bc:	20004b24 	.word	0x20004b24
 80060c0:	20004b20 	.word	0x20004b20
 80060c4:	20004b30 	.word	0x20004b30

080060c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060d0:	4b28      	ldr	r3, [pc, #160]	; (8006174 <prvInsertBlockIntoFreeList+0xac>)
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e002      	b.n	80060dc <prvInsertBlockIntoFreeList+0x14>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d8f7      	bhi.n	80060d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	4413      	add	r3, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d108      	bne.n	800610a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	441a      	add	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	441a      	add	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d118      	bne.n	8006150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b15      	ldr	r3, [pc, #84]	; (8006178 <prvInsertBlockIntoFreeList+0xb0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d00d      	beq.n	8006146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	441a      	add	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e008      	b.n	8006158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006146:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <prvInsertBlockIntoFreeList+0xb0>)
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	e003      	b.n	8006158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	429a      	cmp	r2, r3
 800615e:	d002      	beq.n	8006166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006166:	bf00      	nop
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20004b14 	.word	0x20004b14
 8006178:	20004b1c 	.word	0x20004b1c

0800617c <__errno>:
 800617c:	4b01      	ldr	r3, [pc, #4]	; (8006184 <__errno+0x8>)
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	20000010 	.word	0x20000010

08006188 <std>:
 8006188:	2300      	movs	r3, #0
 800618a:	b510      	push	{r4, lr}
 800618c:	4604      	mov	r4, r0
 800618e:	e9c0 3300 	strd	r3, r3, [r0]
 8006192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006196:	6083      	str	r3, [r0, #8]
 8006198:	8181      	strh	r1, [r0, #12]
 800619a:	6643      	str	r3, [r0, #100]	; 0x64
 800619c:	81c2      	strh	r2, [r0, #14]
 800619e:	6183      	str	r3, [r0, #24]
 80061a0:	4619      	mov	r1, r3
 80061a2:	2208      	movs	r2, #8
 80061a4:	305c      	adds	r0, #92	; 0x5c
 80061a6:	f000 f91a 	bl	80063de <memset>
 80061aa:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <std+0x38>)
 80061ac:	6263      	str	r3, [r4, #36]	; 0x24
 80061ae:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <std+0x3c>)
 80061b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80061b2:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <std+0x40>)
 80061b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061b6:	4b05      	ldr	r3, [pc, #20]	; (80061cc <std+0x44>)
 80061b8:	6224      	str	r4, [r4, #32]
 80061ba:	6323      	str	r3, [r4, #48]	; 0x30
 80061bc:	bd10      	pop	{r4, pc}
 80061be:	bf00      	nop
 80061c0:	08006689 	.word	0x08006689
 80061c4:	080066ab 	.word	0x080066ab
 80061c8:	080066e3 	.word	0x080066e3
 80061cc:	08006707 	.word	0x08006707

080061d0 <_cleanup_r>:
 80061d0:	4901      	ldr	r1, [pc, #4]	; (80061d8 <_cleanup_r+0x8>)
 80061d2:	f000 b8af 	b.w	8006334 <_fwalk_reent>
 80061d6:	bf00      	nop
 80061d8:	0800689d 	.word	0x0800689d

080061dc <__sfmoreglue>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	2268      	movs	r2, #104	; 0x68
 80061e0:	1e4d      	subs	r5, r1, #1
 80061e2:	4355      	muls	r5, r2
 80061e4:	460e      	mov	r6, r1
 80061e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061ea:	f000 f921 	bl	8006430 <_malloc_r>
 80061ee:	4604      	mov	r4, r0
 80061f0:	b140      	cbz	r0, 8006204 <__sfmoreglue+0x28>
 80061f2:	2100      	movs	r1, #0
 80061f4:	e9c0 1600 	strd	r1, r6, [r0]
 80061f8:	300c      	adds	r0, #12
 80061fa:	60a0      	str	r0, [r4, #8]
 80061fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006200:	f000 f8ed 	bl	80063de <memset>
 8006204:	4620      	mov	r0, r4
 8006206:	bd70      	pop	{r4, r5, r6, pc}

08006208 <__sfp_lock_acquire>:
 8006208:	4801      	ldr	r0, [pc, #4]	; (8006210 <__sfp_lock_acquire+0x8>)
 800620a:	f000 b8d8 	b.w	80063be <__retarget_lock_acquire_recursive>
 800620e:	bf00      	nop
 8006210:	20004b35 	.word	0x20004b35

08006214 <__sfp_lock_release>:
 8006214:	4801      	ldr	r0, [pc, #4]	; (800621c <__sfp_lock_release+0x8>)
 8006216:	f000 b8d3 	b.w	80063c0 <__retarget_lock_release_recursive>
 800621a:	bf00      	nop
 800621c:	20004b35 	.word	0x20004b35

08006220 <__sinit_lock_acquire>:
 8006220:	4801      	ldr	r0, [pc, #4]	; (8006228 <__sinit_lock_acquire+0x8>)
 8006222:	f000 b8cc 	b.w	80063be <__retarget_lock_acquire_recursive>
 8006226:	bf00      	nop
 8006228:	20004b36 	.word	0x20004b36

0800622c <__sinit_lock_release>:
 800622c:	4801      	ldr	r0, [pc, #4]	; (8006234 <__sinit_lock_release+0x8>)
 800622e:	f000 b8c7 	b.w	80063c0 <__retarget_lock_release_recursive>
 8006232:	bf00      	nop
 8006234:	20004b36 	.word	0x20004b36

08006238 <__sinit>:
 8006238:	b510      	push	{r4, lr}
 800623a:	4604      	mov	r4, r0
 800623c:	f7ff fff0 	bl	8006220 <__sinit_lock_acquire>
 8006240:	69a3      	ldr	r3, [r4, #24]
 8006242:	b11b      	cbz	r3, 800624c <__sinit+0x14>
 8006244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006248:	f7ff bff0 	b.w	800622c <__sinit_lock_release>
 800624c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006250:	6523      	str	r3, [r4, #80]	; 0x50
 8006252:	4b13      	ldr	r3, [pc, #76]	; (80062a0 <__sinit+0x68>)
 8006254:	4a13      	ldr	r2, [pc, #76]	; (80062a4 <__sinit+0x6c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	62a2      	str	r2, [r4, #40]	; 0x28
 800625a:	42a3      	cmp	r3, r4
 800625c:	bf04      	itt	eq
 800625e:	2301      	moveq	r3, #1
 8006260:	61a3      	streq	r3, [r4, #24]
 8006262:	4620      	mov	r0, r4
 8006264:	f000 f820 	bl	80062a8 <__sfp>
 8006268:	6060      	str	r0, [r4, #4]
 800626a:	4620      	mov	r0, r4
 800626c:	f000 f81c 	bl	80062a8 <__sfp>
 8006270:	60a0      	str	r0, [r4, #8]
 8006272:	4620      	mov	r0, r4
 8006274:	f000 f818 	bl	80062a8 <__sfp>
 8006278:	2200      	movs	r2, #0
 800627a:	60e0      	str	r0, [r4, #12]
 800627c:	2104      	movs	r1, #4
 800627e:	6860      	ldr	r0, [r4, #4]
 8006280:	f7ff ff82 	bl	8006188 <std>
 8006284:	68a0      	ldr	r0, [r4, #8]
 8006286:	2201      	movs	r2, #1
 8006288:	2109      	movs	r1, #9
 800628a:	f7ff ff7d 	bl	8006188 <std>
 800628e:	68e0      	ldr	r0, [r4, #12]
 8006290:	2202      	movs	r2, #2
 8006292:	2112      	movs	r1, #18
 8006294:	f7ff ff78 	bl	8006188 <std>
 8006298:	2301      	movs	r3, #1
 800629a:	61a3      	str	r3, [r4, #24]
 800629c:	e7d2      	b.n	8006244 <__sinit+0xc>
 800629e:	bf00      	nop
 80062a0:	08007440 	.word	0x08007440
 80062a4:	080061d1 	.word	0x080061d1

080062a8 <__sfp>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	4607      	mov	r7, r0
 80062ac:	f7ff ffac 	bl	8006208 <__sfp_lock_acquire>
 80062b0:	4b1e      	ldr	r3, [pc, #120]	; (800632c <__sfp+0x84>)
 80062b2:	681e      	ldr	r6, [r3, #0]
 80062b4:	69b3      	ldr	r3, [r6, #24]
 80062b6:	b913      	cbnz	r3, 80062be <__sfp+0x16>
 80062b8:	4630      	mov	r0, r6
 80062ba:	f7ff ffbd 	bl	8006238 <__sinit>
 80062be:	3648      	adds	r6, #72	; 0x48
 80062c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	d503      	bpl.n	80062d0 <__sfp+0x28>
 80062c8:	6833      	ldr	r3, [r6, #0]
 80062ca:	b30b      	cbz	r3, 8006310 <__sfp+0x68>
 80062cc:	6836      	ldr	r6, [r6, #0]
 80062ce:	e7f7      	b.n	80062c0 <__sfp+0x18>
 80062d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062d4:	b9d5      	cbnz	r5, 800630c <__sfp+0x64>
 80062d6:	4b16      	ldr	r3, [pc, #88]	; (8006330 <__sfp+0x88>)
 80062d8:	60e3      	str	r3, [r4, #12]
 80062da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062de:	6665      	str	r5, [r4, #100]	; 0x64
 80062e0:	f000 f86c 	bl	80063bc <__retarget_lock_init_recursive>
 80062e4:	f7ff ff96 	bl	8006214 <__sfp_lock_release>
 80062e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062f0:	6025      	str	r5, [r4, #0]
 80062f2:	61a5      	str	r5, [r4, #24]
 80062f4:	2208      	movs	r2, #8
 80062f6:	4629      	mov	r1, r5
 80062f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062fc:	f000 f86f 	bl	80063de <memset>
 8006300:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006304:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006308:	4620      	mov	r0, r4
 800630a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800630c:	3468      	adds	r4, #104	; 0x68
 800630e:	e7d9      	b.n	80062c4 <__sfp+0x1c>
 8006310:	2104      	movs	r1, #4
 8006312:	4638      	mov	r0, r7
 8006314:	f7ff ff62 	bl	80061dc <__sfmoreglue>
 8006318:	4604      	mov	r4, r0
 800631a:	6030      	str	r0, [r6, #0]
 800631c:	2800      	cmp	r0, #0
 800631e:	d1d5      	bne.n	80062cc <__sfp+0x24>
 8006320:	f7ff ff78 	bl	8006214 <__sfp_lock_release>
 8006324:	230c      	movs	r3, #12
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	e7ee      	b.n	8006308 <__sfp+0x60>
 800632a:	bf00      	nop
 800632c:	08007440 	.word	0x08007440
 8006330:	ffff0001 	.word	0xffff0001

08006334 <_fwalk_reent>:
 8006334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006338:	4606      	mov	r6, r0
 800633a:	4688      	mov	r8, r1
 800633c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006340:	2700      	movs	r7, #0
 8006342:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006346:	f1b9 0901 	subs.w	r9, r9, #1
 800634a:	d505      	bpl.n	8006358 <_fwalk_reent+0x24>
 800634c:	6824      	ldr	r4, [r4, #0]
 800634e:	2c00      	cmp	r4, #0
 8006350:	d1f7      	bne.n	8006342 <_fwalk_reent+0xe>
 8006352:	4638      	mov	r0, r7
 8006354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006358:	89ab      	ldrh	r3, [r5, #12]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d907      	bls.n	800636e <_fwalk_reent+0x3a>
 800635e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006362:	3301      	adds	r3, #1
 8006364:	d003      	beq.n	800636e <_fwalk_reent+0x3a>
 8006366:	4629      	mov	r1, r5
 8006368:	4630      	mov	r0, r6
 800636a:	47c0      	blx	r8
 800636c:	4307      	orrs	r7, r0
 800636e:	3568      	adds	r5, #104	; 0x68
 8006370:	e7e9      	b.n	8006346 <_fwalk_reent+0x12>
	...

08006374 <__libc_init_array>:
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	4d0d      	ldr	r5, [pc, #52]	; (80063ac <__libc_init_array+0x38>)
 8006378:	4c0d      	ldr	r4, [pc, #52]	; (80063b0 <__libc_init_array+0x3c>)
 800637a:	1b64      	subs	r4, r4, r5
 800637c:	10a4      	asrs	r4, r4, #2
 800637e:	2600      	movs	r6, #0
 8006380:	42a6      	cmp	r6, r4
 8006382:	d109      	bne.n	8006398 <__libc_init_array+0x24>
 8006384:	4d0b      	ldr	r5, [pc, #44]	; (80063b4 <__libc_init_array+0x40>)
 8006386:	4c0c      	ldr	r4, [pc, #48]	; (80063b8 <__libc_init_array+0x44>)
 8006388:	f000 ffda 	bl	8007340 <_init>
 800638c:	1b64      	subs	r4, r4, r5
 800638e:	10a4      	asrs	r4, r4, #2
 8006390:	2600      	movs	r6, #0
 8006392:	42a6      	cmp	r6, r4
 8006394:	d105      	bne.n	80063a2 <__libc_init_array+0x2e>
 8006396:	bd70      	pop	{r4, r5, r6, pc}
 8006398:	f855 3b04 	ldr.w	r3, [r5], #4
 800639c:	4798      	blx	r3
 800639e:	3601      	adds	r6, #1
 80063a0:	e7ee      	b.n	8006380 <__libc_init_array+0xc>
 80063a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a6:	4798      	blx	r3
 80063a8:	3601      	adds	r6, #1
 80063aa:	e7f2      	b.n	8006392 <__libc_init_array+0x1e>
 80063ac:	08007530 	.word	0x08007530
 80063b0:	08007530 	.word	0x08007530
 80063b4:	08007530 	.word	0x08007530
 80063b8:	08007534 	.word	0x08007534

080063bc <__retarget_lock_init_recursive>:
 80063bc:	4770      	bx	lr

080063be <__retarget_lock_acquire_recursive>:
 80063be:	4770      	bx	lr

080063c0 <__retarget_lock_release_recursive>:
 80063c0:	4770      	bx	lr

080063c2 <memcpy>:
 80063c2:	440a      	add	r2, r1
 80063c4:	4291      	cmp	r1, r2
 80063c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80063ca:	d100      	bne.n	80063ce <memcpy+0xc>
 80063cc:	4770      	bx	lr
 80063ce:	b510      	push	{r4, lr}
 80063d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063d8:	4291      	cmp	r1, r2
 80063da:	d1f9      	bne.n	80063d0 <memcpy+0xe>
 80063dc:	bd10      	pop	{r4, pc}

080063de <memset>:
 80063de:	4402      	add	r2, r0
 80063e0:	4603      	mov	r3, r0
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d100      	bne.n	80063e8 <memset+0xa>
 80063e6:	4770      	bx	lr
 80063e8:	f803 1b01 	strb.w	r1, [r3], #1
 80063ec:	e7f9      	b.n	80063e2 <memset+0x4>
	...

080063f0 <sbrk_aligned>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	4e0e      	ldr	r6, [pc, #56]	; (800642c <sbrk_aligned+0x3c>)
 80063f4:	460c      	mov	r4, r1
 80063f6:	6831      	ldr	r1, [r6, #0]
 80063f8:	4605      	mov	r5, r0
 80063fa:	b911      	cbnz	r1, 8006402 <sbrk_aligned+0x12>
 80063fc:	f000 f934 	bl	8006668 <_sbrk_r>
 8006400:	6030      	str	r0, [r6, #0]
 8006402:	4621      	mov	r1, r4
 8006404:	4628      	mov	r0, r5
 8006406:	f000 f92f 	bl	8006668 <_sbrk_r>
 800640a:	1c43      	adds	r3, r0, #1
 800640c:	d00a      	beq.n	8006424 <sbrk_aligned+0x34>
 800640e:	1cc4      	adds	r4, r0, #3
 8006410:	f024 0403 	bic.w	r4, r4, #3
 8006414:	42a0      	cmp	r0, r4
 8006416:	d007      	beq.n	8006428 <sbrk_aligned+0x38>
 8006418:	1a21      	subs	r1, r4, r0
 800641a:	4628      	mov	r0, r5
 800641c:	f000 f924 	bl	8006668 <_sbrk_r>
 8006420:	3001      	adds	r0, #1
 8006422:	d101      	bne.n	8006428 <sbrk_aligned+0x38>
 8006424:	f04f 34ff 	mov.w	r4, #4294967295
 8006428:	4620      	mov	r0, r4
 800642a:	bd70      	pop	{r4, r5, r6, pc}
 800642c:	20004b3c 	.word	0x20004b3c

08006430 <_malloc_r>:
 8006430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006434:	1ccd      	adds	r5, r1, #3
 8006436:	f025 0503 	bic.w	r5, r5, #3
 800643a:	3508      	adds	r5, #8
 800643c:	2d0c      	cmp	r5, #12
 800643e:	bf38      	it	cc
 8006440:	250c      	movcc	r5, #12
 8006442:	2d00      	cmp	r5, #0
 8006444:	4607      	mov	r7, r0
 8006446:	db01      	blt.n	800644c <_malloc_r+0x1c>
 8006448:	42a9      	cmp	r1, r5
 800644a:	d905      	bls.n	8006458 <_malloc_r+0x28>
 800644c:	230c      	movs	r3, #12
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	2600      	movs	r6, #0
 8006452:	4630      	mov	r0, r6
 8006454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006458:	4e2e      	ldr	r6, [pc, #184]	; (8006514 <_malloc_r+0xe4>)
 800645a:	f000 fa87 	bl	800696c <__malloc_lock>
 800645e:	6833      	ldr	r3, [r6, #0]
 8006460:	461c      	mov	r4, r3
 8006462:	bb34      	cbnz	r4, 80064b2 <_malloc_r+0x82>
 8006464:	4629      	mov	r1, r5
 8006466:	4638      	mov	r0, r7
 8006468:	f7ff ffc2 	bl	80063f0 <sbrk_aligned>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	4604      	mov	r4, r0
 8006470:	d14d      	bne.n	800650e <_malloc_r+0xde>
 8006472:	6834      	ldr	r4, [r6, #0]
 8006474:	4626      	mov	r6, r4
 8006476:	2e00      	cmp	r6, #0
 8006478:	d140      	bne.n	80064fc <_malloc_r+0xcc>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	4631      	mov	r1, r6
 800647e:	4638      	mov	r0, r7
 8006480:	eb04 0803 	add.w	r8, r4, r3
 8006484:	f000 f8f0 	bl	8006668 <_sbrk_r>
 8006488:	4580      	cmp	r8, r0
 800648a:	d13a      	bne.n	8006502 <_malloc_r+0xd2>
 800648c:	6821      	ldr	r1, [r4, #0]
 800648e:	3503      	adds	r5, #3
 8006490:	1a6d      	subs	r5, r5, r1
 8006492:	f025 0503 	bic.w	r5, r5, #3
 8006496:	3508      	adds	r5, #8
 8006498:	2d0c      	cmp	r5, #12
 800649a:	bf38      	it	cc
 800649c:	250c      	movcc	r5, #12
 800649e:	4629      	mov	r1, r5
 80064a0:	4638      	mov	r0, r7
 80064a2:	f7ff ffa5 	bl	80063f0 <sbrk_aligned>
 80064a6:	3001      	adds	r0, #1
 80064a8:	d02b      	beq.n	8006502 <_malloc_r+0xd2>
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	442b      	add	r3, r5
 80064ae:	6023      	str	r3, [r4, #0]
 80064b0:	e00e      	b.n	80064d0 <_malloc_r+0xa0>
 80064b2:	6822      	ldr	r2, [r4, #0]
 80064b4:	1b52      	subs	r2, r2, r5
 80064b6:	d41e      	bmi.n	80064f6 <_malloc_r+0xc6>
 80064b8:	2a0b      	cmp	r2, #11
 80064ba:	d916      	bls.n	80064ea <_malloc_r+0xba>
 80064bc:	1961      	adds	r1, r4, r5
 80064be:	42a3      	cmp	r3, r4
 80064c0:	6025      	str	r5, [r4, #0]
 80064c2:	bf18      	it	ne
 80064c4:	6059      	strne	r1, [r3, #4]
 80064c6:	6863      	ldr	r3, [r4, #4]
 80064c8:	bf08      	it	eq
 80064ca:	6031      	streq	r1, [r6, #0]
 80064cc:	5162      	str	r2, [r4, r5]
 80064ce:	604b      	str	r3, [r1, #4]
 80064d0:	4638      	mov	r0, r7
 80064d2:	f104 060b 	add.w	r6, r4, #11
 80064d6:	f000 fa4f 	bl	8006978 <__malloc_unlock>
 80064da:	f026 0607 	bic.w	r6, r6, #7
 80064de:	1d23      	adds	r3, r4, #4
 80064e0:	1af2      	subs	r2, r6, r3
 80064e2:	d0b6      	beq.n	8006452 <_malloc_r+0x22>
 80064e4:	1b9b      	subs	r3, r3, r6
 80064e6:	50a3      	str	r3, [r4, r2]
 80064e8:	e7b3      	b.n	8006452 <_malloc_r+0x22>
 80064ea:	6862      	ldr	r2, [r4, #4]
 80064ec:	42a3      	cmp	r3, r4
 80064ee:	bf0c      	ite	eq
 80064f0:	6032      	streq	r2, [r6, #0]
 80064f2:	605a      	strne	r2, [r3, #4]
 80064f4:	e7ec      	b.n	80064d0 <_malloc_r+0xa0>
 80064f6:	4623      	mov	r3, r4
 80064f8:	6864      	ldr	r4, [r4, #4]
 80064fa:	e7b2      	b.n	8006462 <_malloc_r+0x32>
 80064fc:	4634      	mov	r4, r6
 80064fe:	6876      	ldr	r6, [r6, #4]
 8006500:	e7b9      	b.n	8006476 <_malloc_r+0x46>
 8006502:	230c      	movs	r3, #12
 8006504:	603b      	str	r3, [r7, #0]
 8006506:	4638      	mov	r0, r7
 8006508:	f000 fa36 	bl	8006978 <__malloc_unlock>
 800650c:	e7a1      	b.n	8006452 <_malloc_r+0x22>
 800650e:	6025      	str	r5, [r4, #0]
 8006510:	e7de      	b.n	80064d0 <_malloc_r+0xa0>
 8006512:	bf00      	nop
 8006514:	20004b38 	.word	0x20004b38

08006518 <rand>:
 8006518:	4b16      	ldr	r3, [pc, #88]	; (8006574 <rand+0x5c>)
 800651a:	b510      	push	{r4, lr}
 800651c:	681c      	ldr	r4, [r3, #0]
 800651e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006520:	b9b3      	cbnz	r3, 8006550 <rand+0x38>
 8006522:	2018      	movs	r0, #24
 8006524:	f000 fa1a 	bl	800695c <malloc>
 8006528:	63a0      	str	r0, [r4, #56]	; 0x38
 800652a:	b928      	cbnz	r0, 8006538 <rand+0x20>
 800652c:	4602      	mov	r2, r0
 800652e:	4b12      	ldr	r3, [pc, #72]	; (8006578 <rand+0x60>)
 8006530:	4812      	ldr	r0, [pc, #72]	; (800657c <rand+0x64>)
 8006532:	214e      	movs	r1, #78	; 0x4e
 8006534:	f000 f8fe 	bl	8006734 <__assert_func>
 8006538:	4a11      	ldr	r2, [pc, #68]	; (8006580 <rand+0x68>)
 800653a:	4b12      	ldr	r3, [pc, #72]	; (8006584 <rand+0x6c>)
 800653c:	e9c0 2300 	strd	r2, r3, [r0]
 8006540:	4b11      	ldr	r3, [pc, #68]	; (8006588 <rand+0x70>)
 8006542:	6083      	str	r3, [r0, #8]
 8006544:	230b      	movs	r3, #11
 8006546:	8183      	strh	r3, [r0, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	2300      	movs	r3, #0
 800654c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006550:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006552:	4a0e      	ldr	r2, [pc, #56]	; (800658c <rand+0x74>)
 8006554:	6920      	ldr	r0, [r4, #16]
 8006556:	6963      	ldr	r3, [r4, #20]
 8006558:	490d      	ldr	r1, [pc, #52]	; (8006590 <rand+0x78>)
 800655a:	4342      	muls	r2, r0
 800655c:	fb01 2203 	mla	r2, r1, r3, r2
 8006560:	fba0 0101 	umull	r0, r1, r0, r1
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	eb42 0001 	adc.w	r0, r2, r1
 800656a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800656e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006572:	bd10      	pop	{r4, pc}
 8006574:	20000010 	.word	0x20000010
 8006578:	08007444 	.word	0x08007444
 800657c:	0800745b 	.word	0x0800745b
 8006580:	abcd330e 	.word	0xabcd330e
 8006584:	e66d1234 	.word	0xe66d1234
 8006588:	0005deec 	.word	0x0005deec
 800658c:	5851f42d 	.word	0x5851f42d
 8006590:	4c957f2d 	.word	0x4c957f2d

08006594 <cleanup_glue>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	460c      	mov	r4, r1
 8006598:	6809      	ldr	r1, [r1, #0]
 800659a:	4605      	mov	r5, r0
 800659c:	b109      	cbz	r1, 80065a2 <cleanup_glue+0xe>
 800659e:	f7ff fff9 	bl	8006594 <cleanup_glue>
 80065a2:	4621      	mov	r1, r4
 80065a4:	4628      	mov	r0, r5
 80065a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065aa:	f000 b9eb 	b.w	8006984 <_free_r>
	...

080065b0 <_reclaim_reent>:
 80065b0:	4b2c      	ldr	r3, [pc, #176]	; (8006664 <_reclaim_reent+0xb4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4283      	cmp	r3, r0
 80065b6:	b570      	push	{r4, r5, r6, lr}
 80065b8:	4604      	mov	r4, r0
 80065ba:	d051      	beq.n	8006660 <_reclaim_reent+0xb0>
 80065bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80065be:	b143      	cbz	r3, 80065d2 <_reclaim_reent+0x22>
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d14a      	bne.n	800665c <_reclaim_reent+0xac>
 80065c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065c8:	6819      	ldr	r1, [r3, #0]
 80065ca:	b111      	cbz	r1, 80065d2 <_reclaim_reent+0x22>
 80065cc:	4620      	mov	r0, r4
 80065ce:	f000 f9d9 	bl	8006984 <_free_r>
 80065d2:	6961      	ldr	r1, [r4, #20]
 80065d4:	b111      	cbz	r1, 80065dc <_reclaim_reent+0x2c>
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 f9d4 	bl	8006984 <_free_r>
 80065dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80065de:	b111      	cbz	r1, 80065e6 <_reclaim_reent+0x36>
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 f9cf 	bl	8006984 <_free_r>
 80065e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80065e8:	b111      	cbz	r1, 80065f0 <_reclaim_reent+0x40>
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 f9ca 	bl	8006984 <_free_r>
 80065f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80065f2:	b111      	cbz	r1, 80065fa <_reclaim_reent+0x4a>
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 f9c5 	bl	8006984 <_free_r>
 80065fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80065fc:	b111      	cbz	r1, 8006604 <_reclaim_reent+0x54>
 80065fe:	4620      	mov	r0, r4
 8006600:	f000 f9c0 	bl	8006984 <_free_r>
 8006604:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006606:	b111      	cbz	r1, 800660e <_reclaim_reent+0x5e>
 8006608:	4620      	mov	r0, r4
 800660a:	f000 f9bb 	bl	8006984 <_free_r>
 800660e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006610:	b111      	cbz	r1, 8006618 <_reclaim_reent+0x68>
 8006612:	4620      	mov	r0, r4
 8006614:	f000 f9b6 	bl	8006984 <_free_r>
 8006618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800661a:	b111      	cbz	r1, 8006622 <_reclaim_reent+0x72>
 800661c:	4620      	mov	r0, r4
 800661e:	f000 f9b1 	bl	8006984 <_free_r>
 8006622:	69a3      	ldr	r3, [r4, #24]
 8006624:	b1e3      	cbz	r3, 8006660 <_reclaim_reent+0xb0>
 8006626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006628:	4620      	mov	r0, r4
 800662a:	4798      	blx	r3
 800662c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800662e:	b1b9      	cbz	r1, 8006660 <_reclaim_reent+0xb0>
 8006630:	4620      	mov	r0, r4
 8006632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006636:	f7ff bfad 	b.w	8006594 <cleanup_glue>
 800663a:	5949      	ldr	r1, [r1, r5]
 800663c:	b941      	cbnz	r1, 8006650 <_reclaim_reent+0xa0>
 800663e:	3504      	adds	r5, #4
 8006640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006642:	2d80      	cmp	r5, #128	; 0x80
 8006644:	68d9      	ldr	r1, [r3, #12]
 8006646:	d1f8      	bne.n	800663a <_reclaim_reent+0x8a>
 8006648:	4620      	mov	r0, r4
 800664a:	f000 f99b 	bl	8006984 <_free_r>
 800664e:	e7ba      	b.n	80065c6 <_reclaim_reent+0x16>
 8006650:	680e      	ldr	r6, [r1, #0]
 8006652:	4620      	mov	r0, r4
 8006654:	f000 f996 	bl	8006984 <_free_r>
 8006658:	4631      	mov	r1, r6
 800665a:	e7ef      	b.n	800663c <_reclaim_reent+0x8c>
 800665c:	2500      	movs	r5, #0
 800665e:	e7ef      	b.n	8006640 <_reclaim_reent+0x90>
 8006660:	bd70      	pop	{r4, r5, r6, pc}
 8006662:	bf00      	nop
 8006664:	20000010 	.word	0x20000010

08006668 <_sbrk_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4d06      	ldr	r5, [pc, #24]	; (8006684 <_sbrk_r+0x1c>)
 800666c:	2300      	movs	r3, #0
 800666e:	4604      	mov	r4, r0
 8006670:	4608      	mov	r0, r1
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	f7fa fad0 	bl	8000c18 <_sbrk>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d102      	bne.n	8006682 <_sbrk_r+0x1a>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	b103      	cbz	r3, 8006682 <_sbrk_r+0x1a>
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	20004b40 	.word	0x20004b40

08006688 <__sread>:
 8006688:	b510      	push	{r4, lr}
 800668a:	460c      	mov	r4, r1
 800668c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006690:	f000 fcb2 	bl	8006ff8 <_read_r>
 8006694:	2800      	cmp	r0, #0
 8006696:	bfab      	itete	ge
 8006698:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800669a:	89a3      	ldrhlt	r3, [r4, #12]
 800669c:	181b      	addge	r3, r3, r0
 800669e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066a2:	bfac      	ite	ge
 80066a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80066a6:	81a3      	strhlt	r3, [r4, #12]
 80066a8:	bd10      	pop	{r4, pc}

080066aa <__swrite>:
 80066aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ae:	461f      	mov	r7, r3
 80066b0:	898b      	ldrh	r3, [r1, #12]
 80066b2:	05db      	lsls	r3, r3, #23
 80066b4:	4605      	mov	r5, r0
 80066b6:	460c      	mov	r4, r1
 80066b8:	4616      	mov	r6, r2
 80066ba:	d505      	bpl.n	80066c8 <__swrite+0x1e>
 80066bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c0:	2302      	movs	r3, #2
 80066c2:	2200      	movs	r2, #0
 80066c4:	f000 f938 	bl	8006938 <_lseek_r>
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066d2:	81a3      	strh	r3, [r4, #12]
 80066d4:	4632      	mov	r2, r6
 80066d6:	463b      	mov	r3, r7
 80066d8:	4628      	mov	r0, r5
 80066da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066de:	f000 b817 	b.w	8006710 <_write_r>

080066e2 <__sseek>:
 80066e2:	b510      	push	{r4, lr}
 80066e4:	460c      	mov	r4, r1
 80066e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ea:	f000 f925 	bl	8006938 <_lseek_r>
 80066ee:	1c43      	adds	r3, r0, #1
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	bf15      	itete	ne
 80066f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80066f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066fe:	81a3      	strheq	r3, [r4, #12]
 8006700:	bf18      	it	ne
 8006702:	81a3      	strhne	r3, [r4, #12]
 8006704:	bd10      	pop	{r4, pc}

08006706 <__sclose>:
 8006706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670a:	f000 b831 	b.w	8006770 <_close_r>
	...

08006710 <_write_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4d07      	ldr	r5, [pc, #28]	; (8006730 <_write_r+0x20>)
 8006714:	4604      	mov	r4, r0
 8006716:	4608      	mov	r0, r1
 8006718:	4611      	mov	r1, r2
 800671a:	2200      	movs	r2, #0
 800671c:	602a      	str	r2, [r5, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	f7fa fa29 	bl	8000b76 <_write>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_write_r+0x1e>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	b103      	cbz	r3, 800672e <_write_r+0x1e>
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	20004b40 	.word	0x20004b40

08006734 <__assert_func>:
 8006734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006736:	4614      	mov	r4, r2
 8006738:	461a      	mov	r2, r3
 800673a:	4b09      	ldr	r3, [pc, #36]	; (8006760 <__assert_func+0x2c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4605      	mov	r5, r0
 8006740:	68d8      	ldr	r0, [r3, #12]
 8006742:	b14c      	cbz	r4, 8006758 <__assert_func+0x24>
 8006744:	4b07      	ldr	r3, [pc, #28]	; (8006764 <__assert_func+0x30>)
 8006746:	9100      	str	r1, [sp, #0]
 8006748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800674c:	4906      	ldr	r1, [pc, #24]	; (8006768 <__assert_func+0x34>)
 800674e:	462b      	mov	r3, r5
 8006750:	f000 f8e0 	bl	8006914 <fiprintf>
 8006754:	f000 fd22 	bl	800719c <abort>
 8006758:	4b04      	ldr	r3, [pc, #16]	; (800676c <__assert_func+0x38>)
 800675a:	461c      	mov	r4, r3
 800675c:	e7f3      	b.n	8006746 <__assert_func+0x12>
 800675e:	bf00      	nop
 8006760:	20000010 	.word	0x20000010
 8006764:	080074b6 	.word	0x080074b6
 8006768:	080074c3 	.word	0x080074c3
 800676c:	080074f1 	.word	0x080074f1

08006770 <_close_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4d06      	ldr	r5, [pc, #24]	; (800678c <_close_r+0x1c>)
 8006774:	2300      	movs	r3, #0
 8006776:	4604      	mov	r4, r0
 8006778:	4608      	mov	r0, r1
 800677a:	602b      	str	r3, [r5, #0]
 800677c:	f7fa fa17 	bl	8000bae <_close>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d102      	bne.n	800678a <_close_r+0x1a>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	b103      	cbz	r3, 800678a <_close_r+0x1a>
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	20004b40 	.word	0x20004b40

08006790 <__sflush_r>:
 8006790:	898a      	ldrh	r2, [r1, #12]
 8006792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006796:	4605      	mov	r5, r0
 8006798:	0710      	lsls	r0, r2, #28
 800679a:	460c      	mov	r4, r1
 800679c:	d458      	bmi.n	8006850 <__sflush_r+0xc0>
 800679e:	684b      	ldr	r3, [r1, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dc05      	bgt.n	80067b0 <__sflush_r+0x20>
 80067a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	dc02      	bgt.n	80067b0 <__sflush_r+0x20>
 80067aa:	2000      	movs	r0, #0
 80067ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067b2:	2e00      	cmp	r6, #0
 80067b4:	d0f9      	beq.n	80067aa <__sflush_r+0x1a>
 80067b6:	2300      	movs	r3, #0
 80067b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067bc:	682f      	ldr	r7, [r5, #0]
 80067be:	602b      	str	r3, [r5, #0]
 80067c0:	d032      	beq.n	8006828 <__sflush_r+0x98>
 80067c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067c4:	89a3      	ldrh	r3, [r4, #12]
 80067c6:	075a      	lsls	r2, r3, #29
 80067c8:	d505      	bpl.n	80067d6 <__sflush_r+0x46>
 80067ca:	6863      	ldr	r3, [r4, #4]
 80067cc:	1ac0      	subs	r0, r0, r3
 80067ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067d0:	b10b      	cbz	r3, 80067d6 <__sflush_r+0x46>
 80067d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067d4:	1ac0      	subs	r0, r0, r3
 80067d6:	2300      	movs	r3, #0
 80067d8:	4602      	mov	r2, r0
 80067da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067dc:	6a21      	ldr	r1, [r4, #32]
 80067de:	4628      	mov	r0, r5
 80067e0:	47b0      	blx	r6
 80067e2:	1c43      	adds	r3, r0, #1
 80067e4:	89a3      	ldrh	r3, [r4, #12]
 80067e6:	d106      	bne.n	80067f6 <__sflush_r+0x66>
 80067e8:	6829      	ldr	r1, [r5, #0]
 80067ea:	291d      	cmp	r1, #29
 80067ec:	d82c      	bhi.n	8006848 <__sflush_r+0xb8>
 80067ee:	4a2a      	ldr	r2, [pc, #168]	; (8006898 <__sflush_r+0x108>)
 80067f0:	40ca      	lsrs	r2, r1
 80067f2:	07d6      	lsls	r6, r2, #31
 80067f4:	d528      	bpl.n	8006848 <__sflush_r+0xb8>
 80067f6:	2200      	movs	r2, #0
 80067f8:	6062      	str	r2, [r4, #4]
 80067fa:	04d9      	lsls	r1, r3, #19
 80067fc:	6922      	ldr	r2, [r4, #16]
 80067fe:	6022      	str	r2, [r4, #0]
 8006800:	d504      	bpl.n	800680c <__sflush_r+0x7c>
 8006802:	1c42      	adds	r2, r0, #1
 8006804:	d101      	bne.n	800680a <__sflush_r+0x7a>
 8006806:	682b      	ldr	r3, [r5, #0]
 8006808:	b903      	cbnz	r3, 800680c <__sflush_r+0x7c>
 800680a:	6560      	str	r0, [r4, #84]	; 0x54
 800680c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800680e:	602f      	str	r7, [r5, #0]
 8006810:	2900      	cmp	r1, #0
 8006812:	d0ca      	beq.n	80067aa <__sflush_r+0x1a>
 8006814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006818:	4299      	cmp	r1, r3
 800681a:	d002      	beq.n	8006822 <__sflush_r+0x92>
 800681c:	4628      	mov	r0, r5
 800681e:	f000 f8b1 	bl	8006984 <_free_r>
 8006822:	2000      	movs	r0, #0
 8006824:	6360      	str	r0, [r4, #52]	; 0x34
 8006826:	e7c1      	b.n	80067ac <__sflush_r+0x1c>
 8006828:	6a21      	ldr	r1, [r4, #32]
 800682a:	2301      	movs	r3, #1
 800682c:	4628      	mov	r0, r5
 800682e:	47b0      	blx	r6
 8006830:	1c41      	adds	r1, r0, #1
 8006832:	d1c7      	bne.n	80067c4 <__sflush_r+0x34>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0c4      	beq.n	80067c4 <__sflush_r+0x34>
 800683a:	2b1d      	cmp	r3, #29
 800683c:	d001      	beq.n	8006842 <__sflush_r+0xb2>
 800683e:	2b16      	cmp	r3, #22
 8006840:	d101      	bne.n	8006846 <__sflush_r+0xb6>
 8006842:	602f      	str	r7, [r5, #0]
 8006844:	e7b1      	b.n	80067aa <__sflush_r+0x1a>
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800684c:	81a3      	strh	r3, [r4, #12]
 800684e:	e7ad      	b.n	80067ac <__sflush_r+0x1c>
 8006850:	690f      	ldr	r7, [r1, #16]
 8006852:	2f00      	cmp	r7, #0
 8006854:	d0a9      	beq.n	80067aa <__sflush_r+0x1a>
 8006856:	0793      	lsls	r3, r2, #30
 8006858:	680e      	ldr	r6, [r1, #0]
 800685a:	bf08      	it	eq
 800685c:	694b      	ldreq	r3, [r1, #20]
 800685e:	600f      	str	r7, [r1, #0]
 8006860:	bf18      	it	ne
 8006862:	2300      	movne	r3, #0
 8006864:	eba6 0807 	sub.w	r8, r6, r7
 8006868:	608b      	str	r3, [r1, #8]
 800686a:	f1b8 0f00 	cmp.w	r8, #0
 800686e:	dd9c      	ble.n	80067aa <__sflush_r+0x1a>
 8006870:	6a21      	ldr	r1, [r4, #32]
 8006872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006874:	4643      	mov	r3, r8
 8006876:	463a      	mov	r2, r7
 8006878:	4628      	mov	r0, r5
 800687a:	47b0      	blx	r6
 800687c:	2800      	cmp	r0, #0
 800687e:	dc06      	bgt.n	800688e <__sflush_r+0xfe>
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	f04f 30ff 	mov.w	r0, #4294967295
 800688c:	e78e      	b.n	80067ac <__sflush_r+0x1c>
 800688e:	4407      	add	r7, r0
 8006890:	eba8 0800 	sub.w	r8, r8, r0
 8006894:	e7e9      	b.n	800686a <__sflush_r+0xda>
 8006896:	bf00      	nop
 8006898:	20400001 	.word	0x20400001

0800689c <_fflush_r>:
 800689c:	b538      	push	{r3, r4, r5, lr}
 800689e:	690b      	ldr	r3, [r1, #16]
 80068a0:	4605      	mov	r5, r0
 80068a2:	460c      	mov	r4, r1
 80068a4:	b913      	cbnz	r3, 80068ac <_fflush_r+0x10>
 80068a6:	2500      	movs	r5, #0
 80068a8:	4628      	mov	r0, r5
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	b118      	cbz	r0, 80068b6 <_fflush_r+0x1a>
 80068ae:	6983      	ldr	r3, [r0, #24]
 80068b0:	b90b      	cbnz	r3, 80068b6 <_fflush_r+0x1a>
 80068b2:	f7ff fcc1 	bl	8006238 <__sinit>
 80068b6:	4b14      	ldr	r3, [pc, #80]	; (8006908 <_fflush_r+0x6c>)
 80068b8:	429c      	cmp	r4, r3
 80068ba:	d11b      	bne.n	80068f4 <_fflush_r+0x58>
 80068bc:	686c      	ldr	r4, [r5, #4]
 80068be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0ef      	beq.n	80068a6 <_fflush_r+0xa>
 80068c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068c8:	07d0      	lsls	r0, r2, #31
 80068ca:	d404      	bmi.n	80068d6 <_fflush_r+0x3a>
 80068cc:	0599      	lsls	r1, r3, #22
 80068ce:	d402      	bmi.n	80068d6 <_fflush_r+0x3a>
 80068d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068d2:	f7ff fd74 	bl	80063be <__retarget_lock_acquire_recursive>
 80068d6:	4628      	mov	r0, r5
 80068d8:	4621      	mov	r1, r4
 80068da:	f7ff ff59 	bl	8006790 <__sflush_r>
 80068de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068e0:	07da      	lsls	r2, r3, #31
 80068e2:	4605      	mov	r5, r0
 80068e4:	d4e0      	bmi.n	80068a8 <_fflush_r+0xc>
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	059b      	lsls	r3, r3, #22
 80068ea:	d4dd      	bmi.n	80068a8 <_fflush_r+0xc>
 80068ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ee:	f7ff fd67 	bl	80063c0 <__retarget_lock_release_recursive>
 80068f2:	e7d9      	b.n	80068a8 <_fflush_r+0xc>
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <_fflush_r+0x70>)
 80068f6:	429c      	cmp	r4, r3
 80068f8:	d101      	bne.n	80068fe <_fflush_r+0x62>
 80068fa:	68ac      	ldr	r4, [r5, #8]
 80068fc:	e7df      	b.n	80068be <_fflush_r+0x22>
 80068fe:	4b04      	ldr	r3, [pc, #16]	; (8006910 <_fflush_r+0x74>)
 8006900:	429c      	cmp	r4, r3
 8006902:	bf08      	it	eq
 8006904:	68ec      	ldreq	r4, [r5, #12]
 8006906:	e7da      	b.n	80068be <_fflush_r+0x22>
 8006908:	08007400 	.word	0x08007400
 800690c:	08007420 	.word	0x08007420
 8006910:	080073e0 	.word	0x080073e0

08006914 <fiprintf>:
 8006914:	b40e      	push	{r1, r2, r3}
 8006916:	b503      	push	{r0, r1, lr}
 8006918:	4601      	mov	r1, r0
 800691a:	ab03      	add	r3, sp, #12
 800691c:	4805      	ldr	r0, [pc, #20]	; (8006934 <fiprintf+0x20>)
 800691e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006922:	6800      	ldr	r0, [r0, #0]
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	f000 f8a3 	bl	8006a70 <_vfiprintf_r>
 800692a:	b002      	add	sp, #8
 800692c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006930:	b003      	add	sp, #12
 8006932:	4770      	bx	lr
 8006934:	20000010 	.word	0x20000010

08006938 <_lseek_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4d07      	ldr	r5, [pc, #28]	; (8006958 <_lseek_r+0x20>)
 800693c:	4604      	mov	r4, r0
 800693e:	4608      	mov	r0, r1
 8006940:	4611      	mov	r1, r2
 8006942:	2200      	movs	r2, #0
 8006944:	602a      	str	r2, [r5, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	f7fa f958 	bl	8000bfc <_lseek>
 800694c:	1c43      	adds	r3, r0, #1
 800694e:	d102      	bne.n	8006956 <_lseek_r+0x1e>
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	b103      	cbz	r3, 8006956 <_lseek_r+0x1e>
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	bd38      	pop	{r3, r4, r5, pc}
 8006958:	20004b40 	.word	0x20004b40

0800695c <malloc>:
 800695c:	4b02      	ldr	r3, [pc, #8]	; (8006968 <malloc+0xc>)
 800695e:	4601      	mov	r1, r0
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	f7ff bd65 	b.w	8006430 <_malloc_r>
 8006966:	bf00      	nop
 8006968:	20000010 	.word	0x20000010

0800696c <__malloc_lock>:
 800696c:	4801      	ldr	r0, [pc, #4]	; (8006974 <__malloc_lock+0x8>)
 800696e:	f7ff bd26 	b.w	80063be <__retarget_lock_acquire_recursive>
 8006972:	bf00      	nop
 8006974:	20004b34 	.word	0x20004b34

08006978 <__malloc_unlock>:
 8006978:	4801      	ldr	r0, [pc, #4]	; (8006980 <__malloc_unlock+0x8>)
 800697a:	f7ff bd21 	b.w	80063c0 <__retarget_lock_release_recursive>
 800697e:	bf00      	nop
 8006980:	20004b34 	.word	0x20004b34

08006984 <_free_r>:
 8006984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006986:	2900      	cmp	r1, #0
 8006988:	d044      	beq.n	8006a14 <_free_r+0x90>
 800698a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800698e:	9001      	str	r0, [sp, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	f1a1 0404 	sub.w	r4, r1, #4
 8006996:	bfb8      	it	lt
 8006998:	18e4      	addlt	r4, r4, r3
 800699a:	f7ff ffe7 	bl	800696c <__malloc_lock>
 800699e:	4a1e      	ldr	r2, [pc, #120]	; (8006a18 <_free_r+0x94>)
 80069a0:	9801      	ldr	r0, [sp, #4]
 80069a2:	6813      	ldr	r3, [r2, #0]
 80069a4:	b933      	cbnz	r3, 80069b4 <_free_r+0x30>
 80069a6:	6063      	str	r3, [r4, #4]
 80069a8:	6014      	str	r4, [r2, #0]
 80069aa:	b003      	add	sp, #12
 80069ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069b0:	f7ff bfe2 	b.w	8006978 <__malloc_unlock>
 80069b4:	42a3      	cmp	r3, r4
 80069b6:	d908      	bls.n	80069ca <_free_r+0x46>
 80069b8:	6825      	ldr	r5, [r4, #0]
 80069ba:	1961      	adds	r1, r4, r5
 80069bc:	428b      	cmp	r3, r1
 80069be:	bf01      	itttt	eq
 80069c0:	6819      	ldreq	r1, [r3, #0]
 80069c2:	685b      	ldreq	r3, [r3, #4]
 80069c4:	1949      	addeq	r1, r1, r5
 80069c6:	6021      	streq	r1, [r4, #0]
 80069c8:	e7ed      	b.n	80069a6 <_free_r+0x22>
 80069ca:	461a      	mov	r2, r3
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	b10b      	cbz	r3, 80069d4 <_free_r+0x50>
 80069d0:	42a3      	cmp	r3, r4
 80069d2:	d9fa      	bls.n	80069ca <_free_r+0x46>
 80069d4:	6811      	ldr	r1, [r2, #0]
 80069d6:	1855      	adds	r5, r2, r1
 80069d8:	42a5      	cmp	r5, r4
 80069da:	d10b      	bne.n	80069f4 <_free_r+0x70>
 80069dc:	6824      	ldr	r4, [r4, #0]
 80069de:	4421      	add	r1, r4
 80069e0:	1854      	adds	r4, r2, r1
 80069e2:	42a3      	cmp	r3, r4
 80069e4:	6011      	str	r1, [r2, #0]
 80069e6:	d1e0      	bne.n	80069aa <_free_r+0x26>
 80069e8:	681c      	ldr	r4, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	6053      	str	r3, [r2, #4]
 80069ee:	4421      	add	r1, r4
 80069f0:	6011      	str	r1, [r2, #0]
 80069f2:	e7da      	b.n	80069aa <_free_r+0x26>
 80069f4:	d902      	bls.n	80069fc <_free_r+0x78>
 80069f6:	230c      	movs	r3, #12
 80069f8:	6003      	str	r3, [r0, #0]
 80069fa:	e7d6      	b.n	80069aa <_free_r+0x26>
 80069fc:	6825      	ldr	r5, [r4, #0]
 80069fe:	1961      	adds	r1, r4, r5
 8006a00:	428b      	cmp	r3, r1
 8006a02:	bf04      	itt	eq
 8006a04:	6819      	ldreq	r1, [r3, #0]
 8006a06:	685b      	ldreq	r3, [r3, #4]
 8006a08:	6063      	str	r3, [r4, #4]
 8006a0a:	bf04      	itt	eq
 8006a0c:	1949      	addeq	r1, r1, r5
 8006a0e:	6021      	streq	r1, [r4, #0]
 8006a10:	6054      	str	r4, [r2, #4]
 8006a12:	e7ca      	b.n	80069aa <_free_r+0x26>
 8006a14:	b003      	add	sp, #12
 8006a16:	bd30      	pop	{r4, r5, pc}
 8006a18:	20004b38 	.word	0x20004b38

08006a1c <__sfputc_r>:
 8006a1c:	6893      	ldr	r3, [r2, #8]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	b410      	push	{r4}
 8006a24:	6093      	str	r3, [r2, #8]
 8006a26:	da08      	bge.n	8006a3a <__sfputc_r+0x1e>
 8006a28:	6994      	ldr	r4, [r2, #24]
 8006a2a:	42a3      	cmp	r3, r4
 8006a2c:	db01      	blt.n	8006a32 <__sfputc_r+0x16>
 8006a2e:	290a      	cmp	r1, #10
 8006a30:	d103      	bne.n	8006a3a <__sfputc_r+0x1e>
 8006a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a36:	f000 baf1 	b.w	800701c <__swbuf_r>
 8006a3a:	6813      	ldr	r3, [r2, #0]
 8006a3c:	1c58      	adds	r0, r3, #1
 8006a3e:	6010      	str	r0, [r2, #0]
 8006a40:	7019      	strb	r1, [r3, #0]
 8006a42:	4608      	mov	r0, r1
 8006a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <__sfputs_r>:
 8006a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	460f      	mov	r7, r1
 8006a50:	4614      	mov	r4, r2
 8006a52:	18d5      	adds	r5, r2, r3
 8006a54:	42ac      	cmp	r4, r5
 8006a56:	d101      	bne.n	8006a5c <__sfputs_r+0x12>
 8006a58:	2000      	movs	r0, #0
 8006a5a:	e007      	b.n	8006a6c <__sfputs_r+0x22>
 8006a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a60:	463a      	mov	r2, r7
 8006a62:	4630      	mov	r0, r6
 8006a64:	f7ff ffda 	bl	8006a1c <__sfputc_r>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d1f3      	bne.n	8006a54 <__sfputs_r+0xa>
 8006a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a70 <_vfiprintf_r>:
 8006a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	460d      	mov	r5, r1
 8006a76:	b09d      	sub	sp, #116	; 0x74
 8006a78:	4614      	mov	r4, r2
 8006a7a:	4698      	mov	r8, r3
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	b118      	cbz	r0, 8006a88 <_vfiprintf_r+0x18>
 8006a80:	6983      	ldr	r3, [r0, #24]
 8006a82:	b90b      	cbnz	r3, 8006a88 <_vfiprintf_r+0x18>
 8006a84:	f7ff fbd8 	bl	8006238 <__sinit>
 8006a88:	4b89      	ldr	r3, [pc, #548]	; (8006cb0 <_vfiprintf_r+0x240>)
 8006a8a:	429d      	cmp	r5, r3
 8006a8c:	d11b      	bne.n	8006ac6 <_vfiprintf_r+0x56>
 8006a8e:	6875      	ldr	r5, [r6, #4]
 8006a90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a92:	07d9      	lsls	r1, r3, #31
 8006a94:	d405      	bmi.n	8006aa2 <_vfiprintf_r+0x32>
 8006a96:	89ab      	ldrh	r3, [r5, #12]
 8006a98:	059a      	lsls	r2, r3, #22
 8006a9a:	d402      	bmi.n	8006aa2 <_vfiprintf_r+0x32>
 8006a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a9e:	f7ff fc8e 	bl	80063be <__retarget_lock_acquire_recursive>
 8006aa2:	89ab      	ldrh	r3, [r5, #12]
 8006aa4:	071b      	lsls	r3, r3, #28
 8006aa6:	d501      	bpl.n	8006aac <_vfiprintf_r+0x3c>
 8006aa8:	692b      	ldr	r3, [r5, #16]
 8006aaa:	b9eb      	cbnz	r3, 8006ae8 <_vfiprintf_r+0x78>
 8006aac:	4629      	mov	r1, r5
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f000 fb06 	bl	80070c0 <__swsetup_r>
 8006ab4:	b1c0      	cbz	r0, 8006ae8 <_vfiprintf_r+0x78>
 8006ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ab8:	07dc      	lsls	r4, r3, #31
 8006aba:	d50e      	bpl.n	8006ada <_vfiprintf_r+0x6a>
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	b01d      	add	sp, #116	; 0x74
 8006ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac6:	4b7b      	ldr	r3, [pc, #492]	; (8006cb4 <_vfiprintf_r+0x244>)
 8006ac8:	429d      	cmp	r5, r3
 8006aca:	d101      	bne.n	8006ad0 <_vfiprintf_r+0x60>
 8006acc:	68b5      	ldr	r5, [r6, #8]
 8006ace:	e7df      	b.n	8006a90 <_vfiprintf_r+0x20>
 8006ad0:	4b79      	ldr	r3, [pc, #484]	; (8006cb8 <_vfiprintf_r+0x248>)
 8006ad2:	429d      	cmp	r5, r3
 8006ad4:	bf08      	it	eq
 8006ad6:	68f5      	ldreq	r5, [r6, #12]
 8006ad8:	e7da      	b.n	8006a90 <_vfiprintf_r+0x20>
 8006ada:	89ab      	ldrh	r3, [r5, #12]
 8006adc:	0598      	lsls	r0, r3, #22
 8006ade:	d4ed      	bmi.n	8006abc <_vfiprintf_r+0x4c>
 8006ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ae2:	f7ff fc6d 	bl	80063c0 <__retarget_lock_release_recursive>
 8006ae6:	e7e9      	b.n	8006abc <_vfiprintf_r+0x4c>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9309      	str	r3, [sp, #36]	; 0x24
 8006aec:	2320      	movs	r3, #32
 8006aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006af6:	2330      	movs	r3, #48	; 0x30
 8006af8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006cbc <_vfiprintf_r+0x24c>
 8006afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b00:	f04f 0901 	mov.w	r9, #1
 8006b04:	4623      	mov	r3, r4
 8006b06:	469a      	mov	sl, r3
 8006b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b0c:	b10a      	cbz	r2, 8006b12 <_vfiprintf_r+0xa2>
 8006b0e:	2a25      	cmp	r2, #37	; 0x25
 8006b10:	d1f9      	bne.n	8006b06 <_vfiprintf_r+0x96>
 8006b12:	ebba 0b04 	subs.w	fp, sl, r4
 8006b16:	d00b      	beq.n	8006b30 <_vfiprintf_r+0xc0>
 8006b18:	465b      	mov	r3, fp
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	4629      	mov	r1, r5
 8006b1e:	4630      	mov	r0, r6
 8006b20:	f7ff ff93 	bl	8006a4a <__sfputs_r>
 8006b24:	3001      	adds	r0, #1
 8006b26:	f000 80aa 	beq.w	8006c7e <_vfiprintf_r+0x20e>
 8006b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b2c:	445a      	add	r2, fp
 8006b2e:	9209      	str	r2, [sp, #36]	; 0x24
 8006b30:	f89a 3000 	ldrb.w	r3, [sl]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80a2 	beq.w	8006c7e <_vfiprintf_r+0x20e>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b44:	f10a 0a01 	add.w	sl, sl, #1
 8006b48:	9304      	str	r3, [sp, #16]
 8006b4a:	9307      	str	r3, [sp, #28]
 8006b4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b50:	931a      	str	r3, [sp, #104]	; 0x68
 8006b52:	4654      	mov	r4, sl
 8006b54:	2205      	movs	r2, #5
 8006b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b5a:	4858      	ldr	r0, [pc, #352]	; (8006cbc <_vfiprintf_r+0x24c>)
 8006b5c:	f7f9 fb40 	bl	80001e0 <memchr>
 8006b60:	9a04      	ldr	r2, [sp, #16]
 8006b62:	b9d8      	cbnz	r0, 8006b9c <_vfiprintf_r+0x12c>
 8006b64:	06d1      	lsls	r1, r2, #27
 8006b66:	bf44      	itt	mi
 8006b68:	2320      	movmi	r3, #32
 8006b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b6e:	0713      	lsls	r3, r2, #28
 8006b70:	bf44      	itt	mi
 8006b72:	232b      	movmi	r3, #43	; 0x2b
 8006b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b78:	f89a 3000 	ldrb.w	r3, [sl]
 8006b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8006b7e:	d015      	beq.n	8006bac <_vfiprintf_r+0x13c>
 8006b80:	9a07      	ldr	r2, [sp, #28]
 8006b82:	4654      	mov	r4, sl
 8006b84:	2000      	movs	r0, #0
 8006b86:	f04f 0c0a 	mov.w	ip, #10
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b90:	3b30      	subs	r3, #48	; 0x30
 8006b92:	2b09      	cmp	r3, #9
 8006b94:	d94e      	bls.n	8006c34 <_vfiprintf_r+0x1c4>
 8006b96:	b1b0      	cbz	r0, 8006bc6 <_vfiprintf_r+0x156>
 8006b98:	9207      	str	r2, [sp, #28]
 8006b9a:	e014      	b.n	8006bc6 <_vfiprintf_r+0x156>
 8006b9c:	eba0 0308 	sub.w	r3, r0, r8
 8006ba0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	9304      	str	r3, [sp, #16]
 8006ba8:	46a2      	mov	sl, r4
 8006baa:	e7d2      	b.n	8006b52 <_vfiprintf_r+0xe2>
 8006bac:	9b03      	ldr	r3, [sp, #12]
 8006bae:	1d19      	adds	r1, r3, #4
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	9103      	str	r1, [sp, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	bfbb      	ittet	lt
 8006bb8:	425b      	neglt	r3, r3
 8006bba:	f042 0202 	orrlt.w	r2, r2, #2
 8006bbe:	9307      	strge	r3, [sp, #28]
 8006bc0:	9307      	strlt	r3, [sp, #28]
 8006bc2:	bfb8      	it	lt
 8006bc4:	9204      	strlt	r2, [sp, #16]
 8006bc6:	7823      	ldrb	r3, [r4, #0]
 8006bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8006bca:	d10c      	bne.n	8006be6 <_vfiprintf_r+0x176>
 8006bcc:	7863      	ldrb	r3, [r4, #1]
 8006bce:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd0:	d135      	bne.n	8006c3e <_vfiprintf_r+0x1ce>
 8006bd2:	9b03      	ldr	r3, [sp, #12]
 8006bd4:	1d1a      	adds	r2, r3, #4
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	9203      	str	r2, [sp, #12]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	bfb8      	it	lt
 8006bde:	f04f 33ff 	movlt.w	r3, #4294967295
 8006be2:	3402      	adds	r4, #2
 8006be4:	9305      	str	r3, [sp, #20]
 8006be6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ccc <_vfiprintf_r+0x25c>
 8006bea:	7821      	ldrb	r1, [r4, #0]
 8006bec:	2203      	movs	r2, #3
 8006bee:	4650      	mov	r0, sl
 8006bf0:	f7f9 faf6 	bl	80001e0 <memchr>
 8006bf4:	b140      	cbz	r0, 8006c08 <_vfiprintf_r+0x198>
 8006bf6:	2340      	movs	r3, #64	; 0x40
 8006bf8:	eba0 000a 	sub.w	r0, r0, sl
 8006bfc:	fa03 f000 	lsl.w	r0, r3, r0
 8006c00:	9b04      	ldr	r3, [sp, #16]
 8006c02:	4303      	orrs	r3, r0
 8006c04:	3401      	adds	r4, #1
 8006c06:	9304      	str	r3, [sp, #16]
 8006c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c0c:	482c      	ldr	r0, [pc, #176]	; (8006cc0 <_vfiprintf_r+0x250>)
 8006c0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c12:	2206      	movs	r2, #6
 8006c14:	f7f9 fae4 	bl	80001e0 <memchr>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d03f      	beq.n	8006c9c <_vfiprintf_r+0x22c>
 8006c1c:	4b29      	ldr	r3, [pc, #164]	; (8006cc4 <_vfiprintf_r+0x254>)
 8006c1e:	bb1b      	cbnz	r3, 8006c68 <_vfiprintf_r+0x1f8>
 8006c20:	9b03      	ldr	r3, [sp, #12]
 8006c22:	3307      	adds	r3, #7
 8006c24:	f023 0307 	bic.w	r3, r3, #7
 8006c28:	3308      	adds	r3, #8
 8006c2a:	9303      	str	r3, [sp, #12]
 8006c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2e:	443b      	add	r3, r7
 8006c30:	9309      	str	r3, [sp, #36]	; 0x24
 8006c32:	e767      	b.n	8006b04 <_vfiprintf_r+0x94>
 8006c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c38:	460c      	mov	r4, r1
 8006c3a:	2001      	movs	r0, #1
 8006c3c:	e7a5      	b.n	8006b8a <_vfiprintf_r+0x11a>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	3401      	adds	r4, #1
 8006c42:	9305      	str	r3, [sp, #20]
 8006c44:	4619      	mov	r1, r3
 8006c46:	f04f 0c0a 	mov.w	ip, #10
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c50:	3a30      	subs	r2, #48	; 0x30
 8006c52:	2a09      	cmp	r2, #9
 8006c54:	d903      	bls.n	8006c5e <_vfiprintf_r+0x1ee>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0c5      	beq.n	8006be6 <_vfiprintf_r+0x176>
 8006c5a:	9105      	str	r1, [sp, #20]
 8006c5c:	e7c3      	b.n	8006be6 <_vfiprintf_r+0x176>
 8006c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c62:	4604      	mov	r4, r0
 8006c64:	2301      	movs	r3, #1
 8006c66:	e7f0      	b.n	8006c4a <_vfiprintf_r+0x1da>
 8006c68:	ab03      	add	r3, sp, #12
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	462a      	mov	r2, r5
 8006c6e:	4b16      	ldr	r3, [pc, #88]	; (8006cc8 <_vfiprintf_r+0x258>)
 8006c70:	a904      	add	r1, sp, #16
 8006c72:	4630      	mov	r0, r6
 8006c74:	f3af 8000 	nop.w
 8006c78:	4607      	mov	r7, r0
 8006c7a:	1c78      	adds	r0, r7, #1
 8006c7c:	d1d6      	bne.n	8006c2c <_vfiprintf_r+0x1bc>
 8006c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c80:	07d9      	lsls	r1, r3, #31
 8006c82:	d405      	bmi.n	8006c90 <_vfiprintf_r+0x220>
 8006c84:	89ab      	ldrh	r3, [r5, #12]
 8006c86:	059a      	lsls	r2, r3, #22
 8006c88:	d402      	bmi.n	8006c90 <_vfiprintf_r+0x220>
 8006c8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c8c:	f7ff fb98 	bl	80063c0 <__retarget_lock_release_recursive>
 8006c90:	89ab      	ldrh	r3, [r5, #12]
 8006c92:	065b      	lsls	r3, r3, #25
 8006c94:	f53f af12 	bmi.w	8006abc <_vfiprintf_r+0x4c>
 8006c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c9a:	e711      	b.n	8006ac0 <_vfiprintf_r+0x50>
 8006c9c:	ab03      	add	r3, sp, #12
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	462a      	mov	r2, r5
 8006ca2:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <_vfiprintf_r+0x258>)
 8006ca4:	a904      	add	r1, sp, #16
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f000 f880 	bl	8006dac <_printf_i>
 8006cac:	e7e4      	b.n	8006c78 <_vfiprintf_r+0x208>
 8006cae:	bf00      	nop
 8006cb0:	08007400 	.word	0x08007400
 8006cb4:	08007420 	.word	0x08007420
 8006cb8:	080073e0 	.word	0x080073e0
 8006cbc:	080074f2 	.word	0x080074f2
 8006cc0:	080074fc 	.word	0x080074fc
 8006cc4:	00000000 	.word	0x00000000
 8006cc8:	08006a4b 	.word	0x08006a4b
 8006ccc:	080074f8 	.word	0x080074f8

08006cd0 <_printf_common>:
 8006cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	4616      	mov	r6, r2
 8006cd6:	4699      	mov	r9, r3
 8006cd8:	688a      	ldr	r2, [r1, #8]
 8006cda:	690b      	ldr	r3, [r1, #16]
 8006cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	bfb8      	it	lt
 8006ce4:	4613      	movlt	r3, r2
 8006ce6:	6033      	str	r3, [r6, #0]
 8006ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cec:	4607      	mov	r7, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	b10a      	cbz	r2, 8006cf6 <_printf_common+0x26>
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	6033      	str	r3, [r6, #0]
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	0699      	lsls	r1, r3, #26
 8006cfa:	bf42      	ittt	mi
 8006cfc:	6833      	ldrmi	r3, [r6, #0]
 8006cfe:	3302      	addmi	r3, #2
 8006d00:	6033      	strmi	r3, [r6, #0]
 8006d02:	6825      	ldr	r5, [r4, #0]
 8006d04:	f015 0506 	ands.w	r5, r5, #6
 8006d08:	d106      	bne.n	8006d18 <_printf_common+0x48>
 8006d0a:	f104 0a19 	add.w	sl, r4, #25
 8006d0e:	68e3      	ldr	r3, [r4, #12]
 8006d10:	6832      	ldr	r2, [r6, #0]
 8006d12:	1a9b      	subs	r3, r3, r2
 8006d14:	42ab      	cmp	r3, r5
 8006d16:	dc26      	bgt.n	8006d66 <_printf_common+0x96>
 8006d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d1c:	1e13      	subs	r3, r2, #0
 8006d1e:	6822      	ldr	r2, [r4, #0]
 8006d20:	bf18      	it	ne
 8006d22:	2301      	movne	r3, #1
 8006d24:	0692      	lsls	r2, r2, #26
 8006d26:	d42b      	bmi.n	8006d80 <_printf_common+0xb0>
 8006d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	4638      	mov	r0, r7
 8006d30:	47c0      	blx	r8
 8006d32:	3001      	adds	r0, #1
 8006d34:	d01e      	beq.n	8006d74 <_printf_common+0xa4>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	68e5      	ldr	r5, [r4, #12]
 8006d3a:	6832      	ldr	r2, [r6, #0]
 8006d3c:	f003 0306 	and.w	r3, r3, #6
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	bf08      	it	eq
 8006d44:	1aad      	subeq	r5, r5, r2
 8006d46:	68a3      	ldr	r3, [r4, #8]
 8006d48:	6922      	ldr	r2, [r4, #16]
 8006d4a:	bf0c      	ite	eq
 8006d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d50:	2500      	movne	r5, #0
 8006d52:	4293      	cmp	r3, r2
 8006d54:	bfc4      	itt	gt
 8006d56:	1a9b      	subgt	r3, r3, r2
 8006d58:	18ed      	addgt	r5, r5, r3
 8006d5a:	2600      	movs	r6, #0
 8006d5c:	341a      	adds	r4, #26
 8006d5e:	42b5      	cmp	r5, r6
 8006d60:	d11a      	bne.n	8006d98 <_printf_common+0xc8>
 8006d62:	2000      	movs	r0, #0
 8006d64:	e008      	b.n	8006d78 <_printf_common+0xa8>
 8006d66:	2301      	movs	r3, #1
 8006d68:	4652      	mov	r2, sl
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	47c0      	blx	r8
 8006d70:	3001      	adds	r0, #1
 8006d72:	d103      	bne.n	8006d7c <_printf_common+0xac>
 8006d74:	f04f 30ff 	mov.w	r0, #4294967295
 8006d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	e7c6      	b.n	8006d0e <_printf_common+0x3e>
 8006d80:	18e1      	adds	r1, r4, r3
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	2030      	movs	r0, #48	; 0x30
 8006d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d8a:	4422      	add	r2, r4
 8006d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d94:	3302      	adds	r3, #2
 8006d96:	e7c7      	b.n	8006d28 <_printf_common+0x58>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	4622      	mov	r2, r4
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	4638      	mov	r0, r7
 8006da0:	47c0      	blx	r8
 8006da2:	3001      	adds	r0, #1
 8006da4:	d0e6      	beq.n	8006d74 <_printf_common+0xa4>
 8006da6:	3601      	adds	r6, #1
 8006da8:	e7d9      	b.n	8006d5e <_printf_common+0x8e>
	...

08006dac <_printf_i>:
 8006dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db0:	7e0f      	ldrb	r7, [r1, #24]
 8006db2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006db4:	2f78      	cmp	r7, #120	; 0x78
 8006db6:	4691      	mov	r9, r2
 8006db8:	4680      	mov	r8, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	469a      	mov	sl, r3
 8006dbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dc2:	d807      	bhi.n	8006dd4 <_printf_i+0x28>
 8006dc4:	2f62      	cmp	r7, #98	; 0x62
 8006dc6:	d80a      	bhi.n	8006dde <_printf_i+0x32>
 8006dc8:	2f00      	cmp	r7, #0
 8006dca:	f000 80d8 	beq.w	8006f7e <_printf_i+0x1d2>
 8006dce:	2f58      	cmp	r7, #88	; 0x58
 8006dd0:	f000 80a3 	beq.w	8006f1a <_printf_i+0x16e>
 8006dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ddc:	e03a      	b.n	8006e54 <_printf_i+0xa8>
 8006dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006de2:	2b15      	cmp	r3, #21
 8006de4:	d8f6      	bhi.n	8006dd4 <_printf_i+0x28>
 8006de6:	a101      	add	r1, pc, #4	; (adr r1, 8006dec <_printf_i+0x40>)
 8006de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dec:	08006e45 	.word	0x08006e45
 8006df0:	08006e59 	.word	0x08006e59
 8006df4:	08006dd5 	.word	0x08006dd5
 8006df8:	08006dd5 	.word	0x08006dd5
 8006dfc:	08006dd5 	.word	0x08006dd5
 8006e00:	08006dd5 	.word	0x08006dd5
 8006e04:	08006e59 	.word	0x08006e59
 8006e08:	08006dd5 	.word	0x08006dd5
 8006e0c:	08006dd5 	.word	0x08006dd5
 8006e10:	08006dd5 	.word	0x08006dd5
 8006e14:	08006dd5 	.word	0x08006dd5
 8006e18:	08006f65 	.word	0x08006f65
 8006e1c:	08006e89 	.word	0x08006e89
 8006e20:	08006f47 	.word	0x08006f47
 8006e24:	08006dd5 	.word	0x08006dd5
 8006e28:	08006dd5 	.word	0x08006dd5
 8006e2c:	08006f87 	.word	0x08006f87
 8006e30:	08006dd5 	.word	0x08006dd5
 8006e34:	08006e89 	.word	0x08006e89
 8006e38:	08006dd5 	.word	0x08006dd5
 8006e3c:	08006dd5 	.word	0x08006dd5
 8006e40:	08006f4f 	.word	0x08006f4f
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	1d1a      	adds	r2, r3, #4
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	602a      	str	r2, [r5, #0]
 8006e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e54:	2301      	movs	r3, #1
 8006e56:	e0a3      	b.n	8006fa0 <_printf_i+0x1f4>
 8006e58:	6820      	ldr	r0, [r4, #0]
 8006e5a:	6829      	ldr	r1, [r5, #0]
 8006e5c:	0606      	lsls	r6, r0, #24
 8006e5e:	f101 0304 	add.w	r3, r1, #4
 8006e62:	d50a      	bpl.n	8006e7a <_printf_i+0xce>
 8006e64:	680e      	ldr	r6, [r1, #0]
 8006e66:	602b      	str	r3, [r5, #0]
 8006e68:	2e00      	cmp	r6, #0
 8006e6a:	da03      	bge.n	8006e74 <_printf_i+0xc8>
 8006e6c:	232d      	movs	r3, #45	; 0x2d
 8006e6e:	4276      	negs	r6, r6
 8006e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e74:	485e      	ldr	r0, [pc, #376]	; (8006ff0 <_printf_i+0x244>)
 8006e76:	230a      	movs	r3, #10
 8006e78:	e019      	b.n	8006eae <_printf_i+0x102>
 8006e7a:	680e      	ldr	r6, [r1, #0]
 8006e7c:	602b      	str	r3, [r5, #0]
 8006e7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e82:	bf18      	it	ne
 8006e84:	b236      	sxthne	r6, r6
 8006e86:	e7ef      	b.n	8006e68 <_printf_i+0xbc>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	1d19      	adds	r1, r3, #4
 8006e8e:	6029      	str	r1, [r5, #0]
 8006e90:	0601      	lsls	r1, r0, #24
 8006e92:	d501      	bpl.n	8006e98 <_printf_i+0xec>
 8006e94:	681e      	ldr	r6, [r3, #0]
 8006e96:	e002      	b.n	8006e9e <_printf_i+0xf2>
 8006e98:	0646      	lsls	r6, r0, #25
 8006e9a:	d5fb      	bpl.n	8006e94 <_printf_i+0xe8>
 8006e9c:	881e      	ldrh	r6, [r3, #0]
 8006e9e:	4854      	ldr	r0, [pc, #336]	; (8006ff0 <_printf_i+0x244>)
 8006ea0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ea2:	bf0c      	ite	eq
 8006ea4:	2308      	moveq	r3, #8
 8006ea6:	230a      	movne	r3, #10
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eae:	6865      	ldr	r5, [r4, #4]
 8006eb0:	60a5      	str	r5, [r4, #8]
 8006eb2:	2d00      	cmp	r5, #0
 8006eb4:	bfa2      	ittt	ge
 8006eb6:	6821      	ldrge	r1, [r4, #0]
 8006eb8:	f021 0104 	bicge.w	r1, r1, #4
 8006ebc:	6021      	strge	r1, [r4, #0]
 8006ebe:	b90e      	cbnz	r6, 8006ec4 <_printf_i+0x118>
 8006ec0:	2d00      	cmp	r5, #0
 8006ec2:	d04d      	beq.n	8006f60 <_printf_i+0x1b4>
 8006ec4:	4615      	mov	r5, r2
 8006ec6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eca:	fb03 6711 	mls	r7, r3, r1, r6
 8006ece:	5dc7      	ldrb	r7, [r0, r7]
 8006ed0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ed4:	4637      	mov	r7, r6
 8006ed6:	42bb      	cmp	r3, r7
 8006ed8:	460e      	mov	r6, r1
 8006eda:	d9f4      	bls.n	8006ec6 <_printf_i+0x11a>
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d10b      	bne.n	8006ef8 <_printf_i+0x14c>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	07de      	lsls	r6, r3, #31
 8006ee4:	d508      	bpl.n	8006ef8 <_printf_i+0x14c>
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	6861      	ldr	r1, [r4, #4]
 8006eea:	4299      	cmp	r1, r3
 8006eec:	bfde      	ittt	le
 8006eee:	2330      	movle	r3, #48	; 0x30
 8006ef0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ef4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ef8:	1b52      	subs	r2, r2, r5
 8006efa:	6122      	str	r2, [r4, #16]
 8006efc:	f8cd a000 	str.w	sl, [sp]
 8006f00:	464b      	mov	r3, r9
 8006f02:	aa03      	add	r2, sp, #12
 8006f04:	4621      	mov	r1, r4
 8006f06:	4640      	mov	r0, r8
 8006f08:	f7ff fee2 	bl	8006cd0 <_printf_common>
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d14c      	bne.n	8006faa <_printf_i+0x1fe>
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	b004      	add	sp, #16
 8006f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1a:	4835      	ldr	r0, [pc, #212]	; (8006ff0 <_printf_i+0x244>)
 8006f1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f20:	6829      	ldr	r1, [r5, #0]
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f28:	6029      	str	r1, [r5, #0]
 8006f2a:	061d      	lsls	r5, r3, #24
 8006f2c:	d514      	bpl.n	8006f58 <_printf_i+0x1ac>
 8006f2e:	07df      	lsls	r7, r3, #31
 8006f30:	bf44      	itt	mi
 8006f32:	f043 0320 	orrmi.w	r3, r3, #32
 8006f36:	6023      	strmi	r3, [r4, #0]
 8006f38:	b91e      	cbnz	r6, 8006f42 <_printf_i+0x196>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	f023 0320 	bic.w	r3, r3, #32
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	2310      	movs	r3, #16
 8006f44:	e7b0      	b.n	8006ea8 <_printf_i+0xfc>
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	f043 0320 	orr.w	r3, r3, #32
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	2378      	movs	r3, #120	; 0x78
 8006f50:	4828      	ldr	r0, [pc, #160]	; (8006ff4 <_printf_i+0x248>)
 8006f52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f56:	e7e3      	b.n	8006f20 <_printf_i+0x174>
 8006f58:	0659      	lsls	r1, r3, #25
 8006f5a:	bf48      	it	mi
 8006f5c:	b2b6      	uxthmi	r6, r6
 8006f5e:	e7e6      	b.n	8006f2e <_printf_i+0x182>
 8006f60:	4615      	mov	r5, r2
 8006f62:	e7bb      	b.n	8006edc <_printf_i+0x130>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	6826      	ldr	r6, [r4, #0]
 8006f68:	6961      	ldr	r1, [r4, #20]
 8006f6a:	1d18      	adds	r0, r3, #4
 8006f6c:	6028      	str	r0, [r5, #0]
 8006f6e:	0635      	lsls	r5, r6, #24
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	d501      	bpl.n	8006f78 <_printf_i+0x1cc>
 8006f74:	6019      	str	r1, [r3, #0]
 8006f76:	e002      	b.n	8006f7e <_printf_i+0x1d2>
 8006f78:	0670      	lsls	r0, r6, #25
 8006f7a:	d5fb      	bpl.n	8006f74 <_printf_i+0x1c8>
 8006f7c:	8019      	strh	r1, [r3, #0]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	6123      	str	r3, [r4, #16]
 8006f82:	4615      	mov	r5, r2
 8006f84:	e7ba      	b.n	8006efc <_printf_i+0x150>
 8006f86:	682b      	ldr	r3, [r5, #0]
 8006f88:	1d1a      	adds	r2, r3, #4
 8006f8a:	602a      	str	r2, [r5, #0]
 8006f8c:	681d      	ldr	r5, [r3, #0]
 8006f8e:	6862      	ldr	r2, [r4, #4]
 8006f90:	2100      	movs	r1, #0
 8006f92:	4628      	mov	r0, r5
 8006f94:	f7f9 f924 	bl	80001e0 <memchr>
 8006f98:	b108      	cbz	r0, 8006f9e <_printf_i+0x1f2>
 8006f9a:	1b40      	subs	r0, r0, r5
 8006f9c:	6060      	str	r0, [r4, #4]
 8006f9e:	6863      	ldr	r3, [r4, #4]
 8006fa0:	6123      	str	r3, [r4, #16]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa8:	e7a8      	b.n	8006efc <_printf_i+0x150>
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	462a      	mov	r2, r5
 8006fae:	4649      	mov	r1, r9
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	47d0      	blx	sl
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d0ab      	beq.n	8006f10 <_printf_i+0x164>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	079b      	lsls	r3, r3, #30
 8006fbc:	d413      	bmi.n	8006fe6 <_printf_i+0x23a>
 8006fbe:	68e0      	ldr	r0, [r4, #12]
 8006fc0:	9b03      	ldr	r3, [sp, #12]
 8006fc2:	4298      	cmp	r0, r3
 8006fc4:	bfb8      	it	lt
 8006fc6:	4618      	movlt	r0, r3
 8006fc8:	e7a4      	b.n	8006f14 <_printf_i+0x168>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	4632      	mov	r2, r6
 8006fce:	4649      	mov	r1, r9
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	47d0      	blx	sl
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d09b      	beq.n	8006f10 <_printf_i+0x164>
 8006fd8:	3501      	adds	r5, #1
 8006fda:	68e3      	ldr	r3, [r4, #12]
 8006fdc:	9903      	ldr	r1, [sp, #12]
 8006fde:	1a5b      	subs	r3, r3, r1
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	dcf2      	bgt.n	8006fca <_printf_i+0x21e>
 8006fe4:	e7eb      	b.n	8006fbe <_printf_i+0x212>
 8006fe6:	2500      	movs	r5, #0
 8006fe8:	f104 0619 	add.w	r6, r4, #25
 8006fec:	e7f5      	b.n	8006fda <_printf_i+0x22e>
 8006fee:	bf00      	nop
 8006ff0:	08007503 	.word	0x08007503
 8006ff4:	08007514 	.word	0x08007514

08006ff8 <_read_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4d07      	ldr	r5, [pc, #28]	; (8007018 <_read_r+0x20>)
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	4608      	mov	r0, r1
 8007000:	4611      	mov	r1, r2
 8007002:	2200      	movs	r2, #0
 8007004:	602a      	str	r2, [r5, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	f7f9 fd98 	bl	8000b3c <_read>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_read_r+0x1e>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_read_r+0x1e>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	20004b40 	.word	0x20004b40

0800701c <__swbuf_r>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	460e      	mov	r6, r1
 8007020:	4614      	mov	r4, r2
 8007022:	4605      	mov	r5, r0
 8007024:	b118      	cbz	r0, 800702e <__swbuf_r+0x12>
 8007026:	6983      	ldr	r3, [r0, #24]
 8007028:	b90b      	cbnz	r3, 800702e <__swbuf_r+0x12>
 800702a:	f7ff f905 	bl	8006238 <__sinit>
 800702e:	4b21      	ldr	r3, [pc, #132]	; (80070b4 <__swbuf_r+0x98>)
 8007030:	429c      	cmp	r4, r3
 8007032:	d12b      	bne.n	800708c <__swbuf_r+0x70>
 8007034:	686c      	ldr	r4, [r5, #4]
 8007036:	69a3      	ldr	r3, [r4, #24]
 8007038:	60a3      	str	r3, [r4, #8]
 800703a:	89a3      	ldrh	r3, [r4, #12]
 800703c:	071a      	lsls	r2, r3, #28
 800703e:	d52f      	bpl.n	80070a0 <__swbuf_r+0x84>
 8007040:	6923      	ldr	r3, [r4, #16]
 8007042:	b36b      	cbz	r3, 80070a0 <__swbuf_r+0x84>
 8007044:	6923      	ldr	r3, [r4, #16]
 8007046:	6820      	ldr	r0, [r4, #0]
 8007048:	1ac0      	subs	r0, r0, r3
 800704a:	6963      	ldr	r3, [r4, #20]
 800704c:	b2f6      	uxtb	r6, r6
 800704e:	4283      	cmp	r3, r0
 8007050:	4637      	mov	r7, r6
 8007052:	dc04      	bgt.n	800705e <__swbuf_r+0x42>
 8007054:	4621      	mov	r1, r4
 8007056:	4628      	mov	r0, r5
 8007058:	f7ff fc20 	bl	800689c <_fflush_r>
 800705c:	bb30      	cbnz	r0, 80070ac <__swbuf_r+0x90>
 800705e:	68a3      	ldr	r3, [r4, #8]
 8007060:	3b01      	subs	r3, #1
 8007062:	60a3      	str	r3, [r4, #8]
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	6022      	str	r2, [r4, #0]
 800706a:	701e      	strb	r6, [r3, #0]
 800706c:	6963      	ldr	r3, [r4, #20]
 800706e:	3001      	adds	r0, #1
 8007070:	4283      	cmp	r3, r0
 8007072:	d004      	beq.n	800707e <__swbuf_r+0x62>
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	07db      	lsls	r3, r3, #31
 8007078:	d506      	bpl.n	8007088 <__swbuf_r+0x6c>
 800707a:	2e0a      	cmp	r6, #10
 800707c:	d104      	bne.n	8007088 <__swbuf_r+0x6c>
 800707e:	4621      	mov	r1, r4
 8007080:	4628      	mov	r0, r5
 8007082:	f7ff fc0b 	bl	800689c <_fflush_r>
 8007086:	b988      	cbnz	r0, 80070ac <__swbuf_r+0x90>
 8007088:	4638      	mov	r0, r7
 800708a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <__swbuf_r+0x9c>)
 800708e:	429c      	cmp	r4, r3
 8007090:	d101      	bne.n	8007096 <__swbuf_r+0x7a>
 8007092:	68ac      	ldr	r4, [r5, #8]
 8007094:	e7cf      	b.n	8007036 <__swbuf_r+0x1a>
 8007096:	4b09      	ldr	r3, [pc, #36]	; (80070bc <__swbuf_r+0xa0>)
 8007098:	429c      	cmp	r4, r3
 800709a:	bf08      	it	eq
 800709c:	68ec      	ldreq	r4, [r5, #12]
 800709e:	e7ca      	b.n	8007036 <__swbuf_r+0x1a>
 80070a0:	4621      	mov	r1, r4
 80070a2:	4628      	mov	r0, r5
 80070a4:	f000 f80c 	bl	80070c0 <__swsetup_r>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d0cb      	beq.n	8007044 <__swbuf_r+0x28>
 80070ac:	f04f 37ff 	mov.w	r7, #4294967295
 80070b0:	e7ea      	b.n	8007088 <__swbuf_r+0x6c>
 80070b2:	bf00      	nop
 80070b4:	08007400 	.word	0x08007400
 80070b8:	08007420 	.word	0x08007420
 80070bc:	080073e0 	.word	0x080073e0

080070c0 <__swsetup_r>:
 80070c0:	4b32      	ldr	r3, [pc, #200]	; (800718c <__swsetup_r+0xcc>)
 80070c2:	b570      	push	{r4, r5, r6, lr}
 80070c4:	681d      	ldr	r5, [r3, #0]
 80070c6:	4606      	mov	r6, r0
 80070c8:	460c      	mov	r4, r1
 80070ca:	b125      	cbz	r5, 80070d6 <__swsetup_r+0x16>
 80070cc:	69ab      	ldr	r3, [r5, #24]
 80070ce:	b913      	cbnz	r3, 80070d6 <__swsetup_r+0x16>
 80070d0:	4628      	mov	r0, r5
 80070d2:	f7ff f8b1 	bl	8006238 <__sinit>
 80070d6:	4b2e      	ldr	r3, [pc, #184]	; (8007190 <__swsetup_r+0xd0>)
 80070d8:	429c      	cmp	r4, r3
 80070da:	d10f      	bne.n	80070fc <__swsetup_r+0x3c>
 80070dc:	686c      	ldr	r4, [r5, #4]
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070e4:	0719      	lsls	r1, r3, #28
 80070e6:	d42c      	bmi.n	8007142 <__swsetup_r+0x82>
 80070e8:	06dd      	lsls	r5, r3, #27
 80070ea:	d411      	bmi.n	8007110 <__swsetup_r+0x50>
 80070ec:	2309      	movs	r3, #9
 80070ee:	6033      	str	r3, [r6, #0]
 80070f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	f04f 30ff 	mov.w	r0, #4294967295
 80070fa:	e03e      	b.n	800717a <__swsetup_r+0xba>
 80070fc:	4b25      	ldr	r3, [pc, #148]	; (8007194 <__swsetup_r+0xd4>)
 80070fe:	429c      	cmp	r4, r3
 8007100:	d101      	bne.n	8007106 <__swsetup_r+0x46>
 8007102:	68ac      	ldr	r4, [r5, #8]
 8007104:	e7eb      	b.n	80070de <__swsetup_r+0x1e>
 8007106:	4b24      	ldr	r3, [pc, #144]	; (8007198 <__swsetup_r+0xd8>)
 8007108:	429c      	cmp	r4, r3
 800710a:	bf08      	it	eq
 800710c:	68ec      	ldreq	r4, [r5, #12]
 800710e:	e7e6      	b.n	80070de <__swsetup_r+0x1e>
 8007110:	0758      	lsls	r0, r3, #29
 8007112:	d512      	bpl.n	800713a <__swsetup_r+0x7a>
 8007114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007116:	b141      	cbz	r1, 800712a <__swsetup_r+0x6a>
 8007118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800711c:	4299      	cmp	r1, r3
 800711e:	d002      	beq.n	8007126 <__swsetup_r+0x66>
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff fc2f 	bl	8006984 <_free_r>
 8007126:	2300      	movs	r3, #0
 8007128:	6363      	str	r3, [r4, #52]	; 0x34
 800712a:	89a3      	ldrh	r3, [r4, #12]
 800712c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	2300      	movs	r3, #0
 8007134:	6063      	str	r3, [r4, #4]
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	f043 0308 	orr.w	r3, r3, #8
 8007140:	81a3      	strh	r3, [r4, #12]
 8007142:	6923      	ldr	r3, [r4, #16]
 8007144:	b94b      	cbnz	r3, 800715a <__swsetup_r+0x9a>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800714c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007150:	d003      	beq.n	800715a <__swsetup_r+0x9a>
 8007152:	4621      	mov	r1, r4
 8007154:	4630      	mov	r0, r6
 8007156:	f000 f84d 	bl	80071f4 <__smakebuf_r>
 800715a:	89a0      	ldrh	r0, [r4, #12]
 800715c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007160:	f010 0301 	ands.w	r3, r0, #1
 8007164:	d00a      	beq.n	800717c <__swsetup_r+0xbc>
 8007166:	2300      	movs	r3, #0
 8007168:	60a3      	str	r3, [r4, #8]
 800716a:	6963      	ldr	r3, [r4, #20]
 800716c:	425b      	negs	r3, r3
 800716e:	61a3      	str	r3, [r4, #24]
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	b943      	cbnz	r3, 8007186 <__swsetup_r+0xc6>
 8007174:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007178:	d1ba      	bne.n	80070f0 <__swsetup_r+0x30>
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	0781      	lsls	r1, r0, #30
 800717e:	bf58      	it	pl
 8007180:	6963      	ldrpl	r3, [r4, #20]
 8007182:	60a3      	str	r3, [r4, #8]
 8007184:	e7f4      	b.n	8007170 <__swsetup_r+0xb0>
 8007186:	2000      	movs	r0, #0
 8007188:	e7f7      	b.n	800717a <__swsetup_r+0xba>
 800718a:	bf00      	nop
 800718c:	20000010 	.word	0x20000010
 8007190:	08007400 	.word	0x08007400
 8007194:	08007420 	.word	0x08007420
 8007198:	080073e0 	.word	0x080073e0

0800719c <abort>:
 800719c:	b508      	push	{r3, lr}
 800719e:	2006      	movs	r0, #6
 80071a0:	f000 f890 	bl	80072c4 <raise>
 80071a4:	2001      	movs	r0, #1
 80071a6:	f7f9 fcbf 	bl	8000b28 <_exit>

080071aa <__swhatbuf_r>:
 80071aa:	b570      	push	{r4, r5, r6, lr}
 80071ac:	460e      	mov	r6, r1
 80071ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b2:	2900      	cmp	r1, #0
 80071b4:	b096      	sub	sp, #88	; 0x58
 80071b6:	4614      	mov	r4, r2
 80071b8:	461d      	mov	r5, r3
 80071ba:	da08      	bge.n	80071ce <__swhatbuf_r+0x24>
 80071bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	602a      	str	r2, [r5, #0]
 80071c4:	061a      	lsls	r2, r3, #24
 80071c6:	d410      	bmi.n	80071ea <__swhatbuf_r+0x40>
 80071c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071cc:	e00e      	b.n	80071ec <__swhatbuf_r+0x42>
 80071ce:	466a      	mov	r2, sp
 80071d0:	f000 f894 	bl	80072fc <_fstat_r>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	dbf1      	blt.n	80071bc <__swhatbuf_r+0x12>
 80071d8:	9a01      	ldr	r2, [sp, #4]
 80071da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071e2:	425a      	negs	r2, r3
 80071e4:	415a      	adcs	r2, r3
 80071e6:	602a      	str	r2, [r5, #0]
 80071e8:	e7ee      	b.n	80071c8 <__swhatbuf_r+0x1e>
 80071ea:	2340      	movs	r3, #64	; 0x40
 80071ec:	2000      	movs	r0, #0
 80071ee:	6023      	str	r3, [r4, #0]
 80071f0:	b016      	add	sp, #88	; 0x58
 80071f2:	bd70      	pop	{r4, r5, r6, pc}

080071f4 <__smakebuf_r>:
 80071f4:	898b      	ldrh	r3, [r1, #12]
 80071f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071f8:	079d      	lsls	r5, r3, #30
 80071fa:	4606      	mov	r6, r0
 80071fc:	460c      	mov	r4, r1
 80071fe:	d507      	bpl.n	8007210 <__smakebuf_r+0x1c>
 8007200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	6123      	str	r3, [r4, #16]
 8007208:	2301      	movs	r3, #1
 800720a:	6163      	str	r3, [r4, #20]
 800720c:	b002      	add	sp, #8
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	ab01      	add	r3, sp, #4
 8007212:	466a      	mov	r2, sp
 8007214:	f7ff ffc9 	bl	80071aa <__swhatbuf_r>
 8007218:	9900      	ldr	r1, [sp, #0]
 800721a:	4605      	mov	r5, r0
 800721c:	4630      	mov	r0, r6
 800721e:	f7ff f907 	bl	8006430 <_malloc_r>
 8007222:	b948      	cbnz	r0, 8007238 <__smakebuf_r+0x44>
 8007224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007228:	059a      	lsls	r2, r3, #22
 800722a:	d4ef      	bmi.n	800720c <__smakebuf_r+0x18>
 800722c:	f023 0303 	bic.w	r3, r3, #3
 8007230:	f043 0302 	orr.w	r3, r3, #2
 8007234:	81a3      	strh	r3, [r4, #12]
 8007236:	e7e3      	b.n	8007200 <__smakebuf_r+0xc>
 8007238:	4b0d      	ldr	r3, [pc, #52]	; (8007270 <__smakebuf_r+0x7c>)
 800723a:	62b3      	str	r3, [r6, #40]	; 0x28
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	6020      	str	r0, [r4, #0]
 8007240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007244:	81a3      	strh	r3, [r4, #12]
 8007246:	9b00      	ldr	r3, [sp, #0]
 8007248:	6163      	str	r3, [r4, #20]
 800724a:	9b01      	ldr	r3, [sp, #4]
 800724c:	6120      	str	r0, [r4, #16]
 800724e:	b15b      	cbz	r3, 8007268 <__smakebuf_r+0x74>
 8007250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007254:	4630      	mov	r0, r6
 8007256:	f000 f863 	bl	8007320 <_isatty_r>
 800725a:	b128      	cbz	r0, 8007268 <__smakebuf_r+0x74>
 800725c:	89a3      	ldrh	r3, [r4, #12]
 800725e:	f023 0303 	bic.w	r3, r3, #3
 8007262:	f043 0301 	orr.w	r3, r3, #1
 8007266:	81a3      	strh	r3, [r4, #12]
 8007268:	89a0      	ldrh	r0, [r4, #12]
 800726a:	4305      	orrs	r5, r0
 800726c:	81a5      	strh	r5, [r4, #12]
 800726e:	e7cd      	b.n	800720c <__smakebuf_r+0x18>
 8007270:	080061d1 	.word	0x080061d1

08007274 <_raise_r>:
 8007274:	291f      	cmp	r1, #31
 8007276:	b538      	push	{r3, r4, r5, lr}
 8007278:	4604      	mov	r4, r0
 800727a:	460d      	mov	r5, r1
 800727c:	d904      	bls.n	8007288 <_raise_r+0x14>
 800727e:	2316      	movs	r3, #22
 8007280:	6003      	str	r3, [r0, #0]
 8007282:	f04f 30ff 	mov.w	r0, #4294967295
 8007286:	bd38      	pop	{r3, r4, r5, pc}
 8007288:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800728a:	b112      	cbz	r2, 8007292 <_raise_r+0x1e>
 800728c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007290:	b94b      	cbnz	r3, 80072a6 <_raise_r+0x32>
 8007292:	4620      	mov	r0, r4
 8007294:	f000 f830 	bl	80072f8 <_getpid_r>
 8007298:	462a      	mov	r2, r5
 800729a:	4601      	mov	r1, r0
 800729c:	4620      	mov	r0, r4
 800729e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072a2:	f000 b817 	b.w	80072d4 <_kill_r>
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d00a      	beq.n	80072c0 <_raise_r+0x4c>
 80072aa:	1c59      	adds	r1, r3, #1
 80072ac:	d103      	bne.n	80072b6 <_raise_r+0x42>
 80072ae:	2316      	movs	r3, #22
 80072b0:	6003      	str	r3, [r0, #0]
 80072b2:	2001      	movs	r0, #1
 80072b4:	e7e7      	b.n	8007286 <_raise_r+0x12>
 80072b6:	2400      	movs	r4, #0
 80072b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072bc:	4628      	mov	r0, r5
 80072be:	4798      	blx	r3
 80072c0:	2000      	movs	r0, #0
 80072c2:	e7e0      	b.n	8007286 <_raise_r+0x12>

080072c4 <raise>:
 80072c4:	4b02      	ldr	r3, [pc, #8]	; (80072d0 <raise+0xc>)
 80072c6:	4601      	mov	r1, r0
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	f7ff bfd3 	b.w	8007274 <_raise_r>
 80072ce:	bf00      	nop
 80072d0:	20000010 	.word	0x20000010

080072d4 <_kill_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4d07      	ldr	r5, [pc, #28]	; (80072f4 <_kill_r+0x20>)
 80072d8:	2300      	movs	r3, #0
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	4611      	mov	r1, r2
 80072e0:	602b      	str	r3, [r5, #0]
 80072e2:	f7f9 fc11 	bl	8000b08 <_kill>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d102      	bne.n	80072f0 <_kill_r+0x1c>
 80072ea:	682b      	ldr	r3, [r5, #0]
 80072ec:	b103      	cbz	r3, 80072f0 <_kill_r+0x1c>
 80072ee:	6023      	str	r3, [r4, #0]
 80072f0:	bd38      	pop	{r3, r4, r5, pc}
 80072f2:	bf00      	nop
 80072f4:	20004b40 	.word	0x20004b40

080072f8 <_getpid_r>:
 80072f8:	f7f9 bbfe 	b.w	8000af8 <_getpid>

080072fc <_fstat_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4d07      	ldr	r5, [pc, #28]	; (800731c <_fstat_r+0x20>)
 8007300:	2300      	movs	r3, #0
 8007302:	4604      	mov	r4, r0
 8007304:	4608      	mov	r0, r1
 8007306:	4611      	mov	r1, r2
 8007308:	602b      	str	r3, [r5, #0]
 800730a:	f7f9 fc5c 	bl	8000bc6 <_fstat>
 800730e:	1c43      	adds	r3, r0, #1
 8007310:	d102      	bne.n	8007318 <_fstat_r+0x1c>
 8007312:	682b      	ldr	r3, [r5, #0]
 8007314:	b103      	cbz	r3, 8007318 <_fstat_r+0x1c>
 8007316:	6023      	str	r3, [r4, #0]
 8007318:	bd38      	pop	{r3, r4, r5, pc}
 800731a:	bf00      	nop
 800731c:	20004b40 	.word	0x20004b40

08007320 <_isatty_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4d06      	ldr	r5, [pc, #24]	; (800733c <_isatty_r+0x1c>)
 8007324:	2300      	movs	r3, #0
 8007326:	4604      	mov	r4, r0
 8007328:	4608      	mov	r0, r1
 800732a:	602b      	str	r3, [r5, #0]
 800732c:	f7f9 fc5b 	bl	8000be6 <_isatty>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d102      	bne.n	800733a <_isatty_r+0x1a>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	b103      	cbz	r3, 800733a <_isatty_r+0x1a>
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	20004b40 	.word	0x20004b40

08007340 <_init>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr

0800734c <_fini>:
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	bf00      	nop
 8007350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007352:	bc08      	pop	{r3}
 8007354:	469e      	mov	lr, r3
 8007356:	4770      	bx	lr
