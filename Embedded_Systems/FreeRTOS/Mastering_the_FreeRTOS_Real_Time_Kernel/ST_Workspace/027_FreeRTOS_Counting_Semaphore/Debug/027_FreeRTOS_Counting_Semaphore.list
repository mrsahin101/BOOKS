
027_FreeRTOS_Counting_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006090  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006220  08006220  00016220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800630c  0800630c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800630c  0800630c  0001630c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006314  08006314  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006314  08006314  00016314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006318  08006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800631c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ac4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b38  20004b38  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001952a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003282  00000000  00000000  000395ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0003c850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001318  00000000  00000000  0003dc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000037e7  00000000  00000000  0003ef98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ff6  00000000  00000000  0004277f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5145  00000000  00000000  00058775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d8ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005868  00000000  00000000  0012d90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006208 	.word	0x08006208

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006208 	.word	0x08006208

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0)
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d124      	bne.n	800053e <HAL_GPIO_EXTI_Callback+0x5a>
  {
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]

	  xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <HAL_GPIO_EXTI_Callback+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f107 020c 	add.w	r2, r7, #12
 8000500:	4611      	mov	r1, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f003 fa0b 	bl	800391e <xQueueGiveFromISR>
	  xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_GPIO_EXTI_Callback+0x64>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f107 020c 	add.w	r2, r7, #12
 8000510:	4611      	mov	r1, r2
 8000512:	4618      	mov	r0, r3
 8000514:	f003 fa03 	bl	800391e <xQueueGiveFromISR>
	  xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <HAL_GPIO_EXTI_Callback+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f107 020c 	add.w	r2, r7, #12
 8000520:	4611      	mov	r1, r2
 8000522:	4618      	mov	r0, r3
 8000524:	f003 f9fb 	bl	800391e <xQueueGiveFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d007      	beq.n	800053e <HAL_GPIO_EXTI_Callback+0x5a>
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <HAL_GPIO_EXTI_Callback+0x68>)
 8000530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	f3bf 8f4f 	dsb	sy
 800053a:	f3bf 8f6f 	isb	sy
  }
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200000d4 	.word	0x200000d4
 800054c:	e000ed04 	.word	0xe000ed04

08000550 <vButtonHandlerTask>:
void vButtonHandlerTask(void *pvParameters)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b09e      	sub	sp, #120	; 0x78
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	const char *msg = "Button was pressed!\r\n";
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <vButtonHandlerTask+0x58>)
 800055a:	677b      	str	r3, [r7, #116]	; 0x74
	const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS(5000);
 800055c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000560:	673b      	str	r3, [r7, #112]	; 0x70
	const char *errmsg = "Press Press the Button. Been 5 second since last press\r\n";
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <vButtonHandlerTask+0x5c>)
 8000564:	66fb      	str	r3, [r7, #108]	; 0x6c
	char buffer[100];
	for(;;)
	{
		if(xSemaphoreTake(xCountingSemaphore, xMaxExpectedBlockTime) == pdFAIL)
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <vButtonHandlerTask+0x60>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800056c:	4618      	mov	r0, r3
 800056e:	f003 fb43 	bl	8003bf8 <xQueueSemaphoreTake>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d10b      	bne.n	8000590 <vButtonHandlerTask+0x40>
			HAL_UART_Transmit(&huart2, (uint8_t*)errmsg, strlen(errmsg), HAL_MAX_DELAY);
 8000578:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800057a:	f7ff fe29 	bl	80001d0 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	b29a      	uxth	r2, r3
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000588:	480a      	ldr	r0, [pc, #40]	; (80005b4 <vButtonHandlerTask+0x64>)
 800058a:	f001 fe00 	bl	800218e <HAL_UART_Transmit>
 800058e:	e7ea      	b.n	8000566 <vButtonHandlerTask+0x16>
		else
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000590:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000592:	f7ff fe1d 	bl	80001d0 <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <vButtonHandlerTask+0x64>)
 80005a2:	f001 fdf4 	bl	800218e <HAL_UART_Transmit>
		if(xSemaphoreTake(xCountingSemaphore, xMaxExpectedBlockTime) == pdFAIL)
 80005a6:	e7de      	b.n	8000566 <vButtonHandlerTask+0x16>
 80005a8:	08006220 	.word	0x08006220
 80005ac:	08006238 	.word	0x08006238
 80005b0:	200000d4 	.word	0x200000d4
 80005b4:	20000090 	.word	0x20000090

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fa9d 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f81f 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f8b1 	bl	800072c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f885 	bl	80006d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xCountingSemaphore = xSemaphoreCreateCounting(10, 0);
 80005ce:	2100      	movs	r1, #0
 80005d0:	200a      	movs	r0, #10
 80005d2:	f002 ffd8 	bl	8003586 <xQueueCreateCountingSemaphore>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <main+0x40>)
 80005da:	6013      	str	r3, [r2, #0]
  xTaskCreate(vButtonHandlerTask,"Handler", configMINIMAL_STACK_SIZE, NULL, 1,NULL);
 80005dc:	2300      	movs	r3, #0
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	2301      	movs	r3, #1
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	4904      	ldr	r1, [pc, #16]	; (80005fc <main+0x44>)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <main+0x48>)
 80005ec:	f003 fdf3 	bl	80041d6 <xTaskCreate>
  vTaskStartScheduler();
 80005f0:	f003 ff4c 	bl	800448c <vTaskStartScheduler>

  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x3c>
 80005f6:	bf00      	nop
 80005f8:	200000d4 	.word	0x200000d4
 80005fc:	08006274 	.word	0x08006274
 8000600:	08000551 	.word	0x08000551

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f005 fd2e 	bl	8006074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <SystemClock_Config+0xcc>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xd0>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000674:	2308      	movs	r3, #8
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000678:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000682:	2307      	movs	r3, #7
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fdba 	bl	8001204 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000696:	f000 f8c5 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2105      	movs	r1, #5
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 f81b 	bl	80016f4 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c4:	f000 f8ae 	bl	8000824 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	; 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_USART2_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000710:	f001 fcf0 	bl	80020f4 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 f883 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000090 	.word	0x20000090
 8000728:	40004400 	.word	0x40004400

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b2b      	ldr	r3, [pc, #172]	; (80007f4 <MX_GPIO_Init+0xc8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a2a      	ldr	r2, [pc, #168]	; (80007f4 <MX_GPIO_Init+0xc8>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <MX_GPIO_Init+0xc8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <MX_GPIO_Init+0xc8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a23      	ldr	r2, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xc8>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <MX_GPIO_Init+0xc8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_GPIO_Init+0xc8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xc8>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_GPIO_Init+0xc8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800079c:	4816      	ldr	r0, [pc, #88]	; (80007f8 <MX_GPIO_Init+0xcc>)
 800079e:	f000 fcff 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a2:	2301      	movs	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	4811      	ldr	r0, [pc, #68]	; (80007fc <MX_GPIO_Init+0xd0>)
 80007b8:	f000 fb56 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007bc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	4619      	mov	r1, r3
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <MX_GPIO_Init+0xcc>)
 80007d6:	f000 fb47 	bl	8000e68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2105      	movs	r1, #5
 80007de:	2006      	movs	r0, #6
 80007e0:	f000 fa86 	bl	8000cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007e4:	2006      	movs	r0, #6
 80007e6:	f000 fa9f 	bl	8000d28 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ea:	bf00      	nop
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020c00 	.word	0x40020c00
 80007fc:	40020000 	.word	0x40020000

08000800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000812:	f000 f995 	bl	8000b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40002000 	.word	0x40002000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_MspInit+0x54>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	4a11      	ldr	r2, [pc, #68]	; (8000884 <HAL_MspInit+0x54>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_MspInit+0x54>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_MspInit+0x54>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <HAL_MspInit+0x54>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_MspInit+0x54>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	210f      	movs	r1, #15
 8000872:	f06f 0001 	mvn.w	r0, #1
 8000876:	f000 fa3b 	bl	8000cf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a1d      	ldr	r2, [pc, #116]	; (800091c <HAL_UART_MspInit+0x94>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d133      	bne.n	8000912 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a14      	ldr	r2, [pc, #80]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008e2:	230c      	movs	r3, #12
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f2:	2307      	movs	r3, #7
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <HAL_UART_MspInit+0x9c>)
 80008fe:	f000 fab3 	bl	8000e68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2105      	movs	r1, #5
 8000906:	2026      	movs	r0, #38	; 0x26
 8000908:	f000 f9f2 	bl	8000cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800090c:	2026      	movs	r0, #38	; 0x26
 800090e:	f000 fa0b 	bl	8000d28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40004400 	.word	0x40004400
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000

08000928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	; 0x38
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <HAL_InitTick+0xe4>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a32      	ldr	r2, [pc, #200]	; (8000a0c <HAL_InitTick+0xe4>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
 8000948:	4b30      	ldr	r3, [pc, #192]	; (8000a0c <HAL_InitTick+0xe4>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000954:	f107 0210 	add.w	r2, r7, #16
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f001 f8e8 	bl	8001b34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800096a:	2b00      	cmp	r3, #0
 800096c:	d103      	bne.n	8000976 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800096e:	f001 f8b9 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8000972:	6378      	str	r0, [r7, #52]	; 0x34
 8000974:	e004      	b.n	8000980 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000976:	f001 f8b5 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 800097a:	4603      	mov	r3, r0
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000982:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <HAL_InitTick+0xe8>)
 8000984:	fba2 2303 	umull	r2, r3, r2, r3
 8000988:	0c9b      	lsrs	r3, r3, #18
 800098a:	3b01      	subs	r3, #1
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <HAL_InitTick+0xec>)
 8000990:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <HAL_InitTick+0xf0>)
 8000992:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <HAL_InitTick+0xec>)
 8000996:	f240 32e7 	movw	r2, #999	; 0x3e7
 800099a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <HAL_InitTick+0xec>)
 800099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_InitTick+0xec>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <HAL_InitTick+0xec>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_InitTick+0xec>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80009b4:	4817      	ldr	r0, [pc, #92]	; (8000a14 <HAL_InitTick+0xec>)
 80009b6:	f001 f8ef 	bl	8001b98 <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d11b      	bne.n	8000a00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80009c8:	4812      	ldr	r0, [pc, #72]	; (8000a14 <HAL_InitTick+0xec>)
 80009ca:	f001 f93f 	bl	8001c4c <HAL_TIM_Base_Start_IT>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d111      	bne.n	8000a00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80009dc:	202d      	movs	r0, #45	; 0x2d
 80009de:	f000 f9a3 	bl	8000d28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d808      	bhi.n	80009fa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	202d      	movs	r0, #45	; 0x2d
 80009ee:	f000 f97f 	bl	8000cf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_InitTick+0xf4>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	e002      	b.n	8000a00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3738      	adds	r7, #56	; 0x38
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	431bde83 	.word	0x431bde83
 8000a14:	200000d8 	.word	0x200000d8
 8000a18:	40002000 	.word	0x40002000
 8000a1c:	20000004 	.word	0x20000004

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f000 fbbf 	bl	80011d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <USART2_IRQHandler+0x10>)
 8000a62:	f001 fc27 	bl	80022b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000090 	.word	0x20000090

08000a70 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000a76:	f001 f959 	bl	8001d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000d8 	.word	0x200000d8

08000a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aae:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac4:	4c0b      	ldr	r4, [pc, #44]	; (8000af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ad2:	f7ff ffd7 	bl	8000a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f005 fa99 	bl	800600c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ada:	f7ff fd6d 	bl	80005b8 <main>
  bx  lr    
 8000ade:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000aec:	0800631c 	.word	0x0800631c
  ldr r2, =_sbss
 8000af0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000af4:	20004b38 	.word	0x20004b38

08000af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <HAL_Init+0x40>)
 8000b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_Init+0x40>)
 8000b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x40>)
 8000b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f8d8 	bl	8000cda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f7ff fefc 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fe7e 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023c00 	.word	0x40023c00

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000120 	.word	0x20000120

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000120 	.word	0x20000120

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ff4c 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d02:	f7ff ff61 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	68b9      	ldr	r1, [r7, #8]
 8000d0c:	6978      	ldr	r0, [r7, #20]
 8000d0e:	f7ff ffb1 	bl	8000c74 <NVIC_EncodePriority>
 8000d12:	4602      	mov	r2, r0
 8000d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff80 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff54 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d52:	f7ff ff09 	bl	8000b68 <HAL_GetTick>
 8000d56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d008      	beq.n	8000d76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e052      	b.n	8000e1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 0216 	bic.w	r2, r2, #22
 8000d84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d103      	bne.n	8000da6 <HAL_DMA_Abort+0x62>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d007      	beq.n	8000db6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0208 	bic.w	r2, r2, #8
 8000db4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 0201 	bic.w	r2, r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dc6:	e013      	b.n	8000df0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dc8:	f7ff fece 	bl	8000b68 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b05      	cmp	r3, #5
 8000dd4:	d90c      	bls.n	8000df0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2220      	movs	r2, #32
 8000dda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2203      	movs	r2, #3
 8000de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e015      	b.n	8000e1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1e4      	bne.n	8000dc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e02:	223f      	movs	r2, #63	; 0x3f
 8000e04:	409a      	lsls	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d004      	beq.n	8000e42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00c      	b.n	8000e5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2205      	movs	r2, #5
 8000e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0201 	bic.w	r2, r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	e16b      	b.n	800115c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 815a 	bne.w	8001156 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d005      	beq.n	8000eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d130      	bne.n	8000f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	f003 0201 	and.w	r2, r3, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d017      	beq.n	8000f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d123      	bne.n	8000fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	69b9      	ldr	r1, [r7, #24]
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0203 	and.w	r2, r3, #3
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80b4 	beq.w	8001156 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b60      	ldr	r3, [pc, #384]	; (8001174 <HAL_GPIO_Init+0x30c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a5f      	ldr	r2, [pc, #380]	; (8001174 <HAL_GPIO_Init+0x30c>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <HAL_GPIO_Init+0x30c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100a:	4a5b      	ldr	r2, [pc, #364]	; (8001178 <HAL_GPIO_Init+0x310>)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a52      	ldr	r2, [pc, #328]	; (800117c <HAL_GPIO_Init+0x314>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d02b      	beq.n	800108e <HAL_GPIO_Init+0x226>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a51      	ldr	r2, [pc, #324]	; (8001180 <HAL_GPIO_Init+0x318>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d025      	beq.n	800108a <HAL_GPIO_Init+0x222>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a50      	ldr	r2, [pc, #320]	; (8001184 <HAL_GPIO_Init+0x31c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d01f      	beq.n	8001086 <HAL_GPIO_Init+0x21e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4f      	ldr	r2, [pc, #316]	; (8001188 <HAL_GPIO_Init+0x320>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d019      	beq.n	8001082 <HAL_GPIO_Init+0x21a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4e      	ldr	r2, [pc, #312]	; (800118c <HAL_GPIO_Init+0x324>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0x216>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4d      	ldr	r2, [pc, #308]	; (8001190 <HAL_GPIO_Init+0x328>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00d      	beq.n	800107a <HAL_GPIO_Init+0x212>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4c      	ldr	r2, [pc, #304]	; (8001194 <HAL_GPIO_Init+0x32c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d007      	beq.n	8001076 <HAL_GPIO_Init+0x20e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4b      	ldr	r2, [pc, #300]	; (8001198 <HAL_GPIO_Init+0x330>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_GPIO_Init+0x20a>
 800106e:	2307      	movs	r3, #7
 8001070:	e00e      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001072:	2308      	movs	r3, #8
 8001074:	e00c      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001076:	2306      	movs	r3, #6
 8001078:	e00a      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800107a:	2305      	movs	r3, #5
 800107c:	e008      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800107e:	2304      	movs	r3, #4
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001082:	2303      	movs	r3, #3
 8001084:	e004      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001086:	2302      	movs	r3, #2
 8001088:	e002      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800108e:	2300      	movs	r3, #0
 8001090:	69fa      	ldr	r2, [r7, #28]
 8001092:	f002 0203 	and.w	r2, r2, #3
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	4093      	lsls	r3, r2
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a0:	4935      	ldr	r1, [pc, #212]	; (8001178 <HAL_GPIO_Init+0x310>)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ae:	4b3b      	ldr	r3, [pc, #236]	; (800119c <HAL_GPIO_Init+0x334>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d2:	4a32      	ldr	r2, [pc, #200]	; (800119c <HAL_GPIO_Init+0x334>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d8:	4b30      	ldr	r3, [pc, #192]	; (800119c <HAL_GPIO_Init+0x334>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010fc:	4a27      	ldr	r2, [pc, #156]	; (800119c <HAL_GPIO_Init+0x334>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <HAL_GPIO_Init+0x334>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_GPIO_Init+0x334>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_GPIO_Init+0x334>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_GPIO_Init+0x334>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	f67f ae90 	bls.w	8000e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40013800 	.word	0x40013800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800
 8001188:	40020c00 	.word	0x40020c00
 800118c:	40021000 	.word	0x40021000
 8001190:	40021400 	.word	0x40021400
 8001194:	40021800 	.word	0x40021800
 8001198:	40021c00 	.word	0x40021c00
 800119c:	40013c00 	.word	0x40013c00

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011bc:	e003      	b.n	80011c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f976 	bl	80004e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e267      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d075      	beq.n	800130e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b04      	cmp	r3, #4
 800122c:	d00c      	beq.n	8001248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122e:	4b85      	ldr	r3, [pc, #532]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001236:	2b08      	cmp	r3, #8
 8001238:	d112      	bne.n	8001260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123a:	4b82      	ldr	r3, [pc, #520]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001246:	d10b      	bne.n	8001260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	4b7e      	ldr	r3, [pc, #504]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d05b      	beq.n	800130c <HAL_RCC_OscConfig+0x108>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d157      	bne.n	800130c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e242      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001268:	d106      	bne.n	8001278 <HAL_RCC_OscConfig+0x74>
 800126a:	4b76      	ldr	r3, [pc, #472]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a75      	ldr	r2, [pc, #468]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e01d      	b.n	80012b4 <HAL_RCC_OscConfig+0xb0>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x98>
 8001282:	4b70      	ldr	r3, [pc, #448]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a6f      	ldr	r2, [pc, #444]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b6d      	ldr	r3, [pc, #436]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a6c      	ldr	r2, [pc, #432]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0xb0>
 800129c:	4b69      	ldr	r3, [pc, #420]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a68      	ldr	r2, [pc, #416]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a65      	ldr	r2, [pc, #404]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80012ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fc54 	bl	8000b68 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fc50 	bl	8000b68 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e207      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	4b5b      	ldr	r3, [pc, #364]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0xc0>
 80012e2:	e014      	b.n	800130e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fc40 	bl	8000b68 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fc3c 	bl	8000b68 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e1f3      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	4b51      	ldr	r3, [pc, #324]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0xe8>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d063      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131a:	4b4a      	ldr	r3, [pc, #296]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001326:	4b47      	ldr	r3, [pc, #284]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132e:	2b08      	cmp	r3, #8
 8001330:	d11c      	bne.n	800136c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001332:	4b44      	ldr	r3, [pc, #272]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d116      	bne.n	800136c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <HAL_RCC_OscConfig+0x152>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1c7      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001356:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4937      	ldr	r1, [pc, #220]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	e03a      	b.n	80013e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d020      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <HAL_RCC_OscConfig+0x244>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fbf5 	bl	8000b68 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fbf1 	bl	8000b68 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e1a8      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001394:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b28      	ldr	r3, [pc, #160]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4925      	ldr	r1, [pc, #148]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
 80013b4:	e015      	b.n	80013e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <HAL_RCC_OscConfig+0x244>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fbd4 	bl	8000b68 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c4:	f7ff fbd0 	bl	8000b68 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e187      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d036      	beq.n	800145c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d016      	beq.n	8001424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_RCC_OscConfig+0x248>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fc:	f7ff fbb4 	bl	8000b68 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001404:	f7ff fbb0 	bl	8000b68 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e167      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x200>
 8001422:	e01b      	b.n	800145c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_RCC_OscConfig+0x248>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142a:	f7ff fb9d 	bl	8000b68 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	e00e      	b.n	8001450 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001432:	f7ff fb99 	bl	8000b68 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d907      	bls.n	8001450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e150      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
 8001444:	40023800 	.word	0x40023800
 8001448:	42470000 	.word	0x42470000
 800144c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	4b88      	ldr	r3, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1ea      	bne.n	8001432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8097 	beq.w	8001598 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146e:	4b81      	ldr	r3, [pc, #516]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10f      	bne.n	800149a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b7d      	ldr	r3, [pc, #500]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a7c      	ldr	r2, [pc, #496]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b7a      	ldr	r3, [pc, #488]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001496:	2301      	movs	r3, #1
 8001498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	4b77      	ldr	r3, [pc, #476]	; (8001678 <HAL_RCC_OscConfig+0x474>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d118      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a6:	4b74      	ldr	r3, [pc, #464]	; (8001678 <HAL_RCC_OscConfig+0x474>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a73      	ldr	r2, [pc, #460]	; (8001678 <HAL_RCC_OscConfig+0x474>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fb59 	bl	8000b68 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ba:	f7ff fb55 	bl	8000b68 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e10c      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	4b6a      	ldr	r3, [pc, #424]	; (8001678 <HAL_RCC_OscConfig+0x474>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x2ea>
 80014e0:	4b64      	ldr	r3, [pc, #400]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e4:	4a63      	ldr	r2, [pc, #396]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6713      	str	r3, [r2, #112]	; 0x70
 80014ec:	e01c      	b.n	8001528 <HAL_RCC_OscConfig+0x324>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b05      	cmp	r3, #5
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0x30c>
 80014f6:	4b5f      	ldr	r3, [pc, #380]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	4a5e      	ldr	r2, [pc, #376]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6713      	str	r3, [r2, #112]	; 0x70
 8001502:	4b5c      	ldr	r3, [pc, #368]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001506:	4a5b      	ldr	r2, [pc, #364]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6713      	str	r3, [r2, #112]	; 0x70
 800150e:	e00b      	b.n	8001528 <HAL_RCC_OscConfig+0x324>
 8001510:	4b58      	ldr	r3, [pc, #352]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a57      	ldr	r2, [pc, #348]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	; 0x70
 800151c:	4b55      	ldr	r3, [pc, #340]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001520:	4a54      	ldr	r2, [pc, #336]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001522:	f023 0304 	bic.w	r3, r3, #4
 8001526:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d015      	beq.n	800155c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001530:	f7ff fb1a 	bl	8000b68 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001536:	e00a      	b.n	800154e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f7ff fb16 	bl	8000b68 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0cb      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154e:	4b49      	ldr	r3, [pc, #292]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0ee      	beq.n	8001538 <HAL_RCC_OscConfig+0x334>
 800155a:	e014      	b.n	8001586 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155c:	f7ff fb04 	bl	8000b68 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff fb00 	bl	8000b68 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e0b5      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157a:	4b3e      	ldr	r3, [pc, #248]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1ee      	bne.n	8001564 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158c:	4b39      	ldr	r3, [pc, #228]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	4a38      	ldr	r2, [pc, #224]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80a1 	beq.w	80016e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a2:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d05c      	beq.n	8001668 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d141      	bne.n	800163a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b31      	ldr	r3, [pc, #196]	; (800167c <HAL_RCC_OscConfig+0x478>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fad4 	bl	8000b68 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff fad0 	bl	8000b68 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e087      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69da      	ldr	r2, [r3, #28]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	019b      	lsls	r3, r3, #6
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	3b01      	subs	r3, #1
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	061b      	lsls	r3, r3, #24
 8001606:	491b      	ldr	r1, [pc, #108]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_RCC_OscConfig+0x478>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff faa9 	bl	8000b68 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff faa5 	bl	8000b68 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e05c      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x416>
 8001638:	e054      	b.n	80016e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_RCC_OscConfig+0x478>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fa92 	bl	8000b68 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fa8e 	bl	8000b68 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e045      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x444>
 8001666:	e03d      	b.n	80016e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d107      	bne.n	8001680 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e038      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000
 800167c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_RCC_OscConfig+0x4ec>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d028      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d121      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d11a      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b0:	4013      	ands	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d111      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	3b01      	subs	r3, #1
 80016ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d107      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0cc      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d90c      	bls.n	8001730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0b8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800176a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	494d      	ldr	r1, [pc, #308]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d044      	beq.n	8001814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d119      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d003      	beq.n	80017b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e067      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 0203 	bic.w	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4934      	ldr	r1, [pc, #208]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e4:	f7ff f9c0 	bl	8000b68 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff f9bc 	bl	8000b68 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e04f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 020c 	and.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d1eb      	bne.n	80017ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d20c      	bcs.n	800183c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e032      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	490e      	ldr	r1, [pc, #56]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187a:	f000 f821 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800187e:	4602      	mov	r2, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	490a      	ldr	r1, [pc, #40]	; (80018b4 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	5ccb      	ldrb	r3, [r1, r3]
 800188e:	fa22 f303 	lsr.w	r3, r2, r3
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f844 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08006294 	.word	0x08006294
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c4:	b094      	sub	sp, #80	; 0x50
 80018c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
 80018cc:	2300      	movs	r3, #0
 80018ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018d0:	2300      	movs	r3, #0
 80018d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d8:	4b79      	ldr	r3, [pc, #484]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d00d      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x40>
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	f200 80e1 	bhi.w	8001aac <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x34>
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d003      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0x3a>
 80018f2:	e0db      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f4:	4b73      	ldr	r3, [pc, #460]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 80018f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018f8:	e0db      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018fa:	4b73      	ldr	r3, [pc, #460]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x208>)
 80018fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018fe:	e0d8      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001900:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001908:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190a:	4b6d      	ldr	r3, [pc, #436]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d063      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001916:	4b6a      	ldr	r3, [pc, #424]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	099b      	lsrs	r3, r3, #6
 800191c:	2200      	movs	r2, #0
 800191e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001920:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
 800192a:	2300      	movs	r3, #0
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
 800192e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001932:	4622      	mov	r2, r4
 8001934:	462b      	mov	r3, r5
 8001936:	f04f 0000 	mov.w	r0, #0
 800193a:	f04f 0100 	mov.w	r1, #0
 800193e:	0159      	lsls	r1, r3, #5
 8001940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001944:	0150      	lsls	r0, r2, #5
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4621      	mov	r1, r4
 800194c:	1a51      	subs	r1, r2, r1
 800194e:	6139      	str	r1, [r7, #16]
 8001950:	4629      	mov	r1, r5
 8001952:	eb63 0301 	sbc.w	r3, r3, r1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001964:	4659      	mov	r1, fp
 8001966:	018b      	lsls	r3, r1, #6
 8001968:	4651      	mov	r1, sl
 800196a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800196e:	4651      	mov	r1, sl
 8001970:	018a      	lsls	r2, r1, #6
 8001972:	4651      	mov	r1, sl
 8001974:	ebb2 0801 	subs.w	r8, r2, r1
 8001978:	4659      	mov	r1, fp
 800197a:	eb63 0901 	sbc.w	r9, r3, r1
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800198a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800198e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001992:	4690      	mov	r8, r2
 8001994:	4699      	mov	r9, r3
 8001996:	4623      	mov	r3, r4
 8001998:	eb18 0303 	adds.w	r3, r8, r3
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	462b      	mov	r3, r5
 80019a0:	eb49 0303 	adc.w	r3, r9, r3
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019b2:	4629      	mov	r1, r5
 80019b4:	024b      	lsls	r3, r1, #9
 80019b6:	4621      	mov	r1, r4
 80019b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019bc:	4621      	mov	r1, r4
 80019be:	024a      	lsls	r2, r1, #9
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c6:	2200      	movs	r2, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019d0:	f7fe fc06 	bl	80001e0 <__aeabi_uldivmod>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4613      	mov	r3, r2
 80019da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019dc:	e058      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019de:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	099b      	lsrs	r3, r3, #6
 80019e4:	2200      	movs	r2, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	4611      	mov	r1, r2
 80019ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ee:	623b      	str	r3, [r7, #32]
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
 80019f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019f8:	4642      	mov	r2, r8
 80019fa:	464b      	mov	r3, r9
 80019fc:	f04f 0000 	mov.w	r0, #0
 8001a00:	f04f 0100 	mov.w	r1, #0
 8001a04:	0159      	lsls	r1, r3, #5
 8001a06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a0a:	0150      	lsls	r0, r2, #5
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4641      	mov	r1, r8
 8001a12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a16:	4649      	mov	r1, r9
 8001a18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a30:	ebb2 040a 	subs.w	r4, r2, sl
 8001a34:	eb63 050b 	sbc.w	r5, r3, fp
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	00eb      	lsls	r3, r5, #3
 8001a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a46:	00e2      	lsls	r2, r4, #3
 8001a48:	4614      	mov	r4, r2
 8001a4a:	461d      	mov	r5, r3
 8001a4c:	4643      	mov	r3, r8
 8001a4e:	18e3      	adds	r3, r4, r3
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	464b      	mov	r3, r9
 8001a54:	eb45 0303 	adc.w	r3, r5, r3
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a66:	4629      	mov	r1, r5
 8001a68:	028b      	lsls	r3, r1, #10
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a70:	4621      	mov	r1, r4
 8001a72:	028a      	lsls	r2, r1, #10
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	61fa      	str	r2, [r7, #28]
 8001a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a84:	f7fe fbac 	bl	80001e0 <__aeabi_uldivmod>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	0c1b      	lsrs	r3, r3, #16
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001aa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aaa:	e002      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3750      	adds	r7, #80	; 0x50
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	00f42400 	.word	0x00f42400
 8001ac8:	007a1200 	.word	0x007a1200

08001acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000000 	.word	0x20000000

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae8:	f7ff fff0 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	0a9b      	lsrs	r3, r3, #10
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	4903      	ldr	r1, [pc, #12]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	080062a4 	.word	0x080062a4

08001b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b10:	f7ff ffdc 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	0b5b      	lsrs	r3, r3, #13
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4903      	ldr	r1, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	080062a4 	.word	0x080062a4

08001b34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	220f      	movs	r2, #15
 8001b42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_RCC_GetClockConfig+0x60>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0207 	and.w	r2, r3, #7
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	601a      	str	r2, [r3, #0]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e041      	b.n	8001c2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f839 	bl	8001c36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f000 f9d8 	bl	8001f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d001      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e04e      	b.n	8001d02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a23      	ldr	r2, [pc, #140]	; (8001d10 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d022      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8e:	d01d      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d018      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d013      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00e      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d009      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d004      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d111      	bne.n	8001cf0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d010      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cee:	e007      	b.n	8001d00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40000800 	.word	0x40000800
 8001d1c:	40000c00 	.word	0x40000c00
 8001d20:	40010400 	.word	0x40010400
 8001d24:	40014000 	.word	0x40014000
 8001d28:	40001800 	.word	0x40001800

08001d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d122      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d11b      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0202 	mvn.w	r2, #2
 8001d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8ee 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8e0 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f8f1 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d122      	bne.n	8001ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d11b      	bne.n	8001ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0204 	mvn.w	r2, #4
 8001dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2202      	movs	r2, #2
 8001db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8c4 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001dc8:	e005      	b.n	8001dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8b6 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f8c7 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d122      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d11b      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0208 	mvn.w	r2, #8
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2204      	movs	r2, #4
 8001e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f89a 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f88c 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f89d 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d122      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d11b      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0210 	mvn.w	r2, #16
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f870 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f862 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f873 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d10e      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d107      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0201 	mvn.w	r2, #1
 8001ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fca8 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eba:	2b80      	cmp	r3, #128	; 0x80
 8001ebc:	d10e      	bne.n	8001edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b80      	cmp	r3, #128	; 0x80
 8001eca:	d107      	bne.n	8001edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f902 	bl	80020e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d10e      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d107      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f838 	bl	8001f78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d107      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0220 	mvn.w	r2, #32
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8cc 	bl	80020cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <TIM_Base_SetConfig+0x114>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001faa:	d00f      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3d      	ldr	r2, [pc, #244]	; (80020a4 <TIM_Base_SetConfig+0x118>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00b      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3c      	ldr	r2, [pc, #240]	; (80020a8 <TIM_Base_SetConfig+0x11c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d007      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3b      	ldr	r2, [pc, #236]	; (80020ac <TIM_Base_SetConfig+0x120>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d003      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3a      	ldr	r2, [pc, #232]	; (80020b0 <TIM_Base_SetConfig+0x124>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d108      	bne.n	8001fde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a2f      	ldr	r2, [pc, #188]	; (80020a0 <TIM_Base_SetConfig+0x114>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d02b      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fec:	d027      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	; (80020a4 <TIM_Base_SetConfig+0x118>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d023      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <TIM_Base_SetConfig+0x11c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01f      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <TIM_Base_SetConfig+0x120>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01b      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a29      	ldr	r2, [pc, #164]	; (80020b0 <TIM_Base_SetConfig+0x124>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d017      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <TIM_Base_SetConfig+0x128>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <TIM_Base_SetConfig+0x12c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00f      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a26      	ldr	r2, [pc, #152]	; (80020bc <TIM_Base_SetConfig+0x130>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00b      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a25      	ldr	r2, [pc, #148]	; (80020c0 <TIM_Base_SetConfig+0x134>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <TIM_Base_SetConfig+0x138>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d003      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <TIM_Base_SetConfig+0x13c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d108      	bne.n	8002050 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <TIM_Base_SetConfig+0x114>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d003      	beq.n	8002084 <TIM_Base_SetConfig+0xf8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <TIM_Base_SetConfig+0x124>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d103      	bne.n	800208c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	615a      	str	r2, [r3, #20]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40000800 	.word	0x40000800
 80020ac:	40000c00 	.word	0x40000c00
 80020b0:	40010400 	.word	0x40010400
 80020b4:	40014000 	.word	0x40014000
 80020b8:	40014400 	.word	0x40014400
 80020bc:	40014800 	.word	0x40014800
 80020c0:	40001800 	.word	0x40001800
 80020c4:	40001c00 	.word	0x40001c00
 80020c8:	40002000 	.word	0x40002000

080020cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e03f      	b.n	8002186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fbb4 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2224      	movs	r2, #36	; 0x24
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fd7b 	bl	8002c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800214c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800215c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800216c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b08a      	sub	sp, #40	; 0x28
 8002192:	af02      	add	r7, sp, #8
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	4613      	mov	r3, r2
 800219c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	d17c      	bne.n	80022a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_UART_Transmit+0x2c>
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e075      	b.n	80022aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_UART_Transmit+0x3e>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e06e      	b.n	80022aa <HAL_UART_Transmit+0x11c>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2221      	movs	r2, #33	; 0x21
 80021de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021e2:	f7fe fcc1 	bl	8000b68 <HAL_GetTick>
 80021e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	88fa      	ldrh	r2, [r7, #6]
 80021ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	88fa      	ldrh	r2, [r7, #6]
 80021f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fc:	d108      	bne.n	8002210 <HAL_UART_Transmit+0x82>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d104      	bne.n	8002210 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	e003      	b.n	8002218 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002220:	e02a      	b.n	8002278 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2200      	movs	r2, #0
 800222a:	2180      	movs	r1, #128	; 0x80
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 faf9 	bl	8002824 <UART_WaitOnFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e036      	b.n	80022aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10b      	bne.n	800225a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002250:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	3302      	adds	r3, #2
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	e007      	b.n	800226a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	3301      	adds	r3, #1
 8002268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1cf      	bne.n	8002222 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2200      	movs	r2, #0
 800228a:	2140      	movs	r1, #64	; 0x40
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 fac9 	bl	8002824 <UART_WaitOnFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e006      	b.n	80022aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e000      	b.n	80022aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022a8:	2302      	movs	r3, #2
  }
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b0ba      	sub	sp, #232	; 0xe8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10f      	bne.n	800231a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_UART_IRQHandler+0x66>
 8002306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fbd3 	bl	8002abe <UART_Receive_IT>
      return;
 8002318:	e256      	b.n	80027c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800231a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80de 	beq.w	80024e0 <HAL_UART_IRQHandler+0x22c>
 8002324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002334:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80d1 	beq.w	80024e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800233e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_UART_IRQHandler+0xae>
 800234a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <HAL_UART_IRQHandler+0xd2>
 800236e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f043 0202 	orr.w	r2, r3, #2
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <HAL_UART_IRQHandler+0xf6>
 8002392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f043 0204 	orr.w	r2, r3, #4
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d011      	beq.n	80023da <HAL_UART_IRQHandler+0x126>
 80023b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f043 0208 	orr.w	r2, r3, #8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 81ed 	beq.w	80027be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_UART_IRQHandler+0x14e>
 80023f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fb5e 	bl	8002abe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b40      	cmp	r3, #64	; 0x40
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d103      	bne.n	800242e <HAL_UART_IRQHandler+0x17a>
 8002426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d04f      	beq.n	80024ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fa66 	bl	8002900 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	2b40      	cmp	r3, #64	; 0x40
 8002440:	d141      	bne.n	80024c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3314      	adds	r3, #20
 8002448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002450:	e853 3f00 	ldrex	r3, [r3]
 8002454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002458:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800245c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3314      	adds	r3, #20
 800246a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800246e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002476:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800247a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800247e:	e841 2300 	strex	r3, r2, [r1]
 8002482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1d9      	bne.n	8002442 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002492:	2b00      	cmp	r3, #0
 8002494:	d013      	beq.n	80024be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	4a7d      	ldr	r2, [pc, #500]	; (8002690 <HAL_UART_IRQHandler+0x3dc>)
 800249c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fcbe 	bl	8000e24 <HAL_DMA_Abort_IT>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d016      	beq.n	80024dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024b8:	4610      	mov	r0, r2
 80024ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024bc:	e00e      	b.n	80024dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f99a 	bl	80027f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c4:	e00a      	b.n	80024dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f996 	bl	80027f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024cc:	e006      	b.n	80024dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f992 	bl	80027f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024da:	e170      	b.n	80027be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024dc:	bf00      	nop
    return;
 80024de:	e16e      	b.n	80027be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	f040 814a 	bne.w	800277e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8143 	beq.w	800277e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 813c 	beq.w	800277e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b40      	cmp	r3, #64	; 0x40
 8002528:	f040 80b4 	bne.w	8002694 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002538:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8140 	beq.w	80027c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800254a:	429a      	cmp	r2, r3
 800254c:	f080 8139 	bcs.w	80027c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002556:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002562:	f000 8088 	beq.w	8002676 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	330c      	adds	r3, #12
 800256c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002574:	e853 3f00 	ldrex	r3, [r3]
 8002578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800257c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002584:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	330c      	adds	r3, #12
 800258e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002592:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800259e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025a2:	e841 2300 	strex	r3, r2, [r1]
 80025a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80025aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1d9      	bne.n	8002566 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3314      	adds	r3, #20
 80025b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025bc:	e853 3f00 	ldrex	r3, [r3]
 80025c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3314      	adds	r3, #20
 80025d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025e2:	e841 2300 	strex	r3, r2, [r1]
 80025e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1e1      	bne.n	80025b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3314      	adds	r3, #20
 80025f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f8:	e853 3f00 	ldrex	r3, [r3]
 80025fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3314      	adds	r3, #20
 800260e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002612:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002614:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002616:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002618:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800261a:	e841 2300 	strex	r3, r2, [r1]
 800261e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1e3      	bne.n	80025ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	330c      	adds	r3, #12
 800263a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800263e:	e853 3f00 	ldrex	r3, [r3]
 8002642:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002646:	f023 0310 	bic.w	r3, r3, #16
 800264a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	330c      	adds	r3, #12
 8002654:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002658:	65ba      	str	r2, [r7, #88]	; 0x58
 800265a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800265e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002660:	e841 2300 	strex	r3, r2, [r1]
 8002664:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1e3      	bne.n	8002634 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fb67 	bl	8000d44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800267e:	b29b      	uxth	r3, r3
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	b29b      	uxth	r3, r3
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f8c0 	bl	800280c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800268c:	e099      	b.n	80027c2 <HAL_UART_IRQHandler+0x50e>
 800268e:	bf00      	nop
 8002690:	080029c7 	.word	0x080029c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800269c:	b29b      	uxth	r3, r3
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 808b 	beq.w	80027c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80026b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8086 	beq.w	80027c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	330c      	adds	r3, #12
 80026c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c4:	e853 3f00 	ldrex	r3, [r3]
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	330c      	adds	r3, #12
 80026da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026de:	647a      	str	r2, [r7, #68]	; 0x44
 80026e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026e6:	e841 2300 	strex	r3, r2, [r1]
 80026ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1e3      	bne.n	80026ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3314      	adds	r3, #20
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	e853 3f00 	ldrex	r3, [r3]
 8002700:	623b      	str	r3, [r7, #32]
   return(result);
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3314      	adds	r3, #20
 8002712:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002716:	633a      	str	r2, [r7, #48]	; 0x30
 8002718:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800271c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800271e:	e841 2300 	strex	r3, r2, [r1]
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1e3      	bne.n	80026f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	330c      	adds	r3, #12
 800273e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	e853 3f00 	ldrex	r3, [r3]
 8002746:	60fb      	str	r3, [r7, #12]
   return(result);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0310 	bic.w	r3, r3, #16
 800274e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	330c      	adds	r3, #12
 8002758:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800275c:	61fa      	str	r2, [r7, #28]
 800275e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	69b9      	ldr	r1, [r7, #24]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	e841 2300 	strex	r3, r2, [r1]
 8002768:	617b      	str	r3, [r7, #20]
   return(result);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e3      	bne.n	8002738 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002770:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002774:	4619      	mov	r1, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f848 	bl	800280c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800277c:	e023      	b.n	80027c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800277e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_UART_IRQHandler+0x4ea>
 800278a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800278e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f929 	bl	80029ee <UART_Transmit_IT>
    return;
 800279c:	e014      	b.n	80027c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800279e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00e      	beq.n	80027c8 <HAL_UART_IRQHandler+0x514>
 80027aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f969 	bl	8002a8e <UART_EndTransmit_IT>
    return;
 80027bc:	e004      	b.n	80027c8 <HAL_UART_IRQHandler+0x514>
    return;
 80027be:	bf00      	nop
 80027c0:	e002      	b.n	80027c8 <HAL_UART_IRQHandler+0x514>
      return;
 80027c2:	bf00      	nop
 80027c4:	e000      	b.n	80027c8 <HAL_UART_IRQHandler+0x514>
      return;
 80027c6:	bf00      	nop
  }
}
 80027c8:	37e8      	adds	r7, #232	; 0xe8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop

080027d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b090      	sub	sp, #64	; 0x40
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002834:	e050      	b.n	80028d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d04c      	beq.n	80028d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800283e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <UART_WaitOnFlagUntilTimeout+0x30>
 8002844:	f7fe f990 	bl	8000b68 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002850:	429a      	cmp	r2, r3
 8002852:	d241      	bcs.n	80028d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	e853 3f00 	ldrex	r3, [r3]
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800286a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	330c      	adds	r3, #12
 8002872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002874:	637a      	str	r2, [r7, #52]	; 0x34
 8002876:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800287a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800287c:	e841 2300 	strex	r3, r2, [r1]
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e5      	bne.n	8002854 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3314      	adds	r3, #20
 800288e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	e853 3f00 	ldrex	r3, [r3]
 8002896:	613b      	str	r3, [r7, #16]
   return(result);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3314      	adds	r3, #20
 80028a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028a8:	623a      	str	r2, [r7, #32]
 80028aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ac:	69f9      	ldr	r1, [r7, #28]
 80028ae:	6a3a      	ldr	r2, [r7, #32]
 80028b0:	e841 2300 	strex	r3, r2, [r1]
 80028b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e5      	bne.n	8002888 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e00f      	b.n	80028f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4013      	ands	r3, r2
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d09f      	beq.n	8002836 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3740      	adds	r7, #64	; 0x40
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002900:	b480      	push	{r7}
 8002902:	b095      	sub	sp, #84	; 0x54
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	330c      	adds	r3, #12
 800290e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002912:	e853 3f00 	ldrex	r3, [r3]
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800291e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	330c      	adds	r3, #12
 8002926:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002928:	643a      	str	r2, [r7, #64]	; 0x40
 800292a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800292e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e5      	bne.n	8002908 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3314      	adds	r3, #20
 8002942:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	e853 3f00 	ldrex	r3, [r3]
 800294a:	61fb      	str	r3, [r7, #28]
   return(result);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	64bb      	str	r3, [r7, #72]	; 0x48
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3314      	adds	r3, #20
 800295a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800295c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002964:	e841 2300 	strex	r3, r2, [r1]
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e5      	bne.n	800293c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	2b01      	cmp	r3, #1
 8002976:	d119      	bne.n	80029ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	330c      	adds	r3, #12
 800297e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	e853 3f00 	ldrex	r3, [r3]
 8002986:	60bb      	str	r3, [r7, #8]
   return(result);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f023 0310 	bic.w	r3, r3, #16
 800298e:	647b      	str	r3, [r7, #68]	; 0x44
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	330c      	adds	r3, #12
 8002996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002998:	61ba      	str	r2, [r7, #24]
 800299a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299c:	6979      	ldr	r1, [r7, #20]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	e841 2300 	strex	r3, r2, [r1]
 80029a4:	613b      	str	r3, [r7, #16]
   return(result);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e5      	bne.n	8002978 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029ba:	bf00      	nop
 80029bc:	3754      	adds	r7, #84	; 0x54
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7ff ff09 	bl	80027f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b085      	sub	sp, #20
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b21      	cmp	r3, #33	; 0x21
 8002a00:	d13e      	bne.n	8002a80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0a:	d114      	bne.n	8002a36 <UART_Transmit_IT+0x48>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d110      	bne.n	8002a36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	1c9a      	adds	r2, r3, #2
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	621a      	str	r2, [r3, #32]
 8002a34:	e008      	b.n	8002a48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	1c59      	adds	r1, r3, #1
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6211      	str	r1, [r2, #32]
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4619      	mov	r1, r3
 8002a56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10f      	bne.n	8002a7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e000      	b.n	8002a82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff fe8e 	bl	80027d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b08c      	sub	sp, #48	; 0x30
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b22      	cmp	r3, #34	; 0x22
 8002ad0:	f040 80ab 	bne.w	8002c2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002adc:	d117      	bne.n	8002b0e <UART_Receive_IT+0x50>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d113      	bne.n	8002b0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	1c9a      	adds	r2, r3, #2
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b0c:	e026      	b.n	8002b5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b20:	d007      	beq.n	8002b32 <UART_Receive_IT+0x74>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <UART_Receive_IT+0x82>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e008      	b.n	8002b52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d15a      	bne.n	8002c26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0220 	bic.w	r2, r2, #32
 8002b7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0201 	bic.w	r2, r2, #1
 8002b9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d135      	bne.n	8002c1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	330c      	adds	r3, #12
 8002bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	e853 3f00 	ldrex	r3, [r3]
 8002bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f023 0310 	bic.w	r3, r3, #16
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	330c      	adds	r3, #12
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd6:	623a      	str	r2, [r7, #32]
 8002bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bda:	69f9      	ldr	r1, [r7, #28]
 8002bdc:	6a3a      	ldr	r2, [r7, #32]
 8002bde:	e841 2300 	strex	r3, r2, [r1]
 8002be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1e5      	bne.n	8002bb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d10a      	bne.n	8002c0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c12:	4619      	mov	r1, r3
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff fdf9 	bl	800280c <HAL_UARTEx_RxEventCallback>
 8002c1a:	e002      	b.n	8002c22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff fde1 	bl	80027e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e002      	b.n	8002c2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e000      	b.n	8002c2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
  }
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3730      	adds	r7, #48	; 0x30
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c38:	b0c0      	sub	sp, #256	; 0x100
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c50:	68d9      	ldr	r1, [r3, #12]
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	ea40 0301 	orr.w	r3, r0, r1
 8002c5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c8c:	f021 010c 	bic.w	r1, r1, #12
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cae:	6999      	ldr	r1, [r3, #24]
 8002cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	ea40 0301 	orr.w	r3, r0, r1
 8002cba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b8f      	ldr	r3, [pc, #572]	; (8002f00 <UART_SetConfig+0x2cc>)
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d005      	beq.n	8002cd4 <UART_SetConfig+0xa0>
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b8d      	ldr	r3, [pc, #564]	; (8002f04 <UART_SetConfig+0x2d0>)
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d104      	bne.n	8002cde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cd4:	f7fe ff1a 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 8002cd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cdc:	e003      	b.n	8002ce6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cde:	f7fe ff01 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8002ce2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf0:	f040 810c 	bne.w	8002f0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d06:	4622      	mov	r2, r4
 8002d08:	462b      	mov	r3, r5
 8002d0a:	1891      	adds	r1, r2, r2
 8002d0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d0e:	415b      	adcs	r3, r3
 8002d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d16:	4621      	mov	r1, r4
 8002d18:	eb12 0801 	adds.w	r8, r2, r1
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	eb43 0901 	adc.w	r9, r3, r1
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d36:	4690      	mov	r8, r2
 8002d38:	4699      	mov	r9, r3
 8002d3a:	4623      	mov	r3, r4
 8002d3c:	eb18 0303 	adds.w	r3, r8, r3
 8002d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d44:	462b      	mov	r3, r5
 8002d46:	eb49 0303 	adc.w	r3, r9, r3
 8002d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d62:	460b      	mov	r3, r1
 8002d64:	18db      	adds	r3, r3, r3
 8002d66:	653b      	str	r3, [r7, #80]	; 0x50
 8002d68:	4613      	mov	r3, r2
 8002d6a:	eb42 0303 	adc.w	r3, r2, r3
 8002d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d78:	f7fd fa32 	bl	80001e0 <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002d82:	fba3 2302 	umull	r2, r3, r3, r2
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	011c      	lsls	r4, r3, #4
 8002d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d9c:	4642      	mov	r2, r8
 8002d9e:	464b      	mov	r3, r9
 8002da0:	1891      	adds	r1, r2, r2
 8002da2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002da4:	415b      	adcs	r3, r3
 8002da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dac:	4641      	mov	r1, r8
 8002dae:	eb12 0a01 	adds.w	sl, r2, r1
 8002db2:	4649      	mov	r1, r9
 8002db4:	eb43 0b01 	adc.w	fp, r3, r1
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dcc:	4692      	mov	sl, r2
 8002dce:	469b      	mov	fp, r3
 8002dd0:	4643      	mov	r3, r8
 8002dd2:	eb1a 0303 	adds.w	r3, sl, r3
 8002dd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dda:	464b      	mov	r3, r9
 8002ddc:	eb4b 0303 	adc.w	r3, fp, r3
 8002de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002df0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002df4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	18db      	adds	r3, r3, r3
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8002dfe:	4613      	mov	r3, r2
 8002e00:	eb42 0303 	adc.w	r3, r2, r3
 8002e04:	647b      	str	r3, [r7, #68]	; 0x44
 8002e06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e0e:	f7fd f9e7 	bl	80001e0 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2264      	movs	r2, #100	; 0x64
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	1acb      	subs	r3, r1, r3
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e2e:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002e30:	fba3 2302 	umull	r2, r3, r3, r2
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e3c:	441c      	add	r4, r3
 8002e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	1891      	adds	r1, r2, r2
 8002e56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e58:	415b      	adcs	r3, r3
 8002e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e60:	4641      	mov	r1, r8
 8002e62:	1851      	adds	r1, r2, r1
 8002e64:	6339      	str	r1, [r7, #48]	; 0x30
 8002e66:	4649      	mov	r1, r9
 8002e68:	414b      	adcs	r3, r1
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e78:	4659      	mov	r1, fp
 8002e7a:	00cb      	lsls	r3, r1, #3
 8002e7c:	4651      	mov	r1, sl
 8002e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e82:	4651      	mov	r1, sl
 8002e84:	00ca      	lsls	r2, r1, #3
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e94:	464b      	mov	r3, r9
 8002e96:	460a      	mov	r2, r1
 8002e98:	eb42 0303 	adc.w	r3, r2, r3
 8002e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002eb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	18db      	adds	r3, r3, r3
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eba:	4613      	mov	r3, r2
 8002ebc:	eb42 0303 	adc.w	r3, r2, r3
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ec6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002eca:	f7fd f989 	bl	80001e0 <__aeabi_uldivmod>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	2164      	movs	r1, #100	; 0x64
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	3332      	adds	r3, #50	; 0x32
 8002ee6:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	f003 0207 	and.w	r2, r3, #7
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4422      	add	r2, r4
 8002efa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002efc:	e105      	b.n	800310a <UART_SetConfig+0x4d6>
 8002efe:	bf00      	nop
 8002f00:	40011000 	.word	0x40011000
 8002f04:	40011400 	.word	0x40011400
 8002f08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f10:	2200      	movs	r2, #0
 8002f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f1e:	4642      	mov	r2, r8
 8002f20:	464b      	mov	r3, r9
 8002f22:	1891      	adds	r1, r2, r2
 8002f24:	6239      	str	r1, [r7, #32]
 8002f26:	415b      	adcs	r3, r3
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f2e:	4641      	mov	r1, r8
 8002f30:	1854      	adds	r4, r2, r1
 8002f32:	4649      	mov	r1, r9
 8002f34:	eb43 0501 	adc.w	r5, r3, r1
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	00eb      	lsls	r3, r5, #3
 8002f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f46:	00e2      	lsls	r2, r4, #3
 8002f48:	4614      	mov	r4, r2
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	4643      	mov	r3, r8
 8002f4e:	18e3      	adds	r3, r4, r3
 8002f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f54:	464b      	mov	r3, r9
 8002f56:	eb45 0303 	adc.w	r3, r5, r3
 8002f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	008b      	lsls	r3, r1, #2
 8002f7e:	4621      	mov	r1, r4
 8002f80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f84:	4621      	mov	r1, r4
 8002f86:	008a      	lsls	r2, r1, #2
 8002f88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f8c:	f7fd f928 	bl	80001e0 <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4b60      	ldr	r3, [pc, #384]	; (8003118 <UART_SetConfig+0x4e4>)
 8002f96:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	011c      	lsls	r4, r3, #4
 8002f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	1891      	adds	r1, r2, r2
 8002fb6:	61b9      	str	r1, [r7, #24]
 8002fb8:	415b      	adcs	r3, r3
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	1851      	adds	r1, r2, r1
 8002fc4:	6139      	str	r1, [r7, #16]
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	414b      	adcs	r3, r1
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd8:	4659      	mov	r1, fp
 8002fda:	00cb      	lsls	r3, r1, #3
 8002fdc:	4651      	mov	r1, sl
 8002fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	00ca      	lsls	r2, r1, #3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	4642      	mov	r2, r8
 8002fee:	189b      	adds	r3, r3, r2
 8002ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff4:	464b      	mov	r3, r9
 8002ff6:	460a      	mov	r2, r1
 8002ff8:	eb42 0303 	adc.w	r3, r2, r3
 8002ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	67bb      	str	r3, [r7, #120]	; 0x78
 800300a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003018:	4649      	mov	r1, r9
 800301a:	008b      	lsls	r3, r1, #2
 800301c:	4641      	mov	r1, r8
 800301e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003022:	4641      	mov	r1, r8
 8003024:	008a      	lsls	r2, r1, #2
 8003026:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800302a:	f7fd f8d9 	bl	80001e0 <__aeabi_uldivmod>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4b39      	ldr	r3, [pc, #228]	; (8003118 <UART_SetConfig+0x4e4>)
 8003034:	fba3 1302 	umull	r1, r3, r3, r2
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	2164      	movs	r1, #100	; 0x64
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	3332      	adds	r3, #50	; 0x32
 8003046:	4a34      	ldr	r2, [pc, #208]	; (8003118 <UART_SetConfig+0x4e4>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003052:	441c      	add	r4, r3
 8003054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003058:	2200      	movs	r2, #0
 800305a:	673b      	str	r3, [r7, #112]	; 0x70
 800305c:	677a      	str	r2, [r7, #116]	; 0x74
 800305e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003062:	4642      	mov	r2, r8
 8003064:	464b      	mov	r3, r9
 8003066:	1891      	adds	r1, r2, r2
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	415b      	adcs	r3, r3
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003072:	4641      	mov	r1, r8
 8003074:	1851      	adds	r1, r2, r1
 8003076:	6039      	str	r1, [r7, #0]
 8003078:	4649      	mov	r1, r9
 800307a:	414b      	adcs	r3, r1
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800308a:	4659      	mov	r1, fp
 800308c:	00cb      	lsls	r3, r1, #3
 800308e:	4651      	mov	r1, sl
 8003090:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003094:	4651      	mov	r1, sl
 8003096:	00ca      	lsls	r2, r1, #3
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	4603      	mov	r3, r0
 800309e:	4642      	mov	r2, r8
 80030a0:	189b      	adds	r3, r3, r2
 80030a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80030a4:	464b      	mov	r3, r9
 80030a6:	460a      	mov	r2, r1
 80030a8:	eb42 0303 	adc.w	r3, r2, r3
 80030ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	663b      	str	r3, [r7, #96]	; 0x60
 80030b8:	667a      	str	r2, [r7, #100]	; 0x64
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030c6:	4649      	mov	r1, r9
 80030c8:	008b      	lsls	r3, r1, #2
 80030ca:	4641      	mov	r1, r8
 80030cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d0:	4641      	mov	r1, r8
 80030d2:	008a      	lsls	r2, r1, #2
 80030d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030d8:	f7fd f882 	bl	80001e0 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <UART_SetConfig+0x4e4>)
 80030e2:	fba3 1302 	umull	r1, r3, r3, r2
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	2164      	movs	r1, #100	; 0x64
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	3332      	adds	r3, #50	; 0x32
 80030f4:	4a08      	ldr	r2, [pc, #32]	; (8003118 <UART_SetConfig+0x4e4>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4422      	add	r2, r4
 8003108:	609a      	str	r2, [r3, #8]
}
 800310a:	bf00      	nop
 800310c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003116:	bf00      	nop
 8003118:	51eb851f 	.word	0x51eb851f

0800311c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <SysTick_Handler+0x1c>)
 8003122:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003124:	f001 fe0e 	bl	8004d44 <xTaskGetSchedulerState>
 8003128:	4603      	mov	r3, r0
 800312a:	2b01      	cmp	r3, #1
 800312c:	d001      	beq.n	8003132 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800312e:	f002 fcf3 	bl	8005b18 <xPortSysTickHandler>
  }
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	e000e010 	.word	0xe000e010

0800313c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a07      	ldr	r2, [pc, #28]	; (8003168 <vApplicationGetIdleTaskMemory+0x2c>)
 800314c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	4a06      	ldr	r2, [pc, #24]	; (800316c <vApplicationGetIdleTaskMemory+0x30>)
 8003152:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2280      	movs	r2, #128	; 0x80
 8003158:	601a      	str	r2, [r3, #0]
}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000124 	.word	0x20000124
 800316c:	200001e0 	.word	0x200001e0

08003170 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4a07      	ldr	r2, [pc, #28]	; (800319c <vApplicationGetTimerTaskMemory+0x2c>)
 8003180:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4a06      	ldr	r2, [pc, #24]	; (80031a0 <vApplicationGetTimerTaskMemory+0x30>)
 8003186:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800318e:	601a      	str	r2, [r3, #0]
}
 8003190:	bf00      	nop
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	200003e0 	.word	0x200003e0
 80031a0:	2000049c 	.word	0x2000049c

080031a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f103 0208 	add.w	r2, r3, #8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295
 80031bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f103 0208 	add.w	r2, r3, #8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f103 0208 	add.w	r2, r3, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d103      	bne.n	8003266 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e00c      	b.n	8003280 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3308      	adds	r3, #8
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e002      	b.n	8003274 <vListInsert+0x2e>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	d2f6      	bcs.n	800326e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	601a      	str	r2, [r3, #0]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6892      	ldr	r2, [r2, #8]
 80032ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6852      	ldr	r2, [r2, #4]
 80032d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d103      	bne.n	80032ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	1e5a      	subs	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10a      	bne.n	8003336 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003332:	bf00      	nop
 8003334:	e7fe      	b.n	8003334 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003336:	f002 fb5d 	bl	80059f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	68f9      	ldr	r1, [r7, #12]
 8003344:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	441a      	add	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003366:	3b01      	subs	r3, #1
 8003368:	68f9      	ldr	r1, [r7, #12]
 800336a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	441a      	add	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	22ff      	movs	r2, #255	; 0xff
 800337a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	22ff      	movs	r2, #255	; 0xff
 8003382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d114      	bne.n	80033b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01a      	beq.n	80033ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3310      	adds	r3, #16
 8003398:	4618      	mov	r0, r3
 800339a:	f001 fb11 	bl	80049c0 <xTaskRemoveFromEventList>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d012      	beq.n	80033ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <xQueueGenericReset+0xcc>)
 80033a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	e009      	b.n	80033ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3310      	adds	r3, #16
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fef2 	bl	80031a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3324      	adds	r3, #36	; 0x24
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff feed 	bl	80031a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80033ca:	f002 fb43 	bl	8005a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80033ce:	2301      	movs	r3, #1
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	e000ed04 	.word	0xe000ed04

080033dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08e      	sub	sp, #56	; 0x38
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800341e:	bf00      	nop
 8003420:	e7fe      	b.n	8003420 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <xQueueGenericCreateStatic+0x52>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <xQueueGenericCreateStatic+0x56>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <xQueueGenericCreateStatic+0x58>
 8003432:	2300      	movs	r3, #0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	623b      	str	r3, [r7, #32]
}
 800344a:	bf00      	nop
 800344c:	e7fe      	b.n	800344c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <xQueueGenericCreateStatic+0x7e>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <xQueueGenericCreateStatic+0x82>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <xQueueGenericCreateStatic+0x84>
 800345e:	2300      	movs	r3, #0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	61fb      	str	r3, [r7, #28]
}
 8003476:	bf00      	nop
 8003478:	e7fe      	b.n	8003478 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800347a:	2350      	movs	r3, #80	; 0x50
 800347c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b50      	cmp	r3, #80	; 0x50
 8003482:	d00a      	beq.n	800349a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	61bb      	str	r3, [r7, #24]
}
 8003496:	bf00      	nop
 8003498:	e7fe      	b.n	8003498 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800349a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00d      	beq.n	80034c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	4613      	mov	r3, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f83f 	bl	8003540 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3730      	adds	r7, #48	; 0x30
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	4613      	mov	r3, r2
 80034d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80034e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	613b      	str	r3, [r7, #16]
}
 80034f2:	bf00      	nop
 80034f4:	e7fe      	b.n	80034f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	fb02 f303 	mul.w	r3, r2, r3
 80034fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	3350      	adds	r3, #80	; 0x50
 8003504:	4618      	mov	r0, r3
 8003506:	f002 fb97 	bl	8005c38 <pvPortMalloc>
 800350a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d011      	beq.n	8003536 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	3350      	adds	r3, #80	; 0x50
 800351a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003524:	79fa      	ldrb	r2, [r7, #7]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4613      	mov	r3, r2
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f805 	bl	8003540 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003536:	69bb      	ldr	r3, [r7, #24]
	}
 8003538:	4618      	mov	r0, r3
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d103      	bne.n	800355c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	e002      	b.n	8003562 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800356e:	2101      	movs	r1, #1
 8003570:	69b8      	ldr	r0, [r7, #24]
 8003572:	f7ff fecb 	bl	800330c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003586:	b580      	push	{r7, lr}
 8003588:	b086      	sub	sp, #24
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	613b      	str	r3, [r7, #16]
}
 80035a8:	bf00      	nop
 80035aa:	e7fe      	b.n	80035aa <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d90a      	bls.n	80035ca <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	60fb      	str	r3, [r7, #12]
}
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80035ca:	2202      	movs	r2, #2
 80035cc:	2100      	movs	r1, #0
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff ff7c 	bl	80034cc <xQueueGenericCreate>
 80035d4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80035e2:	697b      	ldr	r3, [r7, #20]
	}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08e      	sub	sp, #56	; 0x38
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035fa:	2300      	movs	r3, #0
 80035fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xQueueGenericSend+0x32>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d103      	bne.n	800362c <xQueueGenericSend+0x40>
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <xQueueGenericSend+0x44>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <xQueueGenericSend+0x46>
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <xQueueGenericSend+0x60>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003648:	bf00      	nop
 800364a:	e7fe      	b.n	800364a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d103      	bne.n	800365a <xQueueGenericSend+0x6e>
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <xQueueGenericSend+0x72>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <xQueueGenericSend+0x74>
 800365e:	2300      	movs	r3, #0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <xQueueGenericSend+0x8e>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	623b      	str	r3, [r7, #32]
}
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800367a:	f001 fb63 	bl	8004d44 <xTaskGetSchedulerState>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <xQueueGenericSend+0x9e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <xQueueGenericSend+0xa2>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <xQueueGenericSend+0xa4>
 800368e:	2300      	movs	r3, #0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <xQueueGenericSend+0xbe>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	61fb      	str	r3, [r7, #28]
}
 80036a6:	bf00      	nop
 80036a8:	e7fe      	b.n	80036a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036aa:	f002 f9a3 	bl	80059f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <xQueueGenericSend+0xd4>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d129      	bne.n	8003714 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036c6:	f000 fbbb 	bl	8003e40 <prvCopyDataToQueue>
 80036ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d010      	beq.n	80036f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	3324      	adds	r3, #36	; 0x24
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 f971 	bl	80049c0 <xTaskRemoveFromEventList>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036e4:	4b3f      	ldr	r3, [pc, #252]	; (80037e4 <xQueueGenericSend+0x1f8>)
 80036e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	e00a      	b.n	800370c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036fc:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <xQueueGenericSend+0x1f8>)
 80036fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800370c:	f002 f9a2 	bl	8005a54 <vPortExitCritical>
				return pdPASS;
 8003710:	2301      	movs	r3, #1
 8003712:	e063      	b.n	80037dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800371a:	f002 f99b 	bl	8005a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800371e:	2300      	movs	r3, #0
 8003720:	e05c      	b.n	80037dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003724:	2b00      	cmp	r3, #0
 8003726:	d106      	bne.n	8003736 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4618      	mov	r0, r3
 800372e:	f001 f9ab 	bl	8004a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003732:	2301      	movs	r3, #1
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003736:	f002 f98d 	bl	8005a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800373a:	f000 ff17 	bl	800456c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800373e:	f002 f959 	bl	80059f4 <vPortEnterCritical>
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003748:	b25b      	sxtb	r3, r3
 800374a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374e:	d103      	bne.n	8003758 <xQueueGenericSend+0x16c>
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800375e:	b25b      	sxtb	r3, r3
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d103      	bne.n	800376e <xQueueGenericSend+0x182>
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800376e:	f002 f971 	bl	8005a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003772:	1d3a      	adds	r2, r7, #4
 8003774:	f107 0314 	add.w	r3, r7, #20
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f001 f99a 	bl	8004ab4 <xTaskCheckForTimeOut>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d124      	bne.n	80037d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003788:	f000 fc52 	bl	8004030 <prvIsQueueFull>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d018      	beq.n	80037c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	3310      	adds	r3, #16
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f001 f8c0 	bl	8004920 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037a2:	f000 fbdd 	bl	8003f60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037a6:	f000 feef 	bl	8004588 <xTaskResumeAll>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f47f af7c 	bne.w	80036aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <xQueueGenericSend+0x1f8>)
 80037b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	e772      	b.n	80036aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037c6:	f000 fbcb 	bl	8003f60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037ca:	f000 fedd 	bl	8004588 <xTaskResumeAll>
 80037ce:	e76c      	b.n	80036aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037d2:	f000 fbc5 	bl	8003f60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037d6:	f000 fed7 	bl	8004588 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3738      	adds	r7, #56	; 0x38
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	e000ed04 	.word	0xe000ed04

080037e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b090      	sub	sp, #64	; 0x40
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003812:	bf00      	nop
 8003814:	e7fe      	b.n	8003814 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d103      	bne.n	8003824 <xQueueGenericSendFromISR+0x3c>
 800381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <xQueueGenericSendFromISR+0x40>
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <xQueueGenericSendFromISR+0x42>
 8003828:	2300      	movs	r3, #0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003840:	bf00      	nop
 8003842:	e7fe      	b.n	8003842 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d103      	bne.n	8003852 <xQueueGenericSendFromISR+0x6a>
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <xQueueGenericSendFromISR+0x6e>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <xQueueGenericSendFromISR+0x70>
 8003856:	2300      	movs	r3, #0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	623b      	str	r3, [r7, #32]
}
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003872:	f002 f9a1 	bl	8005bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003876:	f3ef 8211 	mrs	r2, BASEPRI
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	61fa      	str	r2, [r7, #28]
 800388c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800388e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	429a      	cmp	r2, r3
 800389c:	d302      	bcc.n	80038a4 <xQueueGenericSendFromISR+0xbc>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d12f      	bne.n	8003904 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038ba:	f000 fac1 	bl	8003e40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80038c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c6:	d112      	bne.n	80038ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d016      	beq.n	80038fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d2:	3324      	adds	r3, #36	; 0x24
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 f873 	bl	80049c0 <xTaskRemoveFromEventList>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00e      	beq.n	80038fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	e007      	b.n	80038fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038f2:	3301      	adds	r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	b25a      	sxtb	r2, r3
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038fe:	2301      	movs	r3, #1
 8003900:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003902:	e001      	b.n	8003908 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003904:	2300      	movs	r3, #0
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003912:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003916:	4618      	mov	r0, r3
 8003918:	3740      	adds	r7, #64	; 0x40
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b08e      	sub	sp, #56	; 0x38
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	623b      	str	r3, [r7, #32]
}
 8003944:	bf00      	nop
 8003946:	e7fe      	b.n	8003946 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	61fb      	str	r3, [r7, #28]
}
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d103      	bne.n	8003976 <xQueueGiveFromISR+0x58>
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <xQueueGiveFromISR+0x5c>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <xQueueGiveFromISR+0x5e>
 800397a:	2300      	movs	r3, #0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	61bb      	str	r3, [r7, #24]
}
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003996:	f002 f90f 	bl	8005bb8 <vPortValidateInterruptPriority>
	__asm volatile
 800399a:	f3ef 8211 	mrs	r2, BASEPRI
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	617a      	str	r2, [r7, #20]
 80039b0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80039b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d22b      	bcs.n	8003a1e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d112      	bne.n	8003a08 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	3324      	adds	r3, #36	; 0x24
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 ffe6 	bl	80049c0 <xTaskRemoveFromEventList>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00e      	beq.n	8003a18 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e007      	b.n	8003a18 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	b25a      	sxtb	r2, r3
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a1c:	e001      	b.n	8003a22 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	637b      	str	r3, [r7, #52]	; 0x34
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f383 8811 	msr	BASEPRI, r3
}
 8003a2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3738      	adds	r7, #56	; 0x38
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08c      	sub	sp, #48	; 0x30
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10a      	bne.n	8003a68 <xQueueReceive+0x30>
	__asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	623b      	str	r3, [r7, #32]
}
 8003a64:	bf00      	nop
 8003a66:	e7fe      	b.n	8003a66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <xQueueReceive+0x3e>
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <xQueueReceive+0x42>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <xQueueReceive+0x44>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <xQueueReceive+0x5e>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	61fb      	str	r3, [r7, #28]
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a96:	f001 f955 	bl	8004d44 <xTaskGetSchedulerState>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <xQueueReceive+0x6e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <xQueueReceive+0x72>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <xQueueReceive+0x74>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <xQueueReceive+0x8e>
	__asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	61bb      	str	r3, [r7, #24]
}
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ac6:	f001 ff95 	bl	80059f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01f      	beq.n	8003b16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ada:	f000 fa1b 	bl	8003f14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	1e5a      	subs	r2, r3, #1
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00f      	beq.n	8003b0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	3310      	adds	r3, #16
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 ff64 	bl	80049c0 <xTaskRemoveFromEventList>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003afe:	4b3d      	ldr	r3, [pc, #244]	; (8003bf4 <xQueueReceive+0x1bc>)
 8003b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b0e:	f001 ffa1 	bl	8005a54 <vPortExitCritical>
				return pdPASS;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e069      	b.n	8003bea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d103      	bne.n	8003b24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b1c:	f001 ff9a 	bl	8005a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e062      	b.n	8003bea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b2a:	f107 0310 	add.w	r3, r7, #16
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 ffaa 	bl	8004a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b38:	f001 ff8c 	bl	8005a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b3c:	f000 fd16 	bl	800456c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b40:	f001 ff58 	bl	80059f4 <vPortEnterCritical>
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d103      	bne.n	8003b5a <xQueueReceive+0x122>
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d103      	bne.n	8003b70 <xQueueReceive+0x138>
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b70:	f001 ff70 	bl	8005a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b74:	1d3a      	adds	r2, r7, #4
 8003b76:	f107 0310 	add.w	r3, r7, #16
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 ff99 	bl	8004ab4 <xTaskCheckForTimeOut>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d123      	bne.n	8003bd0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b8a:	f000 fa3b 	bl	8004004 <prvIsQueueEmpty>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d017      	beq.n	8003bc4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	3324      	adds	r3, #36	; 0x24
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 febf 	bl	8004920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ba4:	f000 f9dc 	bl	8003f60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ba8:	f000 fcee 	bl	8004588 <xTaskResumeAll>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d189      	bne.n	8003ac6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003bb2:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <xQueueReceive+0x1bc>)
 8003bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	e780      	b.n	8003ac6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bc6:	f000 f9cb 	bl	8003f60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bca:	f000 fcdd 	bl	8004588 <xTaskResumeAll>
 8003bce:	e77a      	b.n	8003ac6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bd2:	f000 f9c5 	bl	8003f60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bd6:	f000 fcd7 	bl	8004588 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bdc:	f000 fa12 	bl	8004004 <prvIsQueueEmpty>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f43f af6f 	beq.w	8003ac6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003be8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3730      	adds	r7, #48	; 0x30
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	e000ed04 	.word	0xe000ed04

08003bf8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08e      	sub	sp, #56	; 0x38
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	623b      	str	r3, [r7, #32]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	61fb      	str	r3, [r7, #28]
}
 8003c44:	bf00      	nop
 8003c46:	e7fe      	b.n	8003c46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c48:	f001 f87c 	bl	8004d44 <xTaskGetSchedulerState>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <xQueueSemaphoreTake+0x60>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <xQueueSemaphoreTake+0x64>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <xQueueSemaphoreTake+0x66>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	61bb      	str	r3, [r7, #24]
}
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c78:	f001 febc 	bl	80059f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d024      	beq.n	8003cd2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	1e5a      	subs	r2, r3, #1
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003c98:	f001 f9ca 	bl	8005030 <pvTaskIncrementMutexHeldCount>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00f      	beq.n	8003cca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	3310      	adds	r3, #16
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fe86 	bl	80049c0 <xTaskRemoveFromEventList>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cba:	4b54      	ldr	r3, [pc, #336]	; (8003e0c <xQueueSemaphoreTake+0x214>)
 8003cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cca:	f001 fec3 	bl	8005a54 <vPortExitCritical>
				return pdPASS;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e097      	b.n	8003e02 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d111      	bne.n	8003cfc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	617b      	str	r3, [r7, #20]
}
 8003cf0:	bf00      	nop
 8003cf2:	e7fe      	b.n	8003cf2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003cf4:	f001 feae 	bl	8005a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e082      	b.n	8003e02 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d02:	f107 030c 	add.w	r3, r7, #12
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 febe 	bl	8004a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d10:	f001 fea0 	bl	8005a54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d14:	f000 fc2a 	bl	800456c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d18:	f001 fe6c 	bl	80059f4 <vPortEnterCritical>
 8003d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d22:	b25b      	sxtb	r3, r3
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d103      	bne.n	8003d32 <xQueueSemaphoreTake+0x13a>
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d38:	b25b      	sxtb	r3, r3
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d103      	bne.n	8003d48 <xQueueSemaphoreTake+0x150>
 8003d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d48:	f001 fe84 	bl	8005a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d4c:	463a      	mov	r2, r7
 8003d4e:	f107 030c 	add.w	r3, r7, #12
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fead 	bl	8004ab4 <xTaskCheckForTimeOut>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d132      	bne.n	8003dc6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d62:	f000 f94f 	bl	8004004 <prvIsQueueEmpty>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d026      	beq.n	8003dba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d109      	bne.n	8003d88 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003d74:	f001 fe3e 	bl	80059f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 ffff 	bl	8004d80 <xTaskPriorityInherit>
 8003d82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003d84:	f001 fe66 	bl	8005a54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8a:	3324      	adds	r3, #36	; 0x24
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fdc5 	bl	8004920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d98:	f000 f8e2 	bl	8003f60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d9c:	f000 fbf4 	bl	8004588 <xTaskResumeAll>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f47f af68 	bne.w	8003c78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <xQueueSemaphoreTake+0x214>)
 8003daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	e75e      	b.n	8003c78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003dba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dbc:	f000 f8d0 	bl	8003f60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dc0:	f000 fbe2 	bl	8004588 <xTaskResumeAll>
 8003dc4:	e758      	b.n	8003c78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003dc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dc8:	f000 f8ca 	bl	8003f60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dcc:	f000 fbdc 	bl	8004588 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dd2:	f000 f917 	bl	8004004 <prvIsQueueEmpty>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f43f af4d 	beq.w	8003c78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00d      	beq.n	8003e00 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003de4:	f001 fe06 	bl	80059f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003de8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dea:	f000 f811 	bl	8003e10 <prvGetDisinheritPriorityAfterTimeout>
 8003dee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 f898 	bl	8004f2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003dfc:	f001 fe2a 	bl	8005a54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3738      	adds	r7, #56	; 0x38
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	e000ed04 	.word	0xe000ed04

08003e10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d006      	beq.n	8003e2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	e001      	b.n	8003e32 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e32:	68fb      	ldr	r3, [r7, #12]
	}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d14d      	bne.n	8003f02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fff0 	bl	8004e50 <xTaskPriorityDisinherit>
 8003e70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	e043      	b.n	8003f02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d119      	bne.n	8003eb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6858      	ldr	r0, [r3, #4]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	461a      	mov	r2, r3
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	f002 f8e4 	bl	8006058 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	441a      	add	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d32b      	bcc.n	8003f02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	e026      	b.n	8003f02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68d8      	ldr	r0, [r3, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	f002 f8ca 	bl	8006058 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	425b      	negs	r3, r3
 8003ece:	441a      	add	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d207      	bcs.n	8003ef0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	425b      	negs	r3, r3
 8003eea:	441a      	add	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d105      	bne.n	8003f02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f0a:	697b      	ldr	r3, [r7, #20]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d018      	beq.n	8003f58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	441a      	add	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d303      	bcc.n	8003f48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68d9      	ldr	r1, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	461a      	mov	r2, r3
 8003f52:	6838      	ldr	r0, [r7, #0]
 8003f54:	f002 f880 	bl	8006058 <memcpy>
	}
}
 8003f58:	bf00      	nop
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f68:	f001 fd44 	bl	80059f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f74:	e011      	b.n	8003f9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d012      	beq.n	8003fa4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3324      	adds	r3, #36	; 0x24
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fd1c 	bl	80049c0 <xTaskRemoveFromEventList>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f8e:	f000 fdf3 	bl	8004b78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	dce9      	bgt.n	8003f76 <prvUnlockQueue+0x16>
 8003fa2:	e000      	b.n	8003fa6 <prvUnlockQueue+0x46>
					break;
 8003fa4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	22ff      	movs	r2, #255	; 0xff
 8003faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003fae:	f001 fd51 	bl	8005a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fb2:	f001 fd1f 	bl	80059f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fbe:	e011      	b.n	8003fe4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d012      	beq.n	8003fee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3310      	adds	r3, #16
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fcf7 	bl	80049c0 <xTaskRemoveFromEventList>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003fd8:	f000 fdce 	bl	8004b78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fdc:	7bbb      	ldrb	r3, [r7, #14]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	dce9      	bgt.n	8003fc0 <prvUnlockQueue+0x60>
 8003fec:	e000      	b.n	8003ff0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003fee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	22ff      	movs	r2, #255	; 0xff
 8003ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ff8:	f001 fd2c 	bl	8005a54 <vPortExitCritical>
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800400c:	f001 fcf2 	bl	80059f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	2b00      	cmp	r3, #0
 8004016:	d102      	bne.n	800401e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004018:	2301      	movs	r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e001      	b.n	8004022 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004022:	f001 fd17 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 8004026:	68fb      	ldr	r3, [r7, #12]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004038:	f001 fcdc 	bl	80059f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	429a      	cmp	r2, r3
 8004046:	d102      	bne.n	800404e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004048:	2301      	movs	r3, #1
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e001      	b.n	8004052 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004052:	f001 fcff 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 8004056:	68fb      	ldr	r3, [r7, #12]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e014      	b.n	800409a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004070:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <vQueueAddToRegistry+0x50>)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10b      	bne.n	8004094 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800407c:	490c      	ldr	r1, [pc, #48]	; (80040b0 <vQueueAddToRegistry+0x50>)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <vQueueAddToRegistry+0x50>)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4413      	add	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004092:	e006      	b.n	80040a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3301      	adds	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b07      	cmp	r3, #7
 800409e:	d9e7      	bls.n	8004070 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	2000089c 	.word	0x2000089c

080040b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040c4:	f001 fc96 	bl	80059f4 <vPortEnterCritical>
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040ce:	b25b      	sxtb	r3, r3
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d103      	bne.n	80040de <vQueueWaitForMessageRestricted+0x2a>
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040e4:	b25b      	sxtb	r3, r3
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d103      	bne.n	80040f4 <vQueueWaitForMessageRestricted+0x40>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040f4:	f001 fcae 	bl	8005a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d106      	bne.n	800410e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3324      	adds	r3, #36	; 0x24
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fc2d 	bl	8004968 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800410e:	6978      	ldr	r0, [r7, #20]
 8004110:	f7ff ff26 	bl	8003f60 <prvUnlockQueue>
	}
 8004114:	bf00      	nop
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08e      	sub	sp, #56	; 0x38
 8004120:	af04      	add	r7, sp, #16
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	623b      	str	r3, [r7, #32]
}
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <xTaskCreateStatic+0x46>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	61fb      	str	r3, [r7, #28]
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004162:	23bc      	movs	r3, #188	; 0xbc
 8004164:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2bbc      	cmp	r3, #188	; 0xbc
 800416a:	d00a      	beq.n	8004182 <xTaskCreateStatic+0x66>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	61bb      	str	r3, [r7, #24]
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004182:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01e      	beq.n	80041c8 <xTaskCreateStatic+0xac>
 800418a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01b      	beq.n	80041c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004198:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	2202      	movs	r2, #2
 800419e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041a2:	2300      	movs	r3, #0
 80041a4:	9303      	str	r3, [sp, #12]
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	9302      	str	r3, [sp, #8]
 80041aa:	f107 0314 	add.w	r3, r7, #20
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f850 	bl	8004260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041c2:	f000 f8f3 	bl	80043ac <prvAddNewTaskToReadyList>
 80041c6:	e001      	b.n	80041cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041cc:	697b      	ldr	r3, [r7, #20]
	}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3728      	adds	r7, #40	; 0x28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b08c      	sub	sp, #48	; 0x30
 80041da:	af04      	add	r7, sp, #16
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 fd24 	bl	8005c38 <pvPortMalloc>
 80041f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00e      	beq.n	8004216 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041f8:	20bc      	movs	r0, #188	; 0xbc
 80041fa:	f001 fd1d 	bl	8005c38 <pvPortMalloc>
 80041fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
 800420c:	e005      	b.n	800421a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800420e:	6978      	ldr	r0, [r7, #20]
 8004210:	f001 fdde 	bl	8005dd0 <vPortFree>
 8004214:	e001      	b.n	800421a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d017      	beq.n	8004250 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004228:	88fa      	ldrh	r2, [r7, #6]
 800422a:	2300      	movs	r3, #0
 800422c:	9303      	str	r3, [sp, #12]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	9302      	str	r3, [sp, #8]
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f80e 	bl	8004260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004244:	69f8      	ldr	r0, [r7, #28]
 8004246:	f000 f8b1 	bl	80043ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800424a:	2301      	movs	r3, #1
 800424c:	61bb      	str	r3, [r7, #24]
 800424e:	e002      	b.n	8004256 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004256:	69bb      	ldr	r3, [r7, #24]
	}
 8004258:	4618      	mov	r0, r3
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	461a      	mov	r2, r3
 8004278:	21a5      	movs	r1, #165	; 0xa5
 800427a:	f001 fefb 	bl	8006074 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004288:	3b01      	subs	r3, #1
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f023 0307 	bic.w	r3, r3, #7
 8004296:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	617b      	str	r3, [r7, #20]
}
 80042b4:	bf00      	nop
 80042b6:	e7fe      	b.n	80042b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01f      	beq.n	80042fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	e012      	b.n	80042ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	4413      	add	r3, r2
 80042ca:	7819      	ldrb	r1, [r3, #0]
 80042cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	3334      	adds	r3, #52	; 0x34
 80042d4:	460a      	mov	r2, r1
 80042d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4413      	add	r3, r2
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d006      	beq.n	80042f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	3301      	adds	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2b0f      	cmp	r3, #15
 80042ee:	d9e9      	bls.n	80042c4 <prvInitialiseNewTask+0x64>
 80042f0:	e000      	b.n	80042f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80042f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042fc:	e003      	b.n	8004306 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	2b37      	cmp	r3, #55	; 0x37
 800430a:	d901      	bls.n	8004310 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800430c:	2337      	movs	r3, #55	; 0x37
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004314:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800431a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	2200      	movs	r2, #0
 8004320:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	3304      	adds	r3, #4
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe ff5c 	bl	80031e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	3318      	adds	r3, #24
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe ff57 	bl	80031e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	2200      	movs	r2, #0
 8004350:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	2200      	movs	r2, #0
 8004358:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	3354      	adds	r3, #84	; 0x54
 8004360:	2260      	movs	r2, #96	; 0x60
 8004362:	2100      	movs	r1, #0
 8004364:	4618      	mov	r0, r3
 8004366:	f001 fe85 	bl	8006074 <memset>
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	4a0c      	ldr	r2, [pc, #48]	; (80043a0 <prvInitialiseNewTask+0x140>)
 800436e:	659a      	str	r2, [r3, #88]	; 0x58
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <prvInitialiseNewTask+0x144>)
 8004374:	65da      	str	r2, [r3, #92]	; 0x5c
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	4a0b      	ldr	r2, [pc, #44]	; (80043a8 <prvInitialiseNewTask+0x148>)
 800437a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	68f9      	ldr	r1, [r7, #12]
 8004380:	69b8      	ldr	r0, [r7, #24]
 8004382:	f001 fa0b 	bl	800579c <pxPortInitialiseStack>
 8004386:	4602      	mov	r2, r0
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004396:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004398:	bf00      	nop
 800439a:	3720      	adds	r7, #32
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	080062cc 	.word	0x080062cc
 80043a4:	080062ec 	.word	0x080062ec
 80043a8:	080062ac 	.word	0x080062ac

080043ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043b4:	f001 fb1e 	bl	80059f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043b8:	4b2d      	ldr	r3, [pc, #180]	; (8004470 <prvAddNewTaskToReadyList+0xc4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3301      	adds	r3, #1
 80043be:	4a2c      	ldr	r2, [pc, #176]	; (8004470 <prvAddNewTaskToReadyList+0xc4>)
 80043c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043c2:	4b2c      	ldr	r3, [pc, #176]	; (8004474 <prvAddNewTaskToReadyList+0xc8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043ca:	4a2a      	ldr	r2, [pc, #168]	; (8004474 <prvAddNewTaskToReadyList+0xc8>)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043d0:	4b27      	ldr	r3, [pc, #156]	; (8004470 <prvAddNewTaskToReadyList+0xc4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d110      	bne.n	80043fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043d8:	f000 fbf2 	bl	8004bc0 <prvInitialiseTaskLists>
 80043dc:	e00d      	b.n	80043fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043de:	4b26      	ldr	r3, [pc, #152]	; (8004478 <prvAddNewTaskToReadyList+0xcc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d109      	bne.n	80043fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043e6:	4b23      	ldr	r3, [pc, #140]	; (8004474 <prvAddNewTaskToReadyList+0xc8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d802      	bhi.n	80043fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043f4:	4a1f      	ldr	r2, [pc, #124]	; (8004474 <prvAddNewTaskToReadyList+0xc8>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043fa:	4b20      	ldr	r3, [pc, #128]	; (800447c <prvAddNewTaskToReadyList+0xd0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3301      	adds	r3, #1
 8004400:	4a1e      	ldr	r2, [pc, #120]	; (800447c <prvAddNewTaskToReadyList+0xd0>)
 8004402:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004404:	4b1d      	ldr	r3, [pc, #116]	; (800447c <prvAddNewTaskToReadyList+0xd0>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <prvAddNewTaskToReadyList+0xd4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d903      	bls.n	8004420 <prvAddNewTaskToReadyList+0x74>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	4a18      	ldr	r2, [pc, #96]	; (8004480 <prvAddNewTaskToReadyList+0xd4>)
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4a15      	ldr	r2, [pc, #84]	; (8004484 <prvAddNewTaskToReadyList+0xd8>)
 800442e:	441a      	add	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	4619      	mov	r1, r3
 8004436:	4610      	mov	r0, r2
 8004438:	f7fe fee1 	bl	80031fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800443c:	f001 fb0a 	bl	8005a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004440:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <prvAddNewTaskToReadyList+0xcc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00e      	beq.n	8004466 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <prvAddNewTaskToReadyList+0xc8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	429a      	cmp	r2, r3
 8004454:	d207      	bcs.n	8004466 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <prvAddNewTaskToReadyList+0xdc>)
 8004458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	20000db0 	.word	0x20000db0
 8004474:	200008dc 	.word	0x200008dc
 8004478:	20000dbc 	.word	0x20000dbc
 800447c:	20000dcc 	.word	0x20000dcc
 8004480:	20000db8 	.word	0x20000db8
 8004484:	200008e0 	.word	0x200008e0
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	; 0x28
 8004490:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800449a:	463a      	mov	r2, r7
 800449c:	1d39      	adds	r1, r7, #4
 800449e:	f107 0308 	add.w	r3, r7, #8
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe fe4a 	bl	800313c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	9202      	str	r2, [sp, #8]
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	2300      	movs	r3, #0
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	2300      	movs	r3, #0
 80044b8:	460a      	mov	r2, r1
 80044ba:	4924      	ldr	r1, [pc, #144]	; (800454c <vTaskStartScheduler+0xc0>)
 80044bc:	4824      	ldr	r0, [pc, #144]	; (8004550 <vTaskStartScheduler+0xc4>)
 80044be:	f7ff fe2d 	bl	800411c <xTaskCreateStatic>
 80044c2:	4603      	mov	r3, r0
 80044c4:	4a23      	ldr	r2, [pc, #140]	; (8004554 <vTaskStartScheduler+0xc8>)
 80044c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044c8:	4b22      	ldr	r3, [pc, #136]	; (8004554 <vTaskStartScheduler+0xc8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044d0:	2301      	movs	r3, #1
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e001      	b.n	80044da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d102      	bne.n	80044e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044e0:	f000 fe0e 	bl	8005100 <xTimerCreateTimerTask>
 80044e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d11b      	bne.n	8004524 <vTaskStartScheduler+0x98>
	__asm volatile
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	613b      	str	r3, [r7, #16]
}
 80044fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004500:	4b15      	ldr	r3, [pc, #84]	; (8004558 <vTaskStartScheduler+0xcc>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3354      	adds	r3, #84	; 0x54
 8004506:	4a15      	ldr	r2, [pc, #84]	; (800455c <vTaskStartScheduler+0xd0>)
 8004508:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800450a:	4b15      	ldr	r3, [pc, #84]	; (8004560 <vTaskStartScheduler+0xd4>)
 800450c:	f04f 32ff 	mov.w	r2, #4294967295
 8004510:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004512:	4b14      	ldr	r3, [pc, #80]	; (8004564 <vTaskStartScheduler+0xd8>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004518:	4b13      	ldr	r3, [pc, #76]	; (8004568 <vTaskStartScheduler+0xdc>)
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800451e:	f001 f9c7 	bl	80058b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004522:	e00e      	b.n	8004542 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452a:	d10a      	bne.n	8004542 <vTaskStartScheduler+0xb6>
	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	60fb      	str	r3, [r7, #12]
}
 800453e:	bf00      	nop
 8004540:	e7fe      	b.n	8004540 <vTaskStartScheduler+0xb4>
}
 8004542:	bf00      	nop
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	0800627c 	.word	0x0800627c
 8004550:	08004b91 	.word	0x08004b91
 8004554:	20000dd4 	.word	0x20000dd4
 8004558:	200008dc 	.word	0x200008dc
 800455c:	20000010 	.word	0x20000010
 8004560:	20000dd0 	.word	0x20000dd0
 8004564:	20000dbc 	.word	0x20000dbc
 8004568:	20000db4 	.word	0x20000db4

0800456c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004570:	4b04      	ldr	r3, [pc, #16]	; (8004584 <vTaskSuspendAll+0x18>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3301      	adds	r3, #1
 8004576:	4a03      	ldr	r2, [pc, #12]	; (8004584 <vTaskSuspendAll+0x18>)
 8004578:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800457a:	bf00      	nop
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	20000dd8 	.word	0x20000dd8

08004588 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004596:	4b42      	ldr	r3, [pc, #264]	; (80046a0 <xTaskResumeAll+0x118>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	603b      	str	r3, [r7, #0]
}
 80045b0:	bf00      	nop
 80045b2:	e7fe      	b.n	80045b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045b4:	f001 fa1e 	bl	80059f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045b8:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <xTaskResumeAll+0x118>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3b01      	subs	r3, #1
 80045be:	4a38      	ldr	r2, [pc, #224]	; (80046a0 <xTaskResumeAll+0x118>)
 80045c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045c2:	4b37      	ldr	r3, [pc, #220]	; (80046a0 <xTaskResumeAll+0x118>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d162      	bne.n	8004690 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045ca:	4b36      	ldr	r3, [pc, #216]	; (80046a4 <xTaskResumeAll+0x11c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d05e      	beq.n	8004690 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045d2:	e02f      	b.n	8004634 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d4:	4b34      	ldr	r3, [pc, #208]	; (80046a8 <xTaskResumeAll+0x120>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3318      	adds	r3, #24
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fe fe69 	bl	80032b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3304      	adds	r3, #4
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fe64 	bl	80032b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f4:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <xTaskResumeAll+0x124>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d903      	bls.n	8004604 <xTaskResumeAll+0x7c>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	4a2a      	ldr	r2, [pc, #168]	; (80046ac <xTaskResumeAll+0x124>)
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4a27      	ldr	r2, [pc, #156]	; (80046b0 <xTaskResumeAll+0x128>)
 8004612:	441a      	add	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3304      	adds	r3, #4
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f7fe fdef 	bl	80031fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004624:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <xTaskResumeAll+0x12c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	429a      	cmp	r2, r3
 800462c:	d302      	bcc.n	8004634 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800462e:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <xTaskResumeAll+0x130>)
 8004630:	2201      	movs	r2, #1
 8004632:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004634:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <xTaskResumeAll+0x120>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1cb      	bne.n	80045d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004642:	f000 fb5f 	bl	8004d04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <xTaskResumeAll+0x134>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d010      	beq.n	8004674 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004652:	f000 f847 	bl	80046e4 <xTaskIncrementTick>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800465c:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <xTaskResumeAll+0x130>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3b01      	subs	r3, #1
 8004666:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f1      	bne.n	8004652 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800466e:	4b13      	ldr	r3, [pc, #76]	; (80046bc <xTaskResumeAll+0x134>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004674:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <xTaskResumeAll+0x130>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d009      	beq.n	8004690 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800467c:	2301      	movs	r3, #1
 800467e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <xTaskResumeAll+0x138>)
 8004682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004690:	f001 f9e0 	bl	8005a54 <vPortExitCritical>

	return xAlreadyYielded;
 8004694:	68bb      	ldr	r3, [r7, #8]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000dd8 	.word	0x20000dd8
 80046a4:	20000db0 	.word	0x20000db0
 80046a8:	20000d70 	.word	0x20000d70
 80046ac:	20000db8 	.word	0x20000db8
 80046b0:	200008e0 	.word	0x200008e0
 80046b4:	200008dc 	.word	0x200008dc
 80046b8:	20000dc4 	.word	0x20000dc4
 80046bc:	20000dc0 	.word	0x20000dc0
 80046c0:	e000ed04 	.word	0xe000ed04

080046c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <xTaskGetTickCount+0x1c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046d0:	687b      	ldr	r3, [r7, #4]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000db4 	.word	0x20000db4

080046e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ee:	4b4f      	ldr	r3, [pc, #316]	; (800482c <xTaskIncrementTick+0x148>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f040 808f 	bne.w	8004816 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046f8:	4b4d      	ldr	r3, [pc, #308]	; (8004830 <xTaskIncrementTick+0x14c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3301      	adds	r3, #1
 80046fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004700:	4a4b      	ldr	r2, [pc, #300]	; (8004830 <xTaskIncrementTick+0x14c>)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d120      	bne.n	800474e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800470c:	4b49      	ldr	r3, [pc, #292]	; (8004834 <xTaskIncrementTick+0x150>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <xTaskIncrementTick+0x48>
	__asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	603b      	str	r3, [r7, #0]
}
 8004728:	bf00      	nop
 800472a:	e7fe      	b.n	800472a <xTaskIncrementTick+0x46>
 800472c:	4b41      	ldr	r3, [pc, #260]	; (8004834 <xTaskIncrementTick+0x150>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	4b41      	ldr	r3, [pc, #260]	; (8004838 <xTaskIncrementTick+0x154>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a3f      	ldr	r2, [pc, #252]	; (8004834 <xTaskIncrementTick+0x150>)
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	4a3f      	ldr	r2, [pc, #252]	; (8004838 <xTaskIncrementTick+0x154>)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b3e      	ldr	r3, [pc, #248]	; (800483c <xTaskIncrementTick+0x158>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3301      	adds	r3, #1
 8004746:	4a3d      	ldr	r2, [pc, #244]	; (800483c <xTaskIncrementTick+0x158>)
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	f000 fadb 	bl	8004d04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800474e:	4b3c      	ldr	r3, [pc, #240]	; (8004840 <xTaskIncrementTick+0x15c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	429a      	cmp	r2, r3
 8004756:	d349      	bcc.n	80047ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004758:	4b36      	ldr	r3, [pc, #216]	; (8004834 <xTaskIncrementTick+0x150>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004762:	4b37      	ldr	r3, [pc, #220]	; (8004840 <xTaskIncrementTick+0x15c>)
 8004764:	f04f 32ff 	mov.w	r2, #4294967295
 8004768:	601a      	str	r2, [r3, #0]
					break;
 800476a:	e03f      	b.n	80047ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800476c:	4b31      	ldr	r3, [pc, #196]	; (8004834 <xTaskIncrementTick+0x150>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d203      	bcs.n	800478c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004784:	4a2e      	ldr	r2, [pc, #184]	; (8004840 <xTaskIncrementTick+0x15c>)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800478a:	e02f      	b.n	80047ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	3304      	adds	r3, #4
 8004790:	4618      	mov	r0, r3
 8004792:	f7fe fd91 	bl	80032b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	2b00      	cmp	r3, #0
 800479c:	d004      	beq.n	80047a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	3318      	adds	r3, #24
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fd88 	bl	80032b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	4b25      	ldr	r3, [pc, #148]	; (8004844 <xTaskIncrementTick+0x160>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d903      	bls.n	80047bc <xTaskIncrementTick+0xd8>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	4a22      	ldr	r2, [pc, #136]	; (8004844 <xTaskIncrementTick+0x160>)
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4a1f      	ldr	r2, [pc, #124]	; (8004848 <xTaskIncrementTick+0x164>)
 80047ca:	441a      	add	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f7fe fd13 	bl	80031fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <xTaskIncrementTick+0x168>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d3b8      	bcc.n	8004758 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047e6:	2301      	movs	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ea:	e7b5      	b.n	8004758 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047ec:	4b17      	ldr	r3, [pc, #92]	; (800484c <xTaskIncrementTick+0x168>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f2:	4915      	ldr	r1, [pc, #84]	; (8004848 <xTaskIncrementTick+0x164>)
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d901      	bls.n	8004808 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004804:	2301      	movs	r3, #1
 8004806:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004808:	4b11      	ldr	r3, [pc, #68]	; (8004850 <xTaskIncrementTick+0x16c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004810:	2301      	movs	r3, #1
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	e004      	b.n	8004820 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004816:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <xTaskIncrementTick+0x170>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3301      	adds	r3, #1
 800481c:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <xTaskIncrementTick+0x170>)
 800481e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004820:	697b      	ldr	r3, [r7, #20]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000dd8 	.word	0x20000dd8
 8004830:	20000db4 	.word	0x20000db4
 8004834:	20000d68 	.word	0x20000d68
 8004838:	20000d6c 	.word	0x20000d6c
 800483c:	20000dc8 	.word	0x20000dc8
 8004840:	20000dd0 	.word	0x20000dd0
 8004844:	20000db8 	.word	0x20000db8
 8004848:	200008e0 	.word	0x200008e0
 800484c:	200008dc 	.word	0x200008dc
 8004850:	20000dc4 	.word	0x20000dc4
 8004854:	20000dc0 	.word	0x20000dc0

08004858 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800485e:	4b2a      	ldr	r3, [pc, #168]	; (8004908 <vTaskSwitchContext+0xb0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004866:	4b29      	ldr	r3, [pc, #164]	; (800490c <vTaskSwitchContext+0xb4>)
 8004868:	2201      	movs	r2, #1
 800486a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800486c:	e046      	b.n	80048fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800486e:	4b27      	ldr	r3, [pc, #156]	; (800490c <vTaskSwitchContext+0xb4>)
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004874:	4b26      	ldr	r3, [pc, #152]	; (8004910 <vTaskSwitchContext+0xb8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	e010      	b.n	800489e <vTaskSwitchContext+0x46>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <vTaskSwitchContext+0x40>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	607b      	str	r3, [r7, #4]
}
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <vTaskSwitchContext+0x3e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3b01      	subs	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	491d      	ldr	r1, [pc, #116]	; (8004914 <vTaskSwitchContext+0xbc>)
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0e4      	beq.n	800487c <vTaskSwitchContext+0x24>
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4a15      	ldr	r2, [pc, #84]	; (8004914 <vTaskSwitchContext+0xbc>)
 80048be:	4413      	add	r3, r2
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	605a      	str	r2, [r3, #4]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	3308      	adds	r3, #8
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d104      	bne.n	80048e2 <vTaskSwitchContext+0x8a>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4a0b      	ldr	r2, [pc, #44]	; (8004918 <vTaskSwitchContext+0xc0>)
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	4a08      	ldr	r2, [pc, #32]	; (8004910 <vTaskSwitchContext+0xb8>)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <vTaskSwitchContext+0xc0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3354      	adds	r3, #84	; 0x54
 80048f8:	4a08      	ldr	r2, [pc, #32]	; (800491c <vTaskSwitchContext+0xc4>)
 80048fa:	6013      	str	r3, [r2, #0]
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	20000dd8 	.word	0x20000dd8
 800490c:	20000dc4 	.word	0x20000dc4
 8004910:	20000db8 	.word	0x20000db8
 8004914:	200008e0 	.word	0x200008e0
 8004918:	200008dc 	.word	0x200008dc
 800491c:	20000010 	.word	0x20000010

08004920 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	60fb      	str	r3, [r7, #12]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004946:	4b07      	ldr	r3, [pc, #28]	; (8004964 <vTaskPlaceOnEventList+0x44>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3318      	adds	r3, #24
 800494c:	4619      	mov	r1, r3
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fe fc79 	bl	8003246 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004954:	2101      	movs	r1, #1
 8004956:	6838      	ldr	r0, [r7, #0]
 8004958:	f000 fb7e 	bl	8005058 <prvAddCurrentTaskToDelayedList>
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	200008dc 	.word	0x200008dc

08004968 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	617b      	str	r3, [r7, #20]
}
 800498c:	bf00      	nop
 800498e:	e7fe      	b.n	800498e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004990:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <vTaskPlaceOnEventListRestricted+0x54>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3318      	adds	r3, #24
 8004996:	4619      	mov	r1, r3
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7fe fc30 	bl	80031fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80049a4:	f04f 33ff 	mov.w	r3, #4294967295
 80049a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	68b8      	ldr	r0, [r7, #8]
 80049ae:	f000 fb53 	bl	8005058 <prvAddCurrentTaskToDelayedList>
	}
 80049b2:	bf00      	nop
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	200008dc 	.word	0x200008dc

080049c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	60fb      	str	r3, [r7, #12]
}
 80049e8:	bf00      	nop
 80049ea:	e7fe      	b.n	80049ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	3318      	adds	r3, #24
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe fc61 	bl	80032b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049f6:	4b1e      	ldr	r3, [pc, #120]	; (8004a70 <xTaskRemoveFromEventList+0xb0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d11d      	bne.n	8004a3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	3304      	adds	r3, #4
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe fc58 	bl	80032b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0c:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <xTaskRemoveFromEventList+0xb4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d903      	bls.n	8004a1c <xTaskRemoveFromEventList+0x5c>
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <xTaskRemoveFromEventList+0xb4>)
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4a13      	ldr	r2, [pc, #76]	; (8004a78 <xTaskRemoveFromEventList+0xb8>)
 8004a2a:	441a      	add	r2, r3
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f7fe fbe3 	bl	80031fe <vListInsertEnd>
 8004a38:	e005      	b.n	8004a46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3318      	adds	r3, #24
 8004a3e:	4619      	mov	r1, r3
 8004a40:	480e      	ldr	r0, [pc, #56]	; (8004a7c <xTaskRemoveFromEventList+0xbc>)
 8004a42:	f7fe fbdc 	bl	80031fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <xTaskRemoveFromEventList+0xc0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d905      	bls.n	8004a60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a54:	2301      	movs	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a58:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <xTaskRemoveFromEventList+0xc4>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e001      	b.n	8004a64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a64:	697b      	ldr	r3, [r7, #20]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000dd8 	.word	0x20000dd8
 8004a74:	20000db8 	.word	0x20000db8
 8004a78:	200008e0 	.word	0x200008e0
 8004a7c:	20000d70 	.word	0x20000d70
 8004a80:	200008dc 	.word	0x200008dc
 8004a84:	20000dc4 	.word	0x20000dc4

08004a88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <vTaskInternalSetTimeOutState+0x24>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <vTaskInternalSetTimeOutState+0x28>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	605a      	str	r2, [r3, #4]
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	20000dc8 	.word	0x20000dc8
 8004ab0:	20000db4 	.word	0x20000db4

08004ab4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	613b      	str	r3, [r7, #16]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	60fb      	str	r3, [r7, #12]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004af6:	f000 ff7d 	bl	80059f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004afa:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <xTaskCheckForTimeOut+0xbc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d102      	bne.n	8004b1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	e023      	b.n	8004b62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <xTaskCheckForTimeOut+0xc0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d007      	beq.n	8004b36 <xTaskCheckForTimeOut+0x82>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d302      	bcc.n	8004b36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b30:	2301      	movs	r3, #1
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	e015      	b.n	8004b62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d20b      	bcs.n	8004b58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	1ad2      	subs	r2, r2, r3
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ff9b 	bl	8004a88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	e004      	b.n	8004b62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b62:	f000 ff77 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 8004b66:	69fb      	ldr	r3, [r7, #28]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000db4 	.word	0x20000db4
 8004b74:	20000dc8 	.word	0x20000dc8

08004b78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <vTaskMissedYield+0x14>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	601a      	str	r2, [r3, #0]
}
 8004b82:	bf00      	nop
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	20000dc4 	.word	0x20000dc4

08004b90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b98:	f000 f852 	bl	8004c40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <prvIdleTask+0x28>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d9f9      	bls.n	8004b98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <prvIdleTask+0x2c>)
 8004ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bb4:	e7f0      	b.n	8004b98 <prvIdleTask+0x8>
 8004bb6:	bf00      	nop
 8004bb8:	200008e0 	.word	0x200008e0
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	e00c      	b.n	8004be6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4a12      	ldr	r2, [pc, #72]	; (8004c20 <prvInitialiseTaskLists+0x60>)
 8004bd8:	4413      	add	r3, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fae2 	bl	80031a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3301      	adds	r3, #1
 8004be4:	607b      	str	r3, [r7, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b37      	cmp	r3, #55	; 0x37
 8004bea:	d9ef      	bls.n	8004bcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bec:	480d      	ldr	r0, [pc, #52]	; (8004c24 <prvInitialiseTaskLists+0x64>)
 8004bee:	f7fe fad9 	bl	80031a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bf2:	480d      	ldr	r0, [pc, #52]	; (8004c28 <prvInitialiseTaskLists+0x68>)
 8004bf4:	f7fe fad6 	bl	80031a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bf8:	480c      	ldr	r0, [pc, #48]	; (8004c2c <prvInitialiseTaskLists+0x6c>)
 8004bfa:	f7fe fad3 	bl	80031a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bfe:	480c      	ldr	r0, [pc, #48]	; (8004c30 <prvInitialiseTaskLists+0x70>)
 8004c00:	f7fe fad0 	bl	80031a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c04:	480b      	ldr	r0, [pc, #44]	; (8004c34 <prvInitialiseTaskLists+0x74>)
 8004c06:	f7fe facd 	bl	80031a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <prvInitialiseTaskLists+0x78>)
 8004c0c:	4a05      	ldr	r2, [pc, #20]	; (8004c24 <prvInitialiseTaskLists+0x64>)
 8004c0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <prvInitialiseTaskLists+0x7c>)
 8004c12:	4a05      	ldr	r2, [pc, #20]	; (8004c28 <prvInitialiseTaskLists+0x68>)
 8004c14:	601a      	str	r2, [r3, #0]
}
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200008e0 	.word	0x200008e0
 8004c24:	20000d40 	.word	0x20000d40
 8004c28:	20000d54 	.word	0x20000d54
 8004c2c:	20000d70 	.word	0x20000d70
 8004c30:	20000d84 	.word	0x20000d84
 8004c34:	20000d9c 	.word	0x20000d9c
 8004c38:	20000d68 	.word	0x20000d68
 8004c3c:	20000d6c 	.word	0x20000d6c

08004c40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c46:	e019      	b.n	8004c7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c48:	f000 fed4 	bl	80059f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <prvCheckTasksWaitingTermination+0x50>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe fb2d 	bl	80032b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <prvCheckTasksWaitingTermination+0x54>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	4a0b      	ldr	r2, [pc, #44]	; (8004c94 <prvCheckTasksWaitingTermination+0x54>)
 8004c66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <prvCheckTasksWaitingTermination+0x58>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	4a0a      	ldr	r2, [pc, #40]	; (8004c98 <prvCheckTasksWaitingTermination+0x58>)
 8004c70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c72:	f000 feef 	bl	8005a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f810 	bl	8004c9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <prvCheckTasksWaitingTermination+0x58>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e1      	bne.n	8004c48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000d84 	.word	0x20000d84
 8004c94:	20000db0 	.word	0x20000db0
 8004c98:	20000d98 	.word	0x20000d98

08004c9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3354      	adds	r3, #84	; 0x54
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 f9f9 	bl	80060a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d108      	bne.n	8004cca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 f887 	bl	8005dd0 <vPortFree>
				vPortFree( pxTCB );
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 f884 	bl	8005dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cc8:	e018      	b.n	8004cfc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d103      	bne.n	8004cdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f001 f87b 	bl	8005dd0 <vPortFree>
	}
 8004cda:	e00f      	b.n	8004cfc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d00a      	beq.n	8004cfc <prvDeleteTCB+0x60>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	60fb      	str	r3, [r7, #12]
}
 8004cf8:	bf00      	nop
 8004cfa:	e7fe      	b.n	8004cfa <prvDeleteTCB+0x5e>
	}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <prvResetNextTaskUnblockTime+0x38>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <prvResetNextTaskUnblockTime+0x3c>)
 8004d16:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d1c:	e008      	b.n	8004d30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d1e:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <prvResetNextTaskUnblockTime+0x38>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4a04      	ldr	r2, [pc, #16]	; (8004d40 <prvResetNextTaskUnblockTime+0x3c>)
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	20000d68 	.word	0x20000d68
 8004d40:	20000dd0 	.word	0x20000dd0

08004d44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <xTaskGetSchedulerState+0x34>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d52:	2301      	movs	r3, #1
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	e008      	b.n	8004d6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d58:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <xTaskGetSchedulerState+0x38>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d60:	2302      	movs	r3, #2
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	e001      	b.n	8004d6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d6a:	687b      	ldr	r3, [r7, #4]
	}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	20000dbc 	.word	0x20000dbc
 8004d7c:	20000dd8 	.word	0x20000dd8

08004d80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d051      	beq.n	8004e3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9a:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <xTaskPriorityInherit+0xc4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d241      	bcs.n	8004e28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	db06      	blt.n	8004dba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dac:	4b25      	ldr	r3, [pc, #148]	; (8004e44 <xTaskPriorityInherit+0xc4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6959      	ldr	r1, [r3, #20]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4a1f      	ldr	r2, [pc, #124]	; (8004e48 <xTaskPriorityInherit+0xc8>)
 8004dcc:	4413      	add	r3, r2
 8004dce:	4299      	cmp	r1, r3
 8004dd0:	d122      	bne.n	8004e18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe fa6e 	bl	80032b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ddc:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <xTaskPriorityInherit+0xc4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dea:	4b18      	ldr	r3, [pc, #96]	; (8004e4c <xTaskPriorityInherit+0xcc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d903      	bls.n	8004dfa <xTaskPriorityInherit+0x7a>
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <xTaskPriorityInherit+0xcc>)
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4a10      	ldr	r2, [pc, #64]	; (8004e48 <xTaskPriorityInherit+0xc8>)
 8004e08:	441a      	add	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f7fe f9f4 	bl	80031fe <vListInsertEnd>
 8004e16:	e004      	b.n	8004e22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <xTaskPriorityInherit+0xc4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e22:	2301      	movs	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e008      	b.n	8004e3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <xTaskPriorityInherit+0xc4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d201      	bcs.n	8004e3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
	}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200008dc 	.word	0x200008dc
 8004e48:	200008e0 	.word	0x200008e0
 8004e4c:	20000db8 	.word	0x20000db8

08004e50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d056      	beq.n	8004f14 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e66:	4b2e      	ldr	r3, [pc, #184]	; (8004f20 <xTaskPriorityDisinherit+0xd0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d00a      	beq.n	8004e86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	60fb      	str	r3, [r7, #12]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	60bb      	str	r3, [r7, #8]
}
 8004ea0:	bf00      	nop
 8004ea2:	e7fe      	b.n	8004ea2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea8:	1e5a      	subs	r2, r3, #1
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d02c      	beq.n	8004f14 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d128      	bne.n	8004f14 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe f9f6 	bl	80032b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <xTaskPriorityDisinherit+0xd4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d903      	bls.n	8004ef4 <xTaskPriorityDisinherit+0xa4>
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	4a0c      	ldr	r2, [pc, #48]	; (8004f24 <xTaskPriorityDisinherit+0xd4>)
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <xTaskPriorityDisinherit+0xd8>)
 8004f02:	441a      	add	r2, r3
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7fe f977 	bl	80031fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f14:	697b      	ldr	r3, [r7, #20]
	}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200008dc 	.word	0x200008dc
 8004f24:	20000db8 	.word	0x20000db8
 8004f28:	200008e0 	.word	0x200008e0

08004f2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d06a      	beq.n	800501a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	60fb      	str	r3, [r7, #12]
}
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d902      	bls.n	8004f72 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	e002      	b.n	8004f78 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f76:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d04b      	beq.n	800501a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d146      	bne.n	800501a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004f8c:	4b25      	ldr	r3, [pc, #148]	; (8005024 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d10a      	bne.n	8004fac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60bb      	str	r3, [r7, #8]
}
 8004fa8:	bf00      	nop
 8004faa:	e7fe      	b.n	8004faa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	db04      	blt.n	8004fca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	6959      	ldr	r1, [r3, #20]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4a13      	ldr	r2, [pc, #76]	; (8005028 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004fda:	4413      	add	r3, r2
 8004fdc:	4299      	cmp	r1, r3
 8004fde:	d11c      	bne.n	800501a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fe f967 	bl	80032b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fee:	4b0f      	ldr	r3, [pc, #60]	; (800502c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d903      	bls.n	8004ffe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	4a0c      	ldr	r2, [pc, #48]	; (800502c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4a07      	ldr	r2, [pc, #28]	; (8005028 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800500c:	441a      	add	r2, r3
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	3304      	adds	r3, #4
 8005012:	4619      	mov	r1, r3
 8005014:	4610      	mov	r0, r2
 8005016:	f7fe f8f2 	bl	80031fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800501a:	bf00      	nop
 800501c:	3720      	adds	r7, #32
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	200008dc 	.word	0x200008dc
 8005028:	200008e0 	.word	0x200008e0
 800502c:	20000db8 	.word	0x20000db8

08005030 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <pvTaskIncrementMutexHeldCount+0x24>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d004      	beq.n	8005046 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <pvTaskIncrementMutexHeldCount+0x24>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005042:	3201      	adds	r2, #1
 8005044:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005046:	4b03      	ldr	r3, [pc, #12]	; (8005054 <pvTaskIncrementMutexHeldCount+0x24>)
 8005048:	681b      	ldr	r3, [r3, #0]
	}
 800504a:	4618      	mov	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	200008dc 	.word	0x200008dc

08005058 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005062:	4b21      	ldr	r3, [pc, #132]	; (80050e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005068:	4b20      	ldr	r3, [pc, #128]	; (80050ec <prvAddCurrentTaskToDelayedList+0x94>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3304      	adds	r3, #4
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe f922 	bl	80032b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507a:	d10a      	bne.n	8005092 <prvAddCurrentTaskToDelayedList+0x3a>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005082:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <prvAddCurrentTaskToDelayedList+0x94>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4819      	ldr	r0, [pc, #100]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800508c:	f7fe f8b7 	bl	80031fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005090:	e026      	b.n	80050e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4413      	add	r3, r2
 8005098:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800509a:	4b14      	ldr	r3, [pc, #80]	; (80050ec <prvAddCurrentTaskToDelayedList+0x94>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d209      	bcs.n	80050be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <prvAddCurrentTaskToDelayedList+0x94>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4619      	mov	r1, r3
 80050b6:	4610      	mov	r0, r2
 80050b8:	f7fe f8c5 	bl	8003246 <vListInsert>
}
 80050bc:	e010      	b.n	80050e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050be:	4b0e      	ldr	r3, [pc, #56]	; (80050f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <prvAddCurrentTaskToDelayedList+0x94>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3304      	adds	r3, #4
 80050c8:	4619      	mov	r1, r3
 80050ca:	4610      	mov	r0, r2
 80050cc:	f7fe f8bb 	bl	8003246 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d202      	bcs.n	80050e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050da:	4a08      	ldr	r2, [pc, #32]	; (80050fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	6013      	str	r3, [r2, #0]
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20000db4 	.word	0x20000db4
 80050ec:	200008dc 	.word	0x200008dc
 80050f0:	20000d9c 	.word	0x20000d9c
 80050f4:	20000d6c 	.word	0x20000d6c
 80050f8:	20000d68 	.word	0x20000d68
 80050fc:	20000dd0 	.word	0x20000dd0

08005100 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	; 0x28
 8005104:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800510a:	f000 fb07 	bl	800571c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800510e:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <xTimerCreateTimerTask+0x80>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d021      	beq.n	800515a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800511e:	1d3a      	adds	r2, r7, #4
 8005120:	f107 0108 	add.w	r1, r7, #8
 8005124:	f107 030c 	add.w	r3, r7, #12
 8005128:	4618      	mov	r0, r3
 800512a:	f7fe f821 	bl	8003170 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	9202      	str	r2, [sp, #8]
 8005136:	9301      	str	r3, [sp, #4]
 8005138:	2302      	movs	r3, #2
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	2300      	movs	r3, #0
 800513e:	460a      	mov	r2, r1
 8005140:	4910      	ldr	r1, [pc, #64]	; (8005184 <xTimerCreateTimerTask+0x84>)
 8005142:	4811      	ldr	r0, [pc, #68]	; (8005188 <xTimerCreateTimerTask+0x88>)
 8005144:	f7fe ffea 	bl	800411c <xTaskCreateStatic>
 8005148:	4603      	mov	r3, r0
 800514a:	4a10      	ldr	r2, [pc, #64]	; (800518c <xTimerCreateTimerTask+0x8c>)
 800514c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <xTimerCreateTimerTask+0x8c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005156:	2301      	movs	r3, #1
 8005158:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	613b      	str	r3, [r7, #16]
}
 8005172:	bf00      	nop
 8005174:	e7fe      	b.n	8005174 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005176:	697b      	ldr	r3, [r7, #20]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20000e0c 	.word	0x20000e0c
 8005184:	08006284 	.word	0x08006284
 8005188:	080052c5 	.word	0x080052c5
 800518c:	20000e10 	.word	0x20000e10

08005190 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800519e:	2300      	movs	r3, #0
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <xTimerGenericCommand+0x2e>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	623b      	str	r3, [r7, #32]
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051be:	4b1a      	ldr	r3, [pc, #104]	; (8005228 <xTimerGenericCommand+0x98>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d02a      	beq.n	800521c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b05      	cmp	r3, #5
 80051d6:	dc18      	bgt.n	800520a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051d8:	f7ff fdb4 	bl	8004d44 <xTaskGetSchedulerState>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d109      	bne.n	80051f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051e2:	4b11      	ldr	r3, [pc, #68]	; (8005228 <xTimerGenericCommand+0x98>)
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	f107 0110 	add.w	r1, r7, #16
 80051ea:	2300      	movs	r3, #0
 80051ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ee:	f7fe f9fd 	bl	80035ec <xQueueGenericSend>
 80051f2:	6278      	str	r0, [r7, #36]	; 0x24
 80051f4:	e012      	b.n	800521c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <xTimerGenericCommand+0x98>)
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	f107 0110 	add.w	r1, r7, #16
 80051fe:	2300      	movs	r3, #0
 8005200:	2200      	movs	r2, #0
 8005202:	f7fe f9f3 	bl	80035ec <xQueueGenericSend>
 8005206:	6278      	str	r0, [r7, #36]	; 0x24
 8005208:	e008      	b.n	800521c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800520a:	4b07      	ldr	r3, [pc, #28]	; (8005228 <xTimerGenericCommand+0x98>)
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	f107 0110 	add.w	r1, r7, #16
 8005212:	2300      	movs	r3, #0
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	f7fe fae7 	bl	80037e8 <xQueueGenericSendFromISR>
 800521a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800521e:	4618      	mov	r0, r3
 8005220:	3728      	adds	r7, #40	; 0x28
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000e0c 	.word	0x20000e0c

0800522c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af02      	add	r7, sp, #8
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005236:	4b22      	ldr	r3, [pc, #136]	; (80052c0 <prvProcessExpiredTimer+0x94>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	3304      	adds	r3, #4
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe f837 	bl	80032b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d022      	beq.n	800529e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	699a      	ldr	r2, [r3, #24]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	18d1      	adds	r1, r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	6978      	ldr	r0, [r7, #20]
 8005266:	f000 f8d1 	bl	800540c <prvInsertTimerInActiveList>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01f      	beq.n	80052b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005270:	2300      	movs	r3, #0
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2300      	movs	r3, #0
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	2100      	movs	r1, #0
 800527a:	6978      	ldr	r0, [r7, #20]
 800527c:	f7ff ff88 	bl	8005190 <xTimerGenericCommand>
 8005280:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d113      	bne.n	80052b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	60fb      	str	r3, [r7, #12]
}
 800529a:	bf00      	nop
 800529c:	e7fe      	b.n	800529c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	6978      	ldr	r0, [r7, #20]
 80052b6:	4798      	blx	r3
}
 80052b8:	bf00      	nop
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20000e04 	.word	0x20000e04

080052c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052cc:	f107 0308 	add.w	r3, r7, #8
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 f857 	bl	8005384 <prvGetNextExpireTime>
 80052d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4619      	mov	r1, r3
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f803 	bl	80052e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052e2:	f000 f8d5 	bl	8005490 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052e6:	e7f1      	b.n	80052cc <prvTimerTask+0x8>

080052e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052f2:	f7ff f93b 	bl	800456c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052f6:	f107 0308 	add.w	r3, r7, #8
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f866 	bl	80053cc <prvSampleTimeNow>
 8005300:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d130      	bne.n	800536a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <prvProcessTimerOrBlockTask+0x3c>
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	429a      	cmp	r2, r3
 8005314:	d806      	bhi.n	8005324 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005316:	f7ff f937 	bl	8004588 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800531a:	68f9      	ldr	r1, [r7, #12]
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff ff85 	bl	800522c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005322:	e024      	b.n	800536e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800532a:	4b13      	ldr	r3, [pc, #76]	; (8005378 <prvProcessTimerOrBlockTask+0x90>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <prvProcessTimerOrBlockTask+0x50>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <prvProcessTimerOrBlockTask+0x52>
 8005338:	2300      	movs	r3, #0
 800533a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800533c:	4b0f      	ldr	r3, [pc, #60]	; (800537c <prvProcessTimerOrBlockTask+0x94>)
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	4619      	mov	r1, r3
 800534a:	f7fe feb3 	bl	80040b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800534e:	f7ff f91b 	bl	8004588 <xTaskResumeAll>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005358:	4b09      	ldr	r3, [pc, #36]	; (8005380 <prvProcessTimerOrBlockTask+0x98>)
 800535a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	f3bf 8f6f 	isb	sy
}
 8005368:	e001      	b.n	800536e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800536a:	f7ff f90d 	bl	8004588 <xTaskResumeAll>
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000e08 	.word	0x20000e08
 800537c:	20000e0c 	.word	0x20000e0c
 8005380:	e000ed04 	.word	0xe000ed04

08005384 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800538c:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <prvGetNextExpireTime+0x44>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <prvGetNextExpireTime+0x16>
 8005396:	2201      	movs	r2, #1
 8005398:	e000      	b.n	800539c <prvGetNextExpireTime+0x18>
 800539a:	2200      	movs	r2, #0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053a8:	4b07      	ldr	r3, [pc, #28]	; (80053c8 <prvGetNextExpireTime+0x44>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e001      	b.n	80053b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053b8:	68fb      	ldr	r3, [r7, #12]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20000e04 	.word	0x20000e04

080053cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053d4:	f7ff f976 	bl	80046c4 <xTaskGetTickCount>
 80053d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <prvSampleTimeNow+0x3c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d205      	bcs.n	80053f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053e4:	f000 f936 	bl	8005654 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	e002      	b.n	80053f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053f6:	4a04      	ldr	r2, [pc, #16]	; (8005408 <prvSampleTimeNow+0x3c>)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053fc:	68fb      	ldr	r3, [r7, #12]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000e14 	.word	0x20000e14

0800540c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	429a      	cmp	r2, r3
 8005430:	d812      	bhi.n	8005458 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	1ad2      	subs	r2, r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	429a      	cmp	r2, r3
 800543e:	d302      	bcc.n	8005446 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005440:	2301      	movs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e01b      	b.n	800547e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005446:	4b10      	ldr	r3, [pc, #64]	; (8005488 <prvInsertTimerInActiveList+0x7c>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3304      	adds	r3, #4
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f7fd fef8 	bl	8003246 <vListInsert>
 8005456:	e012      	b.n	800547e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d206      	bcs.n	800546e <prvInsertTimerInActiveList+0x62>
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d302      	bcc.n	800546e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e007      	b.n	800547e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800546e:	4b07      	ldr	r3, [pc, #28]	; (800548c <prvInsertTimerInActiveList+0x80>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3304      	adds	r3, #4
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f7fd fee4 	bl	8003246 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800547e:	697b      	ldr	r3, [r7, #20]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	20000e08 	.word	0x20000e08
 800548c:	20000e04 	.word	0x20000e04

08005490 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08e      	sub	sp, #56	; 0x38
 8005494:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005496:	e0ca      	b.n	800562e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	da18      	bge.n	80054d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800549e:	1d3b      	adds	r3, r7, #4
 80054a0:	3304      	adds	r3, #4
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	61fb      	str	r3, [r7, #28]
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c6:	6850      	ldr	r0, [r2, #4]
 80054c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ca:	6892      	ldr	r2, [r2, #8]
 80054cc:	4611      	mov	r1, r2
 80054ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f2c0 80aa 	blt.w	800562c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d004      	beq.n	80054ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	3304      	adds	r3, #4
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fd fee5 	bl	80032b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054ee:	463b      	mov	r3, r7
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff ff6b 	bl	80053cc <prvSampleTimeNow>
 80054f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b09      	cmp	r3, #9
 80054fc:	f200 8097 	bhi.w	800562e <prvProcessReceivedCommands+0x19e>
 8005500:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <prvProcessReceivedCommands+0x78>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	08005531 	.word	0x08005531
 800550c:	08005531 	.word	0x08005531
 8005510:	08005531 	.word	0x08005531
 8005514:	080055a5 	.word	0x080055a5
 8005518:	080055b9 	.word	0x080055b9
 800551c:	08005603 	.word	0x08005603
 8005520:	08005531 	.word	0x08005531
 8005524:	08005531 	.word	0x08005531
 8005528:	080055a5 	.word	0x080055a5
 800552c:	080055b9 	.word	0x080055b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	b2da      	uxtb	r2, r3
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	18d1      	adds	r1, r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005550:	f7ff ff5c 	bl	800540c <prvInsertTimerInActiveList>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d069      	beq.n	800562e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005560:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d05e      	beq.n	800562e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	441a      	add	r2, r3
 8005578:	2300      	movs	r3, #0
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2300      	movs	r3, #0
 800557e:	2100      	movs	r1, #0
 8005580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005582:	f7ff fe05 	bl	8005190 <xTimerGenericCommand>
 8005586:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d14f      	bne.n	800562e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	61bb      	str	r3, [r7, #24]
}
 80055a0:	bf00      	nop
 80055a2:	e7fe      	b.n	80055a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80055b6:	e03a      	b.n	800562e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	617b      	str	r3, [r7, #20]
}
 80055ea:	bf00      	nop
 80055ec:	e7fe      	b.n	80055ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	18d1      	adds	r1, r2, r3
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055fc:	f7ff ff06 	bl	800540c <prvInsertTimerInActiveList>
					break;
 8005600:	e015      	b.n	800562e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d103      	bne.n	8005618 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005612:	f000 fbdd 	bl	8005dd0 <vPortFree>
 8005616:	e00a      	b.n	800562e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800561e:	f023 0301 	bic.w	r3, r3, #1
 8005622:	b2da      	uxtb	r2, r3
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800562a:	e000      	b.n	800562e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800562c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800562e:	4b08      	ldr	r3, [pc, #32]	; (8005650 <prvProcessReceivedCommands+0x1c0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	1d39      	adds	r1, r7, #4
 8005634:	2200      	movs	r2, #0
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe f9fe 	bl	8003a38 <xQueueReceive>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	f47f af2a 	bne.w	8005498 <prvProcessReceivedCommands+0x8>
	}
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	3730      	adds	r7, #48	; 0x30
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000e0c 	.word	0x20000e0c

08005654 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800565a:	e048      	b.n	80056ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800565c:	4b2d      	ldr	r3, [pc, #180]	; (8005714 <prvSwitchTimerLists+0xc0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005666:	4b2b      	ldr	r3, [pc, #172]	; (8005714 <prvSwitchTimerLists+0xc0>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3304      	adds	r3, #4
 8005674:	4618      	mov	r0, r3
 8005676:	f7fd fe1f 	bl	80032b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d02e      	beq.n	80056ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4413      	add	r3, r2
 8005698:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d90e      	bls.n	80056c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056ae:	4b19      	ldr	r3, [pc, #100]	; (8005714 <prvSwitchTimerLists+0xc0>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3304      	adds	r3, #4
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f7fd fdc4 	bl	8003246 <vListInsert>
 80056be:	e016      	b.n	80056ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056c0:	2300      	movs	r3, #0
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	2300      	movs	r3, #0
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	2100      	movs	r1, #0
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f7ff fd60 	bl	8005190 <xTimerGenericCommand>
 80056d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	603b      	str	r3, [r7, #0]
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <prvSwitchTimerLists+0xc0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1b1      	bne.n	800565c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <prvSwitchTimerLists+0xc0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056fe:	4b06      	ldr	r3, [pc, #24]	; (8005718 <prvSwitchTimerLists+0xc4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a04      	ldr	r2, [pc, #16]	; (8005714 <prvSwitchTimerLists+0xc0>)
 8005704:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005706:	4a04      	ldr	r2, [pc, #16]	; (8005718 <prvSwitchTimerLists+0xc4>)
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	6013      	str	r3, [r2, #0]
}
 800570c:	bf00      	nop
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000e04 	.word	0x20000e04
 8005718:	20000e08 	.word	0x20000e08

0800571c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005722:	f000 f967 	bl	80059f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005726:	4b15      	ldr	r3, [pc, #84]	; (800577c <prvCheckForValidListAndQueue+0x60>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d120      	bne.n	8005770 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800572e:	4814      	ldr	r0, [pc, #80]	; (8005780 <prvCheckForValidListAndQueue+0x64>)
 8005730:	f7fd fd38 	bl	80031a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005734:	4813      	ldr	r0, [pc, #76]	; (8005784 <prvCheckForValidListAndQueue+0x68>)
 8005736:	f7fd fd35 	bl	80031a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800573a:	4b13      	ldr	r3, [pc, #76]	; (8005788 <prvCheckForValidListAndQueue+0x6c>)
 800573c:	4a10      	ldr	r2, [pc, #64]	; (8005780 <prvCheckForValidListAndQueue+0x64>)
 800573e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005740:	4b12      	ldr	r3, [pc, #72]	; (800578c <prvCheckForValidListAndQueue+0x70>)
 8005742:	4a10      	ldr	r2, [pc, #64]	; (8005784 <prvCheckForValidListAndQueue+0x68>)
 8005744:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005746:	2300      	movs	r3, #0
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	4b11      	ldr	r3, [pc, #68]	; (8005790 <prvCheckForValidListAndQueue+0x74>)
 800574c:	4a11      	ldr	r2, [pc, #68]	; (8005794 <prvCheckForValidListAndQueue+0x78>)
 800574e:	2110      	movs	r1, #16
 8005750:	200a      	movs	r0, #10
 8005752:	f7fd fe43 	bl	80033dc <xQueueGenericCreateStatic>
 8005756:	4603      	mov	r3, r0
 8005758:	4a08      	ldr	r2, [pc, #32]	; (800577c <prvCheckForValidListAndQueue+0x60>)
 800575a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800575c:	4b07      	ldr	r3, [pc, #28]	; (800577c <prvCheckForValidListAndQueue+0x60>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <prvCheckForValidListAndQueue+0x60>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	490b      	ldr	r1, [pc, #44]	; (8005798 <prvCheckForValidListAndQueue+0x7c>)
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe fc78 	bl	8004060 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005770:	f000 f970 	bl	8005a54 <vPortExitCritical>
}
 8005774:	bf00      	nop
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000e0c 	.word	0x20000e0c
 8005780:	20000ddc 	.word	0x20000ddc
 8005784:	20000df0 	.word	0x20000df0
 8005788:	20000e04 	.word	0x20000e04
 800578c:	20000e08 	.word	0x20000e08
 8005790:	20000eb8 	.word	0x20000eb8
 8005794:	20000e18 	.word	0x20000e18
 8005798:	0800628c 	.word	0x0800628c

0800579c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3b04      	subs	r3, #4
 80057ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3b04      	subs	r3, #4
 80057ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f023 0201 	bic.w	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3b04      	subs	r3, #4
 80057ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057cc:	4a0c      	ldr	r2, [pc, #48]	; (8005800 <pxPortInitialiseStack+0x64>)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3b14      	subs	r3, #20
 80057d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3b04      	subs	r3, #4
 80057e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f06f 0202 	mvn.w	r2, #2
 80057ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3b20      	subs	r3, #32
 80057f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057f2:	68fb      	ldr	r3, [r7, #12]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	08005805 	.word	0x08005805

08005804 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800580a:	2300      	movs	r3, #0
 800580c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800580e:	4b12      	ldr	r3, [pc, #72]	; (8005858 <prvTaskExitError+0x54>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d00a      	beq.n	800582e <prvTaskExitError+0x2a>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	60fb      	str	r3, [r7, #12]
}
 800582a:	bf00      	nop
 800582c:	e7fe      	b.n	800582c <prvTaskExitError+0x28>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	60bb      	str	r3, [r7, #8]
}
 8005840:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005842:	bf00      	nop
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0fc      	beq.n	8005844 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800584a:	bf00      	nop
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	2000000c 	.word	0x2000000c
 800585c:	00000000 	.word	0x00000000

08005860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <pxCurrentTCBConst2>)
 8005862:	6819      	ldr	r1, [r3, #0]
 8005864:	6808      	ldr	r0, [r1, #0]
 8005866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586a:	f380 8809 	msr	PSP, r0
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8811 	msr	BASEPRI, r0
 800587a:	4770      	bx	lr
 800587c:	f3af 8000 	nop.w

08005880 <pxCurrentTCBConst2>:
 8005880:	200008dc 	.word	0x200008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop

08005888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005888:	4808      	ldr	r0, [pc, #32]	; (80058ac <prvPortStartFirstTask+0x24>)
 800588a:	6800      	ldr	r0, [r0, #0]
 800588c:	6800      	ldr	r0, [r0, #0]
 800588e:	f380 8808 	msr	MSP, r0
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8814 	msr	CONTROL, r0
 800589a:	b662      	cpsie	i
 800589c:	b661      	cpsie	f
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	df00      	svc	0
 80058a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058aa:	bf00      	nop
 80058ac:	e000ed08 	.word	0xe000ed08

080058b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058b6:	4b46      	ldr	r3, [pc, #280]	; (80059d0 <xPortStartScheduler+0x120>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a46      	ldr	r2, [pc, #280]	; (80059d4 <xPortStartScheduler+0x124>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10a      	bne.n	80058d6 <xPortStartScheduler+0x26>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	613b      	str	r3, [r7, #16]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058d6:	4b3e      	ldr	r3, [pc, #248]	; (80059d0 <xPortStartScheduler+0x120>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3f      	ldr	r2, [pc, #252]	; (80059d8 <xPortStartScheduler+0x128>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10a      	bne.n	80058f6 <xPortStartScheduler+0x46>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	60fb      	str	r3, [r7, #12]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058f6:	4b39      	ldr	r3, [pc, #228]	; (80059dc <xPortStartScheduler+0x12c>)
 80058f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	22ff      	movs	r2, #255	; 0xff
 8005906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005918:	b2da      	uxtb	r2, r3
 800591a:	4b31      	ldr	r3, [pc, #196]	; (80059e0 <xPortStartScheduler+0x130>)
 800591c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <xPortStartScheduler+0x134>)
 8005920:	2207      	movs	r2, #7
 8005922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005924:	e009      	b.n	800593a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005926:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <xPortStartScheduler+0x134>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3b01      	subs	r3, #1
 800592c:	4a2d      	ldr	r2, [pc, #180]	; (80059e4 <xPortStartScheduler+0x134>)
 800592e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	b2db      	uxtb	r3, r3
 8005938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d0ef      	beq.n	8005926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005946:	4b27      	ldr	r3, [pc, #156]	; (80059e4 <xPortStartScheduler+0x134>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f1c3 0307 	rsb	r3, r3, #7
 800594e:	2b04      	cmp	r3, #4
 8005950:	d00a      	beq.n	8005968 <xPortStartScheduler+0xb8>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	60bb      	str	r3, [r7, #8]
}
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005968:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <xPortStartScheduler+0x134>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	4a1d      	ldr	r2, [pc, #116]	; (80059e4 <xPortStartScheduler+0x134>)
 8005970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005972:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <xPortStartScheduler+0x134>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800597a:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <xPortStartScheduler+0x134>)
 800597c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005986:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <xPortStartScheduler+0x138>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <xPortStartScheduler+0x138>)
 800598c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005992:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <xPortStartScheduler+0x138>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a14      	ldr	r2, [pc, #80]	; (80059e8 <xPortStartScheduler+0x138>)
 8005998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800599c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800599e:	f000 f8dd 	bl	8005b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059a2:	4b12      	ldr	r3, [pc, #72]	; (80059ec <xPortStartScheduler+0x13c>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059a8:	f000 f8fc 	bl	8005ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059ac:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <xPortStartScheduler+0x140>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a0f      	ldr	r2, [pc, #60]	; (80059f0 <xPortStartScheduler+0x140>)
 80059b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059b8:	f7ff ff66 	bl	8005888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059bc:	f7fe ff4c 	bl	8004858 <vTaskSwitchContext>
	prvTaskExitError();
 80059c0:	f7ff ff20 	bl	8005804 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	e000ed00 	.word	0xe000ed00
 80059d4:	410fc271 	.word	0x410fc271
 80059d8:	410fc270 	.word	0x410fc270
 80059dc:	e000e400 	.word	0xe000e400
 80059e0:	20000f08 	.word	0x20000f08
 80059e4:	20000f0c 	.word	0x20000f0c
 80059e8:	e000ed20 	.word	0xe000ed20
 80059ec:	2000000c 	.word	0x2000000c
 80059f0:	e000ef34 	.word	0xe000ef34

080059f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	607b      	str	r3, [r7, #4]
}
 8005a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3301      	adds	r3, #1
 8005a14:	4a0d      	ldr	r2, [pc, #52]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d10f      	bne.n	8005a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <vPortEnterCritical+0x5c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	603b      	str	r3, [r7, #0]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <vPortEnterCritical+0x4a>
	}
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	2000000c 	.word	0x2000000c
 8005a50:	e000ed04 	.word	0xe000ed04

08005a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a5a:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <vPortExitCritical+0x24>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	607b      	str	r3, [r7, #4]
}
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a78:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a82:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <vPortExitCritical+0x42>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	f383 8811 	msr	BASEPRI, r3
}
 8005a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c
	...

08005ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ab0:	f3ef 8009 	mrs	r0, PSP
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <pxCurrentTCBConst>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	f01e 0f10 	tst.w	lr, #16
 8005ac0:	bf08      	it	eq
 8005ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aca:	6010      	str	r0, [r2, #0]
 8005acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ad4:	f380 8811 	msr	BASEPRI, r0
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f7fe feba 	bl	8004858 <vTaskSwitchContext>
 8005ae4:	f04f 0000 	mov.w	r0, #0
 8005ae8:	f380 8811 	msr	BASEPRI, r0
 8005aec:	bc09      	pop	{r0, r3}
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	6808      	ldr	r0, [r1, #0]
 8005af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af6:	f01e 0f10 	tst.w	lr, #16
 8005afa:	bf08      	it	eq
 8005afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b00:	f380 8809 	msr	PSP, r0
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst>:
 8005b10:	200008dc 	.word	0x200008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b32:	f7fe fdd7 	bl	80046e4 <xTaskIncrementTick>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <xPortSysTickHandler+0x40>)
 8005b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	2300      	movs	r3, #0
 8005b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	f383 8811 	msr	BASEPRI, r3
}
 8005b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <vPortSetupTimerInterrupt+0x34>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <vPortSetupTimerInterrupt+0x38>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <vPortSetupTimerInterrupt+0x3c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <vPortSetupTimerInterrupt+0x40>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	099b      	lsrs	r3, r3, #6
 8005b78:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <vPortSetupTimerInterrupt+0x44>)
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b7e:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <vPortSetupTimerInterrupt+0x34>)
 8005b80:	2207      	movs	r2, #7
 8005b82:	601a      	str	r2, [r3, #0]
}
 8005b84:	bf00      	nop
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	e000e010 	.word	0xe000e010
 8005b94:	e000e018 	.word	0xe000e018
 8005b98:	20000000 	.word	0x20000000
 8005b9c:	10624dd3 	.word	0x10624dd3
 8005ba0:	e000e014 	.word	0xe000e014

08005ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bb4 <vPortEnableVFP+0x10>
 8005ba8:	6801      	ldr	r1, [r0, #0]
 8005baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bae:	6001      	str	r1, [r0, #0]
 8005bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bb2:	bf00      	nop
 8005bb4:	e000ed88 	.word	0xe000ed88

08005bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bbe:	f3ef 8305 	mrs	r3, IPSR
 8005bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b0f      	cmp	r3, #15
 8005bc8:	d914      	bls.n	8005bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bca:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <vPortValidateInterruptPriority+0x70>)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bd4:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <vPortValidateInterruptPriority+0x74>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	7afa      	ldrb	r2, [r7, #11]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d20a      	bcs.n	8005bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	607b      	str	r3, [r7, #4]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bf4:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <vPortValidateInterruptPriority+0x78>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <vPortValidateInterruptPriority+0x7c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d90a      	bls.n	8005c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	603b      	str	r3, [r7, #0]
}
 8005c16:	bf00      	nop
 8005c18:	e7fe      	b.n	8005c18 <vPortValidateInterruptPriority+0x60>
	}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	e000e3f0 	.word	0xe000e3f0
 8005c2c:	20000f08 	.word	0x20000f08
 8005c30:	e000ed0c 	.word	0xe000ed0c
 8005c34:	20000f0c 	.word	0x20000f0c

08005c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	; 0x28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c44:	f7fe fc92 	bl	800456c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c48:	4b5b      	ldr	r3, [pc, #364]	; (8005db8 <pvPortMalloc+0x180>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c50:	f000 f920 	bl	8005e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c54:	4b59      	ldr	r3, [pc, #356]	; (8005dbc <pvPortMalloc+0x184>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 8093 	bne.w	8005d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01d      	beq.n	8005ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c68:	2208      	movs	r2, #8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d014      	beq.n	8005ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f023 0307 	bic.w	r3, r3, #7
 8005c80:	3308      	adds	r3, #8
 8005c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	617b      	str	r3, [r7, #20]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d06e      	beq.n	8005d88 <pvPortMalloc+0x150>
 8005caa:	4b45      	ldr	r3, [pc, #276]	; (8005dc0 <pvPortMalloc+0x188>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d869      	bhi.n	8005d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cb4:	4b43      	ldr	r3, [pc, #268]	; (8005dc4 <pvPortMalloc+0x18c>)
 8005cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cb8:	4b42      	ldr	r3, [pc, #264]	; (8005dc4 <pvPortMalloc+0x18c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cbe:	e004      	b.n	8005cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d903      	bls.n	8005cdc <pvPortMalloc+0xa4>
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f1      	bne.n	8005cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cdc:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <pvPortMalloc+0x180>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d050      	beq.n	8005d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2208      	movs	r2, #8
 8005cec:	4413      	add	r3, r2
 8005cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	2308      	movs	r3, #8
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d91f      	bls.n	8005d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <pvPortMalloc+0xf8>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	613b      	str	r3, [r7, #16]
}
 8005d2c:	bf00      	nop
 8005d2e:	e7fe      	b.n	8005d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	1ad2      	subs	r2, r2, r3
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d42:	69b8      	ldr	r0, [r7, #24]
 8005d44:	f000 f908 	bl	8005f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d48:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d56:	4b1a      	ldr	r3, [pc, #104]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b1b      	ldr	r3, [pc, #108]	; (8005dc8 <pvPortMalloc+0x190>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d203      	bcs.n	8005d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <pvPortMalloc+0x190>)
 8005d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <pvPortMalloc+0x184>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <pvPortMalloc+0x194>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	4a11      	ldr	r2, [pc, #68]	; (8005dcc <pvPortMalloc+0x194>)
 8005d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d88:	f7fe fbfe 	bl	8004588 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <pvPortMalloc+0x174>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	60fb      	str	r3, [r7, #12]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <pvPortMalloc+0x172>
	return pvReturn;
 8005dac:	69fb      	ldr	r3, [r7, #28]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3728      	adds	r7, #40	; 0x28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20004b18 	.word	0x20004b18
 8005dbc:	20004b2c 	.word	0x20004b2c
 8005dc0:	20004b1c 	.word	0x20004b1c
 8005dc4:	20004b10 	.word	0x20004b10
 8005dc8:	20004b20 	.word	0x20004b20
 8005dcc:	20004b24 	.word	0x20004b24

08005dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d04d      	beq.n	8005e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005de2:	2308      	movs	r3, #8
 8005de4:	425b      	negs	r3, r3
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4413      	add	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <vPortFree+0xb8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <vPortFree+0x44>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	60fb      	str	r3, [r7, #12]
}
 8005e10:	bf00      	nop
 8005e12:	e7fe      	b.n	8005e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <vPortFree+0x62>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	60bb      	str	r3, [r7, #8]
}
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <vPortFree+0xb8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01e      	beq.n	8005e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d11a      	bne.n	8005e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <vPortFree+0xb8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	43db      	mvns	r3, r3
 8005e52:	401a      	ands	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e58:	f7fe fb88 	bl	800456c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <vPortFree+0xbc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4413      	add	r3, r2
 8005e66:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <vPortFree+0xbc>)
 8005e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e6a:	6938      	ldr	r0, [r7, #16]
 8005e6c:	f000 f874 	bl	8005f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e70:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <vPortFree+0xc0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	4a06      	ldr	r2, [pc, #24]	; (8005e90 <vPortFree+0xc0>)
 8005e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e7a:	f7fe fb85 	bl	8004588 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e7e:	bf00      	nop
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20004b2c 	.word	0x20004b2c
 8005e8c:	20004b1c 	.word	0x20004b1c
 8005e90:	20004b28 	.word	0x20004b28

08005e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ea0:	4b27      	ldr	r3, [pc, #156]	; (8005f40 <prvHeapInit+0xac>)
 8005ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00c      	beq.n	8005ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3307      	adds	r3, #7
 8005eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0307 	bic.w	r3, r3, #7
 8005eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	4a1f      	ldr	r2, [pc, #124]	; (8005f40 <prvHeapInit+0xac>)
 8005ec4:	4413      	add	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ecc:	4a1d      	ldr	r2, [pc, #116]	; (8005f44 <prvHeapInit+0xb0>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ed2:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <prvHeapInit+0xb0>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4413      	add	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0307 	bic.w	r3, r3, #7
 8005eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <prvHeapInit+0xb4>)
 8005ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <prvHeapInit+0xb4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2200      	movs	r2, #0
 8005efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005efe:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <prvHeapInit+0xb4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f14:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <prvHeapInit+0xb4>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <prvHeapInit+0xb8>)
 8005f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <prvHeapInit+0xbc>)
 8005f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f2c:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <prvHeapInit+0xc0>)
 8005f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f32:	601a      	str	r2, [r3, #0]
}
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	20000f10 	.word	0x20000f10
 8005f44:	20004b10 	.word	0x20004b10
 8005f48:	20004b18 	.word	0x20004b18
 8005f4c:	20004b20 	.word	0x20004b20
 8005f50:	20004b1c 	.word	0x20004b1c
 8005f54:	20004b2c 	.word	0x20004b2c

08005f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f60:	4b28      	ldr	r3, [pc, #160]	; (8006004 <prvInsertBlockIntoFreeList+0xac>)
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e002      	b.n	8005f6c <prvInsertBlockIntoFreeList+0x14>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d8f7      	bhi.n	8005f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	4413      	add	r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d108      	bne.n	8005f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	441a      	add	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	441a      	add	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d118      	bne.n	8005fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <prvInsertBlockIntoFreeList+0xb0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d00d      	beq.n	8005fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	441a      	add	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	e008      	b.n	8005fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <prvInsertBlockIntoFreeList+0xb0>)
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e003      	b.n	8005fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d002      	beq.n	8005ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20004b10 	.word	0x20004b10
 8006008:	20004b18 	.word	0x20004b18

0800600c <__libc_init_array>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4d0d      	ldr	r5, [pc, #52]	; (8006044 <__libc_init_array+0x38>)
 8006010:	4c0d      	ldr	r4, [pc, #52]	; (8006048 <__libc_init_array+0x3c>)
 8006012:	1b64      	subs	r4, r4, r5
 8006014:	10a4      	asrs	r4, r4, #2
 8006016:	2600      	movs	r6, #0
 8006018:	42a6      	cmp	r6, r4
 800601a:	d109      	bne.n	8006030 <__libc_init_array+0x24>
 800601c:	4d0b      	ldr	r5, [pc, #44]	; (800604c <__libc_init_array+0x40>)
 800601e:	4c0c      	ldr	r4, [pc, #48]	; (8006050 <__libc_init_array+0x44>)
 8006020:	f000 f8f2 	bl	8006208 <_init>
 8006024:	1b64      	subs	r4, r4, r5
 8006026:	10a4      	asrs	r4, r4, #2
 8006028:	2600      	movs	r6, #0
 800602a:	42a6      	cmp	r6, r4
 800602c:	d105      	bne.n	800603a <__libc_init_array+0x2e>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	f855 3b04 	ldr.w	r3, [r5], #4
 8006034:	4798      	blx	r3
 8006036:	3601      	adds	r6, #1
 8006038:	e7ee      	b.n	8006018 <__libc_init_array+0xc>
 800603a:	f855 3b04 	ldr.w	r3, [r5], #4
 800603e:	4798      	blx	r3
 8006040:	3601      	adds	r6, #1
 8006042:	e7f2      	b.n	800602a <__libc_init_array+0x1e>
 8006044:	08006314 	.word	0x08006314
 8006048:	08006314 	.word	0x08006314
 800604c:	08006314 	.word	0x08006314
 8006050:	08006318 	.word	0x08006318

08006054 <__retarget_lock_acquire_recursive>:
 8006054:	4770      	bx	lr

08006056 <__retarget_lock_release_recursive>:
 8006056:	4770      	bx	lr

08006058 <memcpy>:
 8006058:	440a      	add	r2, r1
 800605a:	4291      	cmp	r1, r2
 800605c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006060:	d100      	bne.n	8006064 <memcpy+0xc>
 8006062:	4770      	bx	lr
 8006064:	b510      	push	{r4, lr}
 8006066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800606a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800606e:	4291      	cmp	r1, r2
 8006070:	d1f9      	bne.n	8006066 <memcpy+0xe>
 8006072:	bd10      	pop	{r4, pc}

08006074 <memset>:
 8006074:	4402      	add	r2, r0
 8006076:	4603      	mov	r3, r0
 8006078:	4293      	cmp	r3, r2
 800607a:	d100      	bne.n	800607e <memset+0xa>
 800607c:	4770      	bx	lr
 800607e:	f803 1b01 	strb.w	r1, [r3], #1
 8006082:	e7f9      	b.n	8006078 <memset+0x4>

08006084 <cleanup_glue>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	460c      	mov	r4, r1
 8006088:	6809      	ldr	r1, [r1, #0]
 800608a:	4605      	mov	r5, r0
 800608c:	b109      	cbz	r1, 8006092 <cleanup_glue+0xe>
 800608e:	f7ff fff9 	bl	8006084 <cleanup_glue>
 8006092:	4621      	mov	r1, r4
 8006094:	4628      	mov	r0, r5
 8006096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800609a:	f000 b869 	b.w	8006170 <_free_r>
	...

080060a0 <_reclaim_reent>:
 80060a0:	4b2c      	ldr	r3, [pc, #176]	; (8006154 <_reclaim_reent+0xb4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4283      	cmp	r3, r0
 80060a6:	b570      	push	{r4, r5, r6, lr}
 80060a8:	4604      	mov	r4, r0
 80060aa:	d051      	beq.n	8006150 <_reclaim_reent+0xb0>
 80060ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060ae:	b143      	cbz	r3, 80060c2 <_reclaim_reent+0x22>
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d14a      	bne.n	800614c <_reclaim_reent+0xac>
 80060b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060b8:	6819      	ldr	r1, [r3, #0]
 80060ba:	b111      	cbz	r1, 80060c2 <_reclaim_reent+0x22>
 80060bc:	4620      	mov	r0, r4
 80060be:	f000 f857 	bl	8006170 <_free_r>
 80060c2:	6961      	ldr	r1, [r4, #20]
 80060c4:	b111      	cbz	r1, 80060cc <_reclaim_reent+0x2c>
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 f852 	bl	8006170 <_free_r>
 80060cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80060ce:	b111      	cbz	r1, 80060d6 <_reclaim_reent+0x36>
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 f84d 	bl	8006170 <_free_r>
 80060d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80060d8:	b111      	cbz	r1, 80060e0 <_reclaim_reent+0x40>
 80060da:	4620      	mov	r0, r4
 80060dc:	f000 f848 	bl	8006170 <_free_r>
 80060e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80060e2:	b111      	cbz	r1, 80060ea <_reclaim_reent+0x4a>
 80060e4:	4620      	mov	r0, r4
 80060e6:	f000 f843 	bl	8006170 <_free_r>
 80060ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80060ec:	b111      	cbz	r1, 80060f4 <_reclaim_reent+0x54>
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 f83e 	bl	8006170 <_free_r>
 80060f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80060f6:	b111      	cbz	r1, 80060fe <_reclaim_reent+0x5e>
 80060f8:	4620      	mov	r0, r4
 80060fa:	f000 f839 	bl	8006170 <_free_r>
 80060fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006100:	b111      	cbz	r1, 8006108 <_reclaim_reent+0x68>
 8006102:	4620      	mov	r0, r4
 8006104:	f000 f834 	bl	8006170 <_free_r>
 8006108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800610a:	b111      	cbz	r1, 8006112 <_reclaim_reent+0x72>
 800610c:	4620      	mov	r0, r4
 800610e:	f000 f82f 	bl	8006170 <_free_r>
 8006112:	69a3      	ldr	r3, [r4, #24]
 8006114:	b1e3      	cbz	r3, 8006150 <_reclaim_reent+0xb0>
 8006116:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006118:	4620      	mov	r0, r4
 800611a:	4798      	blx	r3
 800611c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800611e:	b1b9      	cbz	r1, 8006150 <_reclaim_reent+0xb0>
 8006120:	4620      	mov	r0, r4
 8006122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006126:	f7ff bfad 	b.w	8006084 <cleanup_glue>
 800612a:	5949      	ldr	r1, [r1, r5]
 800612c:	b941      	cbnz	r1, 8006140 <_reclaim_reent+0xa0>
 800612e:	3504      	adds	r5, #4
 8006130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006132:	2d80      	cmp	r5, #128	; 0x80
 8006134:	68d9      	ldr	r1, [r3, #12]
 8006136:	d1f8      	bne.n	800612a <_reclaim_reent+0x8a>
 8006138:	4620      	mov	r0, r4
 800613a:	f000 f819 	bl	8006170 <_free_r>
 800613e:	e7ba      	b.n	80060b6 <_reclaim_reent+0x16>
 8006140:	680e      	ldr	r6, [r1, #0]
 8006142:	4620      	mov	r0, r4
 8006144:	f000 f814 	bl	8006170 <_free_r>
 8006148:	4631      	mov	r1, r6
 800614a:	e7ef      	b.n	800612c <_reclaim_reent+0x8c>
 800614c:	2500      	movs	r5, #0
 800614e:	e7ef      	b.n	8006130 <_reclaim_reent+0x90>
 8006150:	bd70      	pop	{r4, r5, r6, pc}
 8006152:	bf00      	nop
 8006154:	20000010 	.word	0x20000010

08006158 <__malloc_lock>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__malloc_lock+0x8>)
 800615a:	f7ff bf7b 	b.w	8006054 <__retarget_lock_acquire_recursive>
 800615e:	bf00      	nop
 8006160:	20004b30 	.word	0x20004b30

08006164 <__malloc_unlock>:
 8006164:	4801      	ldr	r0, [pc, #4]	; (800616c <__malloc_unlock+0x8>)
 8006166:	f7ff bf76 	b.w	8006056 <__retarget_lock_release_recursive>
 800616a:	bf00      	nop
 800616c:	20004b30 	.word	0x20004b30

08006170 <_free_r>:
 8006170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006172:	2900      	cmp	r1, #0
 8006174:	d044      	beq.n	8006200 <_free_r+0x90>
 8006176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800617a:	9001      	str	r0, [sp, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f1a1 0404 	sub.w	r4, r1, #4
 8006182:	bfb8      	it	lt
 8006184:	18e4      	addlt	r4, r4, r3
 8006186:	f7ff ffe7 	bl	8006158 <__malloc_lock>
 800618a:	4a1e      	ldr	r2, [pc, #120]	; (8006204 <_free_r+0x94>)
 800618c:	9801      	ldr	r0, [sp, #4]
 800618e:	6813      	ldr	r3, [r2, #0]
 8006190:	b933      	cbnz	r3, 80061a0 <_free_r+0x30>
 8006192:	6063      	str	r3, [r4, #4]
 8006194:	6014      	str	r4, [r2, #0]
 8006196:	b003      	add	sp, #12
 8006198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800619c:	f7ff bfe2 	b.w	8006164 <__malloc_unlock>
 80061a0:	42a3      	cmp	r3, r4
 80061a2:	d908      	bls.n	80061b6 <_free_r+0x46>
 80061a4:	6825      	ldr	r5, [r4, #0]
 80061a6:	1961      	adds	r1, r4, r5
 80061a8:	428b      	cmp	r3, r1
 80061aa:	bf01      	itttt	eq
 80061ac:	6819      	ldreq	r1, [r3, #0]
 80061ae:	685b      	ldreq	r3, [r3, #4]
 80061b0:	1949      	addeq	r1, r1, r5
 80061b2:	6021      	streq	r1, [r4, #0]
 80061b4:	e7ed      	b.n	8006192 <_free_r+0x22>
 80061b6:	461a      	mov	r2, r3
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	b10b      	cbz	r3, 80061c0 <_free_r+0x50>
 80061bc:	42a3      	cmp	r3, r4
 80061be:	d9fa      	bls.n	80061b6 <_free_r+0x46>
 80061c0:	6811      	ldr	r1, [r2, #0]
 80061c2:	1855      	adds	r5, r2, r1
 80061c4:	42a5      	cmp	r5, r4
 80061c6:	d10b      	bne.n	80061e0 <_free_r+0x70>
 80061c8:	6824      	ldr	r4, [r4, #0]
 80061ca:	4421      	add	r1, r4
 80061cc:	1854      	adds	r4, r2, r1
 80061ce:	42a3      	cmp	r3, r4
 80061d0:	6011      	str	r1, [r2, #0]
 80061d2:	d1e0      	bne.n	8006196 <_free_r+0x26>
 80061d4:	681c      	ldr	r4, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	6053      	str	r3, [r2, #4]
 80061da:	4421      	add	r1, r4
 80061dc:	6011      	str	r1, [r2, #0]
 80061de:	e7da      	b.n	8006196 <_free_r+0x26>
 80061e0:	d902      	bls.n	80061e8 <_free_r+0x78>
 80061e2:	230c      	movs	r3, #12
 80061e4:	6003      	str	r3, [r0, #0]
 80061e6:	e7d6      	b.n	8006196 <_free_r+0x26>
 80061e8:	6825      	ldr	r5, [r4, #0]
 80061ea:	1961      	adds	r1, r4, r5
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf04      	itt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	6063      	str	r3, [r4, #4]
 80061f6:	bf04      	itt	eq
 80061f8:	1949      	addeq	r1, r1, r5
 80061fa:	6021      	streq	r1, [r4, #0]
 80061fc:	6054      	str	r4, [r2, #4]
 80061fe:	e7ca      	b.n	8006196 <_free_r+0x26>
 8006200:	b003      	add	sp, #12
 8006202:	bd30      	pop	{r4, r5, pc}
 8006204:	20004b34 	.word	0x20004b34

08006208 <_init>:
 8006208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620a:	bf00      	nop
 800620c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620e:	bc08      	pop	{r3}
 8006210:	469e      	mov	lr, r3
 8006212:	4770      	bx	lr

08006214 <_fini>:
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	bf00      	nop
 8006218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621a:	bc08      	pop	{r3}
 800621c:	469e      	mov	lr, r3
 800621e:	4770      	bx	lr
