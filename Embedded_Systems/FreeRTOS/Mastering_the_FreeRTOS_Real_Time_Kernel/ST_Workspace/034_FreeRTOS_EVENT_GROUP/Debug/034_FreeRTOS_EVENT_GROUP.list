
034_FreeRTOS_EVENT_GROUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08006bb8  08006bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006da0  08006da0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006da0  08006da0  00016da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da8  08006da8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da8  08006da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dac  08006dac  00016dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00004ad0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b48  20004b48  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a42a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000366c  00000000  00000000  0003a4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  0003db40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  0003f030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ec9  00000000  00000000  000403e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001708f  00000000  00000000  000442b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d57b1  00000000  00000000  0005b340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130af1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d48  00000000  00000000  00130b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ba0 	.word	0x08006ba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006ba0 	.word	0x08006ba0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vDeferredHandlingFunction>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void vDeferredHandlingFunction(void *pvParameter1, uint32_t ulParameter2)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]

	HAL_UART_Transmit(&huart2, (uint8_t *)pvParameter1, strlen(pvParameter1), HAL_MAX_DELAY);
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f7ff fe1e 	bl	80001d0 <strlen>
 8000594:	4603      	mov	r3, r0
 8000596:	b29a      	uxth	r2, r3
 8000598:	f04f 33ff 	mov.w	r3, #4294967295
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <vDeferredHandlingFunction+0x28>)
 80005a0:	f001 ff0b 	bl	80023ba <HAL_UART_Transmit>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000094 	.word	0x20000094

080005b0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0)
 80005ba:	88fb      	ldrh	r3, [r7, #6]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d11c      	bne.n	80005fa <HAL_GPIO_EXTI_Callback+0x4a>
  {
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
	  xTimerPendFunctionCallFromISR(vDeferredHandlingFunction, (void *)ISR_String, 0, &xHigherPriorityTaskWoken);
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_GPIO_EXTI_Callback+0x54>)
 80005c6:	6819      	ldr	r1, [r3, #0]
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	480e      	ldr	r0, [pc, #56]	; (8000608 <HAL_GPIO_EXTI_Callback+0x58>)
 80005d0:	f005 f980 	bl	80058d4 <xTimerPendFunctionCallFromISR>
	  xEventGroupSetBitsFromISR(xEventGroup, mainISR_BIT, &xHigherPriorityTaskWoken);
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <HAL_GPIO_EXTI_Callback+0x5c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f107 020c 	add.w	r2, r7, #12
 80005dc:	2104      	movs	r1, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 f898 	bl	8003714 <xEventGroupSetBitsFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d007      	beq.n	80005fa <HAL_GPIO_EXTI_Callback+0x4a>
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_GPIO_EXTI_Callback+0x60>)
 80005ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	f3bf 8f6f 	isb	sy
  }
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000
 8000608:	08000585 	.word	0x08000585
 800060c:	200000d8 	.word	0x200000d8
 8000610:	e000ed04 	.word	0xe000ed04

08000614 <vEventBitSettingTask>:
static void vEventBitSettingTask(void *pvParameters)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay1000ms = pdMS_TO_TICKS(1000UL);
 800061c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000620:	617b      	str	r3, [r7, #20]
	const char *msg = "Bit setting task - About to set bit 0\r\n";
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <vEventBitSettingTask+0x68>)
 8000624:	613b      	str	r3, [r7, #16]
	const char *msg2 = "Bit setting task - About to set bit 1\r\n";
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <vEventBitSettingTask+0x6c>)
 8000628:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		vTaskDelay(xDelay1000ms);
 800062a:	6978      	ldr	r0, [r7, #20]
 800062c:	f003 ffde 	bl	80045ec <vTaskDelay>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000630:	6938      	ldr	r0, [r7, #16]
 8000632:	f7ff fdcd 	bl	80001d0 <strlen>
 8000636:	4603      	mov	r3, r0
 8000638:	b29a      	uxth	r2, r3
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	6939      	ldr	r1, [r7, #16]
 8000640:	4810      	ldr	r0, [pc, #64]	; (8000684 <vEventBitSettingTask+0x70>)
 8000642:	f001 feba 	bl	80023ba <HAL_UART_Transmit>
		xEventGroupSetBits(xEventGroup, mainFIRST_TASK_BIT);
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <vEventBitSettingTask+0x74>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2101      	movs	r1, #1
 800064c:	4618      	mov	r0, r3
 800064e:	f002 ffa7 	bl	80035a0 <xEventGroupSetBits>

		vTaskDelay(xDelay1000ms);
 8000652:	6978      	ldr	r0, [r7, #20]
 8000654:	f003 ffca 	bl	80045ec <vTaskDelay>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg2, strlen(msg2), HAL_MAX_DELAY);
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f7ff fdb9 	bl	80001d0 <strlen>
 800065e:	4603      	mov	r3, r0
 8000660:	b29a      	uxth	r2, r3
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	68f9      	ldr	r1, [r7, #12]
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <vEventBitSettingTask+0x70>)
 800066a:	f001 fea6 	bl	80023ba <HAL_UART_Transmit>
		xEventGroupSetBits(xEventGroup, mainSECOND_TASK_BIT);
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <vEventBitSettingTask+0x74>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f002 ff93 	bl	80035a0 <xEventGroupSetBits>
		vTaskDelay(xDelay1000ms);
 800067a:	e7d6      	b.n	800062a <vEventBitSettingTask+0x16>
 800067c:	08006be0 	.word	0x08006be0
 8000680:	08006c08 	.word	0x08006c08
 8000684:	20000094 	.word	0x20000094
 8000688:	200000d8 	.word	0x200000d8

0800068c <vEventBitReadingTask>:
	}
}
static void vEventBitReadingTask(void *pvParameters)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b0a0      	sub	sp, #128	; 0x80
 8000690:	af02      	add	r7, sp, #8
 8000692:	6078      	str	r0, [r7, #4]
	EventBits_t xEventGroupValue;
	const EventBits_t xBitsToWaitFor = (mainFIRST_TASK_BIT | mainSECOND_TASK_BIT | mainISR_BIT);
 8000694:	2307      	movs	r3, #7
 8000696:	677b      	str	r3, [r7, #116]	; 0x74
	char buffer[100];
	for(;;)
	{
		xEventGroupValue = xEventGroupWaitBits(xEventGroup, xBitsToWaitFor, pdTRUE, pdFALSE, portMAX_DELAY);
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <vEventBitReadingTask+0xbc>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	2201      	movs	r2, #1
 80006a6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80006a8:	f002 feac 	bl	8003404 <xEventGroupWaitBits>
 80006ac:	6738      	str	r0, [r7, #112]	; 0x70

		if((xEventGroupValue & mainFIRST_TASK_BIT) != 0)
 80006ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d013      	beq.n	80006e0 <vEventBitReadingTask+0x54>
		{
			sprintf(buffer,"Bit reading task - Event bit 0 was set!\r\n");
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4923      	ldr	r1, [pc, #140]	; (800074c <vEventBitReadingTask+0xc0>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 feb4 	bl	800642c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fd81 	bl	80001d0 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f107 010c 	add.w	r1, r7, #12
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	481d      	ldr	r0, [pc, #116]	; (8000750 <vEventBitReadingTask+0xc4>)
 80006dc:	f001 fe6d 	bl	80023ba <HAL_UART_Transmit>
		}
		if((xEventGroupValue & mainSECOND_TASK_BIT) != 0)
 80006e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d013      	beq.n	8000712 <vEventBitReadingTask+0x86>
		{
			sprintf(buffer,"Bit reading task - Event bit 1 was set!\r\n");
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	4919      	ldr	r1, [pc, #100]	; (8000754 <vEventBitReadingTask+0xc8>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f005 fe9b 	bl	800642c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd68 	bl	80001d0 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	f107 010c 	add.w	r1, r7, #12
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	4810      	ldr	r0, [pc, #64]	; (8000750 <vEventBitReadingTask+0xc4>)
 800070e:	f001 fe54 	bl	80023ba <HAL_UART_Transmit>
		}
		if((xEventGroupValue & mainISR_BIT) != 0)
 8000712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0bd      	beq.n	8000698 <vEventBitReadingTask+0xc>
		{
			sprintf(buffer,"Bit reading task - ISR bit was set!(Event bit 2 was set!)\r\n");
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	490d      	ldr	r1, [pc, #52]	; (8000758 <vEventBitReadingTask+0xcc>)
 8000722:	4618      	mov	r0, r3
 8000724:	f005 fe82 	bl	800642c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fd4f 	bl	80001d0 <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	f107 010c 	add.w	r1, r7, #12
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <vEventBitReadingTask+0xc4>)
 8000740:	f001 fe3b 	bl	80023ba <HAL_UART_Transmit>
		xEventGroupValue = xEventGroupWaitBits(xEventGroup, xBitsToWaitFor, pdTRUE, pdFALSE, portMAX_DELAY);
 8000744:	e7a8      	b.n	8000698 <vEventBitReadingTask+0xc>
 8000746:	bf00      	nop
 8000748:	200000d8 	.word	0x200000d8
 800074c:	08006c30 	.word	0x08006c30
 8000750:	20000094 	.word	0x20000094
 8000754:	08006c5c 	.word	0x08006c5c
 8000758:	08006c88 	.word	0x08006c88

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000762:	f000 fae1 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000766:	f000 f82d 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076a:	f000 f8bf 	bl	80008ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800076e:	f000 f893 	bl	8000898 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xEventGroup = xEventGroupCreate();
 8000772:	f002 fe2d 	bl	80033d0 <xEventGroupCreate>
 8000776:	4603      	mov	r3, r0
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <main+0x54>)
 800077a:	6013      	str	r3, [r2, #0]
  xTaskCreate(vEventBitSettingTask, "Bit Setter", 1000, NULL, 1, NULL);
 800077c:	2300      	movs	r3, #0
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	2301      	movs	r3, #1
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2300      	movs	r3, #0
 8000786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800078a:	490a      	ldr	r1, [pc, #40]	; (80007b4 <main+0x58>)
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <main+0x5c>)
 800078e:	f003 fdd2 	bl	8004336 <xTaskCreate>
  xTaskCreate(vEventBitReadingTask, "Bit Reader", 1000, NULL, 2, NULL);
 8000792:	2300      	movs	r3, #0
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2302      	movs	r3, #2
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2300      	movs	r3, #0
 800079c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a0:	4906      	ldr	r1, [pc, #24]	; (80007bc <main+0x60>)
 80007a2:	4807      	ldr	r0, [pc, #28]	; (80007c0 <main+0x64>)
 80007a4:	f003 fdc7 	bl	8004336 <xTaskCreate>

  vTaskStartScheduler();
 80007a8:	f003 ff54 	bl	8004654 <vTaskStartScheduler>

  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <main+0x50>
 80007ae:	bf00      	nop
 80007b0:	200000d8 	.word	0x200000d8
 80007b4:	08006cc4 	.word	0x08006cc4
 80007b8:	08000615 	.word	0x08000615
 80007bc:	08006cd0 	.word	0x08006cd0
 80007c0:	0800068d 	.word	0x0800068d

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	; 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2230      	movs	r2, #48	; 0x30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f005 fd14 	bl	8006200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <SystemClock_Config+0xcc>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a27      	ldr	r2, [pc, #156]	; (8000890 <SystemClock_Config+0xcc>)
 80007f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <SystemClock_Config+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <SystemClock_Config+0xd0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <SystemClock_Config+0xd0>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000834:	2308      	movs	r3, #8
 8000836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000838:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800083c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083e:	2302      	movs	r3, #2
 8000840:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000842:	2307      	movs	r3, #7
 8000844:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fdf0 	bl	8001430 <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000856:	f000 f8c5 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2302      	movs	r3, #2
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000866:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800086a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2105      	movs	r1, #5
 8000878:	4618      	mov	r0, r3
 800087a:	f001 f851 	bl	8001920 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000884:	f000 f8ae 	bl	80009e4 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3750      	adds	r7, #80	; 0x50
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000

08000898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <MX_USART2_UART_Init+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f001 fd26 	bl	8002320 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008da:	f000 f883 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000094 	.word	0x20000094
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_GPIO_Init+0xc8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a2a      	ldr	r2, [pc, #168]	; (80009b4 <MX_GPIO_Init+0xc8>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_GPIO_Init+0xc8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <MX_GPIO_Init+0xc8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <MX_GPIO_Init+0xc8>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <MX_GPIO_Init+0xc8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_GPIO_Init+0xc8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_GPIO_Init+0xc8>)
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_GPIO_Init+0xc8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0308 	and.w	r3, r3, #8
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800095c:	4816      	ldr	r0, [pc, #88]	; (80009b8 <MX_GPIO_Init+0xcc>)
 800095e:	f000 fd35 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000962:	2301      	movs	r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	4811      	ldr	r0, [pc, #68]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000978:	f000 fb8c 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800097c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	4619      	mov	r1, r3
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <MX_GPIO_Init+0xcc>)
 8000996:	f000 fb7d 	bl	8001094 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2105      	movs	r1, #5
 800099e:	2006      	movs	r0, #6
 80009a0:	f000 fabc 	bl	8000f1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009a4:	2006      	movs	r0, #6
 80009a6:	f000 fad5 	bl	8000f54 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009aa:	bf00      	nop
 80009ac:	3720      	adds	r7, #32
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020c00 	.word	0x40020c00
 80009bc:	40020000 	.word	0x40020000

080009c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d101      	bne.n	80009d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d2:	f000 f9cb 	bl	8000d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40002000 	.word	0x40002000

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_MspInit+0x54>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <HAL_MspInit+0x54>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x54>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_MspInit+0x54>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_MspInit+0x54>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_MspInit+0x54>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	210f      	movs	r1, #15
 8000a32:	f06f 0001 	mvn.w	r0, #1
 8000a36:	f000 fa71 	bl	8000f1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_UART_MspInit+0x94>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d133      	bne.n	8000ad2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <HAL_UART_MspInit+0x9c>)
 8000abe:	f000 fae9 	bl	8001094 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2105      	movs	r1, #5
 8000ac6:	2026      	movs	r0, #38	; 0x26
 8000ac8:	f000 fa28 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000acc:	2026      	movs	r0, #38	; 0x26
 8000ace:	f000 fa41 	bl	8000f54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <HAL_InitTick+0xe4>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a32      	ldr	r2, [pc, #200]	; (8000bcc <HAL_InitTick+0xe4>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <HAL_InitTick+0xe4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b14:	f107 0210 	add.w	r2, r7, #16
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 f91e 	bl	8001d60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b24:	6a3b      	ldr	r3, [r7, #32]
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d103      	bne.n	8000b36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b2e:	f001 f8ef 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8000b32:	6378      	str	r0, [r7, #52]	; 0x34
 8000b34:	e004      	b.n	8000b40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b36:	f001 f8eb 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b42:	4a23      	ldr	r2, [pc, #140]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b44:	fba2 2303 	umull	r2, r3, r2, r3
 8000b48:	0c9b      	lsrs	r3, r3, #18
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <HAL_InitTick+0xf0>)
 8000b52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b5a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b60:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b76:	f001 f925 	bl	8001dc4 <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d11b      	bne.n	8000bc0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000b88:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b8a:	f001 f975 	bl	8001e78 <HAL_TIM_Base_Start_IT>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d111      	bne.n	8000bc0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b9c:	202d      	movs	r0, #45	; 0x2d
 8000b9e:	f000 f9d9 	bl	8000f54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d808      	bhi.n	8000bba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	202d      	movs	r0, #45	; 0x2d
 8000bae:	f000 f9b5 	bl	8000f1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_InitTick+0xf4>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	e002      	b.n	8000bc0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3738      	adds	r7, #56	; 0x38
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	431bde83 	.word	0x431bde83
 8000bd4:	200000dc 	.word	0x200000dc
 8000bd8:	40002000 	.word	0x40002000
 8000bdc:	20000008 	.word	0x20000008

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler+0x4>

08000bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f000 fbf5 	bl	8001400 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <USART2_IRQHandler+0x10>)
 8000c22:	f001 fc5d 	bl	80024e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000094 	.word	0x20000094

08000c30 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000c36:	f001 f98f 	bl	8001f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000dc 	.word	0x200000dc

08000c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <_sbrk+0x5c>)
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <_sbrk+0x60>)
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <_sbrk+0x64>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <_sbrk+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d207      	bcs.n	8000c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c74:	f005 fa8a 	bl	800618c <__errno>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	e009      	b.n	8000c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <_sbrk+0x64>)
 8000c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20020000 	.word	0x20020000
 8000ca4:	00000400 	.word	0x00000400
 8000ca8:	20000124 	.word	0x20000124
 8000cac:	20004b48 	.word	0x20004b48

08000cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <SystemInit+0x20>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <SystemInit+0x20>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cda:	490e      	ldr	r1, [pc, #56]	; (8000d14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf0:	4c0b      	ldr	r4, [pc, #44]	; (8000d20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cfe:	f7ff ffd7 	bl	8000cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d02:	f005 fa49 	bl	8006198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d06:	f7ff fd29 	bl	800075c <main>
  bx  lr    
 8000d0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d18:	08006db0 	.word	0x08006db0
  ldr r2, =_sbss
 8000d1c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d20:	20004b48 	.word	0x20004b48

08000d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <HAL_Init+0x40>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_Init+0x40>)
 8000d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_Init+0x40>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 f8d8 	bl	8000f06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f7ff fec6 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5c:	f7ff fe48 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023c00 	.word	0x40023c00

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	2000000c 	.word	0x2000000c
 8000d90:	20000128 	.word	0x20000128

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000128 	.word	0x20000128

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff4c 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2e:	f7ff ff61 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	6978      	ldr	r0, [r7, #20]
 8000f3a:	f7ff ffb1 	bl	8000ea0 <NVIC_EncodePriority>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff80 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff54 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f7e:	f7ff ff09 	bl	8000d94 <HAL_GetTick>
 8000f82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d008      	beq.n	8000fa2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e052      	b.n	8001048 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0216 	bic.w	r2, r2, #22
 8000fb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	695a      	ldr	r2, [r3, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d103      	bne.n	8000fd2 <HAL_DMA_Abort+0x62>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d007      	beq.n	8000fe2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0208 	bic.w	r2, r2, #8
 8000fe0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0201 	bic.w	r2, r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff2:	e013      	b.n	800101c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ff4:	f7ff fece 	bl	8000d94 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d90c      	bls.n	800101c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2220      	movs	r2, #32
 8001006:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2203      	movs	r2, #3
 800100c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e015      	b.n	8001048 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1e4      	bne.n	8000ff4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800102e:	223f      	movs	r2, #63	; 0x3f
 8001030:	409a      	lsls	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d004      	beq.n	800106e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e00c      	b.n	8001088 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2205      	movs	r2, #5
 8001072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	e16b      	b.n	8001388 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 815a 	bne.w	8001382 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d130      	bne.n	8001148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f003 0201 	and.w	r2, r3, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b03      	cmp	r3, #3
 8001152:	d017      	beq.n	8001184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d123      	bne.n	80011d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	69b9      	ldr	r1, [r7, #24]
 80011d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0203 	and.w	r2, r3, #3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80b4 	beq.w	8001382 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b60      	ldr	r3, [pc, #384]	; (80013a0 <HAL_GPIO_Init+0x30c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a5f      	ldr	r2, [pc, #380]	; (80013a0 <HAL_GPIO_Init+0x30c>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b5d      	ldr	r3, [pc, #372]	; (80013a0 <HAL_GPIO_Init+0x30c>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001236:	4a5b      	ldr	r2, [pc, #364]	; (80013a4 <HAL_GPIO_Init+0x310>)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3302      	adds	r3, #2
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a52      	ldr	r2, [pc, #328]	; (80013a8 <HAL_GPIO_Init+0x314>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d02b      	beq.n	80012ba <HAL_GPIO_Init+0x226>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a51      	ldr	r2, [pc, #324]	; (80013ac <HAL_GPIO_Init+0x318>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d025      	beq.n	80012b6 <HAL_GPIO_Init+0x222>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a50      	ldr	r2, [pc, #320]	; (80013b0 <HAL_GPIO_Init+0x31c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d01f      	beq.n	80012b2 <HAL_GPIO_Init+0x21e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4f      	ldr	r2, [pc, #316]	; (80013b4 <HAL_GPIO_Init+0x320>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <HAL_GPIO_Init+0x21a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4e      	ldr	r2, [pc, #312]	; (80013b8 <HAL_GPIO_Init+0x324>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x216>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4d      	ldr	r2, [pc, #308]	; (80013bc <HAL_GPIO_Init+0x328>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00d      	beq.n	80012a6 <HAL_GPIO_Init+0x212>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4c      	ldr	r2, [pc, #304]	; (80013c0 <HAL_GPIO_Init+0x32c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x20e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4b      	ldr	r2, [pc, #300]	; (80013c4 <HAL_GPIO_Init+0x330>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x20a>
 800129a:	2307      	movs	r3, #7
 800129c:	e00e      	b.n	80012bc <HAL_GPIO_Init+0x228>
 800129e:	2308      	movs	r3, #8
 80012a0:	e00c      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012a2:	2306      	movs	r3, #6
 80012a4:	e00a      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012a6:	2305      	movs	r3, #5
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012aa:	2304      	movs	r3, #4
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012ba:	2300      	movs	r3, #0
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	; (80013a4 <HAL_GPIO_Init+0x310>)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <HAL_GPIO_Init+0x334>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <HAL_GPIO_Init+0x334>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001352:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_GPIO_Init+0x334>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800137c:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <HAL_GPIO_Init+0x334>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3301      	adds	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	f67f ae90 	bls.w	80010b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40021400 	.word	0x40021400
 80013c0:	40021800 	.word	0x40021800
 80013c4:	40021c00 	.word	0x40021c00
 80013c8:	40013c00 	.word	0x40013c00

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e8:	e003      	b.n	80013f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	619a      	str	r2, [r3, #24]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f8c6 	bl	80005b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40013c00 	.word	0x40013c00

08001430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e267      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d075      	beq.n	800153a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144e:	4b88      	ldr	r3, [pc, #544]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b04      	cmp	r3, #4
 8001458:	d00c      	beq.n	8001474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145a:	4b85      	ldr	r3, [pc, #532]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001462:	2b08      	cmp	r3, #8
 8001464:	d112      	bne.n	800148c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001466:	4b82      	ldr	r3, [pc, #520]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001472:	d10b      	bne.n	800148c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	4b7e      	ldr	r3, [pc, #504]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d05b      	beq.n	8001538 <HAL_RCC_OscConfig+0x108>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d157      	bne.n	8001538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e242      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d106      	bne.n	80014a4 <HAL_RCC_OscConfig+0x74>
 8001496:	4b76      	ldr	r3, [pc, #472]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a75      	ldr	r2, [pc, #468]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e01d      	b.n	80014e0 <HAL_RCC_OscConfig+0xb0>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x98>
 80014ae:	4b70      	ldr	r3, [pc, #448]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6f      	ldr	r2, [pc, #444]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b6d      	ldr	r3, [pc, #436]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a6c      	ldr	r2, [pc, #432]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e00b      	b.n	80014e0 <HAL_RCC_OscConfig+0xb0>
 80014c8:	4b69      	ldr	r3, [pc, #420]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a68      	ldr	r2, [pc, #416]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b66      	ldr	r3, [pc, #408]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a65      	ldr	r2, [pc, #404]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d013      	beq.n	8001510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fc54 	bl	8000d94 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fc50 	bl	8000d94 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e207      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	4b5b      	ldr	r3, [pc, #364]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0xc0>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fc40 	bl	8000d94 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fc3c 	bl	8000d94 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1f3      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152a:	4b51      	ldr	r3, [pc, #324]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0xe8>
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d063      	beq.n	800160e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00b      	beq.n	800156a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001552:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155a:	2b08      	cmp	r3, #8
 800155c:	d11c      	bne.n	8001598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155e:	4b44      	ldr	r3, [pc, #272]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d116      	bne.n	8001598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	4b41      	ldr	r3, [pc, #260]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_RCC_OscConfig+0x152>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d001      	beq.n	8001582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e1c7      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4937      	ldr	r1, [pc, #220]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	e03a      	b.n	800160e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a0:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_RCC_OscConfig+0x244>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a6:	f7ff fbf5 	bl	8000d94 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ae:	f7ff fbf1 	bl	8000d94 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1a8      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c0:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4925      	ldr	r1, [pc, #148]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
 80015e0:	e015      	b.n	800160e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e2:	4b24      	ldr	r3, [pc, #144]	; (8001674 <HAL_RCC_OscConfig+0x244>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fbd4 	bl	8000d94 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fbd0 	bl	8000d94 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e187      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d036      	beq.n	8001688 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d016      	beq.n	8001650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_RCC_OscConfig+0x248>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001628:	f7ff fbb4 	bl	8000d94 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff fbb0 	bl	8000d94 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e167      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x200>
 800164e:	e01b      	b.n	8001688 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_RCC_OscConfig+0x248>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff fb9d 	bl	8000d94 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165c:	e00e      	b.n	800167c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165e:	f7ff fb99 	bl	8000d94 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d907      	bls.n	800167c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e150      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
 8001670:	40023800 	.word	0x40023800
 8001674:	42470000 	.word	0x42470000
 8001678:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167c:	4b88      	ldr	r3, [pc, #544]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800167e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1ea      	bne.n	800165e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8097 	beq.w	80017c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169a:	4b81      	ldr	r3, [pc, #516]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10f      	bne.n	80016c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b7d      	ldr	r3, [pc, #500]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a7c      	ldr	r2, [pc, #496]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b7a      	ldr	r3, [pc, #488]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c2:	2301      	movs	r3, #1
 80016c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c6:	4b77      	ldr	r3, [pc, #476]	; (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d118      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d2:	4b74      	ldr	r3, [pc, #464]	; (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a73      	ldr	r2, [pc, #460]	; (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016de:	f7ff fb59 	bl	8000d94 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e6:	f7ff fb55 	bl	8000d94 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e10c      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f8:	4b6a      	ldr	r3, [pc, #424]	; (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x2ea>
 800170c:	4b64      	ldr	r3, [pc, #400]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	4a63      	ldr	r2, [pc, #396]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6713      	str	r3, [r2, #112]	; 0x70
 8001718:	e01c      	b.n	8001754 <HAL_RCC_OscConfig+0x324>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x30c>
 8001722:	4b5f      	ldr	r3, [pc, #380]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	4a5e      	ldr	r2, [pc, #376]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6713      	str	r3, [r2, #112]	; 0x70
 800172e:	4b5c      	ldr	r3, [pc, #368]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001732:	4a5b      	ldr	r2, [pc, #364]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6713      	str	r3, [r2, #112]	; 0x70
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0x324>
 800173c:	4b58      	ldr	r3, [pc, #352]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001740:	4a57      	ldr	r2, [pc, #348]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	6713      	str	r3, [r2, #112]	; 0x70
 8001748:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174c:	4a54      	ldr	r2, [pc, #336]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800174e:	f023 0304 	bic.w	r3, r3, #4
 8001752:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d015      	beq.n	8001788 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fb1a 	bl	8000d94 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff fb16 	bl	8000d94 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0cb      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177a:	4b49      	ldr	r3, [pc, #292]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0ee      	beq.n	8001764 <HAL_RCC_OscConfig+0x334>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff fb04 	bl	8000d94 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff fb00 	bl	8000d94 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0b5      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a6:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ee      	bne.n	8001790 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b8:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a38      	ldr	r2, [pc, #224]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80a1 	beq.w	8001910 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ce:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d05c      	beq.n	8001894 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d141      	bne.n	8001866 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <HAL_RCC_OscConfig+0x478>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fad4 	bl	8000d94 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fad0 	bl	8000d94 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e087      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69da      	ldr	r2, [r3, #28]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	019b      	lsls	r3, r3, #6
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	3b01      	subs	r3, #1
 8001828:	041b      	lsls	r3, r3, #16
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	061b      	lsls	r3, r3, #24
 8001832:	491b      	ldr	r1, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_RCC_OscConfig+0x478>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff faa9 	bl	8000d94 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff faa5 	bl	8000d94 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e05c      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x416>
 8001864:	e054      	b.n	8001910 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_RCC_OscConfig+0x478>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fa92 	bl	8000d94 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff fa8e 	bl	8000d94 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e045      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x444>
 8001892:	e03d      	b.n	8001910 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d107      	bne.n	80018ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e038      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000
 80018a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x4ec>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d028      	beq.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d121      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d11a      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018dc:	4013      	ands	r3, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d111      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	085b      	lsrs	r3, r3, #1
 80018f4:	3b01      	subs	r3, #1
 80018f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d107      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0cc      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4b68      	ldr	r3, [pc, #416]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d90c      	bls.n	800195c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b65      	ldr	r3, [pc, #404]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0b8      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001974:	4b59      	ldr	r3, [pc, #356]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a58      	ldr	r2, [pc, #352]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800197e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800198c:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	494d      	ldr	r1, [pc, #308]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d044      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d119      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e07f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d003      	beq.n	80019de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	4b3f      	ldr	r3, [pc, #252]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d109      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e06f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e067      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fe:	4b37      	ldr	r3, [pc, #220]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f023 0203 	bic.w	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4934      	ldr	r1, [pc, #208]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a10:	f7ff f9c0 	bl	8000d94 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	e00a      	b.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a18:	f7ff f9bc 	bl	8000d94 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e04f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 020c 	and.w	r2, r3, #12
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d1eb      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d20c      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e032      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4916      	ldr	r1, [pc, #88]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	490e      	ldr	r1, [pc, #56]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aa6:	f000 f821 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	490a      	ldr	r1, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f80e 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	08006cf4 	.word	0x08006cf4
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	20000008 	.word	0x20000008

08001aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af0:	b094      	sub	sp, #80	; 0x50
 8001af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	647b      	str	r3, [r7, #68]	; 0x44
 8001af8:	2300      	movs	r3, #0
 8001afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001afc:	2300      	movs	r3, #0
 8001afe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b04:	4b79      	ldr	r3, [pc, #484]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d00d      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x40>
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	f200 80e1 	bhi.w	8001cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b1e:	e0db      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b73      	ldr	r3, [pc, #460]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b24:	e0db      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b26:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b2a:	e0d8      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b2c:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b36:	4b6d      	ldr	r3, [pc, #436]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d063      	beq.n	8001c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b42:	4b6a      	ldr	r3, [pc, #424]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	2200      	movs	r2, #0
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
 8001b56:	2300      	movs	r3, #0
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b5e:	4622      	mov	r2, r4
 8001b60:	462b      	mov	r3, r5
 8001b62:	f04f 0000 	mov.w	r0, #0
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	0159      	lsls	r1, r3, #5
 8001b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b70:	0150      	lsls	r0, r2, #5
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4621      	mov	r1, r4
 8001b78:	1a51      	subs	r1, r2, r1
 8001b7a:	6139      	str	r1, [r7, #16]
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b90:	4659      	mov	r1, fp
 8001b92:	018b      	lsls	r3, r1, #6
 8001b94:	4651      	mov	r1, sl
 8001b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b9a:	4651      	mov	r1, sl
 8001b9c:	018a      	lsls	r2, r1, #6
 8001b9e:	4651      	mov	r1, sl
 8001ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba4:	4659      	mov	r1, fp
 8001ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bbe:	4690      	mov	r8, r2
 8001bc0:	4699      	mov	r9, r3
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	eb18 0303 	adds.w	r3, r8, r3
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	462b      	mov	r3, r5
 8001bcc:	eb49 0303 	adc.w	r3, r9, r3
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bde:	4629      	mov	r1, r5
 8001be0:	024b      	lsls	r3, r1, #9
 8001be2:	4621      	mov	r1, r4
 8001be4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be8:	4621      	mov	r1, r4
 8001bea:	024a      	lsls	r2, r1, #9
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bfc:	f7fe fb40 	bl	8000280 <__aeabi_uldivmod>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4613      	mov	r3, r2
 8001c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c08:	e058      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0a:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	099b      	lsrs	r3, r3, #6
 8001c10:	2200      	movs	r2, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	4611      	mov	r1, r2
 8001c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c24:	4642      	mov	r2, r8
 8001c26:	464b      	mov	r3, r9
 8001c28:	f04f 0000 	mov.w	r0, #0
 8001c2c:	f04f 0100 	mov.w	r1, #0
 8001c30:	0159      	lsls	r1, r3, #5
 8001c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c36:	0150      	lsls	r0, r2, #5
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4641      	mov	r1, r8
 8001c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c42:	4649      	mov	r1, r9
 8001c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c60:	eb63 050b 	sbc.w	r5, r3, fp
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	00eb      	lsls	r3, r5, #3
 8001c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c72:	00e2      	lsls	r2, r4, #3
 8001c74:	4614      	mov	r4, r2
 8001c76:	461d      	mov	r5, r3
 8001c78:	4643      	mov	r3, r8
 8001c7a:	18e3      	adds	r3, r4, r3
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	464b      	mov	r3, r9
 8001c80:	eb45 0303 	adc.w	r3, r5, r3
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c92:	4629      	mov	r1, r5
 8001c94:	028b      	lsls	r3, r1, #10
 8001c96:	4621      	mov	r1, r4
 8001c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	028a      	lsls	r2, r1, #10
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	61fa      	str	r2, [r7, #28]
 8001cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb0:	f7fe fae6 	bl	8000280 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cd6:	e002      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3750      	adds	r7, #80	; 0x50
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	007a1200 	.word	0x007a1200

08001cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000004 	.word	0x20000004

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d14:	f7ff fff0 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0a9b      	lsrs	r3, r3, #10
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4903      	ldr	r1, [pc, #12]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	08006d04 	.word	0x08006d04

08001d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d3c:	f7ff ffdc 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	0b5b      	lsrs	r3, r3, #13
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	4903      	ldr	r1, [pc, #12]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4e:	5ccb      	ldrb	r3, [r1, r3]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	08006d04 	.word	0x08006d04

08001d60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_RCC_GetClockConfig+0x5c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_RCC_GetClockConfig+0x5c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_RCC_GetClockConfig+0x5c>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_GetClockConfig+0x5c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	08db      	lsrs	r3, r3, #3
 8001d9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <HAL_RCC_GetClockConfig+0x60>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0207 	and.w	r2, r3, #7
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	601a      	str	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40023c00 	.word	0x40023c00

08001dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e041      	b.n	8001e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f839 	bl	8001e62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4610      	mov	r0, r2
 8001e04:	f000 f9d8 	bl	80021b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d001      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e04e      	b.n	8001f2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a23      	ldr	r2, [pc, #140]	; (8001f3c <HAL_TIM_Base_Start_IT+0xc4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d022      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eba:	d01d      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d018      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d013      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00e      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1b      	ldr	r2, [pc, #108]	; (8001f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d009      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d004      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d111      	bne.n	8001f1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d010      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f1a:	e007      	b.n	8001f2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40000800 	.word	0x40000800
 8001f48:	40000c00 	.word	0x40000c00
 8001f4c:	40010400 	.word	0x40010400
 8001f50:	40014000 	.word	0x40014000
 8001f54:	40001800 	.word	0x40001800

08001f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d122      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0202 	mvn.w	r2, #2
 8001f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8ee 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8e0 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f8f1 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d122      	bne.n	8002008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d11b      	bne.n	8002008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0204 	mvn.w	r2, #4
 8001fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8c4 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8b6 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f8c7 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b08      	cmp	r3, #8
 8002014:	d122      	bne.n	800205c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b08      	cmp	r3, #8
 8002022:	d11b      	bne.n	800205c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0208 	mvn.w	r2, #8
 800202c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2204      	movs	r2, #4
 8002032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f89a 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8002048:	e005      	b.n	8002056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f88c 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f89d 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b10      	cmp	r3, #16
 8002068:	d122      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b10      	cmp	r3, #16
 8002076:	d11b      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0210 	mvn.w	r2, #16
 8002080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2208      	movs	r2, #8
 8002086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f870 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f862 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f873 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0201 	mvn.w	r2, #1
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fc72 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e6:	2b80      	cmp	r3, #128	; 0x80
 80020e8:	d10e      	bne.n	8002108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d107      	bne.n	8002108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f902 	bl	800230c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b40      	cmp	r3, #64	; 0x40
 8002122:	d107      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f838 	bl	80021a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b20      	cmp	r3, #32
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b20      	cmp	r3, #32
 800214e:	d107      	bne.n	8002160 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0220 	mvn.w	r2, #32
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f8cc 	bl	80022f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a40      	ldr	r2, [pc, #256]	; (80022cc <TIM_Base_SetConfig+0x114>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d6:	d00f      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a3d      	ldr	r2, [pc, #244]	; (80022d0 <TIM_Base_SetConfig+0x118>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00b      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3c      	ldr	r2, [pc, #240]	; (80022d4 <TIM_Base_SetConfig+0x11c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d007      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3b      	ldr	r2, [pc, #236]	; (80022d8 <TIM_Base_SetConfig+0x120>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3a      	ldr	r2, [pc, #232]	; (80022dc <TIM_Base_SetConfig+0x124>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d108      	bne.n	800220a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2f      	ldr	r2, [pc, #188]	; (80022cc <TIM_Base_SetConfig+0x114>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002218:	d027      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <TIM_Base_SetConfig+0x118>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d023      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2b      	ldr	r2, [pc, #172]	; (80022d4 <TIM_Base_SetConfig+0x11c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01f      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a2a      	ldr	r2, [pc, #168]	; (80022d8 <TIM_Base_SetConfig+0x120>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a29      	ldr	r2, [pc, #164]	; (80022dc <TIM_Base_SetConfig+0x124>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d017      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <TIM_Base_SetConfig+0x128>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <TIM_Base_SetConfig+0x12c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00f      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <TIM_Base_SetConfig+0x130>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a25      	ldr	r2, [pc, #148]	; (80022ec <TIM_Base_SetConfig+0x134>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d007      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <TIM_Base_SetConfig+0x138>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d003      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <TIM_Base_SetConfig+0x13c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d108      	bne.n	800227c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <TIM_Base_SetConfig+0x114>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d003      	beq.n	80022b0 <TIM_Base_SetConfig+0xf8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <TIM_Base_SetConfig+0x124>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d103      	bne.n	80022b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	615a      	str	r2, [r3, #20]
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40010000 	.word	0x40010000
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40000800 	.word	0x40000800
 80022d8:	40000c00 	.word	0x40000c00
 80022dc:	40010400 	.word	0x40010400
 80022e0:	40014000 	.word	0x40014000
 80022e4:	40014400 	.word	0x40014400
 80022e8:	40014800 	.word	0x40014800
 80022ec:	40001800 	.word	0x40001800
 80022f0:	40001c00 	.word	0x40001c00
 80022f4:	40002000 	.word	0x40002000

080022f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e03f      	b.n	80023b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe fb7e 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fd7b 	bl	8002e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b08a      	sub	sp, #40	; 0x28
 80023be:	af02      	add	r7, sp, #8
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	d17c      	bne.n	80024d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_UART_Transmit+0x2c>
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e075      	b.n	80024d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_UART_Transmit+0x3e>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e06e      	b.n	80024d6 <HAL_UART_Transmit+0x11c>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2221      	movs	r2, #33	; 0x21
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800240e:	f7fe fcc1 	bl	8000d94 <HAL_GetTick>
 8002412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	88fa      	ldrh	r2, [r7, #6]
 800241e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002428:	d108      	bne.n	800243c <HAL_UART_Transmit+0x82>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d104      	bne.n	800243c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	e003      	b.n	8002444 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800244c:	e02a      	b.n	80024a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2200      	movs	r2, #0
 8002456:	2180      	movs	r1, #128	; 0x80
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 faf9 	bl	8002a50 <UART_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e036      	b.n	80024d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10b      	bne.n	8002486 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800247c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	3302      	adds	r3, #2
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	e007      	b.n	8002496 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	781a      	ldrb	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	3301      	adds	r3, #1
 8002494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1cf      	bne.n	800244e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2200      	movs	r2, #0
 80024b6:	2140      	movs	r1, #64	; 0x40
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fac9 	bl	8002a50 <UART_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e006      	b.n	80024d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e000      	b.n	80024d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024d4:	2302      	movs	r3, #2
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3720      	adds	r7, #32
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b0ba      	sub	sp, #232	; 0xe8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800251e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10f      	bne.n	8002546 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_UART_IRQHandler+0x66>
 8002532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fbd3 	bl	8002cea <UART_Receive_IT>
      return;
 8002544:	e256      	b.n	80029f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 80de 	beq.w	800270c <HAL_UART_IRQHandler+0x22c>
 8002550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d106      	bne.n	800256a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800255c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002560:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80d1 	beq.w	800270c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800256a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_UART_IRQHandler+0xae>
 8002576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f043 0201 	orr.w	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800258e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_UART_IRQHandler+0xd2>
 800259a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f043 0202 	orr.w	r2, r3, #2
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_UART_IRQHandler+0xf6>
 80025be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f043 0204 	orr.w	r2, r3, #4
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d011      	beq.n	8002606 <HAL_UART_IRQHandler+0x126>
 80025e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d105      	bne.n	80025fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f043 0208 	orr.w	r2, r3, #8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 81ed 	beq.w	80029ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_UART_IRQHandler+0x14e>
 800261c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fb5e 	bl	8002cea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002638:	2b40      	cmp	r3, #64	; 0x40
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d103      	bne.n	800265a <HAL_UART_IRQHandler+0x17a>
 8002652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d04f      	beq.n	80026fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fa66 	bl	8002b2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d141      	bne.n	80026f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	3314      	adds	r3, #20
 8002674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800267c:	e853 3f00 	ldrex	r3, [r3]
 8002680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800268c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	3314      	adds	r3, #20
 8002696:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800269a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800269e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026aa:	e841 2300 	strex	r3, r2, [r1]
 80026ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1d9      	bne.n	800266e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d013      	beq.n	80026ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	4a7d      	ldr	r2, [pc, #500]	; (80028bc <HAL_UART_IRQHandler+0x3dc>)
 80026c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fcbe 	bl	8001050 <HAL_DMA_Abort_IT>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d016      	beq.n	8002708 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026e4:	4610      	mov	r0, r2
 80026e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	e00e      	b.n	8002708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f99a 	bl	8002a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	e00a      	b.n	8002708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f996 	bl	8002a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f8:	e006      	b.n	8002708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f992 	bl	8002a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002706:	e170      	b.n	80029ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002708:	bf00      	nop
    return;
 800270a:	e16e      	b.n	80029ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	2b01      	cmp	r3, #1
 8002712:	f040 814a 	bne.w	80029aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8143 	beq.w	80029aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 813c 	beq.w	80029aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002752:	2b40      	cmp	r3, #64	; 0x40
 8002754:	f040 80b4 	bne.w	80028c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002764:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8140 	beq.w	80029ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002776:	429a      	cmp	r2, r3
 8002778:	f080 8139 	bcs.w	80029ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002782:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278e:	f000 8088 	beq.w	80028a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	330c      	adds	r3, #12
 8002798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027a0:	e853 3f00 	ldrex	r3, [r3]
 80027a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80027a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	330c      	adds	r3, #12
 80027ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027ce:	e841 2300 	strex	r3, r2, [r1]
 80027d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1d9      	bne.n	8002792 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3314      	adds	r3, #20
 80027e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e8:	e853 3f00 	ldrex	r3, [r3]
 80027ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3314      	adds	r3, #20
 80027fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002802:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002806:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002808:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800280a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800280e:	e841 2300 	strex	r3, r2, [r1]
 8002812:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1e1      	bne.n	80027de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3314      	adds	r3, #20
 8002820:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002824:	e853 3f00 	ldrex	r3, [r3]
 8002828:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800282a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800282c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002830:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3314      	adds	r3, #20
 800283a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800283e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002840:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002842:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002844:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002846:	e841 2300 	strex	r3, r2, [r1]
 800284a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800284c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e3      	bne.n	800281a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	330c      	adds	r3, #12
 8002866:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286a:	e853 3f00 	ldrex	r3, [r3]
 800286e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002872:	f023 0310 	bic.w	r3, r3, #16
 8002876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	330c      	adds	r3, #12
 8002880:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002884:	65ba      	str	r2, [r7, #88]	; 0x58
 8002886:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002888:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800288a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800288c:	e841 2300 	strex	r3, r2, [r1]
 8002890:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e3      	bne.n	8002860 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fb67 	bl	8000f70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	4619      	mov	r1, r3
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f8c0 	bl	8002a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028b8:	e099      	b.n	80029ee <HAL_UART_IRQHandler+0x50e>
 80028ba:	bf00      	nop
 80028bc:	08002bf3 	.word	0x08002bf3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 808b 	beq.w	80029f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80028dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8086 	beq.w	80029f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	330c      	adds	r3, #12
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f0:	e853 3f00 	ldrex	r3, [r3]
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800290a:	647a      	str	r2, [r7, #68]	; 0x44
 800290c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002912:	e841 2300 	strex	r3, r2, [r1]
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1e3      	bne.n	80028e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3314      	adds	r3, #20
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	e853 3f00 	ldrex	r3, [r3]
 800292c:	623b      	str	r3, [r7, #32]
   return(result);
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3314      	adds	r3, #20
 800293e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002942:	633a      	str	r2, [r7, #48]	; 0x30
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294a:	e841 2300 	strex	r3, r2, [r1]
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1e3      	bne.n	800291e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	330c      	adds	r3, #12
 800296a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	e853 3f00 	ldrex	r3, [r3]
 8002972:	60fb      	str	r3, [r7, #12]
   return(result);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0310 	bic.w	r3, r3, #16
 800297a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	330c      	adds	r3, #12
 8002984:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002988:	61fa      	str	r2, [r7, #28]
 800298a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298c:	69b9      	ldr	r1, [r7, #24]
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	e841 2300 	strex	r3, r2, [r1]
 8002994:	617b      	str	r3, [r7, #20]
   return(result);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e3      	bne.n	8002964 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800299c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029a0:	4619      	mov	r1, r3
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f848 	bl	8002a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029a8:	e023      	b.n	80029f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_UART_IRQHandler+0x4ea>
 80029b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f929 	bl	8002c1a <UART_Transmit_IT>
    return;
 80029c8:	e014      	b.n	80029f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00e      	beq.n	80029f4 <HAL_UART_IRQHandler+0x514>
 80029d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f969 	bl	8002cba <UART_EndTransmit_IT>
    return;
 80029e8:	e004      	b.n	80029f4 <HAL_UART_IRQHandler+0x514>
    return;
 80029ea:	bf00      	nop
 80029ec:	e002      	b.n	80029f4 <HAL_UART_IRQHandler+0x514>
      return;
 80029ee:	bf00      	nop
 80029f0:	e000      	b.n	80029f4 <HAL_UART_IRQHandler+0x514>
      return;
 80029f2:	bf00      	nop
  }
}
 80029f4:	37e8      	adds	r7, #232	; 0xe8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop

080029fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b090      	sub	sp, #64	; 0x40
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a60:	e050      	b.n	8002b04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d04c      	beq.n	8002b04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a70:	f7fe f990 	bl	8000d94 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d241      	bcs.n	8002b04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	330c      	adds	r3, #12
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	e853 3f00 	ldrex	r3, [r3]
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aa0:	637a      	str	r2, [r7, #52]	; 0x34
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa8:	e841 2300 	strex	r3, r2, [r1]
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e5      	bne.n	8002a80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3314      	adds	r3, #20
 8002aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	e853 3f00 	ldrex	r3, [r3]
 8002ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3314      	adds	r3, #20
 8002ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ad4:	623a      	str	r2, [r7, #32]
 8002ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad8:	69f9      	ldr	r1, [r7, #28]
 8002ada:	6a3a      	ldr	r2, [r7, #32]
 8002adc:	e841 2300 	strex	r3, r2, [r1]
 8002ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e5      	bne.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e00f      	b.n	8002b24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d09f      	beq.n	8002a62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3740      	adds	r7, #64	; 0x40
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b095      	sub	sp, #84	; 0x54
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	330c      	adds	r3, #12
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3e:	e853 3f00 	ldrex	r3, [r3]
 8002b42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	330c      	adds	r3, #12
 8002b52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b54:	643a      	str	r2, [r7, #64]	; 0x40
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b5c:	e841 2300 	strex	r3, r2, [r1]
 8002b60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e5      	bne.n	8002b34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3314      	adds	r3, #20
 8002b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	e853 3f00 	ldrex	r3, [r3]
 8002b76:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3314      	adds	r3, #20
 8002b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e5      	bne.n	8002b68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d119      	bne.n	8002bd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	e853 3f00 	ldrex	r3, [r3]
 8002bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f023 0310 	bic.w	r3, r3, #16
 8002bba:	647b      	str	r3, [r7, #68]	; 0x44
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bc4:	61ba      	str	r2, [r7, #24]
 8002bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc8:	6979      	ldr	r1, [r7, #20]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	e841 2300 	strex	r3, r2, [r1]
 8002bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1e5      	bne.n	8002ba4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002be6:	bf00      	nop
 8002be8:	3754      	adds	r7, #84	; 0x54
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff ff09 	bl	8002a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b21      	cmp	r3, #33	; 0x21
 8002c2c:	d13e      	bne.n	8002cac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c36:	d114      	bne.n	8002c62 <UART_Transmit_IT+0x48>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d110      	bne.n	8002c62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	1c9a      	adds	r2, r3, #2
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	621a      	str	r2, [r3, #32]
 8002c60:	e008      	b.n	8002c74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	1c59      	adds	r1, r3, #1
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6211      	str	r1, [r2, #32]
 8002c6c:	781a      	ldrb	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4619      	mov	r1, r3
 8002c82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10f      	bne.n	8002ca8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e000      	b.n	8002cae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cac:	2302      	movs	r3, #2
  }
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff fe8e 	bl	80029fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b08c      	sub	sp, #48	; 0x30
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b22      	cmp	r3, #34	; 0x22
 8002cfc:	f040 80ab 	bne.w	8002e56 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d08:	d117      	bne.n	8002d3a <UART_Receive_IT+0x50>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d113      	bne.n	8002d3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	1c9a      	adds	r2, r3, #2
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28
 8002d38:	e026      	b.n	8002d88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4c:	d007      	beq.n	8002d5e <UART_Receive_IT+0x74>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <UART_Receive_IT+0x82>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	e008      	b.n	8002d7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4619      	mov	r1, r3
 8002d96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d15a      	bne.n	8002e52 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0220 	bic.w	r2, r2, #32
 8002daa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d135      	bne.n	8002e48 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	330c      	adds	r3, #12
 8002de8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	e853 3f00 	ldrex	r3, [r3]
 8002df0:	613b      	str	r3, [r7, #16]
   return(result);
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f023 0310 	bic.w	r3, r3, #16
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	330c      	adds	r3, #12
 8002e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e02:	623a      	str	r2, [r7, #32]
 8002e04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e06:	69f9      	ldr	r1, [r7, #28]
 8002e08:	6a3a      	ldr	r2, [r7, #32]
 8002e0a:	e841 2300 	strex	r3, r2, [r1]
 8002e0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e5      	bne.n	8002de2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b10      	cmp	r3, #16
 8002e22:	d10a      	bne.n	8002e3a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff fdf9 	bl	8002a38 <HAL_UARTEx_RxEventCallback>
 8002e46:	e002      	b.n	8002e4e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff fde1 	bl	8002a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e002      	b.n	8002e58 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
  }
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3730      	adds	r7, #48	; 0x30
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e64:	b0c0      	sub	sp, #256	; 0x100
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7c:	68d9      	ldr	r1, [r3, #12]
 8002e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	ea40 0301 	orr.w	r3, r0, r1
 8002e88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002eb8:	f021 010c 	bic.w	r1, r1, #12
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eda:	6999      	ldr	r1, [r3, #24]
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	ea40 0301 	orr.w	r3, r0, r1
 8002ee6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4b8f      	ldr	r3, [pc, #572]	; (800312c <UART_SetConfig+0x2cc>)
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d005      	beq.n	8002f00 <UART_SetConfig+0xa0>
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b8d      	ldr	r3, [pc, #564]	; (8003130 <UART_SetConfig+0x2d0>)
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d104      	bne.n	8002f0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f00:	f7fe ff1a 	bl	8001d38 <HAL_RCC_GetPCLK2Freq>
 8002f04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f08:	e003      	b.n	8002f12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f0a:	f7fe ff01 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8002f0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f1c:	f040 810c 	bne.w	8003138 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f24:	2200      	movs	r2, #0
 8002f26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f32:	4622      	mov	r2, r4
 8002f34:	462b      	mov	r3, r5
 8002f36:	1891      	adds	r1, r2, r2
 8002f38:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f3a:	415b      	adcs	r3, r3
 8002f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f42:	4621      	mov	r1, r4
 8002f44:	eb12 0801 	adds.w	r8, r2, r1
 8002f48:	4629      	mov	r1, r5
 8002f4a:	eb43 0901 	adc.w	r9, r3, r1
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f62:	4690      	mov	r8, r2
 8002f64:	4699      	mov	r9, r3
 8002f66:	4623      	mov	r3, r4
 8002f68:	eb18 0303 	adds.w	r3, r8, r3
 8002f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f70:	462b      	mov	r3, r5
 8002f72:	eb49 0303 	adc.w	r3, r9, r3
 8002f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f8e:	460b      	mov	r3, r1
 8002f90:	18db      	adds	r3, r3, r3
 8002f92:	653b      	str	r3, [r7, #80]	; 0x50
 8002f94:	4613      	mov	r3, r2
 8002f96:	eb42 0303 	adc.w	r3, r2, r3
 8002f9a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fa4:	f7fd f96c 	bl	8000280 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4b61      	ldr	r3, [pc, #388]	; (8003134 <UART_SetConfig+0x2d4>)
 8002fae:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	011c      	lsls	r4, r3, #4
 8002fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fc0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	1891      	adds	r1, r2, r2
 8002fce:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fd0:	415b      	adcs	r3, r3
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fd8:	4641      	mov	r1, r8
 8002fda:	eb12 0a01 	adds.w	sl, r2, r1
 8002fde:	4649      	mov	r1, r9
 8002fe0:	eb43 0b01 	adc.w	fp, r3, r1
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ff0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ff4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ff8:	4692      	mov	sl, r2
 8002ffa:	469b      	mov	fp, r3
 8002ffc:	4643      	mov	r3, r8
 8002ffe:	eb1a 0303 	adds.w	r3, sl, r3
 8003002:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003006:	464b      	mov	r3, r9
 8003008:	eb4b 0303 	adc.w	r3, fp, r3
 800300c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800301c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003020:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003024:	460b      	mov	r3, r1
 8003026:	18db      	adds	r3, r3, r3
 8003028:	643b      	str	r3, [r7, #64]	; 0x40
 800302a:	4613      	mov	r3, r2
 800302c:	eb42 0303 	adc.w	r3, r2, r3
 8003030:	647b      	str	r3, [r7, #68]	; 0x44
 8003032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003036:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800303a:	f7fd f921 	bl	8000280 <__aeabi_uldivmod>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4611      	mov	r1, r2
 8003044:	4b3b      	ldr	r3, [pc, #236]	; (8003134 <UART_SetConfig+0x2d4>)
 8003046:	fba3 2301 	umull	r2, r3, r3, r1
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2264      	movs	r2, #100	; 0x64
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	1acb      	subs	r3, r1, r3
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800305a:	4b36      	ldr	r3, [pc, #216]	; (8003134 <UART_SetConfig+0x2d4>)
 800305c:	fba3 2302 	umull	r2, r3, r3, r2
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003068:	441c      	add	r4, r3
 800306a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800306e:	2200      	movs	r2, #0
 8003070:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003074:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003078:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800307c:	4642      	mov	r2, r8
 800307e:	464b      	mov	r3, r9
 8003080:	1891      	adds	r1, r2, r2
 8003082:	63b9      	str	r1, [r7, #56]	; 0x38
 8003084:	415b      	adcs	r3, r3
 8003086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003088:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800308c:	4641      	mov	r1, r8
 800308e:	1851      	adds	r1, r2, r1
 8003090:	6339      	str	r1, [r7, #48]	; 0x30
 8003092:	4649      	mov	r1, r9
 8003094:	414b      	adcs	r3, r1
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030a4:	4659      	mov	r1, fp
 80030a6:	00cb      	lsls	r3, r1, #3
 80030a8:	4651      	mov	r1, sl
 80030aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ae:	4651      	mov	r1, sl
 80030b0:	00ca      	lsls	r2, r1, #3
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	4642      	mov	r2, r8
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030c0:	464b      	mov	r3, r9
 80030c2:	460a      	mov	r2, r1
 80030c4:	eb42 0303 	adc.w	r3, r2, r3
 80030c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030e0:	460b      	mov	r3, r1
 80030e2:	18db      	adds	r3, r3, r3
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030e6:	4613      	mov	r3, r2
 80030e8:	eb42 0303 	adc.w	r3, r2, r3
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030f6:	f7fd f8c3 	bl	8000280 <__aeabi_uldivmod>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <UART_SetConfig+0x2d4>)
 8003100:	fba3 1302 	umull	r1, r3, r3, r2
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	2164      	movs	r1, #100	; 0x64
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	3332      	adds	r3, #50	; 0x32
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <UART_SetConfig+0x2d4>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	f003 0207 	and.w	r2, r3, #7
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4422      	add	r2, r4
 8003126:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003128:	e105      	b.n	8003336 <UART_SetConfig+0x4d6>
 800312a:	bf00      	nop
 800312c:	40011000 	.word	0x40011000
 8003130:	40011400 	.word	0x40011400
 8003134:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800313c:	2200      	movs	r2, #0
 800313e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003142:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003146:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800314a:	4642      	mov	r2, r8
 800314c:	464b      	mov	r3, r9
 800314e:	1891      	adds	r1, r2, r2
 8003150:	6239      	str	r1, [r7, #32]
 8003152:	415b      	adcs	r3, r3
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
 8003156:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800315a:	4641      	mov	r1, r8
 800315c:	1854      	adds	r4, r2, r1
 800315e:	4649      	mov	r1, r9
 8003160:	eb43 0501 	adc.w	r5, r3, r1
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	00eb      	lsls	r3, r5, #3
 800316e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003172:	00e2      	lsls	r2, r4, #3
 8003174:	4614      	mov	r4, r2
 8003176:	461d      	mov	r5, r3
 8003178:	4643      	mov	r3, r8
 800317a:	18e3      	adds	r3, r4, r3
 800317c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003180:	464b      	mov	r3, r9
 8003182:	eb45 0303 	adc.w	r3, r5, r3
 8003186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800318a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003196:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031a6:	4629      	mov	r1, r5
 80031a8:	008b      	lsls	r3, r1, #2
 80031aa:	4621      	mov	r1, r4
 80031ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031b0:	4621      	mov	r1, r4
 80031b2:	008a      	lsls	r2, r1, #2
 80031b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031b8:	f7fd f862 	bl	8000280 <__aeabi_uldivmod>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4b60      	ldr	r3, [pc, #384]	; (8003344 <UART_SetConfig+0x4e4>)
 80031c2:	fba3 2302 	umull	r2, r3, r3, r2
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	011c      	lsls	r4, r3, #4
 80031ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031dc:	4642      	mov	r2, r8
 80031de:	464b      	mov	r3, r9
 80031e0:	1891      	adds	r1, r2, r2
 80031e2:	61b9      	str	r1, [r7, #24]
 80031e4:	415b      	adcs	r3, r3
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ec:	4641      	mov	r1, r8
 80031ee:	1851      	adds	r1, r2, r1
 80031f0:	6139      	str	r1, [r7, #16]
 80031f2:	4649      	mov	r1, r9
 80031f4:	414b      	adcs	r3, r1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003204:	4659      	mov	r1, fp
 8003206:	00cb      	lsls	r3, r1, #3
 8003208:	4651      	mov	r1, sl
 800320a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320e:	4651      	mov	r1, sl
 8003210:	00ca      	lsls	r2, r1, #3
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	4603      	mov	r3, r0
 8003218:	4642      	mov	r2, r8
 800321a:	189b      	adds	r3, r3, r2
 800321c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003220:	464b      	mov	r3, r9
 8003222:	460a      	mov	r2, r1
 8003224:	eb42 0303 	adc.w	r3, r2, r3
 8003228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	67bb      	str	r3, [r7, #120]	; 0x78
 8003236:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003244:	4649      	mov	r1, r9
 8003246:	008b      	lsls	r3, r1, #2
 8003248:	4641      	mov	r1, r8
 800324a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800324e:	4641      	mov	r1, r8
 8003250:	008a      	lsls	r2, r1, #2
 8003252:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003256:	f7fd f813 	bl	8000280 <__aeabi_uldivmod>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4b39      	ldr	r3, [pc, #228]	; (8003344 <UART_SetConfig+0x4e4>)
 8003260:	fba3 1302 	umull	r1, r3, r3, r2
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	2164      	movs	r1, #100	; 0x64
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	3332      	adds	r3, #50	; 0x32
 8003272:	4a34      	ldr	r2, [pc, #208]	; (8003344 <UART_SetConfig+0x4e4>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327e:	441c      	add	r4, r3
 8003280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003284:	2200      	movs	r2, #0
 8003286:	673b      	str	r3, [r7, #112]	; 0x70
 8003288:	677a      	str	r2, [r7, #116]	; 0x74
 800328a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800328e:	4642      	mov	r2, r8
 8003290:	464b      	mov	r3, r9
 8003292:	1891      	adds	r1, r2, r2
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	415b      	adcs	r3, r3
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800329e:	4641      	mov	r1, r8
 80032a0:	1851      	adds	r1, r2, r1
 80032a2:	6039      	str	r1, [r7, #0]
 80032a4:	4649      	mov	r1, r9
 80032a6:	414b      	adcs	r3, r1
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032b6:	4659      	mov	r1, fp
 80032b8:	00cb      	lsls	r3, r1, #3
 80032ba:	4651      	mov	r1, sl
 80032bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032c0:	4651      	mov	r1, sl
 80032c2:	00ca      	lsls	r2, r1, #3
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	4603      	mov	r3, r0
 80032ca:	4642      	mov	r2, r8
 80032cc:	189b      	adds	r3, r3, r2
 80032ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80032d0:	464b      	mov	r3, r9
 80032d2:	460a      	mov	r2, r1
 80032d4:	eb42 0303 	adc.w	r3, r2, r3
 80032d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	663b      	str	r3, [r7, #96]	; 0x60
 80032e4:	667a      	str	r2, [r7, #100]	; 0x64
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032f2:	4649      	mov	r1, r9
 80032f4:	008b      	lsls	r3, r1, #2
 80032f6:	4641      	mov	r1, r8
 80032f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032fc:	4641      	mov	r1, r8
 80032fe:	008a      	lsls	r2, r1, #2
 8003300:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003304:	f7fc ffbc 	bl	8000280 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <UART_SetConfig+0x4e4>)
 800330e:	fba3 1302 	umull	r1, r3, r3, r2
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2164      	movs	r1, #100	; 0x64
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	3332      	adds	r3, #50	; 0x32
 8003320:	4a08      	ldr	r2, [pc, #32]	; (8003344 <UART_SetConfig+0x4e4>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	f003 020f 	and.w	r2, r3, #15
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4422      	add	r2, r4
 8003334:	609a      	str	r2, [r3, #8]
}
 8003336:	bf00      	nop
 8003338:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800333c:	46bd      	mov	sp, r7
 800333e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003342:	bf00      	nop
 8003344:	51eb851f 	.word	0x51eb851f

08003348 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <SysTick_Handler+0x1c>)
 800334e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003350:	f001 fe7a 	bl	8005048 <xTaskGetSchedulerState>
 8003354:	4603      	mov	r3, r0
 8003356:	2b01      	cmp	r3, #1
 8003358:	d001      	beq.n	800335e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800335a:	f002 fc9d 	bl	8005c98 <xPortSysTickHandler>
  }
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	e000e010 	.word	0xe000e010

08003368 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a07      	ldr	r2, [pc, #28]	; (8003394 <vApplicationGetIdleTaskMemory+0x2c>)
 8003378:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4a06      	ldr	r2, [pc, #24]	; (8003398 <vApplicationGetIdleTaskMemory+0x30>)
 800337e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	601a      	str	r2, [r3, #0]
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	2000012c 	.word	0x2000012c
 8003398:	200001e8 	.word	0x200001e8

0800339c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a07      	ldr	r2, [pc, #28]	; (80033c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80033ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4a06      	ldr	r2, [pc, #24]	; (80033cc <vApplicationGetTimerTaskMemory+0x30>)
 80033b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ba:	601a      	str	r2, [r3, #0]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	200003e8 	.word	0x200003e8
 80033cc:	200004a4 	.word	0x200004a4

080033d0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80033d6:	2020      	movs	r0, #32
 80033d8:	f002 fcee 	bl	8005db8 <pvPortMalloc>
 80033dc:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3304      	adds	r3, #4
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f9a4 	bl	800373c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80033fa:	687b      	ldr	r3, [r7, #4]
	}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b090      	sub	sp, #64	; 0x40
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003436:	bf00      	nop
 8003438:	e7fe      	b.n	8003438 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <xEventGroupWaitBits+0x56>
	__asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	61fb      	str	r3, [r7, #28]
}
 8003456:	bf00      	nop
 8003458:	e7fe      	b.n	8003458 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <xEventGroupWaitBits+0x72>
	__asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	61bb      	str	r3, [r7, #24]
}
 8003472:	bf00      	nop
 8003474:	e7fe      	b.n	8003474 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003476:	f001 fde7 	bl	8005048 <xTaskGetSchedulerState>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <xEventGroupWaitBits+0x82>
 8003480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <xEventGroupWaitBits+0x86>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <xEventGroupWaitBits+0x88>
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	617b      	str	r3, [r7, #20]
}
 80034a2:	bf00      	nop
 80034a4:	e7fe      	b.n	80034a4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80034a6:	f001 f945 	bl	8004734 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80034aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034b6:	f000 f90b 	bl	80036d0 <prvTestWaitCondition>
 80034ba:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00e      	beq.n	80034e0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d028      	beq.n	8003522 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80034d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	401a      	ands	r2, r3
 80034da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e020      	b.n	8003522 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80034e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80034ea:	2301      	movs	r3, #1
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
 80034ee:	e018      	b.n	8003522 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80034f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034fc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800350a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800350c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350e:	1d18      	adds	r0, r3, #4
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	4313      	orrs	r3, r2
 8003516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003518:	4619      	mov	r1, r3
 800351a:	f001 fb09 	bl	8004b30 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003522:	f001 f915 	bl	8004750 <xTaskResumeAll>
 8003526:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352a:	2b00      	cmp	r3, #0
 800352c:	d031      	beq.n	8003592 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	2b00      	cmp	r3, #0
 8003532:	d107      	bne.n	8003544 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <xEventGroupWaitBits+0x198>)
 8003536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003544:	f001 fe0c 	bl	8005160 <uxTaskResetEventItemValue>
 8003548:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800354a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11a      	bne.n	800358a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8003554:	f002 fb0e 	bl	8005b74 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003564:	f000 f8b4 	bl	80036d0 <prvTestWaitCondition>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d006      	beq.n	8003582 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	43db      	mvns	r3, r3
 800357c:	401a      	ands	r2, r3
 800357e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003580:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003582:	2301      	movs	r3, #1
 8003584:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8003586:	f002 fb25 	bl	8005bd4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800358a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003590:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003594:	4618      	mov	r0, r3
 8003596:	3740      	adds	r7, #64	; 0x40
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	e000ed04 	.word	0xe000ed04

080035a0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08e      	sub	sp, #56	; 0x38
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80035aa:	2300      	movs	r3, #0
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <xEventGroupSetBits+0x32>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	613b      	str	r3, [r7, #16]
}
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <xEventGroupSetBits+0x52>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	60fb      	str	r3, [r7, #12]
}
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	3304      	adds	r3, #4
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	3308      	adds	r3, #8
 80035fc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80035fe:	f001 f899 	bl	8004734 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	431a      	orrs	r2, r3
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003614:	e03c      	b.n	8003690 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003622:	2300      	movs	r3, #0
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800362c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003634:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d108      	bne.n	8003652 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800364c:	2301      	movs	r3, #1
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003650:	e008      	b.n	8003664 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	429a      	cmp	r2, r3
 800365e:	d101      	bne.n	8003664 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003660:	2301      	movs	r3, #1
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d010      	beq.n	800368c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003684:	4619      	mov	r1, r3
 8003686:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003688:	f001 fb1e 	bl	8004cc8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8003690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	429a      	cmp	r2, r3
 8003696:	d1be      	bne.n	8003616 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369e:	43db      	mvns	r3, r3
 80036a0:	401a      	ands	r2, r3
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80036a6:	f001 f853 	bl	8004750 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	681b      	ldr	r3, [r3, #0]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3738      	adds	r7, #56	; 0x38
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80036c0:	6839      	ldr	r1, [r7, #0]
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ff6c 	bl	80035a0 <xEventGroupSetBits>
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d107      	bne.n	80036f6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80036f0:	2301      	movs	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	e007      	b.n	8003706 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d101      	bne.n	8003706 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003702:	2301      	movs	r3, #1
 8003704:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003706:	697b      	ldr	r3, [r7, #20]
}
 8003708:	4618      	mov	r0, r3
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	68f9      	ldr	r1, [r7, #12]
 8003726:	4804      	ldr	r0, [pc, #16]	; (8003738 <xEventGroupSetBitsFromISR+0x24>)
 8003728:	f002 f8d4 	bl	80058d4 <xTimerPendFunctionCallFromISR>
 800372c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800372e:	697b      	ldr	r3, [r7, #20]
	}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	080036b7 	.word	0x080036b7

0800373c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f103 0208 	add.w	r2, r3, #8
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f04f 32ff 	mov.w	r2, #4294967295
 8003754:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f103 0208 	add.w	r2, r3, #8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f103 0208 	add.w	r2, r3, #8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d103      	bne.n	80037fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e00c      	b.n	8003818 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3308      	adds	r3, #8
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e002      	b.n	800380c <vListInsert+0x2e>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d2f6      	bcs.n	8003806 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	601a      	str	r2, [r3, #0]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6892      	ldr	r2, [r2, #8]
 8003866:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6852      	ldr	r2, [r2, #4]
 8003870:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	429a      	cmp	r2, r3
 800387a:	d103      	bne.n	8003884 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1e5a      	subs	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <xQueueGenericReset+0x2a>
	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	60bb      	str	r3, [r7, #8]
}
 80038ca:	bf00      	nop
 80038cc:	e7fe      	b.n	80038cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038ce:	f002 f951 	bl	8005b74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	68f9      	ldr	r1, [r7, #12]
 80038dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	441a      	add	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	3b01      	subs	r3, #1
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003904:	fb01 f303 	mul.w	r3, r1, r3
 8003908:	441a      	add	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	22ff      	movs	r2, #255	; 0xff
 8003912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	22ff      	movs	r2, #255	; 0xff
 800391a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d114      	bne.n	800394e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01a      	beq.n	8003962 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3310      	adds	r3, #16
 8003930:	4618      	mov	r0, r3
 8003932:	f001 f965 	bl	8004c00 <xTaskRemoveFromEventList>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d012      	beq.n	8003962 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <xQueueGenericReset+0xcc>)
 800393e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	e009      	b.n	8003962 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3310      	adds	r3, #16
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fef2 	bl	800373c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3324      	adds	r3, #36	; 0x24
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff feed 	bl	800373c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003962:	f002 f937 	bl	8005bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003966:	2301      	movs	r3, #1
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08e      	sub	sp, #56	; 0x38
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800399a:	bf00      	nop
 800399c:	e7fe      	b.n	800399c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039b6:	bf00      	nop
 80039b8:	e7fe      	b.n	80039b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <xQueueGenericCreateStatic+0x52>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <xQueueGenericCreateStatic+0x56>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <xQueueGenericCreateStatic+0x58>
 80039ca:	2300      	movs	r3, #0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	623b      	str	r3, [r7, #32]
}
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <xQueueGenericCreateStatic+0x7e>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <xQueueGenericCreateStatic+0x82>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <xQueueGenericCreateStatic+0x84>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	61fb      	str	r3, [r7, #28]
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a12:	2350      	movs	r3, #80	; 0x50
 8003a14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b50      	cmp	r3, #80	; 0x50
 8003a1a:	d00a      	beq.n	8003a32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	61bb      	str	r3, [r7, #24]
}
 8003a2e:	bf00      	nop
 8003a30:	e7fe      	b.n	8003a30 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00d      	beq.n	8003a5a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f805 	bl	8003a64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3730      	adds	r7, #48	; 0x30
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d103      	bne.n	8003a80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e002      	b.n	8003a86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a92:	2101      	movs	r1, #1
 8003a94:	69b8      	ldr	r0, [r7, #24]
 8003a96:	f7ff ff05 	bl	80038a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	78fa      	ldrb	r2, [r7, #3]
 8003a9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08e      	sub	sp, #56	; 0x38
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003aba:	2300      	movs	r3, #0
 8003abc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <xQueueGenericSend+0x32>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ada:	bf00      	nop
 8003adc:	e7fe      	b.n	8003adc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d103      	bne.n	8003aec <xQueueGenericSend+0x40>
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <xQueueGenericSend+0x44>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <xQueueGenericSend+0x46>
 8003af0:	2300      	movs	r3, #0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10a      	bne.n	8003b0c <xQueueGenericSend+0x60>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b08:	bf00      	nop
 8003b0a:	e7fe      	b.n	8003b0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d103      	bne.n	8003b1a <xQueueGenericSend+0x6e>
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <xQueueGenericSend+0x72>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <xQueueGenericSend+0x74>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <xQueueGenericSend+0x8e>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	623b      	str	r3, [r7, #32]
}
 8003b36:	bf00      	nop
 8003b38:	e7fe      	b.n	8003b38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b3a:	f001 fa85 	bl	8005048 <xTaskGetSchedulerState>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <xQueueGenericSend+0x9e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <xQueueGenericSend+0xa2>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <xQueueGenericSend+0xa4>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xQueueGenericSend+0xbe>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	61fb      	str	r3, [r7, #28]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b6a:	f002 f803 	bl	8005b74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d302      	bcc.n	8003b80 <xQueueGenericSend+0xd4>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d129      	bne.n	8003bd4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b86:	f000 fa0b 	bl	8003fa0 <prvCopyDataToQueue>
 8003b8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d010      	beq.n	8003bb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	3324      	adds	r3, #36	; 0x24
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 f831 	bl	8004c00 <xTaskRemoveFromEventList>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d013      	beq.n	8003bcc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ba4:	4b3f      	ldr	r3, [pc, #252]	; (8003ca4 <xQueueGenericSend+0x1f8>)
 8003ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	e00a      	b.n	8003bcc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003bbc:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <xQueueGenericSend+0x1f8>)
 8003bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bcc:	f002 f802 	bl	8005bd4 <vPortExitCritical>
				return pdPASS;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e063      	b.n	8003c9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bda:	f001 fffb 	bl	8005bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e05c      	b.n	8003c9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	4618      	mov	r0, r3
 8003bee:	f001 f8cd 	bl	8004d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bf6:	f001 ffed 	bl	8005bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bfa:	f000 fd9b 	bl	8004734 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bfe:	f001 ffb9 	bl	8005b74 <vPortEnterCritical>
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c08:	b25b      	sxtb	r3, r3
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d103      	bne.n	8003c18 <xQueueGenericSend+0x16c>
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c1e:	b25b      	sxtb	r3, r3
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d103      	bne.n	8003c2e <xQueueGenericSend+0x182>
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c2e:	f001 ffd1 	bl	8005bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c32:	1d3a      	adds	r2, r7, #4
 8003c34:	f107 0314 	add.w	r3, r7, #20
 8003c38:	4611      	mov	r1, r2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f001 f8bc 	bl	8004db8 <xTaskCheckForTimeOut>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d124      	bne.n	8003c90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c48:	f000 faa2 	bl	8004190 <prvIsQueueFull>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d018      	beq.n	8003c84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	3310      	adds	r3, #16
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4611      	mov	r1, r2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 ff44 	bl	8004ae8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c62:	f000 fa2d 	bl	80040c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c66:	f000 fd73 	bl	8004750 <xTaskResumeAll>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f47f af7c 	bne.w	8003b6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <xQueueGenericSend+0x1f8>)
 8003c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	e772      	b.n	8003b6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c86:	f000 fa1b 	bl	80040c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c8a:	f000 fd61 	bl	8004750 <xTaskResumeAll>
 8003c8e:	e76c      	b.n	8003b6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c92:	f000 fa15 	bl	80040c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c96:	f000 fd5b 	bl	8004750 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3738      	adds	r7, #56	; 0x38
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b090      	sub	sp, #64	; 0x40
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cd2:	bf00      	nop
 8003cd4:	e7fe      	b.n	8003cd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d103      	bne.n	8003ce4 <xQueueGenericSendFromISR+0x3c>
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <xQueueGenericSendFromISR+0x40>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <xQueueGenericSendFromISR+0x42>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d00:	bf00      	nop
 8003d02:	e7fe      	b.n	8003d02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d103      	bne.n	8003d12 <xQueueGenericSendFromISR+0x6a>
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <xQueueGenericSendFromISR+0x6e>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <xQueueGenericSendFromISR+0x70>
 8003d16:	2300      	movs	r3, #0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	623b      	str	r3, [r7, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	e7fe      	b.n	8003d30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d32:	f002 f801 	bl	8005d38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d36:	f3ef 8211 	mrs	r2, BASEPRI
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	61fa      	str	r2, [r7, #28]
 8003d4c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <xQueueGenericSendFromISR+0xbc>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d12f      	bne.n	8003dc4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d7a:	f000 f911 	bl	8003fa0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d112      	bne.n	8003dae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d016      	beq.n	8003dbe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d92:	3324      	adds	r3, #36	; 0x24
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 ff33 	bl	8004c00 <xTaskRemoveFromEventList>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00e      	beq.n	8003dbe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e007      	b.n	8003dbe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003dae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003db2:	3301      	adds	r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	b25a      	sxtb	r2, r3
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003dc2:	e001      	b.n	8003dc8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003dd2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3740      	adds	r7, #64	; 0x40
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	; 0x30
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <xQueueReceive+0x30>
	__asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	623b      	str	r3, [r7, #32]
}
 8003e0c:	bf00      	nop
 8003e0e:	e7fe      	b.n	8003e0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d103      	bne.n	8003e1e <xQueueReceive+0x3e>
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <xQueueReceive+0x42>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <xQueueReceive+0x44>
 8003e22:	2300      	movs	r3, #0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <xQueueReceive+0x5e>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	61fb      	str	r3, [r7, #28]
}
 8003e3a:	bf00      	nop
 8003e3c:	e7fe      	b.n	8003e3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e3e:	f001 f903 	bl	8005048 <xTaskGetSchedulerState>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <xQueueReceive+0x6e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <xQueueReceive+0x72>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <xQueueReceive+0x74>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <xQueueReceive+0x8e>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	61bb      	str	r3, [r7, #24]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e6e:	f001 fe81 	bl	8005b74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01f      	beq.n	8003ebe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e82:	f000 f8f7 	bl	8004074 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	1e5a      	subs	r2, r3, #1
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00f      	beq.n	8003eb6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	3310      	adds	r3, #16
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 feb0 	bl	8004c00 <xTaskRemoveFromEventList>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ea6:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <xQueueReceive+0x1bc>)
 8003ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003eb6:	f001 fe8d 	bl	8005bd4 <vPortExitCritical>
				return pdPASS;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e069      	b.n	8003f92 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d103      	bne.n	8003ecc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ec4:	f001 fe86 	bl	8005bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e062      	b.n	8003f92 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ed2:	f107 0310 	add.w	r3, r7, #16
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 ff58 	bl	8004d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003edc:	2301      	movs	r3, #1
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ee0:	f001 fe78 	bl	8005bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ee4:	f000 fc26 	bl	8004734 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ee8:	f001 fe44 	bl	8005b74 <vPortEnterCritical>
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ef2:	b25b      	sxtb	r3, r3
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d103      	bne.n	8003f02 <xQueueReceive+0x122>
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f08:	b25b      	sxtb	r3, r3
 8003f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0e:	d103      	bne.n	8003f18 <xQueueReceive+0x138>
 8003f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f18:	f001 fe5c 	bl	8005bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f1c:	1d3a      	adds	r2, r7, #4
 8003f1e:	f107 0310 	add.w	r3, r7, #16
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 ff47 	bl	8004db8 <xTaskCheckForTimeOut>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d123      	bne.n	8003f78 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f32:	f000 f917 	bl	8004164 <prvIsQueueEmpty>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d017      	beq.n	8003f6c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	3324      	adds	r3, #36	; 0x24
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fdcf 	bl	8004ae8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f4c:	f000 f8b8 	bl	80040c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f50:	f000 fbfe 	bl	8004750 <xTaskResumeAll>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d189      	bne.n	8003e6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <xQueueReceive+0x1bc>)
 8003f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	e780      	b.n	8003e6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f6e:	f000 f8a7 	bl	80040c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f72:	f000 fbed 	bl	8004750 <xTaskResumeAll>
 8003f76:	e77a      	b.n	8003e6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f7a:	f000 f8a1 	bl	80040c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f7e:	f000 fbe7 	bl	8004750 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f84:	f000 f8ee 	bl	8004164 <prvIsQueueEmpty>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f43f af6f 	beq.w	8003e6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3730      	adds	r7, #48	; 0x30
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10d      	bne.n	8003fda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d14d      	bne.n	8004062 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 f85a 	bl	8005084 <xTaskPriorityDisinherit>
 8003fd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	e043      	b.n	8004062 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d119      	bne.n	8004014 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6858      	ldr	r0, [r3, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	f002 f8fa 	bl	80061e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	441a      	add	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	d32b      	bcc.n	8004062 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	e026      	b.n	8004062 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	68d8      	ldr	r0, [r3, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	461a      	mov	r2, r3
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	f002 f8e0 	bl	80061e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	425b      	negs	r3, r3
 800402e:	441a      	add	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d207      	bcs.n	8004050 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	425b      	negs	r3, r3
 800404a:	441a      	add	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d105      	bne.n	8004062 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	3b01      	subs	r3, #1
 8004060:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800406a:	697b      	ldr	r3, [r7, #20]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d018      	beq.n	80040b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	441a      	add	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	429a      	cmp	r2, r3
 800409e:	d303      	bcc.n	80040a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68d9      	ldr	r1, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	461a      	mov	r2, r3
 80040b2:	6838      	ldr	r0, [r7, #0]
 80040b4:	f002 f896 	bl	80061e4 <memcpy>
	}
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040c8:	f001 fd54 	bl	8005b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040d4:	e011      	b.n	80040fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d012      	beq.n	8004104 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3324      	adds	r3, #36	; 0x24
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fd8c 	bl	8004c00 <xTaskRemoveFromEventList>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040ee:	f000 fec5 	bl	8004e7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	dce9      	bgt.n	80040d6 <prvUnlockQueue+0x16>
 8004102:	e000      	b.n	8004106 <prvUnlockQueue+0x46>
					break;
 8004104:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	22ff      	movs	r2, #255	; 0xff
 800410a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800410e:	f001 fd61 	bl	8005bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004112:	f001 fd2f 	bl	8005b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800411c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800411e:	e011      	b.n	8004144 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d012      	beq.n	800414e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3310      	adds	r3, #16
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fd67 	bl	8004c00 <xTaskRemoveFromEventList>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004138:	f000 fea0 	bl	8004e7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800413c:	7bbb      	ldrb	r3, [r7, #14]
 800413e:	3b01      	subs	r3, #1
 8004140:	b2db      	uxtb	r3, r3
 8004142:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004144:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004148:	2b00      	cmp	r3, #0
 800414a:	dce9      	bgt.n	8004120 <prvUnlockQueue+0x60>
 800414c:	e000      	b.n	8004150 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800414e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	22ff      	movs	r2, #255	; 0xff
 8004154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004158:	f001 fd3c 	bl	8005bd4 <vPortExitCritical>
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800416c:	f001 fd02 	bl	8005b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	2b00      	cmp	r3, #0
 8004176:	d102      	bne.n	800417e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004178:	2301      	movs	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	e001      	b.n	8004182 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004182:	f001 fd27 	bl	8005bd4 <vPortExitCritical>

	return xReturn;
 8004186:	68fb      	ldr	r3, [r7, #12]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004198:	f001 fcec 	bl	8005b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d102      	bne.n	80041ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041a8:	2301      	movs	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e001      	b.n	80041b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041b2:	f001 fd0f 	bl	8005bd4 <vPortExitCritical>

	return xReturn;
 80041b6:	68fb      	ldr	r3, [r7, #12]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	e014      	b.n	80041fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041d0:	4a0f      	ldr	r2, [pc, #60]	; (8004210 <vQueueAddToRegistry+0x50>)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10b      	bne.n	80041f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041dc:	490c      	ldr	r1, [pc, #48]	; (8004210 <vQueueAddToRegistry+0x50>)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041e6:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <vQueueAddToRegistry+0x50>)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4413      	add	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041f2:	e006      	b.n	8004202 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3301      	adds	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b07      	cmp	r3, #7
 80041fe:	d9e7      	bls.n	80041d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	200008a4 	.word	0x200008a4

08004214 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004224:	f001 fca6 	bl	8005b74 <vPortEnterCritical>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800422e:	b25b      	sxtb	r3, r3
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d103      	bne.n	800423e <vQueueWaitForMessageRestricted+0x2a>
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004244:	b25b      	sxtb	r3, r3
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d103      	bne.n	8004254 <vQueueWaitForMessageRestricted+0x40>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004254:	f001 fcbe 	bl	8005bd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	3324      	adds	r3, #36	; 0x24
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fc9d 	bl	8004ba8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800426e:	6978      	ldr	r0, [r7, #20]
 8004270:	f7ff ff26 	bl	80040c0 <prvUnlockQueue>
	}
 8004274:	bf00      	nop
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08e      	sub	sp, #56	; 0x38
 8004280:	af04      	add	r7, sp, #16
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800428a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	623b      	str	r3, [r7, #32]
}
 80042a2:	bf00      	nop
 80042a4:	e7fe      	b.n	80042a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	61fb      	str	r3, [r7, #28]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042c2:	23bc      	movs	r3, #188	; 0xbc
 80042c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2bbc      	cmp	r3, #188	; 0xbc
 80042ca:	d00a      	beq.n	80042e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	61bb      	str	r3, [r7, #24]
}
 80042de:	bf00      	nop
 80042e0:	e7fe      	b.n	80042e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01e      	beq.n	8004328 <xTaskCreateStatic+0xac>
 80042ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01b      	beq.n	8004328 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	2202      	movs	r2, #2
 80042fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004302:	2300      	movs	r3, #0
 8004304:	9303      	str	r3, [sp, #12]
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	9302      	str	r3, [sp, #8]
 800430a:	f107 0314 	add.w	r3, r7, #20
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f850 	bl	80043c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004322:	f000 f8f3 	bl	800450c <prvAddNewTaskToReadyList>
 8004326:	e001      	b.n	800432c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800432c:	697b      	ldr	r3, [r7, #20]
	}
 800432e:	4618      	mov	r0, r3
 8004330:	3728      	adds	r7, #40	; 0x28
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004336:	b580      	push	{r7, lr}
 8004338:	b08c      	sub	sp, #48	; 0x30
 800433a:	af04      	add	r7, sp, #16
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	4613      	mov	r3, r2
 8004344:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4618      	mov	r0, r3
 800434c:	f001 fd34 	bl	8005db8 <pvPortMalloc>
 8004350:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00e      	beq.n	8004376 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004358:	20bc      	movs	r0, #188	; 0xbc
 800435a:	f001 fd2d 	bl	8005db8 <pvPortMalloc>
 800435e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
 800436c:	e005      	b.n	800437a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800436e:	6978      	ldr	r0, [r7, #20]
 8004370:	f001 fdee 	bl	8005f50 <vPortFree>
 8004374:	e001      	b.n	800437a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d017      	beq.n	80043b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004388:	88fa      	ldrh	r2, [r7, #6]
 800438a:	2300      	movs	r3, #0
 800438c:	9303      	str	r3, [sp, #12]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	9302      	str	r3, [sp, #8]
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f80e 	bl	80043c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043a4:	69f8      	ldr	r0, [r7, #28]
 80043a6:	f000 f8b1 	bl	800450c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043aa:	2301      	movs	r3, #1
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	e002      	b.n	80043b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043b0:	f04f 33ff 	mov.w	r3, #4294967295
 80043b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043b6:	69bb      	ldr	r3, [r7, #24]
	}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3720      	adds	r7, #32
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	461a      	mov	r2, r3
 80043d8:	21a5      	movs	r1, #165	; 0xa5
 80043da:	f001 ff11 	bl	8006200 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043e8:	3b01      	subs	r3, #1
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	f023 0307 	bic.w	r3, r3, #7
 80043f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	617b      	str	r3, [r7, #20]
}
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d01f      	beq.n	800445e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	e012      	b.n	800444a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	4413      	add	r3, r2
 800442a:	7819      	ldrb	r1, [r3, #0]
 800442c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	3334      	adds	r3, #52	; 0x34
 8004434:	460a      	mov	r2, r1
 8004436:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d006      	beq.n	8004452 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	3301      	adds	r3, #1
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	2b0f      	cmp	r3, #15
 800444e:	d9e9      	bls.n	8004424 <prvInitialiseNewTask+0x64>
 8004450:	e000      	b.n	8004454 <prvInitialiseNewTask+0x94>
			{
				break;
 8004452:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800445c:	e003      	b.n	8004466 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	2b37      	cmp	r3, #55	; 0x37
 800446a:	d901      	bls.n	8004470 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800446c:	2337      	movs	r3, #55	; 0x37
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004474:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800447a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	2200      	movs	r2, #0
 8004480:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	3304      	adds	r3, #4
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff f978 	bl	800377c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	3318      	adds	r3, #24
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff f973 	bl	800377c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	3354      	adds	r3, #84	; 0x54
 80044c0:	2260      	movs	r2, #96	; 0x60
 80044c2:	2100      	movs	r1, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f001 fe9b 	bl	8006200 <memset>
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <prvInitialiseNewTask+0x140>)
 80044ce:	659a      	str	r2, [r3, #88]	; 0x58
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	4a0c      	ldr	r2, [pc, #48]	; (8004504 <prvInitialiseNewTask+0x144>)
 80044d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	4a0b      	ldr	r2, [pc, #44]	; (8004508 <prvInitialiseNewTask+0x148>)
 80044da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	69b8      	ldr	r0, [r7, #24]
 80044e2:	f001 fa17 	bl	8005914 <pxPortInitialiseStack>
 80044e6:	4602      	mov	r2, r0
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044f8:	bf00      	nop
 80044fa:	3720      	adds	r7, #32
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	08006d2c 	.word	0x08006d2c
 8004504:	08006d4c 	.word	0x08006d4c
 8004508:	08006d0c 	.word	0x08006d0c

0800450c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004514:	f001 fb2e 	bl	8005b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004518:	4b2d      	ldr	r3, [pc, #180]	; (80045d0 <prvAddNewTaskToReadyList+0xc4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	4a2c      	ldr	r2, [pc, #176]	; (80045d0 <prvAddNewTaskToReadyList+0xc4>)
 8004520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004522:	4b2c      	ldr	r3, [pc, #176]	; (80045d4 <prvAddNewTaskToReadyList+0xc8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800452a:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <prvAddNewTaskToReadyList+0xc8>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004530:	4b27      	ldr	r3, [pc, #156]	; (80045d0 <prvAddNewTaskToReadyList+0xc4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d110      	bne.n	800455a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004538:	f000 fcc4 	bl	8004ec4 <prvInitialiseTaskLists>
 800453c:	e00d      	b.n	800455a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800453e:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <prvAddNewTaskToReadyList+0xcc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004546:	4b23      	ldr	r3, [pc, #140]	; (80045d4 <prvAddNewTaskToReadyList+0xc8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	429a      	cmp	r2, r3
 8004552:	d802      	bhi.n	800455a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004554:	4a1f      	ldr	r2, [pc, #124]	; (80045d4 <prvAddNewTaskToReadyList+0xc8>)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800455a:	4b20      	ldr	r3, [pc, #128]	; (80045dc <prvAddNewTaskToReadyList+0xd0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3301      	adds	r3, #1
 8004560:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <prvAddNewTaskToReadyList+0xd0>)
 8004562:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <prvAddNewTaskToReadyList+0xd0>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <prvAddNewTaskToReadyList+0xd4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d903      	bls.n	8004580 <prvAddNewTaskToReadyList+0x74>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <prvAddNewTaskToReadyList+0xd4>)
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <prvAddNewTaskToReadyList+0xd8>)
 800458e:	441a      	add	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7ff f8fd 	bl	8003796 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800459c:	f001 fb1a 	bl	8005bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045a0:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <prvAddNewTaskToReadyList+0xcc>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00e      	beq.n	80045c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <prvAddNewTaskToReadyList+0xc8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d207      	bcs.n	80045c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <prvAddNewTaskToReadyList+0xdc>)
 80045b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000db8 	.word	0x20000db8
 80045d4:	200008e4 	.word	0x200008e4
 80045d8:	20000dc4 	.word	0x20000dc4
 80045dc:	20000dd4 	.word	0x20000dd4
 80045e0:	20000dc0 	.word	0x20000dc0
 80045e4:	200008e8 	.word	0x200008e8
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d017      	beq.n	800462e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <vTaskDelay+0x60>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <vTaskDelay+0x30>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	60bb      	str	r3, [r7, #8]
}
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800461c:	f000 f88a 	bl	8004734 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004620:	2100      	movs	r1, #0
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fdb4 	bl	8005190 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004628:	f000 f892 	bl	8004750 <xTaskResumeAll>
 800462c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d107      	bne.n	8004644 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <vTaskDelay+0x64>)
 8004636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000de0 	.word	0x20000de0
 8004650:	e000ed04 	.word	0xe000ed04

08004654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	; 0x28
 8004658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004662:	463a      	mov	r2, r7
 8004664:	1d39      	adds	r1, r7, #4
 8004666:	f107 0308 	add.w	r3, r7, #8
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe fe7c 	bl	8003368 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004670:	6839      	ldr	r1, [r7, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	9202      	str	r2, [sp, #8]
 8004678:	9301      	str	r3, [sp, #4]
 800467a:	2300      	movs	r3, #0
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	2300      	movs	r3, #0
 8004680:	460a      	mov	r2, r1
 8004682:	4924      	ldr	r1, [pc, #144]	; (8004714 <vTaskStartScheduler+0xc0>)
 8004684:	4824      	ldr	r0, [pc, #144]	; (8004718 <vTaskStartScheduler+0xc4>)
 8004686:	f7ff fdf9 	bl	800427c <xTaskCreateStatic>
 800468a:	4603      	mov	r3, r0
 800468c:	4a23      	ldr	r2, [pc, #140]	; (800471c <vTaskStartScheduler+0xc8>)
 800468e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004690:	4b22      	ldr	r3, [pc, #136]	; (800471c <vTaskStartScheduler+0xc8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004698:	2301      	movs	r3, #1
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	e001      	b.n	80046a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d102      	bne.n	80046ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046a8:	f000 fdc6 	bl	8005238 <xTimerCreateTimerTask>
 80046ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d11b      	bne.n	80046ec <vTaskStartScheduler+0x98>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	613b      	str	r3, [r7, #16]
}
 80046c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046c8:	4b15      	ldr	r3, [pc, #84]	; (8004720 <vTaskStartScheduler+0xcc>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3354      	adds	r3, #84	; 0x54
 80046ce:	4a15      	ldr	r2, [pc, #84]	; (8004724 <vTaskStartScheduler+0xd0>)
 80046d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046d2:	4b15      	ldr	r3, [pc, #84]	; (8004728 <vTaskStartScheduler+0xd4>)
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295
 80046d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <vTaskStartScheduler+0xd8>)
 80046dc:	2201      	movs	r2, #1
 80046de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046e0:	4b13      	ldr	r3, [pc, #76]	; (8004730 <vTaskStartScheduler+0xdc>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046e6:	f001 f9a3 	bl	8005a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046ea:	e00e      	b.n	800470a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d10a      	bne.n	800470a <vTaskStartScheduler+0xb6>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	60fb      	str	r3, [r7, #12]
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <vTaskStartScheduler+0xb4>
}
 800470a:	bf00      	nop
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	08006cdc 	.word	0x08006cdc
 8004718:	08004e95 	.word	0x08004e95
 800471c:	20000ddc 	.word	0x20000ddc
 8004720:	200008e4 	.word	0x200008e4
 8004724:	20000014 	.word	0x20000014
 8004728:	20000dd8 	.word	0x20000dd8
 800472c:	20000dc4 	.word	0x20000dc4
 8004730:	20000dbc 	.word	0x20000dbc

08004734 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <vTaskSuspendAll+0x18>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	4a03      	ldr	r2, [pc, #12]	; (800474c <vTaskSuspendAll+0x18>)
 8004740:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004742:	bf00      	nop
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	20000de0 	.word	0x20000de0

08004750 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800475e:	4b42      	ldr	r3, [pc, #264]	; (8004868 <xTaskResumeAll+0x118>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <xTaskResumeAll+0x2c>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	603b      	str	r3, [r7, #0]
}
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800477c:	f001 f9fa 	bl	8005b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004780:	4b39      	ldr	r3, [pc, #228]	; (8004868 <xTaskResumeAll+0x118>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3b01      	subs	r3, #1
 8004786:	4a38      	ldr	r2, [pc, #224]	; (8004868 <xTaskResumeAll+0x118>)
 8004788:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800478a:	4b37      	ldr	r3, [pc, #220]	; (8004868 <xTaskResumeAll+0x118>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d162      	bne.n	8004858 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004792:	4b36      	ldr	r3, [pc, #216]	; (800486c <xTaskResumeAll+0x11c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d05e      	beq.n	8004858 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800479a:	e02f      	b.n	80047fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800479c:	4b34      	ldr	r3, [pc, #208]	; (8004870 <xTaskResumeAll+0x120>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3318      	adds	r3, #24
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff f851 	bl	8003850 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff f84c 	bl	8003850 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	4b2d      	ldr	r3, [pc, #180]	; (8004874 <xTaskResumeAll+0x124>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d903      	bls.n	80047cc <xTaskResumeAll+0x7c>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	4a2a      	ldr	r2, [pc, #168]	; (8004874 <xTaskResumeAll+0x124>)
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4a27      	ldr	r2, [pc, #156]	; (8004878 <xTaskResumeAll+0x128>)
 80047da:	441a      	add	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3304      	adds	r3, #4
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f7fe ffd7 	bl	8003796 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ec:	4b23      	ldr	r3, [pc, #140]	; (800487c <xTaskResumeAll+0x12c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d302      	bcc.n	80047fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <xTaskResumeAll+0x130>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047fc:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <xTaskResumeAll+0x120>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1cb      	bne.n	800479c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800480a:	f000 fbfd 	bl	8005008 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800480e:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <xTaskResumeAll+0x134>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d010      	beq.n	800483c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800481a:	f000 f847 	bl	80048ac <xTaskIncrementTick>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004824:	4b16      	ldr	r3, [pc, #88]	; (8004880 <xTaskResumeAll+0x130>)
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3b01      	subs	r3, #1
 800482e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f1      	bne.n	800481a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004836:	4b13      	ldr	r3, [pc, #76]	; (8004884 <xTaskResumeAll+0x134>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800483c:	4b10      	ldr	r3, [pc, #64]	; (8004880 <xTaskResumeAll+0x130>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d009      	beq.n	8004858 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004844:	2301      	movs	r3, #1
 8004846:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <xTaskResumeAll+0x138>)
 800484a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004858:	f001 f9bc 	bl	8005bd4 <vPortExitCritical>

	return xAlreadyYielded;
 800485c:	68bb      	ldr	r3, [r7, #8]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000de0 	.word	0x20000de0
 800486c:	20000db8 	.word	0x20000db8
 8004870:	20000d78 	.word	0x20000d78
 8004874:	20000dc0 	.word	0x20000dc0
 8004878:	200008e8 	.word	0x200008e8
 800487c:	200008e4 	.word	0x200008e4
 8004880:	20000dcc 	.word	0x20000dcc
 8004884:	20000dc8 	.word	0x20000dc8
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <xTaskGetTickCount+0x1c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004898:	687b      	ldr	r3, [r7, #4]
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20000dbc 	.word	0x20000dbc

080048ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048b6:	4b4f      	ldr	r3, [pc, #316]	; (80049f4 <xTaskIncrementTick+0x148>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f040 808f 	bne.w	80049de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048c0:	4b4d      	ldr	r3, [pc, #308]	; (80049f8 <xTaskIncrementTick+0x14c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048c8:	4a4b      	ldr	r2, [pc, #300]	; (80049f8 <xTaskIncrementTick+0x14c>)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d120      	bne.n	8004916 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048d4:	4b49      	ldr	r3, [pc, #292]	; (80049fc <xTaskIncrementTick+0x150>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	603b      	str	r3, [r7, #0]
}
 80048f0:	bf00      	nop
 80048f2:	e7fe      	b.n	80048f2 <xTaskIncrementTick+0x46>
 80048f4:	4b41      	ldr	r3, [pc, #260]	; (80049fc <xTaskIncrementTick+0x150>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	4b41      	ldr	r3, [pc, #260]	; (8004a00 <xTaskIncrementTick+0x154>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a3f      	ldr	r2, [pc, #252]	; (80049fc <xTaskIncrementTick+0x150>)
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	4a3f      	ldr	r2, [pc, #252]	; (8004a00 <xTaskIncrementTick+0x154>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	4b3e      	ldr	r3, [pc, #248]	; (8004a04 <xTaskIncrementTick+0x158>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	4a3d      	ldr	r2, [pc, #244]	; (8004a04 <xTaskIncrementTick+0x158>)
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	f000 fb79 	bl	8005008 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004916:	4b3c      	ldr	r3, [pc, #240]	; (8004a08 <xTaskIncrementTick+0x15c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	429a      	cmp	r2, r3
 800491e:	d349      	bcc.n	80049b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004920:	4b36      	ldr	r3, [pc, #216]	; (80049fc <xTaskIncrementTick+0x150>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d104      	bne.n	8004934 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800492a:	4b37      	ldr	r3, [pc, #220]	; (8004a08 <xTaskIncrementTick+0x15c>)
 800492c:	f04f 32ff 	mov.w	r2, #4294967295
 8004930:	601a      	str	r2, [r3, #0]
					break;
 8004932:	e03f      	b.n	80049b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004934:	4b31      	ldr	r3, [pc, #196]	; (80049fc <xTaskIncrementTick+0x150>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d203      	bcs.n	8004954 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800494c:	4a2e      	ldr	r2, [pc, #184]	; (8004a08 <xTaskIncrementTick+0x15c>)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004952:	e02f      	b.n	80049b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	3304      	adds	r3, #4
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe ff79 	bl	8003850 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	2b00      	cmp	r3, #0
 8004964:	d004      	beq.n	8004970 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	3318      	adds	r3, #24
 800496a:	4618      	mov	r0, r3
 800496c:	f7fe ff70 	bl	8003850 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <xTaskIncrementTick+0x160>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d903      	bls.n	8004984 <xTaskIncrementTick+0xd8>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	4a22      	ldr	r2, [pc, #136]	; (8004a0c <xTaskIncrementTick+0x160>)
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4a1f      	ldr	r2, [pc, #124]	; (8004a10 <xTaskIncrementTick+0x164>)
 8004992:	441a      	add	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f7fe fefb 	bl	8003796 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a4:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <xTaskIncrementTick+0x168>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3b8      	bcc.n	8004920 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049ae:	2301      	movs	r3, #1
 80049b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049b2:	e7b5      	b.n	8004920 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049b4:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <xTaskIncrementTick+0x168>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ba:	4915      	ldr	r1, [pc, #84]	; (8004a10 <xTaskIncrementTick+0x164>)
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d901      	bls.n	80049d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049d0:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <xTaskIncrementTick+0x16c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80049d8:	2301      	movs	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e004      	b.n	80049e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049de:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <xTaskIncrementTick+0x170>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	4a0d      	ldr	r2, [pc, #52]	; (8004a1c <xTaskIncrementTick+0x170>)
 80049e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049e8:	697b      	ldr	r3, [r7, #20]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20000de0 	.word	0x20000de0
 80049f8:	20000dbc 	.word	0x20000dbc
 80049fc:	20000d70 	.word	0x20000d70
 8004a00:	20000d74 	.word	0x20000d74
 8004a04:	20000dd0 	.word	0x20000dd0
 8004a08:	20000dd8 	.word	0x20000dd8
 8004a0c:	20000dc0 	.word	0x20000dc0
 8004a10:	200008e8 	.word	0x200008e8
 8004a14:	200008e4 	.word	0x200008e4
 8004a18:	20000dcc 	.word	0x20000dcc
 8004a1c:	20000dc8 	.word	0x20000dc8

08004a20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a26:	4b2a      	ldr	r3, [pc, #168]	; (8004ad0 <vTaskSwitchContext+0xb0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a2e:	4b29      	ldr	r3, [pc, #164]	; (8004ad4 <vTaskSwitchContext+0xb4>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a34:	e046      	b.n	8004ac4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004a36:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <vTaskSwitchContext+0xb4>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a3c:	4b26      	ldr	r3, [pc, #152]	; (8004ad8 <vTaskSwitchContext+0xb8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	e010      	b.n	8004a66 <vTaskSwitchContext+0x46>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10a      	bne.n	8004a60 <vTaskSwitchContext+0x40>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	607b      	str	r3, [r7, #4]
}
 8004a5c:	bf00      	nop
 8004a5e:	e7fe      	b.n	8004a5e <vTaskSwitchContext+0x3e>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	491d      	ldr	r1, [pc, #116]	; (8004adc <vTaskSwitchContext+0xbc>)
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0e4      	beq.n	8004a44 <vTaskSwitchContext+0x24>
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4a15      	ldr	r2, [pc, #84]	; (8004adc <vTaskSwitchContext+0xbc>)
 8004a86:	4413      	add	r3, r2
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	605a      	str	r2, [r3, #4]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d104      	bne.n	8004aaa <vTaskSwitchContext+0x8a>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	605a      	str	r2, [r3, #4]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <vTaskSwitchContext+0xc0>)
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	4a08      	ldr	r2, [pc, #32]	; (8004ad8 <vTaskSwitchContext+0xb8>)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004aba:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <vTaskSwitchContext+0xc0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3354      	adds	r3, #84	; 0x54
 8004ac0:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <vTaskSwitchContext+0xc4>)
 8004ac2:	6013      	str	r3, [r2, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	20000de0 	.word	0x20000de0
 8004ad4:	20000dcc 	.word	0x20000dcc
 8004ad8:	20000dc0 	.word	0x20000dc0
 8004adc:	200008e8 	.word	0x200008e8
 8004ae0:	200008e4 	.word	0x200008e4
 8004ae4:	20000014 	.word	0x20000014

08004ae8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	60fb      	str	r3, [r7, #12]
}
 8004b0a:	bf00      	nop
 8004b0c:	e7fe      	b.n	8004b0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b0e:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <vTaskPlaceOnEventList+0x44>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3318      	adds	r3, #24
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fe fe61 	bl	80037de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	6838      	ldr	r0, [r7, #0]
 8004b20:	f000 fb36 	bl	8005190 <prvAddCurrentTaskToDelayedList>
}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	200008e4 	.word	0x200008e4

08004b30 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	617b      	str	r3, [r7, #20]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004b58:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	613b      	str	r3, [r7, #16]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004b76:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004b80:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b82:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3318      	adds	r3, #24
 8004b88:	4619      	mov	r1, r3
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7fe fe03 	bl	8003796 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b90:	2101      	movs	r1, #1
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fafc 	bl	8005190 <prvAddCurrentTaskToDelayedList>
}
 8004b98:	bf00      	nop
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000de0 	.word	0x20000de0
 8004ba4:	200008e4 	.word	0x200008e4

08004ba8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10a      	bne.n	8004bd0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	617b      	str	r3, [r7, #20]
}
 8004bcc:	bf00      	nop
 8004bce:	e7fe      	b.n	8004bce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <vTaskPlaceOnEventListRestricted+0x54>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3318      	adds	r3, #24
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7fe fddc 	bl	8003796 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
 8004be8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	68b8      	ldr	r0, [r7, #8]
 8004bee:	f000 facf 	bl	8005190 <prvAddCurrentTaskToDelayedList>
	}
 8004bf2:	bf00      	nop
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	200008e4 	.word	0x200008e4

08004c00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	60fb      	str	r3, [r7, #12]
}
 8004c28:	bf00      	nop
 8004c2a:	e7fe      	b.n	8004c2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	3318      	adds	r3, #24
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fe fe0d 	bl	8003850 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c36:	4b1e      	ldr	r3, [pc, #120]	; (8004cb0 <xTaskRemoveFromEventList+0xb0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d11d      	bne.n	8004c7a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	3304      	adds	r3, #4
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe fe04 	bl	8003850 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4c:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <xTaskRemoveFromEventList+0xb4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d903      	bls.n	8004c5c <xTaskRemoveFromEventList+0x5c>
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	4a16      	ldr	r2, [pc, #88]	; (8004cb4 <xTaskRemoveFromEventList+0xb4>)
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4a13      	ldr	r2, [pc, #76]	; (8004cb8 <xTaskRemoveFromEventList+0xb8>)
 8004c6a:	441a      	add	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f7fe fd8f 	bl	8003796 <vListInsertEnd>
 8004c78:	e005      	b.n	8004c86 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	3318      	adds	r3, #24
 8004c7e:	4619      	mov	r1, r3
 8004c80:	480e      	ldr	r0, [pc, #56]	; (8004cbc <xTaskRemoveFromEventList+0xbc>)
 8004c82:	f7fe fd88 	bl	8003796 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <xTaskRemoveFromEventList+0xc0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d905      	bls.n	8004ca0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c94:	2301      	movs	r3, #1
 8004c96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <xTaskRemoveFromEventList+0xc4>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e001      	b.n	8004ca4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ca4:	697b      	ldr	r3, [r7, #20]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000de0 	.word	0x20000de0
 8004cb4:	20000dc0 	.word	0x20000dc0
 8004cb8:	200008e8 	.word	0x200008e8
 8004cbc:	20000d78 	.word	0x20000d78
 8004cc0:	200008e4 	.word	0x200008e4
 8004cc4:	20000dcc 	.word	0x20000dcc

08004cc8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004cd2:	4b29      	ldr	r3, [pc, #164]	; (8004d78 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	613b      	str	r3, [r7, #16]
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10a      	bne.n	8004d1c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	60fb      	str	r3, [r7, #12]
}
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7fe fd97 	bl	8003850 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	3304      	adds	r3, #4
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe fd92 	bl	8003850 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d30:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d903      	bls.n	8004d40 <vTaskRemoveFromUnorderedEventList+0x78>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4a0c      	ldr	r2, [pc, #48]	; (8004d80 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004d4e:	441a      	add	r2, r3
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f7fe fd1d 	bl	8003796 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d60:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d902      	bls.n	8004d70 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004d6a:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
	}
}
 8004d70:	bf00      	nop
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000de0 	.word	0x20000de0
 8004d7c:	20000dc0 	.word	0x20000dc0
 8004d80:	200008e8 	.word	0x200008e8
 8004d84:	200008e4 	.word	0x200008e4
 8004d88:	20000dcc 	.word	0x20000dcc

08004d8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <vTaskInternalSetTimeOutState+0x24>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <vTaskInternalSetTimeOutState+0x28>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	605a      	str	r2, [r3, #4]
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	20000dd0 	.word	0x20000dd0
 8004db4:	20000dbc 	.word	0x20000dbc

08004db8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	613b      	str	r3, [r7, #16]
}
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	60fb      	str	r3, [r7, #12]
}
 8004df6:	bf00      	nop
 8004df8:	e7fe      	b.n	8004df8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004dfa:	f000 febb 	bl	8005b74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004dfe:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <xTaskCheckForTimeOut+0xbc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d102      	bne.n	8004e1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61fb      	str	r3, [r7, #28]
 8004e1c:	e023      	b.n	8004e66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <xTaskCheckForTimeOut+0xc0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d007      	beq.n	8004e3a <xTaskCheckForTimeOut+0x82>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d302      	bcc.n	8004e3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e34:	2301      	movs	r3, #1
 8004e36:	61fb      	str	r3, [r7, #28]
 8004e38:	e015      	b.n	8004e66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d20b      	bcs.n	8004e5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	1ad2      	subs	r2, r2, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff ff9b 	bl	8004d8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	e004      	b.n	8004e66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e62:	2301      	movs	r3, #1
 8004e64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e66:	f000 feb5 	bl	8005bd4 <vPortExitCritical>

	return xReturn;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3720      	adds	r7, #32
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20000dbc 	.word	0x20000dbc
 8004e78:	20000dd0 	.word	0x20000dd0

08004e7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e80:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <vTaskMissedYield+0x14>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	601a      	str	r2, [r3, #0]
}
 8004e86:	bf00      	nop
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	20000dcc 	.word	0x20000dcc

08004e94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e9c:	f000 f852 	bl	8004f44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <prvIdleTask+0x28>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d9f9      	bls.n	8004e9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <prvIdleTask+0x2c>)
 8004eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004eb8:	e7f0      	b.n	8004e9c <prvIdleTask+0x8>
 8004eba:	bf00      	nop
 8004ebc:	200008e8 	.word	0x200008e8
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eca:	2300      	movs	r3, #0
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	e00c      	b.n	8004eea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4a12      	ldr	r2, [pc, #72]	; (8004f24 <prvInitialiseTaskLists+0x60>)
 8004edc:	4413      	add	r3, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fe fc2c 	bl	800373c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	607b      	str	r3, [r7, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b37      	cmp	r3, #55	; 0x37
 8004eee:	d9ef      	bls.n	8004ed0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ef0:	480d      	ldr	r0, [pc, #52]	; (8004f28 <prvInitialiseTaskLists+0x64>)
 8004ef2:	f7fe fc23 	bl	800373c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ef6:	480d      	ldr	r0, [pc, #52]	; (8004f2c <prvInitialiseTaskLists+0x68>)
 8004ef8:	f7fe fc20 	bl	800373c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004efc:	480c      	ldr	r0, [pc, #48]	; (8004f30 <prvInitialiseTaskLists+0x6c>)
 8004efe:	f7fe fc1d 	bl	800373c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f02:	480c      	ldr	r0, [pc, #48]	; (8004f34 <prvInitialiseTaskLists+0x70>)
 8004f04:	f7fe fc1a 	bl	800373c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f08:	480b      	ldr	r0, [pc, #44]	; (8004f38 <prvInitialiseTaskLists+0x74>)
 8004f0a:	f7fe fc17 	bl	800373c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f0e:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <prvInitialiseTaskLists+0x78>)
 8004f10:	4a05      	ldr	r2, [pc, #20]	; (8004f28 <prvInitialiseTaskLists+0x64>)
 8004f12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <prvInitialiseTaskLists+0x7c>)
 8004f16:	4a05      	ldr	r2, [pc, #20]	; (8004f2c <prvInitialiseTaskLists+0x68>)
 8004f18:	601a      	str	r2, [r3, #0]
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	200008e8 	.word	0x200008e8
 8004f28:	20000d48 	.word	0x20000d48
 8004f2c:	20000d5c 	.word	0x20000d5c
 8004f30:	20000d78 	.word	0x20000d78
 8004f34:	20000d8c 	.word	0x20000d8c
 8004f38:	20000da4 	.word	0x20000da4
 8004f3c:	20000d70 	.word	0x20000d70
 8004f40:	20000d74 	.word	0x20000d74

08004f44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f4a:	e019      	b.n	8004f80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f4c:	f000 fe12 	bl	8005b74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f50:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <prvCheckTasksWaitingTermination+0x50>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fe fc77 	bl	8003850 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <prvCheckTasksWaitingTermination+0x54>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	4a0b      	ldr	r2, [pc, #44]	; (8004f98 <prvCheckTasksWaitingTermination+0x54>)
 8004f6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <prvCheckTasksWaitingTermination+0x58>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <prvCheckTasksWaitingTermination+0x58>)
 8004f74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f76:	f000 fe2d 	bl	8005bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f810 	bl	8004fa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <prvCheckTasksWaitingTermination+0x58>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e1      	bne.n	8004f4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f88:	bf00      	nop
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000d8c 	.word	0x20000d8c
 8004f98:	20000db8 	.word	0x20000db8
 8004f9c:	20000da0 	.word	0x20000da0

08004fa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3354      	adds	r3, #84	; 0x54
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 f9d1 	bl	8006354 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d108      	bne.n	8004fce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 ffc5 	bl	8005f50 <vPortFree>
				vPortFree( pxTCB );
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 ffc2 	bl	8005f50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004fcc:	e018      	b.n	8005000 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d103      	bne.n	8004fe0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 ffb9 	bl	8005f50 <vPortFree>
	}
 8004fde:	e00f      	b.n	8005000 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d00a      	beq.n	8005000 <prvDeleteTCB+0x60>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	60fb      	str	r3, [r7, #12]
}
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <prvDeleteTCB+0x5e>
	}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800500e:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <prvResetNextTaskUnblockTime+0x38>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <prvResetNextTaskUnblockTime+0x3c>)
 800501a:	f04f 32ff 	mov.w	r2, #4294967295
 800501e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005020:	e008      	b.n	8005034 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005022:	4b07      	ldr	r3, [pc, #28]	; (8005040 <prvResetNextTaskUnblockTime+0x38>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	4a04      	ldr	r2, [pc, #16]	; (8005044 <prvResetNextTaskUnblockTime+0x3c>)
 8005032:	6013      	str	r3, [r2, #0]
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	20000d70 	.word	0x20000d70
 8005044:	20000dd8 	.word	0x20000dd8

08005048 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800504e:	4b0b      	ldr	r3, [pc, #44]	; (800507c <xTaskGetSchedulerState+0x34>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005056:	2301      	movs	r3, #1
 8005058:	607b      	str	r3, [r7, #4]
 800505a:	e008      	b.n	800506e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800505c:	4b08      	ldr	r3, [pc, #32]	; (8005080 <xTaskGetSchedulerState+0x38>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005064:	2302      	movs	r3, #2
 8005066:	607b      	str	r3, [r7, #4]
 8005068:	e001      	b.n	800506e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800506a:	2300      	movs	r3, #0
 800506c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800506e:	687b      	ldr	r3, [r7, #4]
	}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	20000dc4 	.word	0x20000dc4
 8005080:	20000de0 	.word	0x20000de0

08005084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d056      	beq.n	8005148 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800509a:	4b2e      	ldr	r3, [pc, #184]	; (8005154 <xTaskPriorityDisinherit+0xd0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d00a      	beq.n	80050ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	60fb      	str	r3, [r7, #12]
}
 80050b6:	bf00      	nop
 80050b8:	e7fe      	b.n	80050b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	60bb      	str	r3, [r7, #8]
}
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050dc:	1e5a      	subs	r2, r3, #1
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d02c      	beq.n	8005148 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d128      	bne.n	8005148 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe fba8 	bl	8003850 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <xTaskPriorityDisinherit+0xd4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d903      	bls.n	8005128 <xTaskPriorityDisinherit+0xa4>
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	4a0c      	ldr	r2, [pc, #48]	; (8005158 <xTaskPriorityDisinherit+0xd4>)
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4a09      	ldr	r2, [pc, #36]	; (800515c <xTaskPriorityDisinherit+0xd8>)
 8005136:	441a      	add	r2, r3
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f7fe fb29 	bl	8003796 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005144:	2301      	movs	r3, #1
 8005146:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005148:	697b      	ldr	r3, [r7, #20]
	}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	200008e4 	.word	0x200008e4
 8005158:	20000dc0 	.word	0x20000dc0
 800515c:	200008e8 	.word	0x200008e8

08005160 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <uxTaskResetEventItemValue+0x2c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800516e:	4b07      	ldr	r3, [pc, #28]	; (800518c <uxTaskResetEventItemValue+0x2c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <uxTaskResetEventItemValue+0x2c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800517c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800517e:	687b      	ldr	r3, [r7, #4]
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	200008e4 	.word	0x200008e4

08005190 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800519a:	4b21      	ldr	r3, [pc, #132]	; (8005220 <prvAddCurrentTaskToDelayedList+0x90>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051a0:	4b20      	ldr	r3, [pc, #128]	; (8005224 <prvAddCurrentTaskToDelayedList+0x94>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3304      	adds	r3, #4
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe fb52 	bl	8003850 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b2:	d10a      	bne.n	80051ca <prvAddCurrentTaskToDelayedList+0x3a>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d007      	beq.n	80051ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ba:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <prvAddCurrentTaskToDelayedList+0x94>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3304      	adds	r3, #4
 80051c0:	4619      	mov	r1, r3
 80051c2:	4819      	ldr	r0, [pc, #100]	; (8005228 <prvAddCurrentTaskToDelayedList+0x98>)
 80051c4:	f7fe fae7 	bl	8003796 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051c8:	e026      	b.n	8005218 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4413      	add	r3, r2
 80051d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051d2:	4b14      	ldr	r3, [pc, #80]	; (8005224 <prvAddCurrentTaskToDelayedList+0x94>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d209      	bcs.n	80051f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051e2:	4b12      	ldr	r3, [pc, #72]	; (800522c <prvAddCurrentTaskToDelayedList+0x9c>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <prvAddCurrentTaskToDelayedList+0x94>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3304      	adds	r3, #4
 80051ec:	4619      	mov	r1, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	f7fe faf5 	bl	80037de <vListInsert>
}
 80051f4:	e010      	b.n	8005218 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051f6:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <prvAddCurrentTaskToDelayedList+0xa0>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <prvAddCurrentTaskToDelayedList+0x94>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3304      	adds	r3, #4
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f7fe faeb 	bl	80037de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <prvAddCurrentTaskToDelayedList+0xa4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	d202      	bcs.n	8005218 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005212:	4a08      	ldr	r2, [pc, #32]	; (8005234 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	6013      	str	r3, [r2, #0]
}
 8005218:	bf00      	nop
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	20000dbc 	.word	0x20000dbc
 8005224:	200008e4 	.word	0x200008e4
 8005228:	20000da4 	.word	0x20000da4
 800522c:	20000d74 	.word	0x20000d74
 8005230:	20000d70 	.word	0x20000d70
 8005234:	20000dd8 	.word	0x20000dd8

08005238 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005242:	f000 fb07 	bl	8005854 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005246:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <xTimerCreateTimerTask+0x80>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d021      	beq.n	8005292 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005256:	1d3a      	adds	r2, r7, #4
 8005258:	f107 0108 	add.w	r1, r7, #8
 800525c:	f107 030c 	add.w	r3, r7, #12
 8005260:	4618      	mov	r0, r3
 8005262:	f7fe f89b 	bl	800339c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	9202      	str	r2, [sp, #8]
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	2302      	movs	r3, #2
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2300      	movs	r3, #0
 8005276:	460a      	mov	r2, r1
 8005278:	4910      	ldr	r1, [pc, #64]	; (80052bc <xTimerCreateTimerTask+0x84>)
 800527a:	4811      	ldr	r0, [pc, #68]	; (80052c0 <xTimerCreateTimerTask+0x88>)
 800527c:	f7fe fffe 	bl	800427c <xTaskCreateStatic>
 8005280:	4603      	mov	r3, r0
 8005282:	4a10      	ldr	r2, [pc, #64]	; (80052c4 <xTimerCreateTimerTask+0x8c>)
 8005284:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005286:	4b0f      	ldr	r3, [pc, #60]	; (80052c4 <xTimerCreateTimerTask+0x8c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800528e:	2301      	movs	r3, #1
 8005290:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	613b      	str	r3, [r7, #16]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80052ae:	697b      	ldr	r3, [r7, #20]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000e14 	.word	0x20000e14
 80052bc:	08006ce4 	.word	0x08006ce4
 80052c0:	080053fd 	.word	0x080053fd
 80052c4:	20000e18 	.word	0x20000e18

080052c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	623b      	str	r3, [r7, #32]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80052f6:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <xTimerGenericCommand+0x98>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d02a      	beq.n	8005354 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b05      	cmp	r3, #5
 800530e:	dc18      	bgt.n	8005342 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005310:	f7ff fe9a 	bl	8005048 <xTaskGetSchedulerState>
 8005314:	4603      	mov	r3, r0
 8005316:	2b02      	cmp	r3, #2
 8005318:	d109      	bne.n	800532e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800531a:	4b11      	ldr	r3, [pc, #68]	; (8005360 <xTimerGenericCommand+0x98>)
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	f107 0110 	add.w	r1, r7, #16
 8005322:	2300      	movs	r3, #0
 8005324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005326:	f7fe fbc1 	bl	8003aac <xQueueGenericSend>
 800532a:	6278      	str	r0, [r7, #36]	; 0x24
 800532c:	e012      	b.n	8005354 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800532e:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <xTimerGenericCommand+0x98>)
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	f107 0110 	add.w	r1, r7, #16
 8005336:	2300      	movs	r3, #0
 8005338:	2200      	movs	r2, #0
 800533a:	f7fe fbb7 	bl	8003aac <xQueueGenericSend>
 800533e:	6278      	str	r0, [r7, #36]	; 0x24
 8005340:	e008      	b.n	8005354 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005342:	4b07      	ldr	r3, [pc, #28]	; (8005360 <xTimerGenericCommand+0x98>)
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	f107 0110 	add.w	r1, r7, #16
 800534a:	2300      	movs	r3, #0
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	f7fe fcab 	bl	8003ca8 <xQueueGenericSendFromISR>
 8005352:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005356:	4618      	mov	r0, r3
 8005358:	3728      	adds	r7, #40	; 0x28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000e14 	.word	0x20000e14

08005364 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af02      	add	r7, sp, #8
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800536e:	4b22      	ldr	r3, [pc, #136]	; (80053f8 <prvProcessExpiredTimer+0x94>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	3304      	adds	r3, #4
 800537c:	4618      	mov	r0, r3
 800537e:	f7fe fa67 	bl	8003850 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d022      	beq.n	80053d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	699a      	ldr	r2, [r3, #24]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	18d1      	adds	r1, r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	6978      	ldr	r0, [r7, #20]
 800539e:	f000 f8d1 	bl	8005544 <prvInsertTimerInActiveList>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01f      	beq.n	80053e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053a8:	2300      	movs	r3, #0
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	2300      	movs	r3, #0
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	2100      	movs	r1, #0
 80053b2:	6978      	ldr	r0, [r7, #20]
 80053b4:	f7ff ff88 	bl	80052c8 <xTimerGenericCommand>
 80053b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d113      	bne.n	80053e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	60fb      	str	r3, [r7, #12]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	6978      	ldr	r0, [r7, #20]
 80053ee:	4798      	blx	r3
}
 80053f0:	bf00      	nop
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20000e0c 	.word	0x20000e0c

080053fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005404:	f107 0308 	add.w	r3, r7, #8
 8005408:	4618      	mov	r0, r3
 800540a:	f000 f857 	bl	80054bc <prvGetNextExpireTime>
 800540e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4619      	mov	r1, r3
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f803 	bl	8005420 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800541a:	f000 f8d5 	bl	80055c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800541e:	e7f1      	b.n	8005404 <prvTimerTask+0x8>

08005420 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800542a:	f7ff f983 	bl	8004734 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800542e:	f107 0308 	add.w	r3, r7, #8
 8005432:	4618      	mov	r0, r3
 8005434:	f000 f866 	bl	8005504 <prvSampleTimeNow>
 8005438:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d130      	bne.n	80054a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <prvProcessTimerOrBlockTask+0x3c>
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	429a      	cmp	r2, r3
 800544c:	d806      	bhi.n	800545c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800544e:	f7ff f97f 	bl	8004750 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff ff85 	bl	8005364 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800545a:	e024      	b.n	80054a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005462:	4b13      	ldr	r3, [pc, #76]	; (80054b0 <prvProcessTimerOrBlockTask+0x90>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <prvProcessTimerOrBlockTask+0x50>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <prvProcessTimerOrBlockTask+0x52>
 8005470:	2300      	movs	r3, #0
 8005472:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005474:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <prvProcessTimerOrBlockTask+0x94>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	4619      	mov	r1, r3
 8005482:	f7fe fec7 	bl	8004214 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005486:	f7ff f963 	bl	8004750 <xTaskResumeAll>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <prvProcessTimerOrBlockTask+0x98>)
 8005492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	f3bf 8f6f 	isb	sy
}
 80054a0:	e001      	b.n	80054a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80054a2:	f7ff f955 	bl	8004750 <xTaskResumeAll>
}
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20000e10 	.word	0x20000e10
 80054b4:	20000e14 	.word	0x20000e14
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054c4:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <prvGetNextExpireTime+0x44>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <prvGetNextExpireTime+0x16>
 80054ce:	2201      	movs	r2, #1
 80054d0:	e000      	b.n	80054d4 <prvGetNextExpireTime+0x18>
 80054d2:	2200      	movs	r2, #0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d105      	bne.n	80054ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <prvGetNextExpireTime+0x44>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	e001      	b.n	80054f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80054f0:	68fb      	ldr	r3, [r7, #12]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000e0c 	.word	0x20000e0c

08005504 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800550c:	f7ff f9be 	bl	800488c <xTaskGetTickCount>
 8005510:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005512:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <prvSampleTimeNow+0x3c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	429a      	cmp	r2, r3
 800551a:	d205      	bcs.n	8005528 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800551c:	f000 f936 	bl	800578c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	e002      	b.n	800552e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800552e:	4a04      	ldr	r2, [pc, #16]	; (8005540 <prvSampleTimeNow+0x3c>)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005534:	68fb      	ldr	r3, [r7, #12]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000e1c 	.word	0x20000e1c

08005544 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	429a      	cmp	r2, r3
 8005568:	d812      	bhi.n	8005590 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	429a      	cmp	r2, r3
 8005576:	d302      	bcc.n	800557e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005578:	2301      	movs	r3, #1
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	e01b      	b.n	80055b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800557e:	4b10      	ldr	r3, [pc, #64]	; (80055c0 <prvInsertTimerInActiveList+0x7c>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3304      	adds	r3, #4
 8005586:	4619      	mov	r1, r3
 8005588:	4610      	mov	r0, r2
 800558a:	f7fe f928 	bl	80037de <vListInsert>
 800558e:	e012      	b.n	80055b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d206      	bcs.n	80055a6 <prvInsertTimerInActiveList+0x62>
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d302      	bcc.n	80055a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80055a0:	2301      	movs	r3, #1
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e007      	b.n	80055b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055a6:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <prvInsertTimerInActiveList+0x80>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3304      	adds	r3, #4
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f7fe f914 	bl	80037de <vListInsert>
		}
	}

	return xProcessTimerNow;
 80055b6:	697b      	ldr	r3, [r7, #20]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20000e10 	.word	0x20000e10
 80055c4:	20000e0c 	.word	0x20000e0c

080055c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08e      	sub	sp, #56	; 0x38
 80055cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055ce:	e0ca      	b.n	8005766 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da18      	bge.n	8005608 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80055d6:	1d3b      	adds	r3, r7, #4
 80055d8:	3304      	adds	r3, #4
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	61fb      	str	r3, [r7, #28]
}
 80055f4:	bf00      	nop
 80055f6:	e7fe      	b.n	80055f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055fe:	6850      	ldr	r0, [r2, #4]
 8005600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005602:	6892      	ldr	r2, [r2, #8]
 8005604:	4611      	mov	r1, r2
 8005606:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f2c0 80aa 	blt.w	8005764 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	3304      	adds	r3, #4
 8005620:	4618      	mov	r0, r3
 8005622:	f7fe f915 	bl	8003850 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005626:	463b      	mov	r3, r7
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ff6b 	bl	8005504 <prvSampleTimeNow>
 800562e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b09      	cmp	r3, #9
 8005634:	f200 8097 	bhi.w	8005766 <prvProcessReceivedCommands+0x19e>
 8005638:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <prvProcessReceivedCommands+0x78>)
 800563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563e:	bf00      	nop
 8005640:	08005669 	.word	0x08005669
 8005644:	08005669 	.word	0x08005669
 8005648:	08005669 	.word	0x08005669
 800564c:	080056dd 	.word	0x080056dd
 8005650:	080056f1 	.word	0x080056f1
 8005654:	0800573b 	.word	0x0800573b
 8005658:	08005669 	.word	0x08005669
 800565c:	08005669 	.word	0x08005669
 8005660:	080056dd 	.word	0x080056dd
 8005664:	080056f1 	.word	0x080056f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	b2da      	uxtb	r2, r3
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	18d1      	adds	r1, r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005688:	f7ff ff5c 	bl	8005544 <prvInsertTimerInActiveList>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d069      	beq.n	8005766 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005698:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d05e      	beq.n	8005766 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	441a      	add	r2, r3
 80056b0:	2300      	movs	r3, #0
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	2300      	movs	r3, #0
 80056b6:	2100      	movs	r1, #0
 80056b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ba:	f7ff fe05 	bl	80052c8 <xTimerGenericCommand>
 80056be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d14f      	bne.n	8005766 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	61bb      	str	r3, [r7, #24]
}
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056e2:	f023 0301 	bic.w	r3, r3, #1
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80056ee:	e03a      	b.n	8005766 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	617b      	str	r3, [r7, #20]
}
 8005722:	bf00      	nop
 8005724:	e7fe      	b.n	8005724 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	18d1      	adds	r1, r2, r3
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005734:	f7ff ff06 	bl	8005544 <prvInsertTimerInActiveList>
					break;
 8005738:	e015      	b.n	8005766 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d103      	bne.n	8005750 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800574a:	f000 fc01 	bl	8005f50 <vPortFree>
 800574e:	e00a      	b.n	8005766 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005756:	f023 0301 	bic.w	r3, r3, #1
 800575a:	b2da      	uxtb	r2, r3
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005762:	e000      	b.n	8005766 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005764:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005766:	4b08      	ldr	r3, [pc, #32]	; (8005788 <prvProcessReceivedCommands+0x1c0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	1d39      	adds	r1, r7, #4
 800576c:	2200      	movs	r2, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe fb36 	bl	8003de0 <xQueueReceive>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	f47f af2a 	bne.w	80055d0 <prvProcessReceivedCommands+0x8>
	}
}
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	3730      	adds	r7, #48	; 0x30
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000e14 	.word	0x20000e14

0800578c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005792:	e048      	b.n	8005826 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005794:	4b2d      	ldr	r3, [pc, #180]	; (800584c <prvSwitchTimerLists+0xc0>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800579e:	4b2b      	ldr	r3, [pc, #172]	; (800584c <prvSwitchTimerLists+0xc0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fe f84f 	bl	8003850 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d02e      	beq.n	8005826 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4413      	add	r3, r2
 80057d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d90e      	bls.n	80057f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057e6:	4b19      	ldr	r3, [pc, #100]	; (800584c <prvSwitchTimerLists+0xc0>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f7fd fff4 	bl	80037de <vListInsert>
 80057f6:	e016      	b.n	8005826 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057f8:	2300      	movs	r3, #0
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	2300      	movs	r3, #0
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	2100      	movs	r1, #0
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fd60 	bl	80052c8 <xTimerGenericCommand>
 8005808:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	603b      	str	r3, [r7, #0]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005826:	4b09      	ldr	r3, [pc, #36]	; (800584c <prvSwitchTimerLists+0xc0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1b1      	bne.n	8005794 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005830:	4b06      	ldr	r3, [pc, #24]	; (800584c <prvSwitchTimerLists+0xc0>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005836:	4b06      	ldr	r3, [pc, #24]	; (8005850 <prvSwitchTimerLists+0xc4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a04      	ldr	r2, [pc, #16]	; (800584c <prvSwitchTimerLists+0xc0>)
 800583c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800583e:	4a04      	ldr	r2, [pc, #16]	; (8005850 <prvSwitchTimerLists+0xc4>)
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	6013      	str	r3, [r2, #0]
}
 8005844:	bf00      	nop
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000e0c 	.word	0x20000e0c
 8005850:	20000e10 	.word	0x20000e10

08005854 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800585a:	f000 f98b 	bl	8005b74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800585e:	4b15      	ldr	r3, [pc, #84]	; (80058b4 <prvCheckForValidListAndQueue+0x60>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d120      	bne.n	80058a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005866:	4814      	ldr	r0, [pc, #80]	; (80058b8 <prvCheckForValidListAndQueue+0x64>)
 8005868:	f7fd ff68 	bl	800373c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800586c:	4813      	ldr	r0, [pc, #76]	; (80058bc <prvCheckForValidListAndQueue+0x68>)
 800586e:	f7fd ff65 	bl	800373c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005872:	4b13      	ldr	r3, [pc, #76]	; (80058c0 <prvCheckForValidListAndQueue+0x6c>)
 8005874:	4a10      	ldr	r2, [pc, #64]	; (80058b8 <prvCheckForValidListAndQueue+0x64>)
 8005876:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005878:	4b12      	ldr	r3, [pc, #72]	; (80058c4 <prvCheckForValidListAndQueue+0x70>)
 800587a:	4a10      	ldr	r2, [pc, #64]	; (80058bc <prvCheckForValidListAndQueue+0x68>)
 800587c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800587e:	2300      	movs	r3, #0
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <prvCheckForValidListAndQueue+0x74>)
 8005884:	4a11      	ldr	r2, [pc, #68]	; (80058cc <prvCheckForValidListAndQueue+0x78>)
 8005886:	2110      	movs	r1, #16
 8005888:	200a      	movs	r0, #10
 800588a:	f7fe f873 	bl	8003974 <xQueueGenericCreateStatic>
 800588e:	4603      	mov	r3, r0
 8005890:	4a08      	ldr	r2, [pc, #32]	; (80058b4 <prvCheckForValidListAndQueue+0x60>)
 8005892:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005894:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <prvCheckForValidListAndQueue+0x60>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800589c:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <prvCheckForValidListAndQueue+0x60>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	490b      	ldr	r1, [pc, #44]	; (80058d0 <prvCheckForValidListAndQueue+0x7c>)
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fe fc8c 	bl	80041c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058a8:	f000 f994 	bl	8005bd4 <vPortExitCritical>
}
 80058ac:	bf00      	nop
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000e14 	.word	0x20000e14
 80058b8:	20000de4 	.word	0x20000de4
 80058bc:	20000df8 	.word	0x20000df8
 80058c0:	20000e0c 	.word	0x20000e0c
 80058c4:	20000e10 	.word	0x20000e10
 80058c8:	20000ec0 	.word	0x20000ec0
 80058cc:	20000e20 	.word	0x20000e20
 80058d0:	08006cec 	.word	0x08006cec

080058d4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08a      	sub	sp, #40	; 0x28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80058e2:	f06f 0301 	mvn.w	r3, #1
 80058e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <xTimerPendFunctionCallFromISR+0x3c>)
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	f107 0114 	add.w	r1, r7, #20
 80058fc:	2300      	movs	r3, #0
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	f7fe f9d2 	bl	8003ca8 <xQueueGenericSendFromISR>
 8005904:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005908:	4618      	mov	r0, r3
 800590a:	3728      	adds	r7, #40	; 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20000e14 	.word	0x20000e14

08005914 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3b04      	subs	r3, #4
 8005924:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800592c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3b04      	subs	r3, #4
 8005932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f023 0201 	bic.w	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3b04      	subs	r3, #4
 8005942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005944:	4a0c      	ldr	r2, [pc, #48]	; (8005978 <pxPortInitialiseStack+0x64>)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3b14      	subs	r3, #20
 800594e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3b04      	subs	r3, #4
 800595a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f06f 0202 	mvn.w	r2, #2
 8005962:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3b20      	subs	r3, #32
 8005968:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800596a:	68fb      	ldr	r3, [r7, #12]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	0800597d 	.word	0x0800597d

0800597c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005986:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <prvTaskExitError+0x54>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598e:	d00a      	beq.n	80059a6 <prvTaskExitError+0x2a>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	60fb      	str	r3, [r7, #12]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <prvTaskExitError+0x28>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	60bb      	str	r3, [r7, #8]
}
 80059b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059ba:	bf00      	nop
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0fc      	beq.n	80059bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059c2:	bf00      	nop
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	20000010 	.word	0x20000010
	...

080059e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <pxCurrentTCBConst2>)
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	6808      	ldr	r0, [r1, #0]
 80059e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	f380 8809 	msr	PSP, r0
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f380 8811 	msr	BASEPRI, r0
 80059fa:	4770      	bx	lr
 80059fc:	f3af 8000 	nop.w

08005a00 <pxCurrentTCBConst2>:
 8005a00:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop

08005a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a08:	4808      	ldr	r0, [pc, #32]	; (8005a2c <prvPortStartFirstTask+0x24>)
 8005a0a:	6800      	ldr	r0, [r0, #0]
 8005a0c:	6800      	ldr	r0, [r0, #0]
 8005a0e:	f380 8808 	msr	MSP, r0
 8005a12:	f04f 0000 	mov.w	r0, #0
 8005a16:	f380 8814 	msr	CONTROL, r0
 8005a1a:	b662      	cpsie	i
 8005a1c:	b661      	cpsie	f
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	df00      	svc	0
 8005a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a2a:	bf00      	nop
 8005a2c:	e000ed08 	.word	0xe000ed08

08005a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a36:	4b46      	ldr	r3, [pc, #280]	; (8005b50 <xPortStartScheduler+0x120>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a46      	ldr	r2, [pc, #280]	; (8005b54 <xPortStartScheduler+0x124>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d10a      	bne.n	8005a56 <xPortStartScheduler+0x26>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	613b      	str	r3, [r7, #16]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a56:	4b3e      	ldr	r3, [pc, #248]	; (8005b50 <xPortStartScheduler+0x120>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a3f      	ldr	r2, [pc, #252]	; (8005b58 <xPortStartScheduler+0x128>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d10a      	bne.n	8005a76 <xPortStartScheduler+0x46>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	60fb      	str	r3, [r7, #12]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a76:	4b39      	ldr	r3, [pc, #228]	; (8005b5c <xPortStartScheduler+0x12c>)
 8005a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	22ff      	movs	r2, #255	; 0xff
 8005a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	4b31      	ldr	r3, [pc, #196]	; (8005b60 <xPortStartScheduler+0x130>)
 8005a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a9e:	4b31      	ldr	r3, [pc, #196]	; (8005b64 <xPortStartScheduler+0x134>)
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aa4:	e009      	b.n	8005aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005aa6:	4b2f      	ldr	r3, [pc, #188]	; (8005b64 <xPortStartScheduler+0x134>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	4a2d      	ldr	r2, [pc, #180]	; (8005b64 <xPortStartScheduler+0x134>)
 8005aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b80      	cmp	r3, #128	; 0x80
 8005ac4:	d0ef      	beq.n	8005aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ac6:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <xPortStartScheduler+0x134>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1c3 0307 	rsb	r3, r3, #7
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d00a      	beq.n	8005ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	60bb      	str	r3, [r7, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	e7fe      	b.n	8005ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ae8:	4b1e      	ldr	r3, [pc, #120]	; (8005b64 <xPortStartScheduler+0x134>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	4a1d      	ldr	r2, [pc, #116]	; (8005b64 <xPortStartScheduler+0x134>)
 8005af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005af2:	4b1c      	ldr	r3, [pc, #112]	; (8005b64 <xPortStartScheduler+0x134>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005afa:	4a1a      	ldr	r2, [pc, #104]	; (8005b64 <xPortStartScheduler+0x134>)
 8005afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b06:	4b18      	ldr	r3, [pc, #96]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a17      	ldr	r2, [pc, #92]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b12:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b1e:	f000 f8dd 	bl	8005cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <xPortStartScheduler+0x13c>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b28:	f000 f8fc 	bl	8005d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b2c:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <xPortStartScheduler+0x140>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a0f      	ldr	r2, [pc, #60]	; (8005b70 <xPortStartScheduler+0x140>)
 8005b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b38:	f7ff ff66 	bl	8005a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b3c:	f7fe ff70 	bl	8004a20 <vTaskSwitchContext>
	prvTaskExitError();
 8005b40:	f7ff ff1c 	bl	800597c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	e000ed00 	.word	0xe000ed00
 8005b54:	410fc271 	.word	0x410fc271
 8005b58:	410fc270 	.word	0x410fc270
 8005b5c:	e000e400 	.word	0xe000e400
 8005b60:	20000f10 	.word	0x20000f10
 8005b64:	20000f14 	.word	0x20000f14
 8005b68:	e000ed20 	.word	0xe000ed20
 8005b6c:	20000010 	.word	0x20000010
 8005b70:	e000ef34 	.word	0xe000ef34

08005b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	607b      	str	r3, [r7, #4]
}
 8005b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <vPortEnterCritical+0x58>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3301      	adds	r3, #1
 8005b94:	4a0d      	ldr	r2, [pc, #52]	; (8005bcc <vPortEnterCritical+0x58>)
 8005b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <vPortEnterCritical+0x58>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d10f      	bne.n	8005bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <vPortEnterCritical+0x5c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	603b      	str	r3, [r7, #0]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <vPortEnterCritical+0x4a>
	}
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	20000010 	.word	0x20000010
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bda:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <vPortExitCritical+0x50>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <vPortExitCritical+0x24>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	607b      	str	r3, [r7, #4]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <vPortExitCritical+0x50>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	4a09      	ldr	r2, [pc, #36]	; (8005c24 <vPortExitCritical+0x50>)
 8005c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c02:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <vPortExitCritical+0x50>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d105      	bne.n	8005c16 <vPortExitCritical+0x42>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f383 8811 	msr	BASEPRI, r3
}
 8005c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20000010 	.word	0x20000010
	...

08005c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c30:	f3ef 8009 	mrs	r0, PSP
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <pxCurrentTCBConst>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	f01e 0f10 	tst.w	lr, #16
 8005c40:	bf08      	it	eq
 8005c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4a:	6010      	str	r0, [r2, #0]
 8005c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c54:	f380 8811 	msr	BASEPRI, r0
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f7fe fede 	bl	8004a20 <vTaskSwitchContext>
 8005c64:	f04f 0000 	mov.w	r0, #0
 8005c68:	f380 8811 	msr	BASEPRI, r0
 8005c6c:	bc09      	pop	{r0, r3}
 8005c6e:	6819      	ldr	r1, [r3, #0]
 8005c70:	6808      	ldr	r0, [r1, #0]
 8005c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c76:	f01e 0f10 	tst.w	lr, #16
 8005c7a:	bf08      	it	eq
 8005c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c80:	f380 8809 	msr	PSP, r0
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	f3af 8000 	nop.w

08005c90 <pxCurrentTCBConst>:
 8005c90:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop

08005c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	607b      	str	r3, [r7, #4]
}
 8005cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005cb2:	f7fe fdfb 	bl	80048ac <xTaskIncrementTick>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <xPortSysTickHandler+0x40>)
 8005cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f383 8811 	msr	BASEPRI, r3
}
 8005cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	e000ed04 	.word	0xe000ed04

08005cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <vPortSetupTimerInterrupt+0x34>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <vPortSetupTimerInterrupt+0x38>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cec:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <vPortSetupTimerInterrupt+0x3c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a0a      	ldr	r2, [pc, #40]	; (8005d1c <vPortSetupTimerInterrupt+0x40>)
 8005cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf6:	099b      	lsrs	r3, r3, #6
 8005cf8:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <vPortSetupTimerInterrupt+0x44>)
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cfe:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <vPortSetupTimerInterrupt+0x34>)
 8005d00:	2207      	movs	r2, #7
 8005d02:	601a      	str	r2, [r3, #0]
}
 8005d04:	bf00      	nop
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	e000e010 	.word	0xe000e010
 8005d14:	e000e018 	.word	0xe000e018
 8005d18:	20000004 	.word	0x20000004
 8005d1c:	10624dd3 	.word	0x10624dd3
 8005d20:	e000e014 	.word	0xe000e014

08005d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d34 <vPortEnableVFP+0x10>
 8005d28:	6801      	ldr	r1, [r0, #0]
 8005d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d2e:	6001      	str	r1, [r0, #0]
 8005d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d32:	bf00      	nop
 8005d34:	e000ed88 	.word	0xe000ed88

08005d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d3e:	f3ef 8305 	mrs	r3, IPSR
 8005d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b0f      	cmp	r3, #15
 8005d48:	d914      	bls.n	8005d74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d4a:	4a17      	ldr	r2, [pc, #92]	; (8005da8 <vPortValidateInterruptPriority+0x70>)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d54:	4b15      	ldr	r3, [pc, #84]	; (8005dac <vPortValidateInterruptPriority+0x74>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	7afa      	ldrb	r2, [r7, #11]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d20a      	bcs.n	8005d74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	607b      	str	r3, [r7, #4]
}
 8005d70:	bf00      	nop
 8005d72:	e7fe      	b.n	8005d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d74:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <vPortValidateInterruptPriority+0x78>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d7c:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <vPortValidateInterruptPriority+0x7c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d90a      	bls.n	8005d9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	603b      	str	r3, [r7, #0]
}
 8005d96:	bf00      	nop
 8005d98:	e7fe      	b.n	8005d98 <vPortValidateInterruptPriority+0x60>
	}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	e000e3f0 	.word	0xe000e3f0
 8005dac:	20000f10 	.word	0x20000f10
 8005db0:	e000ed0c 	.word	0xe000ed0c
 8005db4:	20000f14 	.word	0x20000f14

08005db8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08a      	sub	sp, #40	; 0x28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005dc4:	f7fe fcb6 	bl	8004734 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005dc8:	4b5b      	ldr	r3, [pc, #364]	; (8005f38 <pvPortMalloc+0x180>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005dd0:	f000 f920 	bl	8006014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005dd4:	4b59      	ldr	r3, [pc, #356]	; (8005f3c <pvPortMalloc+0x184>)
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f040 8093 	bne.w	8005f08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01d      	beq.n	8005e24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005de8:	2208      	movs	r2, #8
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4413      	add	r3, r2
 8005dee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d014      	beq.n	8005e24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f023 0307 	bic.w	r3, r3, #7
 8005e00:	3308      	adds	r3, #8
 8005e02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <pvPortMalloc+0x6c>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	617b      	str	r3, [r7, #20]
}
 8005e20:	bf00      	nop
 8005e22:	e7fe      	b.n	8005e22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d06e      	beq.n	8005f08 <pvPortMalloc+0x150>
 8005e2a:	4b45      	ldr	r3, [pc, #276]	; (8005f40 <pvPortMalloc+0x188>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d869      	bhi.n	8005f08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e34:	4b43      	ldr	r3, [pc, #268]	; (8005f44 <pvPortMalloc+0x18c>)
 8005e36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e38:	4b42      	ldr	r3, [pc, #264]	; (8005f44 <pvPortMalloc+0x18c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e3e:	e004      	b.n	8005e4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d903      	bls.n	8005e5c <pvPortMalloc+0xa4>
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1f1      	bne.n	8005e40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e5c:	4b36      	ldr	r3, [pc, #216]	; (8005f38 <pvPortMalloc+0x180>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d050      	beq.n	8005f08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2208      	movs	r2, #8
 8005e6c:	4413      	add	r3, r2
 8005e6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	1ad2      	subs	r2, r2, r3
 8005e80:	2308      	movs	r3, #8
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d91f      	bls.n	8005ec8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <pvPortMalloc+0xf8>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	613b      	str	r3, [r7, #16]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	1ad2      	subs	r2, r2, r3
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ec2:	69b8      	ldr	r0, [r7, #24]
 8005ec4:	f000 f908 	bl	80060d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <pvPortMalloc+0x188>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	4a1b      	ldr	r2, [pc, #108]	; (8005f40 <pvPortMalloc+0x188>)
 8005ed4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ed6:	4b1a      	ldr	r3, [pc, #104]	; (8005f40 <pvPortMalloc+0x188>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <pvPortMalloc+0x190>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d203      	bcs.n	8005eea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ee2:	4b17      	ldr	r3, [pc, #92]	; (8005f40 <pvPortMalloc+0x188>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <pvPortMalloc+0x190>)
 8005ee8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <pvPortMalloc+0x184>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005efe:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <pvPortMalloc+0x194>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3301      	adds	r3, #1
 8005f04:	4a11      	ldr	r2, [pc, #68]	; (8005f4c <pvPortMalloc+0x194>)
 8005f06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f08:	f7fe fc22 	bl	8004750 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <pvPortMalloc+0x174>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	60fb      	str	r3, [r7, #12]
}
 8005f28:	bf00      	nop
 8005f2a:	e7fe      	b.n	8005f2a <pvPortMalloc+0x172>
	return pvReturn;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3728      	adds	r7, #40	; 0x28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20004b20 	.word	0x20004b20
 8005f3c:	20004b34 	.word	0x20004b34
 8005f40:	20004b24 	.word	0x20004b24
 8005f44:	20004b18 	.word	0x20004b18
 8005f48:	20004b28 	.word	0x20004b28
 8005f4c:	20004b2c 	.word	0x20004b2c

08005f50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d04d      	beq.n	8005ffe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f62:	2308      	movs	r3, #8
 8005f64:	425b      	negs	r3, r3
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4413      	add	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	4b24      	ldr	r3, [pc, #144]	; (8006008 <vPortFree+0xb8>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <vPortFree+0x44>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	60fb      	str	r3, [r7, #12]
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <vPortFree+0x62>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60bb      	str	r3, [r7, #8]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	4b14      	ldr	r3, [pc, #80]	; (8006008 <vPortFree+0xb8>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01e      	beq.n	8005ffe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d11a      	bne.n	8005ffe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	4b0e      	ldr	r3, [pc, #56]	; (8006008 <vPortFree+0xb8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	401a      	ands	r2, r3
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fd8:	f7fe fbac 	bl	8004734 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	4b0a      	ldr	r3, [pc, #40]	; (800600c <vPortFree+0xbc>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	4a09      	ldr	r2, [pc, #36]	; (800600c <vPortFree+0xbc>)
 8005fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fea:	6938      	ldr	r0, [r7, #16]
 8005fec:	f000 f874 	bl	80060d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <vPortFree+0xc0>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	4a06      	ldr	r2, [pc, #24]	; (8006010 <vPortFree+0xc0>)
 8005ff8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005ffa:	f7fe fba9 	bl	8004750 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ffe:	bf00      	nop
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20004b34 	.word	0x20004b34
 800600c:	20004b24 	.word	0x20004b24
 8006010:	20004b30 	.word	0x20004b30

08006014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800601a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800601e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006020:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <prvHeapInit+0xac>)
 8006022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00c      	beq.n	8006048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3307      	adds	r3, #7
 8006032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0307 	bic.w	r3, r3, #7
 800603a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <prvHeapInit+0xac>)
 8006044:	4413      	add	r3, r2
 8006046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800604c:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <prvHeapInit+0xb0>)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006052:	4b1c      	ldr	r3, [pc, #112]	; (80060c4 <prvHeapInit+0xb0>)
 8006054:	2200      	movs	r2, #0
 8006056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	4413      	add	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006060:	2208      	movs	r2, #8
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1a9b      	subs	r3, r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0307 	bic.w	r3, r3, #7
 800606e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a15      	ldr	r2, [pc, #84]	; (80060c8 <prvHeapInit+0xb4>)
 8006074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <prvHeapInit+0xb4>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2200      	movs	r2, #0
 800607c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800607e:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <prvHeapInit+0xb4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006094:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <prvHeapInit+0xb4>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <prvHeapInit+0xb8>)
 80060a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <prvHeapInit+0xbc>)
 80060aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060ac:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <prvHeapInit+0xc0>)
 80060ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060b2:	601a      	str	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	20000f18 	.word	0x20000f18
 80060c4:	20004b18 	.word	0x20004b18
 80060c8:	20004b20 	.word	0x20004b20
 80060cc:	20004b28 	.word	0x20004b28
 80060d0:	20004b24 	.word	0x20004b24
 80060d4:	20004b34 	.word	0x20004b34

080060d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060e0:	4b28      	ldr	r3, [pc, #160]	; (8006184 <prvInsertBlockIntoFreeList+0xac>)
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	e002      	b.n	80060ec <prvInsertBlockIntoFreeList+0x14>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d8f7      	bhi.n	80060e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	4413      	add	r3, r2
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	429a      	cmp	r2, r3
 8006106:	d108      	bne.n	800611a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	441a      	add	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	441a      	add	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d118      	bne.n	8006160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b15      	ldr	r3, [pc, #84]	; (8006188 <prvInsertBlockIntoFreeList+0xb0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d00d      	beq.n	8006156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	441a      	add	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	e008      	b.n	8006168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006156:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <prvInsertBlockIntoFreeList+0xb0>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	e003      	b.n	8006168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	429a      	cmp	r2, r3
 800616e:	d002      	beq.n	8006176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	20004b18 	.word	0x20004b18
 8006188:	20004b20 	.word	0x20004b20

0800618c <__errno>:
 800618c:	4b01      	ldr	r3, [pc, #4]	; (8006194 <__errno+0x8>)
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	20000014 	.word	0x20000014

08006198 <__libc_init_array>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	4d0d      	ldr	r5, [pc, #52]	; (80061d0 <__libc_init_array+0x38>)
 800619c:	4c0d      	ldr	r4, [pc, #52]	; (80061d4 <__libc_init_array+0x3c>)
 800619e:	1b64      	subs	r4, r4, r5
 80061a0:	10a4      	asrs	r4, r4, #2
 80061a2:	2600      	movs	r6, #0
 80061a4:	42a6      	cmp	r6, r4
 80061a6:	d109      	bne.n	80061bc <__libc_init_array+0x24>
 80061a8:	4d0b      	ldr	r5, [pc, #44]	; (80061d8 <__libc_init_array+0x40>)
 80061aa:	4c0c      	ldr	r4, [pc, #48]	; (80061dc <__libc_init_array+0x44>)
 80061ac:	f000 fcf8 	bl	8006ba0 <_init>
 80061b0:	1b64      	subs	r4, r4, r5
 80061b2:	10a4      	asrs	r4, r4, #2
 80061b4:	2600      	movs	r6, #0
 80061b6:	42a6      	cmp	r6, r4
 80061b8:	d105      	bne.n	80061c6 <__libc_init_array+0x2e>
 80061ba:	bd70      	pop	{r4, r5, r6, pc}
 80061bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c0:	4798      	blx	r3
 80061c2:	3601      	adds	r6, #1
 80061c4:	e7ee      	b.n	80061a4 <__libc_init_array+0xc>
 80061c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ca:	4798      	blx	r3
 80061cc:	3601      	adds	r6, #1
 80061ce:	e7f2      	b.n	80061b6 <__libc_init_array+0x1e>
 80061d0:	08006da8 	.word	0x08006da8
 80061d4:	08006da8 	.word	0x08006da8
 80061d8:	08006da8 	.word	0x08006da8
 80061dc:	08006dac 	.word	0x08006dac

080061e0 <__retarget_lock_acquire_recursive>:
 80061e0:	4770      	bx	lr

080061e2 <__retarget_lock_release_recursive>:
 80061e2:	4770      	bx	lr

080061e4 <memcpy>:
 80061e4:	440a      	add	r2, r1
 80061e6:	4291      	cmp	r1, r2
 80061e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80061ec:	d100      	bne.n	80061f0 <memcpy+0xc>
 80061ee:	4770      	bx	lr
 80061f0:	b510      	push	{r4, lr}
 80061f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061fa:	4291      	cmp	r1, r2
 80061fc:	d1f9      	bne.n	80061f2 <memcpy+0xe>
 80061fe:	bd10      	pop	{r4, pc}

08006200 <memset>:
 8006200:	4402      	add	r2, r0
 8006202:	4603      	mov	r3, r0
 8006204:	4293      	cmp	r3, r2
 8006206:	d100      	bne.n	800620a <memset+0xa>
 8006208:	4770      	bx	lr
 800620a:	f803 1b01 	strb.w	r1, [r3], #1
 800620e:	e7f9      	b.n	8006204 <memset+0x4>

08006210 <sbrk_aligned>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	4e0e      	ldr	r6, [pc, #56]	; (800624c <sbrk_aligned+0x3c>)
 8006214:	460c      	mov	r4, r1
 8006216:	6831      	ldr	r1, [r6, #0]
 8006218:	4605      	mov	r5, r0
 800621a:	b911      	cbnz	r1, 8006222 <sbrk_aligned+0x12>
 800621c:	f000 f8f6 	bl	800640c <_sbrk_r>
 8006220:	6030      	str	r0, [r6, #0]
 8006222:	4621      	mov	r1, r4
 8006224:	4628      	mov	r0, r5
 8006226:	f000 f8f1 	bl	800640c <_sbrk_r>
 800622a:	1c43      	adds	r3, r0, #1
 800622c:	d00a      	beq.n	8006244 <sbrk_aligned+0x34>
 800622e:	1cc4      	adds	r4, r0, #3
 8006230:	f024 0403 	bic.w	r4, r4, #3
 8006234:	42a0      	cmp	r0, r4
 8006236:	d007      	beq.n	8006248 <sbrk_aligned+0x38>
 8006238:	1a21      	subs	r1, r4, r0
 800623a:	4628      	mov	r0, r5
 800623c:	f000 f8e6 	bl	800640c <_sbrk_r>
 8006240:	3001      	adds	r0, #1
 8006242:	d101      	bne.n	8006248 <sbrk_aligned+0x38>
 8006244:	f04f 34ff 	mov.w	r4, #4294967295
 8006248:	4620      	mov	r0, r4
 800624a:	bd70      	pop	{r4, r5, r6, pc}
 800624c:	20004b40 	.word	0x20004b40

08006250 <_malloc_r>:
 8006250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006254:	1ccd      	adds	r5, r1, #3
 8006256:	f025 0503 	bic.w	r5, r5, #3
 800625a:	3508      	adds	r5, #8
 800625c:	2d0c      	cmp	r5, #12
 800625e:	bf38      	it	cc
 8006260:	250c      	movcc	r5, #12
 8006262:	2d00      	cmp	r5, #0
 8006264:	4607      	mov	r7, r0
 8006266:	db01      	blt.n	800626c <_malloc_r+0x1c>
 8006268:	42a9      	cmp	r1, r5
 800626a:	d905      	bls.n	8006278 <_malloc_r+0x28>
 800626c:	230c      	movs	r3, #12
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	2600      	movs	r6, #0
 8006272:	4630      	mov	r0, r6
 8006274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006278:	4e2e      	ldr	r6, [pc, #184]	; (8006334 <_malloc_r+0xe4>)
 800627a:	f000 f8f7 	bl	800646c <__malloc_lock>
 800627e:	6833      	ldr	r3, [r6, #0]
 8006280:	461c      	mov	r4, r3
 8006282:	bb34      	cbnz	r4, 80062d2 <_malloc_r+0x82>
 8006284:	4629      	mov	r1, r5
 8006286:	4638      	mov	r0, r7
 8006288:	f7ff ffc2 	bl	8006210 <sbrk_aligned>
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	4604      	mov	r4, r0
 8006290:	d14d      	bne.n	800632e <_malloc_r+0xde>
 8006292:	6834      	ldr	r4, [r6, #0]
 8006294:	4626      	mov	r6, r4
 8006296:	2e00      	cmp	r6, #0
 8006298:	d140      	bne.n	800631c <_malloc_r+0xcc>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	4631      	mov	r1, r6
 800629e:	4638      	mov	r0, r7
 80062a0:	eb04 0803 	add.w	r8, r4, r3
 80062a4:	f000 f8b2 	bl	800640c <_sbrk_r>
 80062a8:	4580      	cmp	r8, r0
 80062aa:	d13a      	bne.n	8006322 <_malloc_r+0xd2>
 80062ac:	6821      	ldr	r1, [r4, #0]
 80062ae:	3503      	adds	r5, #3
 80062b0:	1a6d      	subs	r5, r5, r1
 80062b2:	f025 0503 	bic.w	r5, r5, #3
 80062b6:	3508      	adds	r5, #8
 80062b8:	2d0c      	cmp	r5, #12
 80062ba:	bf38      	it	cc
 80062bc:	250c      	movcc	r5, #12
 80062be:	4629      	mov	r1, r5
 80062c0:	4638      	mov	r0, r7
 80062c2:	f7ff ffa5 	bl	8006210 <sbrk_aligned>
 80062c6:	3001      	adds	r0, #1
 80062c8:	d02b      	beq.n	8006322 <_malloc_r+0xd2>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	442b      	add	r3, r5
 80062ce:	6023      	str	r3, [r4, #0]
 80062d0:	e00e      	b.n	80062f0 <_malloc_r+0xa0>
 80062d2:	6822      	ldr	r2, [r4, #0]
 80062d4:	1b52      	subs	r2, r2, r5
 80062d6:	d41e      	bmi.n	8006316 <_malloc_r+0xc6>
 80062d8:	2a0b      	cmp	r2, #11
 80062da:	d916      	bls.n	800630a <_malloc_r+0xba>
 80062dc:	1961      	adds	r1, r4, r5
 80062de:	42a3      	cmp	r3, r4
 80062e0:	6025      	str	r5, [r4, #0]
 80062e2:	bf18      	it	ne
 80062e4:	6059      	strne	r1, [r3, #4]
 80062e6:	6863      	ldr	r3, [r4, #4]
 80062e8:	bf08      	it	eq
 80062ea:	6031      	streq	r1, [r6, #0]
 80062ec:	5162      	str	r2, [r4, r5]
 80062ee:	604b      	str	r3, [r1, #4]
 80062f0:	4638      	mov	r0, r7
 80062f2:	f104 060b 	add.w	r6, r4, #11
 80062f6:	f000 f8bf 	bl	8006478 <__malloc_unlock>
 80062fa:	f026 0607 	bic.w	r6, r6, #7
 80062fe:	1d23      	adds	r3, r4, #4
 8006300:	1af2      	subs	r2, r6, r3
 8006302:	d0b6      	beq.n	8006272 <_malloc_r+0x22>
 8006304:	1b9b      	subs	r3, r3, r6
 8006306:	50a3      	str	r3, [r4, r2]
 8006308:	e7b3      	b.n	8006272 <_malloc_r+0x22>
 800630a:	6862      	ldr	r2, [r4, #4]
 800630c:	42a3      	cmp	r3, r4
 800630e:	bf0c      	ite	eq
 8006310:	6032      	streq	r2, [r6, #0]
 8006312:	605a      	strne	r2, [r3, #4]
 8006314:	e7ec      	b.n	80062f0 <_malloc_r+0xa0>
 8006316:	4623      	mov	r3, r4
 8006318:	6864      	ldr	r4, [r4, #4]
 800631a:	e7b2      	b.n	8006282 <_malloc_r+0x32>
 800631c:	4634      	mov	r4, r6
 800631e:	6876      	ldr	r6, [r6, #4]
 8006320:	e7b9      	b.n	8006296 <_malloc_r+0x46>
 8006322:	230c      	movs	r3, #12
 8006324:	603b      	str	r3, [r7, #0]
 8006326:	4638      	mov	r0, r7
 8006328:	f000 f8a6 	bl	8006478 <__malloc_unlock>
 800632c:	e7a1      	b.n	8006272 <_malloc_r+0x22>
 800632e:	6025      	str	r5, [r4, #0]
 8006330:	e7de      	b.n	80062f0 <_malloc_r+0xa0>
 8006332:	bf00      	nop
 8006334:	20004b3c 	.word	0x20004b3c

08006338 <cleanup_glue>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	460c      	mov	r4, r1
 800633c:	6809      	ldr	r1, [r1, #0]
 800633e:	4605      	mov	r5, r0
 8006340:	b109      	cbz	r1, 8006346 <cleanup_glue+0xe>
 8006342:	f7ff fff9 	bl	8006338 <cleanup_glue>
 8006346:	4621      	mov	r1, r4
 8006348:	4628      	mov	r0, r5
 800634a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800634e:	f000 b899 	b.w	8006484 <_free_r>
	...

08006354 <_reclaim_reent>:
 8006354:	4b2c      	ldr	r3, [pc, #176]	; (8006408 <_reclaim_reent+0xb4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4283      	cmp	r3, r0
 800635a:	b570      	push	{r4, r5, r6, lr}
 800635c:	4604      	mov	r4, r0
 800635e:	d051      	beq.n	8006404 <_reclaim_reent+0xb0>
 8006360:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006362:	b143      	cbz	r3, 8006376 <_reclaim_reent+0x22>
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d14a      	bne.n	8006400 <_reclaim_reent+0xac>
 800636a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800636c:	6819      	ldr	r1, [r3, #0]
 800636e:	b111      	cbz	r1, 8006376 <_reclaim_reent+0x22>
 8006370:	4620      	mov	r0, r4
 8006372:	f000 f887 	bl	8006484 <_free_r>
 8006376:	6961      	ldr	r1, [r4, #20]
 8006378:	b111      	cbz	r1, 8006380 <_reclaim_reent+0x2c>
 800637a:	4620      	mov	r0, r4
 800637c:	f000 f882 	bl	8006484 <_free_r>
 8006380:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006382:	b111      	cbz	r1, 800638a <_reclaim_reent+0x36>
 8006384:	4620      	mov	r0, r4
 8006386:	f000 f87d 	bl	8006484 <_free_r>
 800638a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800638c:	b111      	cbz	r1, 8006394 <_reclaim_reent+0x40>
 800638e:	4620      	mov	r0, r4
 8006390:	f000 f878 	bl	8006484 <_free_r>
 8006394:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006396:	b111      	cbz	r1, 800639e <_reclaim_reent+0x4a>
 8006398:	4620      	mov	r0, r4
 800639a:	f000 f873 	bl	8006484 <_free_r>
 800639e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80063a0:	b111      	cbz	r1, 80063a8 <_reclaim_reent+0x54>
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 f86e 	bl	8006484 <_free_r>
 80063a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80063aa:	b111      	cbz	r1, 80063b2 <_reclaim_reent+0x5e>
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 f869 	bl	8006484 <_free_r>
 80063b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80063b4:	b111      	cbz	r1, 80063bc <_reclaim_reent+0x68>
 80063b6:	4620      	mov	r0, r4
 80063b8:	f000 f864 	bl	8006484 <_free_r>
 80063bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063be:	b111      	cbz	r1, 80063c6 <_reclaim_reent+0x72>
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 f85f 	bl	8006484 <_free_r>
 80063c6:	69a3      	ldr	r3, [r4, #24]
 80063c8:	b1e3      	cbz	r3, 8006404 <_reclaim_reent+0xb0>
 80063ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063cc:	4620      	mov	r0, r4
 80063ce:	4798      	blx	r3
 80063d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80063d2:	b1b9      	cbz	r1, 8006404 <_reclaim_reent+0xb0>
 80063d4:	4620      	mov	r0, r4
 80063d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063da:	f7ff bfad 	b.w	8006338 <cleanup_glue>
 80063de:	5949      	ldr	r1, [r1, r5]
 80063e0:	b941      	cbnz	r1, 80063f4 <_reclaim_reent+0xa0>
 80063e2:	3504      	adds	r5, #4
 80063e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063e6:	2d80      	cmp	r5, #128	; 0x80
 80063e8:	68d9      	ldr	r1, [r3, #12]
 80063ea:	d1f8      	bne.n	80063de <_reclaim_reent+0x8a>
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 f849 	bl	8006484 <_free_r>
 80063f2:	e7ba      	b.n	800636a <_reclaim_reent+0x16>
 80063f4:	680e      	ldr	r6, [r1, #0]
 80063f6:	4620      	mov	r0, r4
 80063f8:	f000 f844 	bl	8006484 <_free_r>
 80063fc:	4631      	mov	r1, r6
 80063fe:	e7ef      	b.n	80063e0 <_reclaim_reent+0x8c>
 8006400:	2500      	movs	r5, #0
 8006402:	e7ef      	b.n	80063e4 <_reclaim_reent+0x90>
 8006404:	bd70      	pop	{r4, r5, r6, pc}
 8006406:	bf00      	nop
 8006408:	20000014 	.word	0x20000014

0800640c <_sbrk_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4d06      	ldr	r5, [pc, #24]	; (8006428 <_sbrk_r+0x1c>)
 8006410:	2300      	movs	r3, #0
 8006412:	4604      	mov	r4, r0
 8006414:	4608      	mov	r0, r1
 8006416:	602b      	str	r3, [r5, #0]
 8006418:	f7fa fc14 	bl	8000c44 <_sbrk>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_sbrk_r+0x1a>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_sbrk_r+0x1a>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	20004b44 	.word	0x20004b44

0800642c <siprintf>:
 800642c:	b40e      	push	{r1, r2, r3}
 800642e:	b500      	push	{lr}
 8006430:	b09c      	sub	sp, #112	; 0x70
 8006432:	ab1d      	add	r3, sp, #116	; 0x74
 8006434:	9002      	str	r0, [sp, #8]
 8006436:	9006      	str	r0, [sp, #24]
 8006438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800643c:	4809      	ldr	r0, [pc, #36]	; (8006464 <siprintf+0x38>)
 800643e:	9107      	str	r1, [sp, #28]
 8006440:	9104      	str	r1, [sp, #16]
 8006442:	4909      	ldr	r1, [pc, #36]	; (8006468 <siprintf+0x3c>)
 8006444:	f853 2b04 	ldr.w	r2, [r3], #4
 8006448:	9105      	str	r1, [sp, #20]
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	9301      	str	r3, [sp, #4]
 800644e:	a902      	add	r1, sp, #8
 8006450:	f000 f8c0 	bl	80065d4 <_svfiprintf_r>
 8006454:	9b02      	ldr	r3, [sp, #8]
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	b01c      	add	sp, #112	; 0x70
 800645c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006460:	b003      	add	sp, #12
 8006462:	4770      	bx	lr
 8006464:	20000014 	.word	0x20000014
 8006468:	ffff0208 	.word	0xffff0208

0800646c <__malloc_lock>:
 800646c:	4801      	ldr	r0, [pc, #4]	; (8006474 <__malloc_lock+0x8>)
 800646e:	f7ff beb7 	b.w	80061e0 <__retarget_lock_acquire_recursive>
 8006472:	bf00      	nop
 8006474:	20004b38 	.word	0x20004b38

08006478 <__malloc_unlock>:
 8006478:	4801      	ldr	r0, [pc, #4]	; (8006480 <__malloc_unlock+0x8>)
 800647a:	f7ff beb2 	b.w	80061e2 <__retarget_lock_release_recursive>
 800647e:	bf00      	nop
 8006480:	20004b38 	.word	0x20004b38

08006484 <_free_r>:
 8006484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006486:	2900      	cmp	r1, #0
 8006488:	d044      	beq.n	8006514 <_free_r+0x90>
 800648a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800648e:	9001      	str	r0, [sp, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f1a1 0404 	sub.w	r4, r1, #4
 8006496:	bfb8      	it	lt
 8006498:	18e4      	addlt	r4, r4, r3
 800649a:	f7ff ffe7 	bl	800646c <__malloc_lock>
 800649e:	4a1e      	ldr	r2, [pc, #120]	; (8006518 <_free_r+0x94>)
 80064a0:	9801      	ldr	r0, [sp, #4]
 80064a2:	6813      	ldr	r3, [r2, #0]
 80064a4:	b933      	cbnz	r3, 80064b4 <_free_r+0x30>
 80064a6:	6063      	str	r3, [r4, #4]
 80064a8:	6014      	str	r4, [r2, #0]
 80064aa:	b003      	add	sp, #12
 80064ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064b0:	f7ff bfe2 	b.w	8006478 <__malloc_unlock>
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	d908      	bls.n	80064ca <_free_r+0x46>
 80064b8:	6825      	ldr	r5, [r4, #0]
 80064ba:	1961      	adds	r1, r4, r5
 80064bc:	428b      	cmp	r3, r1
 80064be:	bf01      	itttt	eq
 80064c0:	6819      	ldreq	r1, [r3, #0]
 80064c2:	685b      	ldreq	r3, [r3, #4]
 80064c4:	1949      	addeq	r1, r1, r5
 80064c6:	6021      	streq	r1, [r4, #0]
 80064c8:	e7ed      	b.n	80064a6 <_free_r+0x22>
 80064ca:	461a      	mov	r2, r3
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	b10b      	cbz	r3, 80064d4 <_free_r+0x50>
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	d9fa      	bls.n	80064ca <_free_r+0x46>
 80064d4:	6811      	ldr	r1, [r2, #0]
 80064d6:	1855      	adds	r5, r2, r1
 80064d8:	42a5      	cmp	r5, r4
 80064da:	d10b      	bne.n	80064f4 <_free_r+0x70>
 80064dc:	6824      	ldr	r4, [r4, #0]
 80064de:	4421      	add	r1, r4
 80064e0:	1854      	adds	r4, r2, r1
 80064e2:	42a3      	cmp	r3, r4
 80064e4:	6011      	str	r1, [r2, #0]
 80064e6:	d1e0      	bne.n	80064aa <_free_r+0x26>
 80064e8:	681c      	ldr	r4, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	6053      	str	r3, [r2, #4]
 80064ee:	4421      	add	r1, r4
 80064f0:	6011      	str	r1, [r2, #0]
 80064f2:	e7da      	b.n	80064aa <_free_r+0x26>
 80064f4:	d902      	bls.n	80064fc <_free_r+0x78>
 80064f6:	230c      	movs	r3, #12
 80064f8:	6003      	str	r3, [r0, #0]
 80064fa:	e7d6      	b.n	80064aa <_free_r+0x26>
 80064fc:	6825      	ldr	r5, [r4, #0]
 80064fe:	1961      	adds	r1, r4, r5
 8006500:	428b      	cmp	r3, r1
 8006502:	bf04      	itt	eq
 8006504:	6819      	ldreq	r1, [r3, #0]
 8006506:	685b      	ldreq	r3, [r3, #4]
 8006508:	6063      	str	r3, [r4, #4]
 800650a:	bf04      	itt	eq
 800650c:	1949      	addeq	r1, r1, r5
 800650e:	6021      	streq	r1, [r4, #0]
 8006510:	6054      	str	r4, [r2, #4]
 8006512:	e7ca      	b.n	80064aa <_free_r+0x26>
 8006514:	b003      	add	sp, #12
 8006516:	bd30      	pop	{r4, r5, pc}
 8006518:	20004b3c 	.word	0x20004b3c

0800651c <__ssputs_r>:
 800651c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006520:	688e      	ldr	r6, [r1, #8]
 8006522:	429e      	cmp	r6, r3
 8006524:	4682      	mov	sl, r0
 8006526:	460c      	mov	r4, r1
 8006528:	4690      	mov	r8, r2
 800652a:	461f      	mov	r7, r3
 800652c:	d838      	bhi.n	80065a0 <__ssputs_r+0x84>
 800652e:	898a      	ldrh	r2, [r1, #12]
 8006530:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006534:	d032      	beq.n	800659c <__ssputs_r+0x80>
 8006536:	6825      	ldr	r5, [r4, #0]
 8006538:	6909      	ldr	r1, [r1, #16]
 800653a:	eba5 0901 	sub.w	r9, r5, r1
 800653e:	6965      	ldr	r5, [r4, #20]
 8006540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006544:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006548:	3301      	adds	r3, #1
 800654a:	444b      	add	r3, r9
 800654c:	106d      	asrs	r5, r5, #1
 800654e:	429d      	cmp	r5, r3
 8006550:	bf38      	it	cc
 8006552:	461d      	movcc	r5, r3
 8006554:	0553      	lsls	r3, r2, #21
 8006556:	d531      	bpl.n	80065bc <__ssputs_r+0xa0>
 8006558:	4629      	mov	r1, r5
 800655a:	f7ff fe79 	bl	8006250 <_malloc_r>
 800655e:	4606      	mov	r6, r0
 8006560:	b950      	cbnz	r0, 8006578 <__ssputs_r+0x5c>
 8006562:	230c      	movs	r3, #12
 8006564:	f8ca 3000 	str.w	r3, [sl]
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800656e:	81a3      	strh	r3, [r4, #12]
 8006570:	f04f 30ff 	mov.w	r0, #4294967295
 8006574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006578:	6921      	ldr	r1, [r4, #16]
 800657a:	464a      	mov	r2, r9
 800657c:	f7ff fe32 	bl	80061e4 <memcpy>
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658a:	81a3      	strh	r3, [r4, #12]
 800658c:	6126      	str	r6, [r4, #16]
 800658e:	6165      	str	r5, [r4, #20]
 8006590:	444e      	add	r6, r9
 8006592:	eba5 0509 	sub.w	r5, r5, r9
 8006596:	6026      	str	r6, [r4, #0]
 8006598:	60a5      	str	r5, [r4, #8]
 800659a:	463e      	mov	r6, r7
 800659c:	42be      	cmp	r6, r7
 800659e:	d900      	bls.n	80065a2 <__ssputs_r+0x86>
 80065a0:	463e      	mov	r6, r7
 80065a2:	6820      	ldr	r0, [r4, #0]
 80065a4:	4632      	mov	r2, r6
 80065a6:	4641      	mov	r1, r8
 80065a8:	f000 faa8 	bl	8006afc <memmove>
 80065ac:	68a3      	ldr	r3, [r4, #8]
 80065ae:	1b9b      	subs	r3, r3, r6
 80065b0:	60a3      	str	r3, [r4, #8]
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	4433      	add	r3, r6
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	2000      	movs	r0, #0
 80065ba:	e7db      	b.n	8006574 <__ssputs_r+0x58>
 80065bc:	462a      	mov	r2, r5
 80065be:	f000 fab7 	bl	8006b30 <_realloc_r>
 80065c2:	4606      	mov	r6, r0
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d1e1      	bne.n	800658c <__ssputs_r+0x70>
 80065c8:	6921      	ldr	r1, [r4, #16]
 80065ca:	4650      	mov	r0, sl
 80065cc:	f7ff ff5a 	bl	8006484 <_free_r>
 80065d0:	e7c7      	b.n	8006562 <__ssputs_r+0x46>
	...

080065d4 <_svfiprintf_r>:
 80065d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	4698      	mov	r8, r3
 80065da:	898b      	ldrh	r3, [r1, #12]
 80065dc:	061b      	lsls	r3, r3, #24
 80065de:	b09d      	sub	sp, #116	; 0x74
 80065e0:	4607      	mov	r7, r0
 80065e2:	460d      	mov	r5, r1
 80065e4:	4614      	mov	r4, r2
 80065e6:	d50e      	bpl.n	8006606 <_svfiprintf_r+0x32>
 80065e8:	690b      	ldr	r3, [r1, #16]
 80065ea:	b963      	cbnz	r3, 8006606 <_svfiprintf_r+0x32>
 80065ec:	2140      	movs	r1, #64	; 0x40
 80065ee:	f7ff fe2f 	bl	8006250 <_malloc_r>
 80065f2:	6028      	str	r0, [r5, #0]
 80065f4:	6128      	str	r0, [r5, #16]
 80065f6:	b920      	cbnz	r0, 8006602 <_svfiprintf_r+0x2e>
 80065f8:	230c      	movs	r3, #12
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006600:	e0d1      	b.n	80067a6 <_svfiprintf_r+0x1d2>
 8006602:	2340      	movs	r3, #64	; 0x40
 8006604:	616b      	str	r3, [r5, #20]
 8006606:	2300      	movs	r3, #0
 8006608:	9309      	str	r3, [sp, #36]	; 0x24
 800660a:	2320      	movs	r3, #32
 800660c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006610:	f8cd 800c 	str.w	r8, [sp, #12]
 8006614:	2330      	movs	r3, #48	; 0x30
 8006616:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067c0 <_svfiprintf_r+0x1ec>
 800661a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800661e:	f04f 0901 	mov.w	r9, #1
 8006622:	4623      	mov	r3, r4
 8006624:	469a      	mov	sl, r3
 8006626:	f813 2b01 	ldrb.w	r2, [r3], #1
 800662a:	b10a      	cbz	r2, 8006630 <_svfiprintf_r+0x5c>
 800662c:	2a25      	cmp	r2, #37	; 0x25
 800662e:	d1f9      	bne.n	8006624 <_svfiprintf_r+0x50>
 8006630:	ebba 0b04 	subs.w	fp, sl, r4
 8006634:	d00b      	beq.n	800664e <_svfiprintf_r+0x7a>
 8006636:	465b      	mov	r3, fp
 8006638:	4622      	mov	r2, r4
 800663a:	4629      	mov	r1, r5
 800663c:	4638      	mov	r0, r7
 800663e:	f7ff ff6d 	bl	800651c <__ssputs_r>
 8006642:	3001      	adds	r0, #1
 8006644:	f000 80aa 	beq.w	800679c <_svfiprintf_r+0x1c8>
 8006648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800664a:	445a      	add	r2, fp
 800664c:	9209      	str	r2, [sp, #36]	; 0x24
 800664e:	f89a 3000 	ldrb.w	r3, [sl]
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 80a2 	beq.w	800679c <_svfiprintf_r+0x1c8>
 8006658:	2300      	movs	r3, #0
 800665a:	f04f 32ff 	mov.w	r2, #4294967295
 800665e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006662:	f10a 0a01 	add.w	sl, sl, #1
 8006666:	9304      	str	r3, [sp, #16]
 8006668:	9307      	str	r3, [sp, #28]
 800666a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800666e:	931a      	str	r3, [sp, #104]	; 0x68
 8006670:	4654      	mov	r4, sl
 8006672:	2205      	movs	r2, #5
 8006674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006678:	4851      	ldr	r0, [pc, #324]	; (80067c0 <_svfiprintf_r+0x1ec>)
 800667a:	f7f9 fdb1 	bl	80001e0 <memchr>
 800667e:	9a04      	ldr	r2, [sp, #16]
 8006680:	b9d8      	cbnz	r0, 80066ba <_svfiprintf_r+0xe6>
 8006682:	06d0      	lsls	r0, r2, #27
 8006684:	bf44      	itt	mi
 8006686:	2320      	movmi	r3, #32
 8006688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800668c:	0711      	lsls	r1, r2, #28
 800668e:	bf44      	itt	mi
 8006690:	232b      	movmi	r3, #43	; 0x2b
 8006692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006696:	f89a 3000 	ldrb.w	r3, [sl]
 800669a:	2b2a      	cmp	r3, #42	; 0x2a
 800669c:	d015      	beq.n	80066ca <_svfiprintf_r+0xf6>
 800669e:	9a07      	ldr	r2, [sp, #28]
 80066a0:	4654      	mov	r4, sl
 80066a2:	2000      	movs	r0, #0
 80066a4:	f04f 0c0a 	mov.w	ip, #10
 80066a8:	4621      	mov	r1, r4
 80066aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ae:	3b30      	subs	r3, #48	; 0x30
 80066b0:	2b09      	cmp	r3, #9
 80066b2:	d94e      	bls.n	8006752 <_svfiprintf_r+0x17e>
 80066b4:	b1b0      	cbz	r0, 80066e4 <_svfiprintf_r+0x110>
 80066b6:	9207      	str	r2, [sp, #28]
 80066b8:	e014      	b.n	80066e4 <_svfiprintf_r+0x110>
 80066ba:	eba0 0308 	sub.w	r3, r0, r8
 80066be:	fa09 f303 	lsl.w	r3, r9, r3
 80066c2:	4313      	orrs	r3, r2
 80066c4:	9304      	str	r3, [sp, #16]
 80066c6:	46a2      	mov	sl, r4
 80066c8:	e7d2      	b.n	8006670 <_svfiprintf_r+0x9c>
 80066ca:	9b03      	ldr	r3, [sp, #12]
 80066cc:	1d19      	adds	r1, r3, #4
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	9103      	str	r1, [sp, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bfbb      	ittet	lt
 80066d6:	425b      	neglt	r3, r3
 80066d8:	f042 0202 	orrlt.w	r2, r2, #2
 80066dc:	9307      	strge	r3, [sp, #28]
 80066de:	9307      	strlt	r3, [sp, #28]
 80066e0:	bfb8      	it	lt
 80066e2:	9204      	strlt	r2, [sp, #16]
 80066e4:	7823      	ldrb	r3, [r4, #0]
 80066e6:	2b2e      	cmp	r3, #46	; 0x2e
 80066e8:	d10c      	bne.n	8006704 <_svfiprintf_r+0x130>
 80066ea:	7863      	ldrb	r3, [r4, #1]
 80066ec:	2b2a      	cmp	r3, #42	; 0x2a
 80066ee:	d135      	bne.n	800675c <_svfiprintf_r+0x188>
 80066f0:	9b03      	ldr	r3, [sp, #12]
 80066f2:	1d1a      	adds	r2, r3, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	9203      	str	r2, [sp, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	bfb8      	it	lt
 80066fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006700:	3402      	adds	r4, #2
 8006702:	9305      	str	r3, [sp, #20]
 8006704:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067d0 <_svfiprintf_r+0x1fc>
 8006708:	7821      	ldrb	r1, [r4, #0]
 800670a:	2203      	movs	r2, #3
 800670c:	4650      	mov	r0, sl
 800670e:	f7f9 fd67 	bl	80001e0 <memchr>
 8006712:	b140      	cbz	r0, 8006726 <_svfiprintf_r+0x152>
 8006714:	2340      	movs	r3, #64	; 0x40
 8006716:	eba0 000a 	sub.w	r0, r0, sl
 800671a:	fa03 f000 	lsl.w	r0, r3, r0
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	4303      	orrs	r3, r0
 8006722:	3401      	adds	r4, #1
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800672a:	4826      	ldr	r0, [pc, #152]	; (80067c4 <_svfiprintf_r+0x1f0>)
 800672c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006730:	2206      	movs	r2, #6
 8006732:	f7f9 fd55 	bl	80001e0 <memchr>
 8006736:	2800      	cmp	r0, #0
 8006738:	d038      	beq.n	80067ac <_svfiprintf_r+0x1d8>
 800673a:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <_svfiprintf_r+0x1f4>)
 800673c:	bb1b      	cbnz	r3, 8006786 <_svfiprintf_r+0x1b2>
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	3307      	adds	r3, #7
 8006742:	f023 0307 	bic.w	r3, r3, #7
 8006746:	3308      	adds	r3, #8
 8006748:	9303      	str	r3, [sp, #12]
 800674a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674c:	4433      	add	r3, r6
 800674e:	9309      	str	r3, [sp, #36]	; 0x24
 8006750:	e767      	b.n	8006622 <_svfiprintf_r+0x4e>
 8006752:	fb0c 3202 	mla	r2, ip, r2, r3
 8006756:	460c      	mov	r4, r1
 8006758:	2001      	movs	r0, #1
 800675a:	e7a5      	b.n	80066a8 <_svfiprintf_r+0xd4>
 800675c:	2300      	movs	r3, #0
 800675e:	3401      	adds	r4, #1
 8006760:	9305      	str	r3, [sp, #20]
 8006762:	4619      	mov	r1, r3
 8006764:	f04f 0c0a 	mov.w	ip, #10
 8006768:	4620      	mov	r0, r4
 800676a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800676e:	3a30      	subs	r2, #48	; 0x30
 8006770:	2a09      	cmp	r2, #9
 8006772:	d903      	bls.n	800677c <_svfiprintf_r+0x1a8>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0c5      	beq.n	8006704 <_svfiprintf_r+0x130>
 8006778:	9105      	str	r1, [sp, #20]
 800677a:	e7c3      	b.n	8006704 <_svfiprintf_r+0x130>
 800677c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006780:	4604      	mov	r4, r0
 8006782:	2301      	movs	r3, #1
 8006784:	e7f0      	b.n	8006768 <_svfiprintf_r+0x194>
 8006786:	ab03      	add	r3, sp, #12
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	462a      	mov	r2, r5
 800678c:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <_svfiprintf_r+0x1f8>)
 800678e:	a904      	add	r1, sp, #16
 8006790:	4638      	mov	r0, r7
 8006792:	f3af 8000 	nop.w
 8006796:	1c42      	adds	r2, r0, #1
 8006798:	4606      	mov	r6, r0
 800679a:	d1d6      	bne.n	800674a <_svfiprintf_r+0x176>
 800679c:	89ab      	ldrh	r3, [r5, #12]
 800679e:	065b      	lsls	r3, r3, #25
 80067a0:	f53f af2c 	bmi.w	80065fc <_svfiprintf_r+0x28>
 80067a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067a6:	b01d      	add	sp, #116	; 0x74
 80067a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ac:	ab03      	add	r3, sp, #12
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	462a      	mov	r2, r5
 80067b2:	4b06      	ldr	r3, [pc, #24]	; (80067cc <_svfiprintf_r+0x1f8>)
 80067b4:	a904      	add	r1, sp, #16
 80067b6:	4638      	mov	r0, r7
 80067b8:	f000 f87a 	bl	80068b0 <_printf_i>
 80067bc:	e7eb      	b.n	8006796 <_svfiprintf_r+0x1c2>
 80067be:	bf00      	nop
 80067c0:	08006d6c 	.word	0x08006d6c
 80067c4:	08006d76 	.word	0x08006d76
 80067c8:	00000000 	.word	0x00000000
 80067cc:	0800651d 	.word	0x0800651d
 80067d0:	08006d72 	.word	0x08006d72

080067d4 <_printf_common>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	4616      	mov	r6, r2
 80067da:	4699      	mov	r9, r3
 80067dc:	688a      	ldr	r2, [r1, #8]
 80067de:	690b      	ldr	r3, [r1, #16]
 80067e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067e4:	4293      	cmp	r3, r2
 80067e6:	bfb8      	it	lt
 80067e8:	4613      	movlt	r3, r2
 80067ea:	6033      	str	r3, [r6, #0]
 80067ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067f0:	4607      	mov	r7, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	b10a      	cbz	r2, 80067fa <_printf_common+0x26>
 80067f6:	3301      	adds	r3, #1
 80067f8:	6033      	str	r3, [r6, #0]
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	0699      	lsls	r1, r3, #26
 80067fe:	bf42      	ittt	mi
 8006800:	6833      	ldrmi	r3, [r6, #0]
 8006802:	3302      	addmi	r3, #2
 8006804:	6033      	strmi	r3, [r6, #0]
 8006806:	6825      	ldr	r5, [r4, #0]
 8006808:	f015 0506 	ands.w	r5, r5, #6
 800680c:	d106      	bne.n	800681c <_printf_common+0x48>
 800680e:	f104 0a19 	add.w	sl, r4, #25
 8006812:	68e3      	ldr	r3, [r4, #12]
 8006814:	6832      	ldr	r2, [r6, #0]
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	42ab      	cmp	r3, r5
 800681a:	dc26      	bgt.n	800686a <_printf_common+0x96>
 800681c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006820:	1e13      	subs	r3, r2, #0
 8006822:	6822      	ldr	r2, [r4, #0]
 8006824:	bf18      	it	ne
 8006826:	2301      	movne	r3, #1
 8006828:	0692      	lsls	r2, r2, #26
 800682a:	d42b      	bmi.n	8006884 <_printf_common+0xb0>
 800682c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006830:	4649      	mov	r1, r9
 8006832:	4638      	mov	r0, r7
 8006834:	47c0      	blx	r8
 8006836:	3001      	adds	r0, #1
 8006838:	d01e      	beq.n	8006878 <_printf_common+0xa4>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	68e5      	ldr	r5, [r4, #12]
 800683e:	6832      	ldr	r2, [r6, #0]
 8006840:	f003 0306 	and.w	r3, r3, #6
 8006844:	2b04      	cmp	r3, #4
 8006846:	bf08      	it	eq
 8006848:	1aad      	subeq	r5, r5, r2
 800684a:	68a3      	ldr	r3, [r4, #8]
 800684c:	6922      	ldr	r2, [r4, #16]
 800684e:	bf0c      	ite	eq
 8006850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006854:	2500      	movne	r5, #0
 8006856:	4293      	cmp	r3, r2
 8006858:	bfc4      	itt	gt
 800685a:	1a9b      	subgt	r3, r3, r2
 800685c:	18ed      	addgt	r5, r5, r3
 800685e:	2600      	movs	r6, #0
 8006860:	341a      	adds	r4, #26
 8006862:	42b5      	cmp	r5, r6
 8006864:	d11a      	bne.n	800689c <_printf_common+0xc8>
 8006866:	2000      	movs	r0, #0
 8006868:	e008      	b.n	800687c <_printf_common+0xa8>
 800686a:	2301      	movs	r3, #1
 800686c:	4652      	mov	r2, sl
 800686e:	4649      	mov	r1, r9
 8006870:	4638      	mov	r0, r7
 8006872:	47c0      	blx	r8
 8006874:	3001      	adds	r0, #1
 8006876:	d103      	bne.n	8006880 <_printf_common+0xac>
 8006878:	f04f 30ff 	mov.w	r0, #4294967295
 800687c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006880:	3501      	adds	r5, #1
 8006882:	e7c6      	b.n	8006812 <_printf_common+0x3e>
 8006884:	18e1      	adds	r1, r4, r3
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	2030      	movs	r0, #48	; 0x30
 800688a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800688e:	4422      	add	r2, r4
 8006890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006898:	3302      	adds	r3, #2
 800689a:	e7c7      	b.n	800682c <_printf_common+0x58>
 800689c:	2301      	movs	r3, #1
 800689e:	4622      	mov	r2, r4
 80068a0:	4649      	mov	r1, r9
 80068a2:	4638      	mov	r0, r7
 80068a4:	47c0      	blx	r8
 80068a6:	3001      	adds	r0, #1
 80068a8:	d0e6      	beq.n	8006878 <_printf_common+0xa4>
 80068aa:	3601      	adds	r6, #1
 80068ac:	e7d9      	b.n	8006862 <_printf_common+0x8e>
	...

080068b0 <_printf_i>:
 80068b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b4:	7e0f      	ldrb	r7, [r1, #24]
 80068b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068b8:	2f78      	cmp	r7, #120	; 0x78
 80068ba:	4691      	mov	r9, r2
 80068bc:	4680      	mov	r8, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	469a      	mov	sl, r3
 80068c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068c6:	d807      	bhi.n	80068d8 <_printf_i+0x28>
 80068c8:	2f62      	cmp	r7, #98	; 0x62
 80068ca:	d80a      	bhi.n	80068e2 <_printf_i+0x32>
 80068cc:	2f00      	cmp	r7, #0
 80068ce:	f000 80d8 	beq.w	8006a82 <_printf_i+0x1d2>
 80068d2:	2f58      	cmp	r7, #88	; 0x58
 80068d4:	f000 80a3 	beq.w	8006a1e <_printf_i+0x16e>
 80068d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068e0:	e03a      	b.n	8006958 <_printf_i+0xa8>
 80068e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068e6:	2b15      	cmp	r3, #21
 80068e8:	d8f6      	bhi.n	80068d8 <_printf_i+0x28>
 80068ea:	a101      	add	r1, pc, #4	; (adr r1, 80068f0 <_printf_i+0x40>)
 80068ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068f0:	08006949 	.word	0x08006949
 80068f4:	0800695d 	.word	0x0800695d
 80068f8:	080068d9 	.word	0x080068d9
 80068fc:	080068d9 	.word	0x080068d9
 8006900:	080068d9 	.word	0x080068d9
 8006904:	080068d9 	.word	0x080068d9
 8006908:	0800695d 	.word	0x0800695d
 800690c:	080068d9 	.word	0x080068d9
 8006910:	080068d9 	.word	0x080068d9
 8006914:	080068d9 	.word	0x080068d9
 8006918:	080068d9 	.word	0x080068d9
 800691c:	08006a69 	.word	0x08006a69
 8006920:	0800698d 	.word	0x0800698d
 8006924:	08006a4b 	.word	0x08006a4b
 8006928:	080068d9 	.word	0x080068d9
 800692c:	080068d9 	.word	0x080068d9
 8006930:	08006a8b 	.word	0x08006a8b
 8006934:	080068d9 	.word	0x080068d9
 8006938:	0800698d 	.word	0x0800698d
 800693c:	080068d9 	.word	0x080068d9
 8006940:	080068d9 	.word	0x080068d9
 8006944:	08006a53 	.word	0x08006a53
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	1d1a      	adds	r2, r3, #4
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	602a      	str	r2, [r5, #0]
 8006950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006958:	2301      	movs	r3, #1
 800695a:	e0a3      	b.n	8006aa4 <_printf_i+0x1f4>
 800695c:	6820      	ldr	r0, [r4, #0]
 800695e:	6829      	ldr	r1, [r5, #0]
 8006960:	0606      	lsls	r6, r0, #24
 8006962:	f101 0304 	add.w	r3, r1, #4
 8006966:	d50a      	bpl.n	800697e <_printf_i+0xce>
 8006968:	680e      	ldr	r6, [r1, #0]
 800696a:	602b      	str	r3, [r5, #0]
 800696c:	2e00      	cmp	r6, #0
 800696e:	da03      	bge.n	8006978 <_printf_i+0xc8>
 8006970:	232d      	movs	r3, #45	; 0x2d
 8006972:	4276      	negs	r6, r6
 8006974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006978:	485e      	ldr	r0, [pc, #376]	; (8006af4 <_printf_i+0x244>)
 800697a:	230a      	movs	r3, #10
 800697c:	e019      	b.n	80069b2 <_printf_i+0x102>
 800697e:	680e      	ldr	r6, [r1, #0]
 8006980:	602b      	str	r3, [r5, #0]
 8006982:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006986:	bf18      	it	ne
 8006988:	b236      	sxthne	r6, r6
 800698a:	e7ef      	b.n	800696c <_printf_i+0xbc>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	6820      	ldr	r0, [r4, #0]
 8006990:	1d19      	adds	r1, r3, #4
 8006992:	6029      	str	r1, [r5, #0]
 8006994:	0601      	lsls	r1, r0, #24
 8006996:	d501      	bpl.n	800699c <_printf_i+0xec>
 8006998:	681e      	ldr	r6, [r3, #0]
 800699a:	e002      	b.n	80069a2 <_printf_i+0xf2>
 800699c:	0646      	lsls	r6, r0, #25
 800699e:	d5fb      	bpl.n	8006998 <_printf_i+0xe8>
 80069a0:	881e      	ldrh	r6, [r3, #0]
 80069a2:	4854      	ldr	r0, [pc, #336]	; (8006af4 <_printf_i+0x244>)
 80069a4:	2f6f      	cmp	r7, #111	; 0x6f
 80069a6:	bf0c      	ite	eq
 80069a8:	2308      	moveq	r3, #8
 80069aa:	230a      	movne	r3, #10
 80069ac:	2100      	movs	r1, #0
 80069ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069b2:	6865      	ldr	r5, [r4, #4]
 80069b4:	60a5      	str	r5, [r4, #8]
 80069b6:	2d00      	cmp	r5, #0
 80069b8:	bfa2      	ittt	ge
 80069ba:	6821      	ldrge	r1, [r4, #0]
 80069bc:	f021 0104 	bicge.w	r1, r1, #4
 80069c0:	6021      	strge	r1, [r4, #0]
 80069c2:	b90e      	cbnz	r6, 80069c8 <_printf_i+0x118>
 80069c4:	2d00      	cmp	r5, #0
 80069c6:	d04d      	beq.n	8006a64 <_printf_i+0x1b4>
 80069c8:	4615      	mov	r5, r2
 80069ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80069ce:	fb03 6711 	mls	r7, r3, r1, r6
 80069d2:	5dc7      	ldrb	r7, [r0, r7]
 80069d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069d8:	4637      	mov	r7, r6
 80069da:	42bb      	cmp	r3, r7
 80069dc:	460e      	mov	r6, r1
 80069de:	d9f4      	bls.n	80069ca <_printf_i+0x11a>
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d10b      	bne.n	80069fc <_printf_i+0x14c>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	07de      	lsls	r6, r3, #31
 80069e8:	d508      	bpl.n	80069fc <_printf_i+0x14c>
 80069ea:	6923      	ldr	r3, [r4, #16]
 80069ec:	6861      	ldr	r1, [r4, #4]
 80069ee:	4299      	cmp	r1, r3
 80069f0:	bfde      	ittt	le
 80069f2:	2330      	movle	r3, #48	; 0x30
 80069f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069fc:	1b52      	subs	r2, r2, r5
 80069fe:	6122      	str	r2, [r4, #16]
 8006a00:	f8cd a000 	str.w	sl, [sp]
 8006a04:	464b      	mov	r3, r9
 8006a06:	aa03      	add	r2, sp, #12
 8006a08:	4621      	mov	r1, r4
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	f7ff fee2 	bl	80067d4 <_printf_common>
 8006a10:	3001      	adds	r0, #1
 8006a12:	d14c      	bne.n	8006aae <_printf_i+0x1fe>
 8006a14:	f04f 30ff 	mov.w	r0, #4294967295
 8006a18:	b004      	add	sp, #16
 8006a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1e:	4835      	ldr	r0, [pc, #212]	; (8006af4 <_printf_i+0x244>)
 8006a20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a24:	6829      	ldr	r1, [r5, #0]
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a2c:	6029      	str	r1, [r5, #0]
 8006a2e:	061d      	lsls	r5, r3, #24
 8006a30:	d514      	bpl.n	8006a5c <_printf_i+0x1ac>
 8006a32:	07df      	lsls	r7, r3, #31
 8006a34:	bf44      	itt	mi
 8006a36:	f043 0320 	orrmi.w	r3, r3, #32
 8006a3a:	6023      	strmi	r3, [r4, #0]
 8006a3c:	b91e      	cbnz	r6, 8006a46 <_printf_i+0x196>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	f023 0320 	bic.w	r3, r3, #32
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	2310      	movs	r3, #16
 8006a48:	e7b0      	b.n	80069ac <_printf_i+0xfc>
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	f043 0320 	orr.w	r3, r3, #32
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	2378      	movs	r3, #120	; 0x78
 8006a54:	4828      	ldr	r0, [pc, #160]	; (8006af8 <_printf_i+0x248>)
 8006a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a5a:	e7e3      	b.n	8006a24 <_printf_i+0x174>
 8006a5c:	0659      	lsls	r1, r3, #25
 8006a5e:	bf48      	it	mi
 8006a60:	b2b6      	uxthmi	r6, r6
 8006a62:	e7e6      	b.n	8006a32 <_printf_i+0x182>
 8006a64:	4615      	mov	r5, r2
 8006a66:	e7bb      	b.n	80069e0 <_printf_i+0x130>
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	6826      	ldr	r6, [r4, #0]
 8006a6c:	6961      	ldr	r1, [r4, #20]
 8006a6e:	1d18      	adds	r0, r3, #4
 8006a70:	6028      	str	r0, [r5, #0]
 8006a72:	0635      	lsls	r5, r6, #24
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	d501      	bpl.n	8006a7c <_printf_i+0x1cc>
 8006a78:	6019      	str	r1, [r3, #0]
 8006a7a:	e002      	b.n	8006a82 <_printf_i+0x1d2>
 8006a7c:	0670      	lsls	r0, r6, #25
 8006a7e:	d5fb      	bpl.n	8006a78 <_printf_i+0x1c8>
 8006a80:	8019      	strh	r1, [r3, #0]
 8006a82:	2300      	movs	r3, #0
 8006a84:	6123      	str	r3, [r4, #16]
 8006a86:	4615      	mov	r5, r2
 8006a88:	e7ba      	b.n	8006a00 <_printf_i+0x150>
 8006a8a:	682b      	ldr	r3, [r5, #0]
 8006a8c:	1d1a      	adds	r2, r3, #4
 8006a8e:	602a      	str	r2, [r5, #0]
 8006a90:	681d      	ldr	r5, [r3, #0]
 8006a92:	6862      	ldr	r2, [r4, #4]
 8006a94:	2100      	movs	r1, #0
 8006a96:	4628      	mov	r0, r5
 8006a98:	f7f9 fba2 	bl	80001e0 <memchr>
 8006a9c:	b108      	cbz	r0, 8006aa2 <_printf_i+0x1f2>
 8006a9e:	1b40      	subs	r0, r0, r5
 8006aa0:	6060      	str	r0, [r4, #4]
 8006aa2:	6863      	ldr	r3, [r4, #4]
 8006aa4:	6123      	str	r3, [r4, #16]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aac:	e7a8      	b.n	8006a00 <_printf_i+0x150>
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	462a      	mov	r2, r5
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	47d0      	blx	sl
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d0ab      	beq.n	8006a14 <_printf_i+0x164>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	079b      	lsls	r3, r3, #30
 8006ac0:	d413      	bmi.n	8006aea <_printf_i+0x23a>
 8006ac2:	68e0      	ldr	r0, [r4, #12]
 8006ac4:	9b03      	ldr	r3, [sp, #12]
 8006ac6:	4298      	cmp	r0, r3
 8006ac8:	bfb8      	it	lt
 8006aca:	4618      	movlt	r0, r3
 8006acc:	e7a4      	b.n	8006a18 <_printf_i+0x168>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	47d0      	blx	sl
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d09b      	beq.n	8006a14 <_printf_i+0x164>
 8006adc:	3501      	adds	r5, #1
 8006ade:	68e3      	ldr	r3, [r4, #12]
 8006ae0:	9903      	ldr	r1, [sp, #12]
 8006ae2:	1a5b      	subs	r3, r3, r1
 8006ae4:	42ab      	cmp	r3, r5
 8006ae6:	dcf2      	bgt.n	8006ace <_printf_i+0x21e>
 8006ae8:	e7eb      	b.n	8006ac2 <_printf_i+0x212>
 8006aea:	2500      	movs	r5, #0
 8006aec:	f104 0619 	add.w	r6, r4, #25
 8006af0:	e7f5      	b.n	8006ade <_printf_i+0x22e>
 8006af2:	bf00      	nop
 8006af4:	08006d7d 	.word	0x08006d7d
 8006af8:	08006d8e 	.word	0x08006d8e

08006afc <memmove>:
 8006afc:	4288      	cmp	r0, r1
 8006afe:	b510      	push	{r4, lr}
 8006b00:	eb01 0402 	add.w	r4, r1, r2
 8006b04:	d902      	bls.n	8006b0c <memmove+0x10>
 8006b06:	4284      	cmp	r4, r0
 8006b08:	4623      	mov	r3, r4
 8006b0a:	d807      	bhi.n	8006b1c <memmove+0x20>
 8006b0c:	1e43      	subs	r3, r0, #1
 8006b0e:	42a1      	cmp	r1, r4
 8006b10:	d008      	beq.n	8006b24 <memmove+0x28>
 8006b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b1a:	e7f8      	b.n	8006b0e <memmove+0x12>
 8006b1c:	4402      	add	r2, r0
 8006b1e:	4601      	mov	r1, r0
 8006b20:	428a      	cmp	r2, r1
 8006b22:	d100      	bne.n	8006b26 <memmove+0x2a>
 8006b24:	bd10      	pop	{r4, pc}
 8006b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b2e:	e7f7      	b.n	8006b20 <memmove+0x24>

08006b30 <_realloc_r>:
 8006b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b34:	4680      	mov	r8, r0
 8006b36:	4614      	mov	r4, r2
 8006b38:	460e      	mov	r6, r1
 8006b3a:	b921      	cbnz	r1, 8006b46 <_realloc_r+0x16>
 8006b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b40:	4611      	mov	r1, r2
 8006b42:	f7ff bb85 	b.w	8006250 <_malloc_r>
 8006b46:	b92a      	cbnz	r2, 8006b54 <_realloc_r+0x24>
 8006b48:	f7ff fc9c 	bl	8006484 <_free_r>
 8006b4c:	4625      	mov	r5, r4
 8006b4e:	4628      	mov	r0, r5
 8006b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b54:	f000 f81b 	bl	8006b8e <_malloc_usable_size_r>
 8006b58:	4284      	cmp	r4, r0
 8006b5a:	4607      	mov	r7, r0
 8006b5c:	d802      	bhi.n	8006b64 <_realloc_r+0x34>
 8006b5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b62:	d812      	bhi.n	8006b8a <_realloc_r+0x5a>
 8006b64:	4621      	mov	r1, r4
 8006b66:	4640      	mov	r0, r8
 8006b68:	f7ff fb72 	bl	8006250 <_malloc_r>
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d0ed      	beq.n	8006b4e <_realloc_r+0x1e>
 8006b72:	42bc      	cmp	r4, r7
 8006b74:	4622      	mov	r2, r4
 8006b76:	4631      	mov	r1, r6
 8006b78:	bf28      	it	cs
 8006b7a:	463a      	movcs	r2, r7
 8006b7c:	f7ff fb32 	bl	80061e4 <memcpy>
 8006b80:	4631      	mov	r1, r6
 8006b82:	4640      	mov	r0, r8
 8006b84:	f7ff fc7e 	bl	8006484 <_free_r>
 8006b88:	e7e1      	b.n	8006b4e <_realloc_r+0x1e>
 8006b8a:	4635      	mov	r5, r6
 8006b8c:	e7df      	b.n	8006b4e <_realloc_r+0x1e>

08006b8e <_malloc_usable_size_r>:
 8006b8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b92:	1f18      	subs	r0, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	bfbc      	itt	lt
 8006b98:	580b      	ldrlt	r3, [r1, r0]
 8006b9a:	18c0      	addlt	r0, r0, r3
 8006b9c:	4770      	bx	lr
	...

08006ba0 <_init>:
 8006ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba2:	bf00      	nop
 8006ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba6:	bc08      	pop	{r3}
 8006ba8:	469e      	mov	lr, r3
 8006baa:	4770      	bx	lr

08006bac <_fini>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	bf00      	nop
 8006bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	469e      	mov	lr, r3
 8006bb6:	4770      	bx	lr
