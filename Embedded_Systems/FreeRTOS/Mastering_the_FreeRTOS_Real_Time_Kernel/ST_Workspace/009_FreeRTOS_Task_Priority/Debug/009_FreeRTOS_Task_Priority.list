
009_FreeRTOS_Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005798  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005990  08005990  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005990  08005990  00015990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005998  08005998  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005998  08005998  00015998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800599c  0800599c  0001599c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080059a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000049f8  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a10  20004a10  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017bb0  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003187  00000000  00000000  00037bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  0003ad80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001308  00000000  00000000  0003c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035cd  00000000  00000000  0003d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d3f  00000000  00000000  00040a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3df6  00000000  00000000  000567b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a5aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000551c  00000000  00000000  0012a5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005910 	.word	0x08005910

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08005910 	.word	0x08005910

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vTaskFunction>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vTaskFunction(void *pvParameters)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	char *pcTaskName;
	volatile uint32_t ul;

	pcTaskName = (char *)pvParameters;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_UART_Transmit(&huart2,(uint8_t *)pcTaskName, strlen(pcTaskName), HAL_MAX_DELAY);
 80004f0:	68f8      	ldr	r0, [r7, #12]
 80004f2:	f7ff fe6d 	bl	80001d0 <strlen>
 80004f6:	4603      	mov	r3, r0
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295
 80004fe:	68f9      	ldr	r1, [r7, #12]
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <vTaskFunction+0x38>)
 8000502:	f001 fdcc 	bl	800209e <HAL_UART_Transmit>
		for(ul = 0; ul < 4000000; ul++);
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	e002      	b.n	8000512 <vTaskFunction+0x2e>
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	3301      	adds	r3, #1
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a02      	ldr	r2, [pc, #8]	; (8000520 <vTaskFunction+0x3c>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d9f8      	bls.n	800050c <vTaskFunction+0x28>
		HAL_UART_Transmit(&huart2,(uint8_t *)pcTaskName, strlen(pcTaskName), HAL_MAX_DELAY);
 800051a:	e7e9      	b.n	80004f0 <vTaskFunction+0xc>
 800051c:	20000034 	.word	0x20000034
 8000520:	003d08ff 	.word	0x003d08ff

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fa87 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f829 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f8bb 	bl	80006ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000536:	f000 f88f 	bl	8000658 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(vTaskFunction, "Task 1", 1000, (void *)pcTextForTask1, 1, NULL);
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <main+0x4c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2200      	movs	r2, #0
 8000540:	9201      	str	r2, [sp, #4]
 8000542:	2201      	movs	r2, #1
 8000544:	9200      	str	r2, [sp, #0]
 8000546:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800054a:	490a      	ldr	r1, [pc, #40]	; (8000574 <main+0x50>)
 800054c:	480a      	ldr	r0, [pc, #40]	; (8000578 <main+0x54>)
 800054e:	f003 fbae 	bl	8003cae <xTaskCreate>
  xTaskCreate(vTaskFunction, "Task 2", 1000, (void *)pcTextForTask2, 2, NULL);
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <main+0x58>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2200      	movs	r2, #0
 8000558:	9201      	str	r2, [sp, #4]
 800055a:	2202      	movs	r2, #2
 800055c:	9200      	str	r2, [sp, #0]
 800055e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000562:	4907      	ldr	r1, [pc, #28]	; (8000580 <main+0x5c>)
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <main+0x54>)
 8000566:	f003 fba2 	bl	8003cae <xTaskCreate>

  vTaskStartScheduler();
 800056a:	f003 fce5 	bl	8003f38 <vTaskStartScheduler>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056e:	e7fe      	b.n	800056e <main+0x4a>
 8000570:	20000000 	.word	0x20000000
 8000574:	08005928 	.word	0x08005928
 8000578:	080004e5 	.word	0x080004e5
 800057c:	20000004 	.word	0x20000004
 8000580:	08005930 	.word	0x08005930

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f005 f9b4 	bl	8005900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a27      	ldr	r2, [pc, #156]	; (8000650 <SystemClock_Config+0xcc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xd0>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f4:	2308      	movs	r3, #8
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fd82 	bl	8001114 <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000616:	f000 f8ad 	bl	8000774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000626:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2105      	movs	r1, #5
 8000638:	4618      	mov	r0, r3
 800063a:	f000 ffe3 	bl	8001604 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000644:	f000 f896 	bl	8000774 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3750      	adds	r7, #80	; 0x50
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_USART2_UART_Init+0x50>)
 8000660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000690:	f001 fcb8 	bl	8002004 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800069a:	f000 f86b 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000034 	.word	0x20000034
 80006a8:	40004400 	.word	0x40004400

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_GPIO_Init+0x9c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a1f      	ldr	r2, [pc, #124]	; (8000748 <MX_GPIO_Init+0x9c>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_GPIO_Init+0x9c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_GPIO_Init+0x9c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a18      	ldr	r2, [pc, #96]	; (8000748 <MX_GPIO_Init+0x9c>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_GPIO_Init+0x9c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_GPIO_Init+0x9c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a11      	ldr	r2, [pc, #68]	; (8000748 <MX_GPIO_Init+0x9c>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_GPIO_Init+0x9c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <MX_GPIO_Init+0xa0>)
 800071e:	f000 fcdf 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000722:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_GPIO_Init+0xa0>)
 800073c:	f000 fb34 	bl	8000da8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40020c00 	.word	0x40020c00

08000750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d101      	bne.n	8000766 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000762:	f000 f98d 	bl	8000a80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40002000 	.word	0x40002000

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077c:	e7fe      	b.n	800077c <Error_Handler+0x8>
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_MspInit+0x54>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <HAL_MspInit+0x54>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6453      	str	r3, [r2, #68]	; 0x44
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x54>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <HAL_MspInit+0x54>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <HAL_MspInit+0x54>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_MspInit+0x54>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	210f      	movs	r1, #15
 80007c2:	f06f 0001 	mvn.w	r0, #1
 80007c6:	f000 fa33 	bl	8000c30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a1d      	ldr	r2, [pc, #116]	; (800086c <HAL_UART_MspInit+0x94>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d133      	bne.n	8000862 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <HAL_UART_MspInit+0x98>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <HAL_UART_MspInit+0x98>)
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <HAL_UART_MspInit+0x98>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_UART_MspInit+0x98>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a14      	ldr	r2, [pc, #80]	; (8000870 <HAL_UART_MspInit+0x98>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_UART_MspInit+0x98>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000832:	230c      	movs	r3, #12
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000842:	2307      	movs	r3, #7
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <HAL_UART_MspInit+0x9c>)
 800084e:	f000 faab 	bl	8000da8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2105      	movs	r1, #5
 8000856:	2026      	movs	r0, #38	; 0x26
 8000858:	f000 f9ea 	bl	8000c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800085c:	2026      	movs	r0, #38	; 0x26
 800085e:	f000 fa03 	bl	8000c68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000862:	bf00      	nop
 8000864:	3728      	adds	r7, #40	; 0x28
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40004400 	.word	0x40004400
 8000870:	40023800 	.word	0x40023800
 8000874:	40020000 	.word	0x40020000

08000878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08e      	sub	sp, #56	; 0x38
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	4b33      	ldr	r3, [pc, #204]	; (800095c <HAL_InitTick+0xe4>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a32      	ldr	r2, [pc, #200]	; (800095c <HAL_InitTick+0xe4>)
 8000892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b30      	ldr	r3, [pc, #192]	; (800095c <HAL_InitTick+0xe4>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a4:	f107 0210 	add.w	r2, r7, #16
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 f8c8 	bl	8001a44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008b4:	6a3b      	ldr	r3, [r7, #32]
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d103      	bne.n	80008c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008be:	f001 f899 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 80008c2:	6378      	str	r0, [r7, #52]	; 0x34
 80008c4:	e004      	b.n	80008d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008c6:	f001 f895 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 80008ca:	4603      	mov	r3, r0
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d2:	4a23      	ldr	r2, [pc, #140]	; (8000960 <HAL_InitTick+0xe8>)
 80008d4:	fba2 2303 	umull	r2, r3, r2, r3
 80008d8:	0c9b      	lsrs	r3, r3, #18
 80008da:	3b01      	subs	r3, #1
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <HAL_InitTick+0xec>)
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <HAL_InitTick+0xf0>)
 80008e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <HAL_InitTick+0xec>)
 80008e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ea:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80008ec:	4a1d      	ldr	r2, [pc, #116]	; (8000964 <HAL_InitTick+0xec>)
 80008ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <HAL_InitTick+0xec>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <HAL_InitTick+0xec>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <HAL_InitTick+0xec>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000904:	4817      	ldr	r0, [pc, #92]	; (8000964 <HAL_InitTick+0xec>)
 8000906:	f001 f8cf 	bl	8001aa8 <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000910:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000914:	2b00      	cmp	r3, #0
 8000916:	d11b      	bne.n	8000950 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000918:	4812      	ldr	r0, [pc, #72]	; (8000964 <HAL_InitTick+0xec>)
 800091a:	f001 f91f 	bl	8001b5c <HAL_TIM_Base_Start_IT>
 800091e:	4603      	mov	r3, r0
 8000920:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000924:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000928:	2b00      	cmp	r3, #0
 800092a:	d111      	bne.n	8000950 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800092c:	202d      	movs	r0, #45	; 0x2d
 800092e:	f000 f99b 	bl	8000c68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b0f      	cmp	r3, #15
 8000936:	d808      	bhi.n	800094a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000938:	2200      	movs	r2, #0
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	202d      	movs	r0, #45	; 0x2d
 800093e:	f000 f977 	bl	8000c30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <HAL_InitTick+0xf4>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	e002      	b.n	8000950 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000950:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000954:	4618      	mov	r0, r3
 8000956:	3738      	adds	r7, #56	; 0x38
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	431bde83 	.word	0x431bde83
 8000964:	20000078 	.word	0x20000078
 8000968:	40002000 	.word	0x40002000
 800096c:	2000000c 	.word	0x2000000c

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <USART2_IRQHandler+0x10>)
 80009a2:	f001 fc0f 	bl	80021c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000034 	.word	0x20000034

080009b0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80009b6:	f001 f941 	bl	8001c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000078 	.word	0x20000078

080009c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ee:	490e      	ldr	r1, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a04:	4c0b      	ldr	r4, [pc, #44]	; (8000a34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a12:	f7ff ffd7 	bl	80009c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f004 ff41 	bl	800589c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a1a:	f7ff fd83 	bl	8000524 <main>
  bx  lr    
 8000a1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000a2c:	080059a0 	.word	0x080059a0
  ldr r2, =_sbss
 8000a30:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000a34:	20004a10 	.word	0x20004a10

08000a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <HAL_Init+0x40>)
 8000a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_Init+0x40>)
 8000a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_Init+0x40>)
 8000a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f8d8 	bl	8000c1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f7ff ff04 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff fe86 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023c00 	.word	0x40023c00

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000010 	.word	0x20000010
 8000aa4:	200000c0 	.word	0x200000c0

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200000c0 	.word	0x200000c0

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	db0b      	blt.n	8000b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f003 021f 	and.w	r2, r3, #31
 8000b3c:	4907      	ldr	r1, [pc, #28]	; (8000b5c <__NVIC_EnableIRQ+0x38>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	2001      	movs	r0, #1
 8000b46:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ff4c 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c42:	f7ff ff61 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	68b9      	ldr	r1, [r7, #8]
 8000c4c:	6978      	ldr	r0, [r7, #20]
 8000c4e:	f7ff ffb1 	bl	8000bb4 <NVIC_EncodePriority>
 8000c52:	4602      	mov	r2, r0
 8000c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff80 	bl	8000b60 <__NVIC_SetPriority>
}
 8000c60:	bf00      	nop
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff54 	bl	8000b24 <__NVIC_EnableIRQ>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c92:	f7ff ff09 	bl	8000aa8 <HAL_GetTick>
 8000c96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d008      	beq.n	8000cb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e052      	b.n	8000d5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0216 	bic.w	r2, r2, #22
 8000cc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	695a      	ldr	r2, [r3, #20]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d103      	bne.n	8000ce6 <HAL_DMA_Abort+0x62>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d007      	beq.n	8000cf6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 0208 	bic.w	r2, r2, #8
 8000cf4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f022 0201 	bic.w	r2, r2, #1
 8000d04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d06:	e013      	b.n	8000d30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d08:	f7ff fece 	bl	8000aa8 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b05      	cmp	r3, #5
 8000d14:	d90c      	bls.n	8000d30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2220      	movs	r2, #32
 8000d1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2203      	movs	r2, #3
 8000d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e015      	b.n	8000d5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1e4      	bne.n	8000d08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d42:	223f      	movs	r2, #63	; 0x3f
 8000d44:	409a      	lsls	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d004      	beq.n	8000d82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00c      	b.n	8000d9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2205      	movs	r2, #5
 8000d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f022 0201 	bic.w	r2, r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	e16b      	b.n	800109c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f040 815a 	bne.w	8001096 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d005      	beq.n	8000dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d130      	bne.n	8000e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	f003 0201 	and.w	r2, r3, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d017      	beq.n	8000e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d123      	bne.n	8000eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	69b9      	ldr	r1, [r7, #24]
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0203 	and.w	r2, r3, #3
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80b4 	beq.w	8001096 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b60      	ldr	r3, [pc, #384]	; (80010b4 <HAL_GPIO_Init+0x30c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a5f      	ldr	r2, [pc, #380]	; (80010b4 <HAL_GPIO_Init+0x30c>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b5d      	ldr	r3, [pc, #372]	; (80010b4 <HAL_GPIO_Init+0x30c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4a:	4a5b      	ldr	r2, [pc, #364]	; (80010b8 <HAL_GPIO_Init+0x310>)
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a52      	ldr	r2, [pc, #328]	; (80010bc <HAL_GPIO_Init+0x314>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d02b      	beq.n	8000fce <HAL_GPIO_Init+0x226>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a51      	ldr	r2, [pc, #324]	; (80010c0 <HAL_GPIO_Init+0x318>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d025      	beq.n	8000fca <HAL_GPIO_Init+0x222>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a50      	ldr	r2, [pc, #320]	; (80010c4 <HAL_GPIO_Init+0x31c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d01f      	beq.n	8000fc6 <HAL_GPIO_Init+0x21e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4f      	ldr	r2, [pc, #316]	; (80010c8 <HAL_GPIO_Init+0x320>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d019      	beq.n	8000fc2 <HAL_GPIO_Init+0x21a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4e      	ldr	r2, [pc, #312]	; (80010cc <HAL_GPIO_Init+0x324>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d013      	beq.n	8000fbe <HAL_GPIO_Init+0x216>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4d      	ldr	r2, [pc, #308]	; (80010d0 <HAL_GPIO_Init+0x328>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d00d      	beq.n	8000fba <HAL_GPIO_Init+0x212>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_GPIO_Init+0x32c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d007      	beq.n	8000fb6 <HAL_GPIO_Init+0x20e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4b      	ldr	r2, [pc, #300]	; (80010d8 <HAL_GPIO_Init+0x330>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_GPIO_Init+0x20a>
 8000fae:	2307      	movs	r3, #7
 8000fb0:	e00e      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fb2:	2308      	movs	r3, #8
 8000fb4:	e00c      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	e00a      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fba:	2305      	movs	r3, #5
 8000fbc:	e008      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e004      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x228>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	69fa      	ldr	r2, [r7, #28]
 8000fd2:	f002 0203 	and.w	r2, r2, #3
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	4093      	lsls	r3, r2
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe0:	4935      	ldr	r1, [pc, #212]	; (80010b8 <HAL_GPIO_Init+0x310>)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fee:	4b3b      	ldr	r3, [pc, #236]	; (80010dc <HAL_GPIO_Init+0x334>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001012:	4a32      	ldr	r2, [pc, #200]	; (80010dc <HAL_GPIO_Init+0x334>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001018:	4b30      	ldr	r3, [pc, #192]	; (80010dc <HAL_GPIO_Init+0x334>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800103c:	4a27      	ldr	r2, [pc, #156]	; (80010dc <HAL_GPIO_Init+0x334>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <HAL_GPIO_Init+0x334>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001066:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <HAL_GPIO_Init+0x334>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_GPIO_Init+0x334>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <HAL_GPIO_Init+0x334>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	2b0f      	cmp	r3, #15
 80010a0:	f67f ae90 	bls.w	8000dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40021400 	.word	0x40021400
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40021c00 	.word	0x40021c00
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010fc:	e003      	b.n	8001106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	619a      	str	r2, [r3, #24]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e267      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d075      	beq.n	800121e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001132:	4b88      	ldr	r3, [pc, #544]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	2b04      	cmp	r3, #4
 800113c:	d00c      	beq.n	8001158 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113e:	4b85      	ldr	r3, [pc, #532]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001146:	2b08      	cmp	r3, #8
 8001148:	d112      	bne.n	8001170 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114a:	4b82      	ldr	r3, [pc, #520]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001156:	d10b      	bne.n	8001170 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	4b7e      	ldr	r3, [pc, #504]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d05b      	beq.n	800121c <HAL_RCC_OscConfig+0x108>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d157      	bne.n	800121c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e242      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001178:	d106      	bne.n	8001188 <HAL_RCC_OscConfig+0x74>
 800117a:	4b76      	ldr	r3, [pc, #472]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a75      	ldr	r2, [pc, #468]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e01d      	b.n	80011c4 <HAL_RCC_OscConfig+0xb0>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x98>
 8001192:	4b70      	ldr	r3, [pc, #448]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a6f      	ldr	r2, [pc, #444]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b6d      	ldr	r3, [pc, #436]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6c      	ldr	r2, [pc, #432]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e00b      	b.n	80011c4 <HAL_RCC_OscConfig+0xb0>
 80011ac:	4b69      	ldr	r3, [pc, #420]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a68      	ldr	r2, [pc, #416]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b66      	ldr	r3, [pc, #408]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a65      	ldr	r2, [pc, #404]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d013      	beq.n	80011f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fc6c 	bl	8000aa8 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fc68 	bl	8000aa8 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	; 0x64
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e207      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e6:	4b5b      	ldr	r3, [pc, #364]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0xc0>
 80011f2:	e014      	b.n	800121e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fc58 	bl	8000aa8 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fc:	f7ff fc54 	bl	8000aa8 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b64      	cmp	r3, #100	; 0x64
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e1f3      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0xe8>
 800121a:	e000      	b.n	800121e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d063      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800122a:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00b      	beq.n	800124e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001236:	4b47      	ldr	r3, [pc, #284]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123e:	2b08      	cmp	r3, #8
 8001240:	d11c      	bne.n	800127c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001242:	4b44      	ldr	r3, [pc, #272]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d116      	bne.n	800127c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	4b41      	ldr	r3, [pc, #260]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d005      	beq.n	8001266 <HAL_RCC_OscConfig+0x152>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d001      	beq.n	8001266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e1c7      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4937      	ldr	r1, [pc, #220]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	e03a      	b.n	80012f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d020      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001284:	4b34      	ldr	r3, [pc, #208]	; (8001358 <HAL_RCC_OscConfig+0x244>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128a:	f7ff fc0d 	bl	8000aa8 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001292:	f7ff fc09 	bl	8000aa8 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e1a8      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4925      	ldr	r1, [pc, #148]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
 80012c4:	e015      	b.n	80012f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <HAL_RCC_OscConfig+0x244>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fbec 	bl	8000aa8 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d4:	f7ff fbe8 	bl	8000aa8 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e187      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d036      	beq.n	800136c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d016      	beq.n	8001334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_RCC_OscConfig+0x248>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130c:	f7ff fbcc 	bl	8000aa8 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001314:	f7ff fbc8 	bl	8000aa8 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e167      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x200>
 8001332:	e01b      	b.n	800136c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_RCC_OscConfig+0x248>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133a:	f7ff fbb5 	bl	8000aa8 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001340:	e00e      	b.n	8001360 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001342:	f7ff fbb1 	bl	8000aa8 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d907      	bls.n	8001360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e150      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
 8001354:	40023800 	.word	0x40023800
 8001358:	42470000 	.word	0x42470000
 800135c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001360:	4b88      	ldr	r3, [pc, #544]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1ea      	bne.n	8001342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 8097 	beq.w	80014a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137e:	4b81      	ldr	r3, [pc, #516]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10f      	bne.n	80013aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b7d      	ldr	r3, [pc, #500]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a7c      	ldr	r2, [pc, #496]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b7a      	ldr	r3, [pc, #488]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013a6:	2301      	movs	r3, #1
 80013a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013aa:	4b77      	ldr	r3, [pc, #476]	; (8001588 <HAL_RCC_OscConfig+0x474>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d118      	bne.n	80013e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b6:	4b74      	ldr	r3, [pc, #464]	; (8001588 <HAL_RCC_OscConfig+0x474>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a73      	ldr	r2, [pc, #460]	; (8001588 <HAL_RCC_OscConfig+0x474>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fb71 	bl	8000aa8 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ca:	f7ff fb6d 	bl	8000aa8 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e10c      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <HAL_RCC_OscConfig+0x474>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d106      	bne.n	80013fe <HAL_RCC_OscConfig+0x2ea>
 80013f0:	4b64      	ldr	r3, [pc, #400]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f4:	4a63      	ldr	r2, [pc, #396]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6713      	str	r3, [r2, #112]	; 0x70
 80013fc:	e01c      	b.n	8001438 <HAL_RCC_OscConfig+0x324>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x30c>
 8001406:	4b5f      	ldr	r3, [pc, #380]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a5e      	ldr	r2, [pc, #376]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
 8001412:	4b5c      	ldr	r3, [pc, #368]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001416:	4a5b      	ldr	r2, [pc, #364]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6713      	str	r3, [r2, #112]	; 0x70
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0x324>
 8001420:	4b58      	ldr	r3, [pc, #352]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	4a57      	ldr	r2, [pc, #348]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	6713      	str	r3, [r2, #112]	; 0x70
 800142c:	4b55      	ldr	r3, [pc, #340]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001430:	4a54      	ldr	r2, [pc, #336]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001432:	f023 0304 	bic.w	r3, r3, #4
 8001436:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d015      	beq.n	800146c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fb32 	bl	8000aa8 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001446:	e00a      	b.n	800145e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff fb2e 	bl	8000aa8 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0cb      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145e:	4b49      	ldr	r3, [pc, #292]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0ee      	beq.n	8001448 <HAL_RCC_OscConfig+0x334>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7ff fb1c 	bl	8000aa8 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001472:	e00a      	b.n	800148a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001474:	f7ff fb18 	bl	8000aa8 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e0b5      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1ee      	bne.n	8001474 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001496:	7dfb      	ldrb	r3, [r7, #23]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149c:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	4a38      	ldr	r2, [pc, #224]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80014a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80a1 	beq.w	80015f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d05c      	beq.n	8001578 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d141      	bne.n	800154a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <HAL_RCC_OscConfig+0x478>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff faec 	bl	8000aa8 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff fae8 	bl	8000aa8 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e087      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69da      	ldr	r2, [r3, #28]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	019b      	lsls	r3, r3, #6
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	085b      	lsrs	r3, r3, #1
 800150a:	3b01      	subs	r3, #1
 800150c:	041b      	lsls	r3, r3, #16
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	061b      	lsls	r3, r3, #24
 8001516:	491b      	ldr	r1, [pc, #108]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_RCC_OscConfig+0x478>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff fac1 	bl	8000aa8 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152a:	f7ff fabd 	bl	8000aa8 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e05c      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x416>
 8001548:	e054      	b.n	80015f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_RCC_OscConfig+0x478>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff faaa 	bl	8000aa8 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff faa6 	bl	8000aa8 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e045      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x444>
 8001576:	e03d      	b.n	80015f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d107      	bne.n	8001590 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e038      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
 8001584:	40023800 	.word	0x40023800
 8001588:	40007000 	.word	0x40007000
 800158c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_RCC_OscConfig+0x4ec>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d028      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d121      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d11a      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015c0:	4013      	ands	r3, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d111      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	3b01      	subs	r3, #1
 80015da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0cc      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001618:	4b68      	ldr	r3, [pc, #416]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d90c      	bls.n	8001640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b65      	ldr	r3, [pc, #404]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b63      	ldr	r3, [pc, #396]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0b8      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d020      	beq.n	800168e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001658:	4b59      	ldr	r3, [pc, #356]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a58      	ldr	r2, [pc, #352]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001670:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4a52      	ldr	r2, [pc, #328]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800167a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800167c:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	494d      	ldr	r1, [pc, #308]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d044      	beq.n	8001724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d119      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e07f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d003      	beq.n	80016c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e06f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e067      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e2:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f023 0203 	bic.w	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4934      	ldr	r1, [pc, #208]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f4:	f7ff f9d8 	bl	8000aa8 <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fc:	f7ff f9d4 	bl	8000aa8 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e04f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 020c 	and.w	r2, r3, #12
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	429a      	cmp	r2, r3
 8001722:	d1eb      	bne.n	80016fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001724:	4b25      	ldr	r3, [pc, #148]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d20c      	bcs.n	800174c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e032      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4916      	ldr	r1, [pc, #88]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	490e      	ldr	r1, [pc, #56]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800178a:	f000 f821 	bl	80017d0 <HAL_RCC_GetSysClockFreq>
 800178e:	4602      	mov	r2, r0
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	490a      	ldr	r1, [pc, #40]	; (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	5ccb      	ldrb	r3, [r1, r3]
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x1c8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f864 	bl	8000878 <HAL_InitTick>

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00
 80017c0:	40023800 	.word	0x40023800
 80017c4:	08005978 	.word	0x08005978
 80017c8:	20000008 	.word	0x20000008
 80017cc:	2000000c 	.word	0x2000000c

080017d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d4:	b094      	sub	sp, #80	; 0x50
 80017d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	647b      	str	r3, [r7, #68]	; 0x44
 80017dc:	2300      	movs	r3, #0
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017e0:	2300      	movs	r3, #0
 80017e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e8:	4b79      	ldr	r3, [pc, #484]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d00d      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x40>
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	f200 80e1 	bhi.w	80019bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x34>
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d003      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0x3a>
 8001802:	e0db      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001804:	4b73      	ldr	r3, [pc, #460]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001808:	e0db      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800180a:	4b73      	ldr	r3, [pc, #460]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800180c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800180e:	e0d8      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001810:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001818:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800181a:	4b6d      	ldr	r3, [pc, #436]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d063      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001826:	4b6a      	ldr	r3, [pc, #424]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	099b      	lsrs	r3, r3, #6
 800182c:	2200      	movs	r2, #0
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001830:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
 800183a:	2300      	movs	r3, #0
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
 800183e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001842:	4622      	mov	r2, r4
 8001844:	462b      	mov	r3, r5
 8001846:	f04f 0000 	mov.w	r0, #0
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	0159      	lsls	r1, r3, #5
 8001850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001854:	0150      	lsls	r0, r2, #5
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4621      	mov	r1, r4
 800185c:	1a51      	subs	r1, r2, r1
 800185e:	6139      	str	r1, [r7, #16]
 8001860:	4629      	mov	r1, r5
 8001862:	eb63 0301 	sbc.w	r3, r3, r1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001874:	4659      	mov	r1, fp
 8001876:	018b      	lsls	r3, r1, #6
 8001878:	4651      	mov	r1, sl
 800187a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800187e:	4651      	mov	r1, sl
 8001880:	018a      	lsls	r2, r1, #6
 8001882:	4651      	mov	r1, sl
 8001884:	ebb2 0801 	subs.w	r8, r2, r1
 8001888:	4659      	mov	r1, fp
 800188a:	eb63 0901 	sbc.w	r9, r3, r1
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800189a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800189e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a2:	4690      	mov	r8, r2
 80018a4:	4699      	mov	r9, r3
 80018a6:	4623      	mov	r3, r4
 80018a8:	eb18 0303 	adds.w	r3, r8, r3
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	462b      	mov	r3, r5
 80018b0:	eb49 0303 	adc.w	r3, r9, r3
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018c2:	4629      	mov	r1, r5
 80018c4:	024b      	lsls	r3, r1, #9
 80018c6:	4621      	mov	r1, r4
 80018c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018cc:	4621      	mov	r1, r4
 80018ce:	024a      	lsls	r2, r1, #9
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d6:	2200      	movs	r2, #0
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80018da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018e0:	f7fe fc7e 	bl	80001e0 <__aeabi_uldivmod>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4613      	mov	r3, r2
 80018ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018ec:	e058      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ee:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	2200      	movs	r2, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	4611      	mov	r1, r2
 80018fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018fe:	623b      	str	r3, [r7, #32]
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
 8001904:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001908:	4642      	mov	r2, r8
 800190a:	464b      	mov	r3, r9
 800190c:	f04f 0000 	mov.w	r0, #0
 8001910:	f04f 0100 	mov.w	r1, #0
 8001914:	0159      	lsls	r1, r3, #5
 8001916:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191a:	0150      	lsls	r0, r2, #5
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4641      	mov	r1, r8
 8001922:	ebb2 0a01 	subs.w	sl, r2, r1
 8001926:	4649      	mov	r1, r9
 8001928:	eb63 0b01 	sbc.w	fp, r3, r1
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001938:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800193c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001940:	ebb2 040a 	subs.w	r4, r2, sl
 8001944:	eb63 050b 	sbc.w	r5, r3, fp
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	00eb      	lsls	r3, r5, #3
 8001952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001956:	00e2      	lsls	r2, r4, #3
 8001958:	4614      	mov	r4, r2
 800195a:	461d      	mov	r5, r3
 800195c:	4643      	mov	r3, r8
 800195e:	18e3      	adds	r3, r4, r3
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	464b      	mov	r3, r9
 8001964:	eb45 0303 	adc.w	r3, r5, r3
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001976:	4629      	mov	r1, r5
 8001978:	028b      	lsls	r3, r1, #10
 800197a:	4621      	mov	r1, r4
 800197c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001980:	4621      	mov	r1, r4
 8001982:	028a      	lsls	r2, r1, #10
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198a:	2200      	movs	r2, #0
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	61fa      	str	r2, [r7, #28]
 8001990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001994:	f7fe fc24 	bl	80001e0 <__aeabi_uldivmod>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4613      	mov	r3, r2
 800199e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	3301      	adds	r3, #1
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ba:	e002      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3750      	adds	r7, #80	; 0x50
 80019c8:	46bd      	mov	sp, r7
 80019ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	007a1200 	.word	0x007a1200

080019dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008

080019f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019f8:	f7ff fff0 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	0a9b      	lsrs	r3, r3, #10
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	4903      	ldr	r1, [pc, #12]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0a:	5ccb      	ldrb	r3, [r1, r3]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	08005988 	.word	0x08005988

08001a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a20:	f7ff ffdc 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	0b5b      	lsrs	r3, r3, #13
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	4903      	ldr	r1, [pc, #12]	; (8001a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a32:	5ccb      	ldrb	r3, [r1, r3]
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	08005988 	.word	0x08005988

08001a44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	220f      	movs	r2, #15
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0203 	and.w	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	08db      	lsrs	r3, r3, #3
 8001a7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <HAL_RCC_GetClockConfig+0x60>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0207 	and.w	r2, r3, #7
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	601a      	str	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e041      	b.n	8001b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f839 	bl	8001b46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f000 f9d8 	bl	8001e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d001      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e04e      	b.n	8001c12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a23      	ldr	r2, [pc, #140]	; (8001c20 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d022      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x80>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9e:	d01d      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x80>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1f      	ldr	r2, [pc, #124]	; (8001c24 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d018      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x80>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d013      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x80>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00e      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x80>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x80>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	; (8001c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x80>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d111      	bne.n	8001c00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d010      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfe:	e007      	b.n	8001c10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40000400 	.word	0x40000400
 8001c28:	40000800 	.word	0x40000800
 8001c2c:	40000c00 	.word	0x40000c00
 8001c30:	40010400 	.word	0x40010400
 8001c34:	40014000 	.word	0x40014000
 8001c38:	40001800 	.word	0x40001800

08001c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d122      	bne.n	8001c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d11b      	bne.n	8001c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0202 	mvn.w	r2, #2
 8001c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8ee 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8e0 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f8f1 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d122      	bne.n	8001cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d11b      	bne.n	8001cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0204 	mvn.w	r2, #4
 8001cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8c4 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
 8001cd8:	e005      	b.n	8001ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8b6 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f8c7 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d122      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d11b      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0208 	mvn.w	r2, #8
 8001d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2204      	movs	r2, #4
 8001d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f89a 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
 8001d2c:	e005      	b.n	8001d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f88c 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f89d 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d122      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d11b      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0210 	mvn.w	r2, #16
 8001d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2208      	movs	r2, #8
 8001d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f870 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
 8001d80:	e005      	b.n	8001d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f862 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f873 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d107      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0201 	mvn.w	r2, #1
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe fcc8 	bl	8000750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	2b80      	cmp	r3, #128	; 0x80
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd8:	2b80      	cmp	r3, #128	; 0x80
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f902 	bl	8001ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	2b40      	cmp	r3, #64	; 0x40
 8001df8:	d10e      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e04:	2b40      	cmp	r3, #64	; 0x40
 8001e06:	d107      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f838 	bl	8001e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d10e      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	d107      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0220 	mvn.w	r2, #32
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8cc 	bl	8001fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a40      	ldr	r2, [pc, #256]	; (8001fb0 <TIM_Base_SetConfig+0x114>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d013      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eba:	d00f      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3d      	ldr	r2, [pc, #244]	; (8001fb4 <TIM_Base_SetConfig+0x118>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00b      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a3c      	ldr	r2, [pc, #240]	; (8001fb8 <TIM_Base_SetConfig+0x11c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d007      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a3b      	ldr	r2, [pc, #236]	; (8001fbc <TIM_Base_SetConfig+0x120>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d003      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3a      	ldr	r2, [pc, #232]	; (8001fc0 <TIM_Base_SetConfig+0x124>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d108      	bne.n	8001eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a2f      	ldr	r2, [pc, #188]	; (8001fb0 <TIM_Base_SetConfig+0x114>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d02b      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efc:	d027      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a2c      	ldr	r2, [pc, #176]	; (8001fb4 <TIM_Base_SetConfig+0x118>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d023      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a2b      	ldr	r2, [pc, #172]	; (8001fb8 <TIM_Base_SetConfig+0x11c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01f      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a2a      	ldr	r2, [pc, #168]	; (8001fbc <TIM_Base_SetConfig+0x120>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01b      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <TIM_Base_SetConfig+0x124>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d017      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <TIM_Base_SetConfig+0x128>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a27      	ldr	r2, [pc, #156]	; (8001fc8 <TIM_Base_SetConfig+0x12c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00f      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a26      	ldr	r2, [pc, #152]	; (8001fcc <TIM_Base_SetConfig+0x130>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00b      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a25      	ldr	r2, [pc, #148]	; (8001fd0 <TIM_Base_SetConfig+0x134>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d007      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a24      	ldr	r2, [pc, #144]	; (8001fd4 <TIM_Base_SetConfig+0x138>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d003      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <TIM_Base_SetConfig+0x13c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d108      	bne.n	8001f60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <TIM_Base_SetConfig+0x114>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <TIM_Base_SetConfig+0xf8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <TIM_Base_SetConfig+0x124>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d103      	bne.n	8001f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	615a      	str	r2, [r3, #20]
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40000800 	.word	0x40000800
 8001fbc:	40000c00 	.word	0x40000c00
 8001fc0:	40010400 	.word	0x40010400
 8001fc4:	40014000 	.word	0x40014000
 8001fc8:	40014400 	.word	0x40014400
 8001fcc:	40014800 	.word	0x40014800
 8001fd0:	40001800 	.word	0x40001800
 8001fd4:	40001c00 	.word	0x40001c00
 8001fd8:	40002000 	.word	0x40002000

08001fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e03f      	b.n	8002096 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fbd4 	bl	80007d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2224      	movs	r2, #36	; 0x24
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fd7b 	bl	8002b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800205c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800206c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800207c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b08a      	sub	sp, #40	; 0x28
 80020a2:	af02      	add	r7, sp, #8
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	603b      	str	r3, [r7, #0]
 80020aa:	4613      	mov	r3, r2
 80020ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d17c      	bne.n	80021b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <HAL_UART_Transmit+0x2c>
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e075      	b.n	80021ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_UART_Transmit+0x3e>
 80020d8:	2302      	movs	r3, #2
 80020da:	e06e      	b.n	80021ba <HAL_UART_Transmit+0x11c>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2221      	movs	r2, #33	; 0x21
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020f2:	f7fe fcd9 	bl	8000aa8 <HAL_GetTick>
 80020f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	88fa      	ldrh	r2, [r7, #6]
 80020fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	88fa      	ldrh	r2, [r7, #6]
 8002102:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210c:	d108      	bne.n	8002120 <HAL_UART_Transmit+0x82>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d104      	bne.n	8002120 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	e003      	b.n	8002128 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002130:	e02a      	b.n	8002188 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2200      	movs	r2, #0
 800213a:	2180      	movs	r1, #128	; 0x80
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 faf9 	bl	8002734 <UART_WaitOnFlagUntilTimeout>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e036      	b.n	80021ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10b      	bne.n	800216a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002160:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	3302      	adds	r3, #2
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	e007      	b.n	800217a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	3301      	adds	r3, #1
 8002178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1cf      	bne.n	8002132 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2200      	movs	r2, #0
 800219a:	2140      	movs	r1, #64	; 0x40
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fac9 	bl	8002734 <UART_WaitOnFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e006      	b.n	80021ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e000      	b.n	80021ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b0ba      	sub	sp, #232	; 0xe8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10f      	bne.n	800222a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800220a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d009      	beq.n	800222a <HAL_UART_IRQHandler+0x66>
 8002216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fbd3 	bl	80029ce <UART_Receive_IT>
      return;
 8002228:	e256      	b.n	80026d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800222a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80de 	beq.w	80023f0 <HAL_UART_IRQHandler+0x22c>
 8002234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002244:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80d1 	beq.w	80023f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800224e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_UART_IRQHandler+0xae>
 800225a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_UART_IRQHandler+0xd2>
 800227e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f043 0202 	orr.w	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_UART_IRQHandler+0xf6>
 80022a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f043 0204 	orr.w	r2, r3, #4
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d011      	beq.n	80022ea <HAL_UART_IRQHandler+0x126>
 80022c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f043 0208 	orr.w	r2, r3, #8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 81ed 	beq.w	80026ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_UART_IRQHandler+0x14e>
 8002300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002304:	f003 0320 	and.w	r3, r3, #32
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fb5e 	bl	80029ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231c:	2b40      	cmp	r3, #64	; 0x40
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <HAL_UART_IRQHandler+0x17a>
 8002336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800233a:	2b00      	cmp	r3, #0
 800233c:	d04f      	beq.n	80023de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fa66 	bl	8002810 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d141      	bne.n	80023d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3314      	adds	r3, #20
 8002358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002360:	e853 3f00 	ldrex	r3, [r3]
 8002364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002368:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800236c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3314      	adds	r3, #20
 800237a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800237e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800238a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800238e:	e841 2300 	strex	r3, r2, [r1]
 8002392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1d9      	bne.n	8002352 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d013      	beq.n	80023ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	4a7d      	ldr	r2, [pc, #500]	; (80025a0 <HAL_UART_IRQHandler+0x3dc>)
 80023ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fcd6 	bl	8000d64 <HAL_DMA_Abort_IT>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d016      	beq.n	80023ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023c8:	4610      	mov	r0, r2
 80023ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023cc:	e00e      	b.n	80023ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f99a 	bl	8002708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d4:	e00a      	b.n	80023ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f996 	bl	8002708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023dc:	e006      	b.n	80023ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f992 	bl	8002708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023ea:	e170      	b.n	80026ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ec:	bf00      	nop
    return;
 80023ee:	e16e      	b.n	80026ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	f040 814a 	bne.w	800268e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8143 	beq.w	800268e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 813c 	beq.w	800268e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002436:	2b40      	cmp	r3, #64	; 0x40
 8002438:	f040 80b4 	bne.w	80025a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002448:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8140 	beq.w	80026d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800245a:	429a      	cmp	r2, r3
 800245c:	f080 8139 	bcs.w	80026d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002466:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002472:	f000 8088 	beq.w	8002586 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	330c      	adds	r3, #12
 800247c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002480:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002484:	e853 3f00 	ldrex	r3, [r3]
 8002488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800248c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	330c      	adds	r3, #12
 800249e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80024ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024b2:	e841 2300 	strex	r3, r2, [r1]
 80024b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1d9      	bne.n	8002476 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	3314      	adds	r3, #20
 80024c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024cc:	e853 3f00 	ldrex	r3, [r3]
 80024d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3314      	adds	r3, #20
 80024e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024f2:	e841 2300 	strex	r3, r2, [r1]
 80024f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1e1      	bne.n	80024c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3314      	adds	r3, #20
 8002504:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002508:	e853 3f00 	ldrex	r3, [r3]
 800250c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800250e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3314      	adds	r3, #20
 800251e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002522:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002524:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002526:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002528:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800252a:	e841 2300 	strex	r3, r2, [r1]
 800252e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1e3      	bne.n	80024fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254e:	e853 3f00 	ldrex	r3, [r3]
 8002552:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002556:	f023 0310 	bic.w	r3, r3, #16
 800255a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	330c      	adds	r3, #12
 8002564:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002568:	65ba      	str	r2, [r7, #88]	; 0x58
 800256a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800256e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002570:	e841 2300 	strex	r3, r2, [r1]
 8002574:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e3      	bne.n	8002544 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fb7f 	bl	8000c84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800258e:	b29b      	uxth	r3, r3
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	b29b      	uxth	r3, r3
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f8c0 	bl	800271c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800259c:	e099      	b.n	80026d2 <HAL_UART_IRQHandler+0x50e>
 800259e:	bf00      	nop
 80025a0:	080028d7 	.word	0x080028d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 808b 	beq.w	80026d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80025c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8086 	beq.w	80026d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	330c      	adds	r3, #12
 80025d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330c      	adds	r3, #12
 80025ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025ee:	647a      	str	r2, [r7, #68]	; 0x44
 80025f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025f6:	e841 2300 	strex	r3, r2, [r1]
 80025fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1e3      	bne.n	80025ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3314      	adds	r3, #20
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	e853 3f00 	ldrex	r3, [r3]
 8002610:	623b      	str	r3, [r7, #32]
   return(result);
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3314      	adds	r3, #20
 8002622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002626:	633a      	str	r2, [r7, #48]	; 0x30
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800262c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e3      	bne.n	8002602 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	330c      	adds	r3, #12
 800264e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	e853 3f00 	ldrex	r3, [r3]
 8002656:	60fb      	str	r3, [r7, #12]
   return(result);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0310 	bic.w	r3, r3, #16
 800265e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	330c      	adds	r3, #12
 8002668:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800266c:	61fa      	str	r2, [r7, #28]
 800266e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	69b9      	ldr	r1, [r7, #24]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	617b      	str	r3, [r7, #20]
   return(result);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e3      	bne.n	8002648 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f848 	bl	800271c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800268c:	e023      	b.n	80026d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800268e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_UART_IRQHandler+0x4ea>
 800269a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800269e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f929 	bl	80028fe <UART_Transmit_IT>
    return;
 80026ac:	e014      	b.n	80026d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00e      	beq.n	80026d8 <HAL_UART_IRQHandler+0x514>
 80026ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f969 	bl	800299e <UART_EndTransmit_IT>
    return;
 80026cc:	e004      	b.n	80026d8 <HAL_UART_IRQHandler+0x514>
    return;
 80026ce:	bf00      	nop
 80026d0:	e002      	b.n	80026d8 <HAL_UART_IRQHandler+0x514>
      return;
 80026d2:	bf00      	nop
 80026d4:	e000      	b.n	80026d8 <HAL_UART_IRQHandler+0x514>
      return;
 80026d6:	bf00      	nop
  }
}
 80026d8:	37e8      	adds	r7, #232	; 0xe8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop

080026e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b090      	sub	sp, #64	; 0x40
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002744:	e050      	b.n	80027e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d04c      	beq.n	80027e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800274e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <UART_WaitOnFlagUntilTimeout+0x30>
 8002754:	f7fe f9a8 	bl	8000aa8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002760:	429a      	cmp	r2, r3
 8002762:	d241      	bcs.n	80027e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	330c      	adds	r3, #12
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	e853 3f00 	ldrex	r3, [r3]
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800277a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002784:	637a      	str	r2, [r7, #52]	; 0x34
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002788:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800278a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800278c:	e841 2300 	strex	r3, r2, [r1]
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e5      	bne.n	8002764 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3314      	adds	r3, #20
 800279e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	e853 3f00 	ldrex	r3, [r3]
 80027a6:	613b      	str	r3, [r7, #16]
   return(result);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3314      	adds	r3, #20
 80027b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027b8:	623a      	str	r2, [r7, #32]
 80027ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027bc:	69f9      	ldr	r1, [r7, #28]
 80027be:	6a3a      	ldr	r2, [r7, #32]
 80027c0:	e841 2300 	strex	r3, r2, [r1]
 80027c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e5      	bne.n	8002798 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e00f      	b.n	8002808 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4013      	ands	r3, r2
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	429a      	cmp	r2, r3
 8002804:	d09f      	beq.n	8002746 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3740      	adds	r7, #64	; 0x40
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002810:	b480      	push	{r7}
 8002812:	b095      	sub	sp, #84	; 0x54
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002822:	e853 3f00 	ldrex	r3, [r3]
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800282e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	330c      	adds	r3, #12
 8002836:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002838:	643a      	str	r2, [r7, #64]	; 0x40
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800283e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002840:	e841 2300 	strex	r3, r2, [r1]
 8002844:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e5      	bne.n	8002818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	3314      	adds	r3, #20
 8002852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	e853 3f00 	ldrex	r3, [r3]
 800285a:	61fb      	str	r3, [r7, #28]
   return(result);
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3314      	adds	r3, #20
 800286a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800286c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002874:	e841 2300 	strex	r3, r2, [r1]
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1e5      	bne.n	800284c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	2b01      	cmp	r3, #1
 8002886:	d119      	bne.n	80028bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	330c      	adds	r3, #12
 800288e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	e853 3f00 	ldrex	r3, [r3]
 8002896:	60bb      	str	r3, [r7, #8]
   return(result);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f023 0310 	bic.w	r3, r3, #16
 800289e:	647b      	str	r3, [r7, #68]	; 0x44
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	330c      	adds	r3, #12
 80028a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028a8:	61ba      	str	r2, [r7, #24]
 80028aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ac:	6979      	ldr	r1, [r7, #20]
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	e841 2300 	strex	r3, r2, [r1]
 80028b4:	613b      	str	r3, [r7, #16]
   return(result);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e5      	bne.n	8002888 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028ca:	bf00      	nop
 80028cc:	3754      	adds	r7, #84	; 0x54
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff ff09 	bl	8002708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b21      	cmp	r3, #33	; 0x21
 8002910:	d13e      	bne.n	8002990 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291a:	d114      	bne.n	8002946 <UART_Transmit_IT+0x48>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d110      	bne.n	8002946 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002938:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	1c9a      	adds	r2, r3, #2
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	621a      	str	r2, [r3, #32]
 8002944:	e008      	b.n	8002958 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	1c59      	adds	r1, r3, #1
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6211      	str	r1, [r2, #32]
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29b      	uxth	r3, r3
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	4619      	mov	r1, r3
 8002966:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10f      	bne.n	800298c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800297a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800298a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	e000      	b.n	8002992 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002990:	2302      	movs	r3, #2
  }
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff fe8e 	bl	80026e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b08c      	sub	sp, #48	; 0x30
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b22      	cmp	r3, #34	; 0x22
 80029e0:	f040 80ab 	bne.w	8002b3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ec:	d117      	bne.n	8002a1e <UART_Receive_IT+0x50>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d113      	bne.n	8002a1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	1c9a      	adds	r2, r3, #2
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a1c:	e026      	b.n	8002a6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a30:	d007      	beq.n	8002a42 <UART_Receive_IT+0x74>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <UART_Receive_IT+0x82>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e008      	b.n	8002a62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d15a      	bne.n	8002b36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0220 	bic.w	r2, r2, #32
 8002a8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d135      	bne.n	8002b2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330c      	adds	r3, #12
 8002acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	e853 3f00 	ldrex	r3, [r3]
 8002ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f023 0310 	bic.w	r3, r3, #16
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	330c      	adds	r3, #12
 8002ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae6:	623a      	str	r2, [r7, #32]
 8002ae8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aea:	69f9      	ldr	r1, [r7, #28]
 8002aec:	6a3a      	ldr	r2, [r7, #32]
 8002aee:	e841 2300 	strex	r3, r2, [r1]
 8002af2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1e5      	bne.n	8002ac6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d10a      	bne.n	8002b1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b22:	4619      	mov	r1, r3
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fdf9 	bl	800271c <HAL_UARTEx_RxEventCallback>
 8002b2a:	e002      	b.n	8002b32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff fde1 	bl	80026f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e002      	b.n	8002b3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3730      	adds	r7, #48	; 0x30
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b48:	b0c0      	sub	sp, #256	; 0x100
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	68d9      	ldr	r1, [r3, #12]
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	ea40 0301 	orr.w	r3, r0, r1
 8002b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b9c:	f021 010c 	bic.w	r1, r1, #12
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002baa:	430b      	orrs	r3, r1
 8002bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbe:	6999      	ldr	r1, [r3, #24]
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	ea40 0301 	orr.w	r3, r0, r1
 8002bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4b8f      	ldr	r3, [pc, #572]	; (8002e10 <UART_SetConfig+0x2cc>)
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d005      	beq.n	8002be4 <UART_SetConfig+0xa0>
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4b8d      	ldr	r3, [pc, #564]	; (8002e14 <UART_SetConfig+0x2d0>)
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d104      	bne.n	8002bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002be4:	f7fe ff1a 	bl	8001a1c <HAL_RCC_GetPCLK2Freq>
 8002be8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bec:	e003      	b.n	8002bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bee:	f7fe ff01 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 8002bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c00:	f040 810c 	bne.w	8002e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c16:	4622      	mov	r2, r4
 8002c18:	462b      	mov	r3, r5
 8002c1a:	1891      	adds	r1, r2, r2
 8002c1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c1e:	415b      	adcs	r3, r3
 8002c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c26:	4621      	mov	r1, r4
 8002c28:	eb12 0801 	adds.w	r8, r2, r1
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	eb43 0901 	adc.w	r9, r3, r1
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c46:	4690      	mov	r8, r2
 8002c48:	4699      	mov	r9, r3
 8002c4a:	4623      	mov	r3, r4
 8002c4c:	eb18 0303 	adds.w	r3, r8, r3
 8002c50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c54:	462b      	mov	r3, r5
 8002c56:	eb49 0303 	adc.w	r3, r9, r3
 8002c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c72:	460b      	mov	r3, r1
 8002c74:	18db      	adds	r3, r3, r3
 8002c76:	653b      	str	r3, [r7, #80]	; 0x50
 8002c78:	4613      	mov	r3, r2
 8002c7a:	eb42 0303 	adc.w	r3, r2, r3
 8002c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c88:	f7fd faaa 	bl	80001e0 <__aeabi_uldivmod>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4b61      	ldr	r3, [pc, #388]	; (8002e18 <UART_SetConfig+0x2d4>)
 8002c92:	fba3 2302 	umull	r2, r3, r3, r2
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	011c      	lsls	r4, r3, #4
 8002c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cac:	4642      	mov	r2, r8
 8002cae:	464b      	mov	r3, r9
 8002cb0:	1891      	adds	r1, r2, r2
 8002cb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cb4:	415b      	adcs	r3, r3
 8002cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8002cc2:	4649      	mov	r1, r9
 8002cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cdc:	4692      	mov	sl, r2
 8002cde:	469b      	mov	fp, r3
 8002ce0:	4643      	mov	r3, r8
 8002ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cea:	464b      	mov	r3, r9
 8002cec:	eb4b 0303 	adc.w	r3, fp, r3
 8002cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	18db      	adds	r3, r3, r3
 8002d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d0e:	4613      	mov	r3, r2
 8002d10:	eb42 0303 	adc.w	r3, r2, r3
 8002d14:	647b      	str	r3, [r7, #68]	; 0x44
 8002d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d1e:	f7fd fa5f 	bl	80001e0 <__aeabi_uldivmod>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4611      	mov	r1, r2
 8002d28:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <UART_SetConfig+0x2d4>)
 8002d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2264      	movs	r2, #100	; 0x64
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	1acb      	subs	r3, r1, r3
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d3e:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <UART_SetConfig+0x2d4>)
 8002d40:	fba3 2302 	umull	r2, r3, r3, r2
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d4c:	441c      	add	r4, r3
 8002d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d52:	2200      	movs	r2, #0
 8002d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d60:	4642      	mov	r2, r8
 8002d62:	464b      	mov	r3, r9
 8002d64:	1891      	adds	r1, r2, r2
 8002d66:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d68:	415b      	adcs	r3, r3
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d70:	4641      	mov	r1, r8
 8002d72:	1851      	adds	r1, r2, r1
 8002d74:	6339      	str	r1, [r7, #48]	; 0x30
 8002d76:	4649      	mov	r1, r9
 8002d78:	414b      	adcs	r3, r1
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d88:	4659      	mov	r1, fp
 8002d8a:	00cb      	lsls	r3, r1, #3
 8002d8c:	4651      	mov	r1, sl
 8002d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d92:	4651      	mov	r1, sl
 8002d94:	00ca      	lsls	r2, r1, #3
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4642      	mov	r2, r8
 8002d9e:	189b      	adds	r3, r3, r2
 8002da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002da4:	464b      	mov	r3, r9
 8002da6:	460a      	mov	r2, r1
 8002da8:	eb42 0303 	adc.w	r3, r2, r3
 8002dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	18db      	adds	r3, r3, r3
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dca:	4613      	mov	r3, r2
 8002dcc:	eb42 0303 	adc.w	r3, r2, r3
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dda:	f7fd fa01 	bl	80001e0 <__aeabi_uldivmod>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <UART_SetConfig+0x2d4>)
 8002de4:	fba3 1302 	umull	r1, r3, r3, r2
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	2164      	movs	r1, #100	; 0x64
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	3332      	adds	r3, #50	; 0x32
 8002df6:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <UART_SetConfig+0x2d4>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	f003 0207 	and.w	r2, r3, #7
 8002e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4422      	add	r2, r4
 8002e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e0c:	e105      	b.n	800301a <UART_SetConfig+0x4d6>
 8002e0e:	bf00      	nop
 8002e10:	40011000 	.word	0x40011000
 8002e14:	40011400 	.word	0x40011400
 8002e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e20:	2200      	movs	r2, #0
 8002e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e2e:	4642      	mov	r2, r8
 8002e30:	464b      	mov	r3, r9
 8002e32:	1891      	adds	r1, r2, r2
 8002e34:	6239      	str	r1, [r7, #32]
 8002e36:	415b      	adcs	r3, r3
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e3e:	4641      	mov	r1, r8
 8002e40:	1854      	adds	r4, r2, r1
 8002e42:	4649      	mov	r1, r9
 8002e44:	eb43 0501 	adc.w	r5, r3, r1
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	00eb      	lsls	r3, r5, #3
 8002e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e56:	00e2      	lsls	r2, r4, #3
 8002e58:	4614      	mov	r4, r2
 8002e5a:	461d      	mov	r5, r3
 8002e5c:	4643      	mov	r3, r8
 8002e5e:	18e3      	adds	r3, r4, r3
 8002e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e64:	464b      	mov	r3, r9
 8002e66:	eb45 0303 	adc.w	r3, r5, r3
 8002e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	008b      	lsls	r3, r1, #2
 8002e8e:	4621      	mov	r1, r4
 8002e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e94:	4621      	mov	r1, r4
 8002e96:	008a      	lsls	r2, r1, #2
 8002e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e9c:	f7fd f9a0 	bl	80001e0 <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4b60      	ldr	r3, [pc, #384]	; (8003028 <UART_SetConfig+0x4e4>)
 8002ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	011c      	lsls	r4, r3, #4
 8002eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002eb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	1891      	adds	r1, r2, r2
 8002ec6:	61b9      	str	r1, [r7, #24]
 8002ec8:	415b      	adcs	r3, r3
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	1851      	adds	r1, r2, r1
 8002ed4:	6139      	str	r1, [r7, #16]
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	414b      	adcs	r3, r1
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ee8:	4659      	mov	r1, fp
 8002eea:	00cb      	lsls	r3, r1, #3
 8002eec:	4651      	mov	r1, sl
 8002eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ef2:	4651      	mov	r1, sl
 8002ef4:	00ca      	lsls	r2, r1, #3
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4603      	mov	r3, r0
 8002efc:	4642      	mov	r2, r8
 8002efe:	189b      	adds	r3, r3, r2
 8002f00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f04:	464b      	mov	r3, r9
 8002f06:	460a      	mov	r2, r1
 8002f08:	eb42 0303 	adc.w	r3, r2, r3
 8002f0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f28:	4649      	mov	r1, r9
 8002f2a:	008b      	lsls	r3, r1, #2
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f32:	4641      	mov	r1, r8
 8002f34:	008a      	lsls	r2, r1, #2
 8002f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f3a:	f7fd f951 	bl	80001e0 <__aeabi_uldivmod>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4b39      	ldr	r3, [pc, #228]	; (8003028 <UART_SetConfig+0x4e4>)
 8002f44:	fba3 1302 	umull	r1, r3, r3, r2
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	2164      	movs	r1, #100	; 0x64
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	3332      	adds	r3, #50	; 0x32
 8002f56:	4a34      	ldr	r2, [pc, #208]	; (8003028 <UART_SetConfig+0x4e4>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f62:	441c      	add	r4, r3
 8002f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f68:	2200      	movs	r2, #0
 8002f6a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f6c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f72:	4642      	mov	r2, r8
 8002f74:	464b      	mov	r3, r9
 8002f76:	1891      	adds	r1, r2, r2
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	415b      	adcs	r3, r3
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f82:	4641      	mov	r1, r8
 8002f84:	1851      	adds	r1, r2, r1
 8002f86:	6039      	str	r1, [r7, #0]
 8002f88:	4649      	mov	r1, r9
 8002f8a:	414b      	adcs	r3, r1
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f9a:	4659      	mov	r1, fp
 8002f9c:	00cb      	lsls	r3, r1, #3
 8002f9e:	4651      	mov	r1, sl
 8002fa0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fa4:	4651      	mov	r1, sl
 8002fa6:	00ca      	lsls	r2, r1, #3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	4619      	mov	r1, r3
 8002fac:	4603      	mov	r3, r0
 8002fae:	4642      	mov	r2, r8
 8002fb0:	189b      	adds	r3, r3, r2
 8002fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	460a      	mov	r2, r1
 8002fb8:	eb42 0303 	adc.w	r3, r2, r3
 8002fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	663b      	str	r3, [r7, #96]	; 0x60
 8002fc8:	667a      	str	r2, [r7, #100]	; 0x64
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	008b      	lsls	r3, r1, #2
 8002fda:	4641      	mov	r1, r8
 8002fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe0:	4641      	mov	r1, r8
 8002fe2:	008a      	lsls	r2, r1, #2
 8002fe4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fe8:	f7fd f8fa 	bl	80001e0 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <UART_SetConfig+0x4e4>)
 8002ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2164      	movs	r1, #100	; 0x64
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	3332      	adds	r3, #50	; 0x32
 8003004:	4a08      	ldr	r2, [pc, #32]	; (8003028 <UART_SetConfig+0x4e4>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	f003 020f 	and.w	r2, r3, #15
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4422      	add	r2, r4
 8003018:	609a      	str	r2, [r3, #8]
}
 800301a:	bf00      	nop
 800301c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003020:	46bd      	mov	sp, r7
 8003022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003026:	bf00      	nop
 8003028:	51eb851f 	.word	0x51eb851f

0800302c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <SysTick_Handler+0x1c>)
 8003032:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003034:	f001 fbc8 	bl	80047c8 <xTaskGetSchedulerState>
 8003038:	4603      	mov	r3, r0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800303e:	f002 f9b3 	bl	80053a8 <xPortSysTickHandler>
  }
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	e000e010 	.word	0xe000e010

0800304c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a07      	ldr	r2, [pc, #28]	; (8003078 <vApplicationGetIdleTaskMemory+0x2c>)
 800305c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4a06      	ldr	r2, [pc, #24]	; (800307c <vApplicationGetIdleTaskMemory+0x30>)
 8003062:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	601a      	str	r2, [r3, #0]
}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	200000c4 	.word	0x200000c4
 800307c:	20000120 	.word	0x20000120

08003080 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4a07      	ldr	r2, [pc, #28]	; (80030ac <vApplicationGetTimerTaskMemory+0x2c>)
 8003090:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4a06      	ldr	r2, [pc, #24]	; (80030b0 <vApplicationGetTimerTaskMemory+0x30>)
 8003096:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800309e:	601a      	str	r2, [r3, #0]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	20000320 	.word	0x20000320
 80030b0:	2000037c 	.word	0x2000037c

080030b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f103 0208 	add.w	r2, r3, #8
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f04f 32ff 	mov.w	r2, #4294967295
 80030cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f103 0208 	add.w	r2, r3, #8
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f103 0208 	add.w	r2, r3, #8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	601a      	str	r2, [r3, #0]
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d103      	bne.n	8003176 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	e00c      	b.n	8003190 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3308      	adds	r3, #8
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e002      	b.n	8003184 <vListInsert+0x2e>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	429a      	cmp	r2, r3
 800318e:	d2f6      	bcs.n	800317e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	601a      	str	r2, [r3, #0]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6892      	ldr	r2, [r2, #8]
 80031de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6852      	ldr	r2, [r2, #4]
 80031e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d103      	bne.n	80031fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	1e5a      	subs	r2, r3, #1
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003242:	bf00      	nop
 8003244:	e7fe      	b.n	8003244 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003246:	f002 f81d 	bl	8005284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003252:	68f9      	ldr	r1, [r7, #12]
 8003254:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	441a      	add	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003276:	3b01      	subs	r3, #1
 8003278:	68f9      	ldr	r1, [r7, #12]
 800327a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	441a      	add	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	22ff      	movs	r2, #255	; 0xff
 800328a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	22ff      	movs	r2, #255	; 0xff
 8003292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d114      	bne.n	80032c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01a      	beq.n	80032da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3310      	adds	r3, #16
 80032a8:	4618      	mov	r0, r3
 80032aa:	f001 f8cf 	bl	800444c <xTaskRemoveFromEventList>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d012      	beq.n	80032da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <xQueueGenericReset+0xcc>)
 80032b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	e009      	b.n	80032da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3310      	adds	r3, #16
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fef2 	bl	80030b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3324      	adds	r3, #36	; 0x24
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff feed 	bl	80030b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032da:	f002 f803 	bl	80052e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032de:	2301      	movs	r3, #1
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	e000ed04 	.word	0xe000ed04

080032ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08e      	sub	sp, #56	; 0x38
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10a      	bne.n	8003332 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800332e:	bf00      	nop
 8003330:	e7fe      	b.n	8003330 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <xQueueGenericCreateStatic+0x52>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <xQueueGenericCreateStatic+0x56>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <xQueueGenericCreateStatic+0x58>
 8003342:	2300      	movs	r3, #0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	623b      	str	r3, [r7, #32]
}
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <xQueueGenericCreateStatic+0x7e>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <xQueueGenericCreateStatic+0x82>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <xQueueGenericCreateStatic+0x84>
 800336e:	2300      	movs	r3, #0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10a      	bne.n	800338a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	61fb      	str	r3, [r7, #28]
}
 8003386:	bf00      	nop
 8003388:	e7fe      	b.n	8003388 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800338a:	2350      	movs	r3, #80	; 0x50
 800338c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b50      	cmp	r3, #80	; 0x50
 8003392:	d00a      	beq.n	80033aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	61bb      	str	r3, [r7, #24]
}
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	4613      	mov	r3, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f805 	bl	80033dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3730      	adds	r7, #48	; 0x30
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d103      	bne.n	80033f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e002      	b.n	80033fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800340a:	2101      	movs	r1, #1
 800340c:	69b8      	ldr	r0, [r7, #24]
 800340e:	f7ff ff05 	bl	800321c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08e      	sub	sp, #56	; 0x38
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003432:	2300      	movs	r3, #0
 8003434:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <xQueueGenericSend+0x32>
	__asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003452:	bf00      	nop
 8003454:	e7fe      	b.n	8003454 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <xQueueGenericSend+0x40>
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <xQueueGenericSend+0x44>
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <xQueueGenericSend+0x46>
 8003468:	2300      	movs	r3, #0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <xQueueGenericSend+0x60>
	__asm volatile
 800346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003480:	bf00      	nop
 8003482:	e7fe      	b.n	8003482 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d103      	bne.n	8003492 <xQueueGenericSend+0x6e>
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <xQueueGenericSend+0x72>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <xQueueGenericSend+0x74>
 8003496:	2300      	movs	r3, #0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	623b      	str	r3, [r7, #32]
}
 80034ae:	bf00      	nop
 80034b0:	e7fe      	b.n	80034b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034b2:	f001 f989 	bl	80047c8 <xTaskGetSchedulerState>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d102      	bne.n	80034c2 <xQueueGenericSend+0x9e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <xQueueGenericSend+0xa2>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <xQueueGenericSend+0xa4>
 80034c6:	2300      	movs	r3, #0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	61fb      	str	r3, [r7, #28]
}
 80034de:	bf00      	nop
 80034e0:	e7fe      	b.n	80034e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034e2:	f001 fecf 	bl	8005284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <xQueueGenericSend+0xd4>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d129      	bne.n	800354c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034fe:	f000 fa0b 	bl	8003918 <prvCopyDataToQueue>
 8003502:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	3324      	adds	r3, #36	; 0x24
 8003510:	4618      	mov	r0, r3
 8003512:	f000 ff9b 	bl	800444c <xTaskRemoveFromEventList>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d013      	beq.n	8003544 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800351c:	4b3f      	ldr	r3, [pc, #252]	; (800361c <xQueueGenericSend+0x1f8>)
 800351e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	e00a      	b.n	8003544 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003534:	4b39      	ldr	r3, [pc, #228]	; (800361c <xQueueGenericSend+0x1f8>)
 8003536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003544:	f001 fece 	bl	80052e4 <vPortExitCritical>
				return pdPASS;
 8003548:	2301      	movs	r3, #1
 800354a:	e063      	b.n	8003614 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003552:	f001 fec7 	bl	80052e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003556:	2300      	movs	r3, #0
 8003558:	e05c      	b.n	8003614 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800355a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	4618      	mov	r0, r3
 8003566:	f000 ffd5 	bl	8004514 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800356a:	2301      	movs	r3, #1
 800356c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800356e:	f001 feb9 	bl	80052e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003572:	f000 fd47 	bl	8004004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003576:	f001 fe85 	bl	8005284 <vPortEnterCritical>
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003580:	b25b      	sxtb	r3, r3
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003586:	d103      	bne.n	8003590 <xQueueGenericSend+0x16c>
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003596:	b25b      	sxtb	r3, r3
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d103      	bne.n	80035a6 <xQueueGenericSend+0x182>
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a6:	f001 fe9d 	bl	80052e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035aa:	1d3a      	adds	r2, r7, #4
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 ffc4 	bl	8004540 <xTaskCheckForTimeOut>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d124      	bne.n	8003608 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035c0:	f000 faa2 	bl	8003b08 <prvIsQueueFull>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d018      	beq.n	80035fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	3310      	adds	r3, #16
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 feea 	bl	80043ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035da:	f000 fa2d 	bl	8003a38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035de:	f000 fd1f 	bl	8004020 <xTaskResumeAll>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f47f af7c 	bne.w	80034e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <xQueueGenericSend+0x1f8>)
 80035ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	e772      	b.n	80034e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035fe:	f000 fa1b 	bl	8003a38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003602:	f000 fd0d 	bl	8004020 <xTaskResumeAll>
 8003606:	e76c      	b.n	80034e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800360a:	f000 fa15 	bl	8003a38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800360e:	f000 fd07 	bl	8004020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003612:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003614:	4618      	mov	r0, r3
 8003616:	3738      	adds	r7, #56	; 0x38
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	e000ed04 	.word	0xe000ed04

08003620 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b090      	sub	sp, #64	; 0x40
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d103      	bne.n	800365c <xQueueGenericSendFromISR+0x3c>
 8003654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <xQueueGenericSendFromISR+0x40>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <xQueueGenericSendFromISR+0x42>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003678:	bf00      	nop
 800367a:	e7fe      	b.n	800367a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d103      	bne.n	800368a <xQueueGenericSendFromISR+0x6a>
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <xQueueGenericSendFromISR+0x6e>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <xQueueGenericSendFromISR+0x70>
 800368e:	2300      	movs	r3, #0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	623b      	str	r3, [r7, #32]
}
 80036a6:	bf00      	nop
 80036a8:	e7fe      	b.n	80036a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036aa:	f001 fecd 	bl	8005448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036ae:	f3ef 8211 	mrs	r2, BASEPRI
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	61fa      	str	r2, [r7, #28]
 80036c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <xQueueGenericSendFromISR+0xbc>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d12f      	bne.n	800373c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036f2:	f000 f911 	bl	8003918 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d112      	bne.n	8003726 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	2b00      	cmp	r3, #0
 8003706:	d016      	beq.n	8003736 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	3324      	adds	r3, #36	; 0x24
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fe9d 	bl	800444c <xTaskRemoveFromEventList>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00e      	beq.n	8003736 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00b      	beq.n	8003736 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e007      	b.n	8003736 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003726:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800372a:	3301      	adds	r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	b25a      	sxtb	r2, r3
 8003730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003736:	2301      	movs	r3, #1
 8003738:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800373a:	e001      	b.n	8003740 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800373c:	2300      	movs	r3, #0
 800373e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003742:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800374a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800374c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800374e:	4618      	mov	r0, r3
 8003750:	3740      	adds	r7, #64	; 0x40
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08c      	sub	sp, #48	; 0x30
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003764:	2300      	movs	r3, #0
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <xQueueReceive+0x30>
	__asm volatile
 8003772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	623b      	str	r3, [r7, #32]
}
 8003784:	bf00      	nop
 8003786:	e7fe      	b.n	8003786 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <xQueueReceive+0x3e>
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <xQueueReceive+0x42>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <xQueueReceive+0x44>
 800379a:	2300      	movs	r3, #0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <xQueueReceive+0x5e>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	61fb      	str	r3, [r7, #28]
}
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037b6:	f001 f807 	bl	80047c8 <xTaskGetSchedulerState>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d102      	bne.n	80037c6 <xQueueReceive+0x6e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <xQueueReceive+0x72>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <xQueueReceive+0x74>
 80037ca:	2300      	movs	r3, #0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <xQueueReceive+0x8e>
	__asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	61bb      	str	r3, [r7, #24]
}
 80037e2:	bf00      	nop
 80037e4:	e7fe      	b.n	80037e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037e6:	f001 fd4d 	bl	8005284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01f      	beq.n	8003836 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037fa:	f000 f8f7 	bl	80039ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	1e5a      	subs	r2, r3, #1
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00f      	beq.n	800382e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	3310      	adds	r3, #16
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fe1a 	bl	800444c <xTaskRemoveFromEventList>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800381e:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <xQueueReceive+0x1bc>)
 8003820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800382e:	f001 fd59 	bl	80052e4 <vPortExitCritical>
				return pdPASS;
 8003832:	2301      	movs	r3, #1
 8003834:	e069      	b.n	800390a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d103      	bne.n	8003844 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800383c:	f001 fd52 	bl	80052e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003840:	2300      	movs	r3, #0
 8003842:	e062      	b.n	800390a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800384a:	f107 0310 	add.w	r3, r7, #16
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fe60 	bl	8004514 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003854:	2301      	movs	r3, #1
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003858:	f001 fd44 	bl	80052e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800385c:	f000 fbd2 	bl	8004004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003860:	f001 fd10 	bl	8005284 <vPortEnterCritical>
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003866:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800386a:	b25b      	sxtb	r3, r3
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d103      	bne.n	800387a <xQueueReceive+0x122>
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003880:	b25b      	sxtb	r3, r3
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d103      	bne.n	8003890 <xQueueReceive+0x138>
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003890:	f001 fd28 	bl	80052e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003894:	1d3a      	adds	r2, r7, #4
 8003896:	f107 0310 	add.w	r3, r7, #16
 800389a:	4611      	mov	r1, r2
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fe4f 	bl	8004540 <xTaskCheckForTimeOut>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d123      	bne.n	80038f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038aa:	f000 f917 	bl	8003adc <prvIsQueueEmpty>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d017      	beq.n	80038e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	3324      	adds	r3, #36	; 0x24
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	4611      	mov	r1, r2
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fd75 	bl	80043ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c4:	f000 f8b8 	bl	8003a38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038c8:	f000 fbaa 	bl	8004020 <xTaskResumeAll>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d189      	bne.n	80037e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <xQueueReceive+0x1bc>)
 80038d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	e780      	b.n	80037e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038e6:	f000 f8a7 	bl	8003a38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038ea:	f000 fb99 	bl	8004020 <xTaskResumeAll>
 80038ee:	e77a      	b.n	80037e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038f2:	f000 f8a1 	bl	8003a38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038f6:	f000 fb93 	bl	8004020 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038fc:	f000 f8ee 	bl	8003adc <prvIsQueueEmpty>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	f43f af6f 	beq.w	80037e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003908:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800390a:	4618      	mov	r0, r3
 800390c:	3730      	adds	r7, #48	; 0x30
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	e000ed04 	.word	0xe000ed04

08003918 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10d      	bne.n	8003952 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d14d      	bne.n	80039da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 ff5e 	bl	8004804 <xTaskPriorityDisinherit>
 8003948:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	e043      	b.n	80039da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d119      	bne.n	800398c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6858      	ldr	r0, [r3, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	461a      	mov	r2, r3
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	f001 ffbe 	bl	80058e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	441a      	add	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	d32b      	bcc.n	80039da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	e026      	b.n	80039da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	68d8      	ldr	r0, [r3, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	461a      	mov	r2, r3
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	f001 ffa4 	bl	80058e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	425b      	negs	r3, r3
 80039a6:	441a      	add	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d207      	bcs.n	80039c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	425b      	negs	r3, r3
 80039c2:	441a      	add	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d105      	bne.n	80039da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80039e2:	697b      	ldr	r3, [r7, #20]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d018      	beq.n	8003a30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	441a      	add	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d303      	bcc.n	8003a20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68d9      	ldr	r1, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	461a      	mov	r2, r3
 8003a2a:	6838      	ldr	r0, [r7, #0]
 8003a2c:	f001 ff5a 	bl	80058e4 <memcpy>
	}
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a40:	f001 fc20 	bl	8005284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a4c:	e011      	b.n	8003a72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d012      	beq.n	8003a7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3324      	adds	r3, #36	; 0x24
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fcf6 	bl	800444c <xTaskRemoveFromEventList>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a66:	f000 fdcd 	bl	8004604 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	dce9      	bgt.n	8003a4e <prvUnlockQueue+0x16>
 8003a7a:	e000      	b.n	8003a7e <prvUnlockQueue+0x46>
					break;
 8003a7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	22ff      	movs	r2, #255	; 0xff
 8003a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a86:	f001 fc2d 	bl	80052e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a8a:	f001 fbfb 	bl	8005284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a96:	e011      	b.n	8003abc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d012      	beq.n	8003ac6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3310      	adds	r3, #16
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fcd1 	bl	800444c <xTaskRemoveFromEventList>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ab0:	f000 fda8 	bl	8004604 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ab4:	7bbb      	ldrb	r3, [r7, #14]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003abc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	dce9      	bgt.n	8003a98 <prvUnlockQueue+0x60>
 8003ac4:	e000      	b.n	8003ac8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ac6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	22ff      	movs	r2, #255	; 0xff
 8003acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ad0:	f001 fc08 	bl	80052e4 <vPortExitCritical>
}
 8003ad4:	bf00      	nop
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ae4:	f001 fbce 	bl	8005284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003af0:	2301      	movs	r3, #1
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e001      	b.n	8003afa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003afa:	f001 fbf3 	bl	80052e4 <vPortExitCritical>

	return xReturn;
 8003afe:	68fb      	ldr	r3, [r7, #12]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b10:	f001 fbb8 	bl	8005284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d102      	bne.n	8003b26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b20:	2301      	movs	r3, #1
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	e001      	b.n	8003b2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b2a:	f001 fbdb 	bl	80052e4 <vPortExitCritical>

	return xReturn;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	e014      	b.n	8003b72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b48:	4a0f      	ldr	r2, [pc, #60]	; (8003b88 <vQueueAddToRegistry+0x50>)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b54:	490c      	ldr	r1, [pc, #48]	; (8003b88 <vQueueAddToRegistry+0x50>)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <vQueueAddToRegistry+0x50>)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b6a:	e006      	b.n	8003b7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b07      	cmp	r3, #7
 8003b76:	d9e7      	bls.n	8003b48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	2000077c 	.word	0x2000077c

08003b8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b9c:	f001 fb72 	bl	8005284 <vPortEnterCritical>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ba6:	b25b      	sxtb	r3, r3
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d103      	bne.n	8003bb6 <vQueueWaitForMessageRestricted+0x2a>
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bbc:	b25b      	sxtb	r3, r3
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d103      	bne.n	8003bcc <vQueueWaitForMessageRestricted+0x40>
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bcc:	f001 fb8a 	bl	80052e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	3324      	adds	r3, #36	; 0x24
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fc07 	bl	80043f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	f7ff ff26 	bl	8003a38 <prvUnlockQueue>
	}
 8003bec:	bf00      	nop
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08e      	sub	sp, #56	; 0x38
 8003bf8:	af04      	add	r7, sp, #16
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	623b      	str	r3, [r7, #32]
}
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <xTaskCreateStatic+0x46>
	__asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	61fb      	str	r3, [r7, #28]
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c3a:	235c      	movs	r3, #92	; 0x5c
 8003c3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b5c      	cmp	r3, #92	; 0x5c
 8003c42:	d00a      	beq.n	8003c5a <xTaskCreateStatic+0x66>
	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	61bb      	str	r3, [r7, #24]
}
 8003c56:	bf00      	nop
 8003c58:	e7fe      	b.n	8003c58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d01e      	beq.n	8003ca0 <xTaskCreateStatic+0xac>
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	9303      	str	r3, [sp, #12]
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	9302      	str	r3, [sp, #8]
 8003c82:	f107 0314 	add.w	r3, r7, #20
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f850 	bl	8003d38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c9a:	f000 f8dd 	bl	8003e58 <prvAddNewTaskToReadyList>
 8003c9e:	e001      	b.n	8003ca4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ca4:	697b      	ldr	r3, [r7, #20]
	}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3728      	adds	r7, #40	; 0x28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b08c      	sub	sp, #48	; 0x30
 8003cb2:	af04      	add	r7, sp, #16
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 fc00 	bl	80054c8 <pvPortMalloc>
 8003cc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00e      	beq.n	8003cee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003cd0:	205c      	movs	r0, #92	; 0x5c
 8003cd2:	f001 fbf9 	bl	80054c8 <pvPortMalloc>
 8003cd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce4:	e005      	b.n	8003cf2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ce6:	6978      	ldr	r0, [r7, #20]
 8003ce8:	f001 fcba 	bl	8005660 <vPortFree>
 8003cec:	e001      	b.n	8003cf2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d017      	beq.n	8003d28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d00:	88fa      	ldrh	r2, [r7, #6]
 8003d02:	2300      	movs	r3, #0
 8003d04:	9303      	str	r3, [sp, #12]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	9302      	str	r3, [sp, #8]
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68b9      	ldr	r1, [r7, #8]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f80e 	bl	8003d38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d1c:	69f8      	ldr	r0, [r7, #28]
 8003d1e:	f000 f89b 	bl	8003e58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d22:	2301      	movs	r3, #1
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	e002      	b.n	8003d2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
	}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	461a      	mov	r2, r3
 8003d50:	21a5      	movs	r1, #165	; 0xa5
 8003d52:	f001 fdd5 	bl	8005900 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d60:	3b01      	subs	r3, #1
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f023 0307 	bic.w	r3, r3, #7
 8003d6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	617b      	str	r3, [r7, #20]
}
 8003d8c:	bf00      	nop
 8003d8e:	e7fe      	b.n	8003d8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01f      	beq.n	8003dd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	e012      	b.n	8003dc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	4413      	add	r3, r2
 8003da2:	7819      	ldrb	r1, [r3, #0]
 8003da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	4413      	add	r3, r2
 8003daa:	3334      	adds	r3, #52	; 0x34
 8003dac:	460a      	mov	r2, r1
 8003dae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4413      	add	r3, r2
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d006      	beq.n	8003dca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	2b0f      	cmp	r3, #15
 8003dc6:	d9e9      	bls.n	8003d9c <prvInitialiseNewTask+0x64>
 8003dc8:	e000      	b.n	8003dcc <prvInitialiseNewTask+0x94>
			{
				break;
 8003dca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dd4:	e003      	b.n	8003dde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	2b37      	cmp	r3, #55	; 0x37
 8003de2:	d901      	bls.n	8003de8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003de4:	2337      	movs	r3, #55	; 0x37
 8003de6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	2200      	movs	r2, #0
 8003df8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff f978 	bl	80030f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	3318      	adds	r3, #24
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff f973 	bl	80030f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	2200      	movs	r2, #0
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	68f9      	ldr	r1, [r7, #12]
 8003e36:	69b8      	ldr	r0, [r7, #24]
 8003e38:	f001 f8f4 	bl	8005024 <pxPortInitialiseStack>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e4e:	bf00      	nop
 8003e50:	3720      	adds	r7, #32
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e60:	f001 fa10 	bl	8005284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e64:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <prvAddNewTaskToReadyList+0xc4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	4a2c      	ldr	r2, [pc, #176]	; (8003f1c <prvAddNewTaskToReadyList+0xc4>)
 8003e6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e6e:	4b2c      	ldr	r3, [pc, #176]	; (8003f20 <prvAddNewTaskToReadyList+0xc8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e76:	4a2a      	ldr	r2, [pc, #168]	; (8003f20 <prvAddNewTaskToReadyList+0xc8>)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e7c:	4b27      	ldr	r3, [pc, #156]	; (8003f1c <prvAddNewTaskToReadyList+0xc4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d110      	bne.n	8003ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e84:	f000 fbe2 	bl	800464c <prvInitialiseTaskLists>
 8003e88:	e00d      	b.n	8003ea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e8a:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <prvAddNewTaskToReadyList+0xcc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d109      	bne.n	8003ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e92:	4b23      	ldr	r3, [pc, #140]	; (8003f20 <prvAddNewTaskToReadyList+0xc8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d802      	bhi.n	8003ea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ea0:	4a1f      	ldr	r2, [pc, #124]	; (8003f20 <prvAddNewTaskToReadyList+0xc8>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ea6:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <prvAddNewTaskToReadyList+0xd0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4a1e      	ldr	r2, [pc, #120]	; (8003f28 <prvAddNewTaskToReadyList+0xd0>)
 8003eae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003eb0:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <prvAddNewTaskToReadyList+0xd0>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <prvAddNewTaskToReadyList+0xd4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d903      	bls.n	8003ecc <prvAddNewTaskToReadyList+0x74>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <prvAddNewTaskToReadyList+0xd4>)
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4a15      	ldr	r2, [pc, #84]	; (8003f30 <prvAddNewTaskToReadyList+0xd8>)
 8003eda:	441a      	add	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f7ff f913 	bl	800310e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ee8:	f001 f9fc 	bl	80052e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003eec:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <prvAddNewTaskToReadyList+0xcc>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00e      	beq.n	8003f12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <prvAddNewTaskToReadyList+0xc8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d207      	bcs.n	8003f12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <prvAddNewTaskToReadyList+0xdc>)
 8003f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000c90 	.word	0x20000c90
 8003f20:	200007bc 	.word	0x200007bc
 8003f24:	20000c9c 	.word	0x20000c9c
 8003f28:	20000cac 	.word	0x20000cac
 8003f2c:	20000c98 	.word	0x20000c98
 8003f30:	200007c0 	.word	0x200007c0
 8003f34:	e000ed04 	.word	0xe000ed04

08003f38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	; 0x28
 8003f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f46:	463a      	mov	r2, r7
 8003f48:	1d39      	adds	r1, r7, #4
 8003f4a:	f107 0308 	add.w	r3, r7, #8
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff f87c 	bl	800304c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f54:	6839      	ldr	r1, [r7, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	9202      	str	r2, [sp, #8]
 8003f5c:	9301      	str	r3, [sp, #4]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	2300      	movs	r3, #0
 8003f64:	460a      	mov	r2, r1
 8003f66:	4921      	ldr	r1, [pc, #132]	; (8003fec <vTaskStartScheduler+0xb4>)
 8003f68:	4821      	ldr	r0, [pc, #132]	; (8003ff0 <vTaskStartScheduler+0xb8>)
 8003f6a:	f7ff fe43 	bl	8003bf4 <xTaskCreateStatic>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4a20      	ldr	r2, [pc, #128]	; (8003ff4 <vTaskStartScheduler+0xbc>)
 8003f72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f74:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <vTaskStartScheduler+0xbc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e001      	b.n	8003f86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d102      	bne.n	8003f92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f8c:	f000 fcfc 	bl	8004988 <xTimerCreateTimerTask>
 8003f90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d116      	bne.n	8003fc6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	613b      	str	r3, [r7, #16]
}
 8003faa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fac:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <vTaskStartScheduler+0xc0>)
 8003fae:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <vTaskStartScheduler+0xc4>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fba:	4b11      	ldr	r3, [pc, #68]	; (8004000 <vTaskStartScheduler+0xc8>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fc0:	f001 f8be 	bl	8005140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fc4:	e00e      	b.n	8003fe4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d10a      	bne.n	8003fe4 <vTaskStartScheduler+0xac>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	60fb      	str	r3, [r7, #12]
}
 8003fe0:	bf00      	nop
 8003fe2:	e7fe      	b.n	8003fe2 <vTaskStartScheduler+0xaa>
}
 8003fe4:	bf00      	nop
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	08005960 	.word	0x08005960
 8003ff0:	0800461d 	.word	0x0800461d
 8003ff4:	20000cb4 	.word	0x20000cb4
 8003ff8:	20000cb0 	.word	0x20000cb0
 8003ffc:	20000c9c 	.word	0x20000c9c
 8004000:	20000c94 	.word	0x20000c94

08004004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <vTaskSuspendAll+0x18>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3301      	adds	r3, #1
 800400e:	4a03      	ldr	r2, [pc, #12]	; (800401c <vTaskSuspendAll+0x18>)
 8004010:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	20000cb8 	.word	0x20000cb8

08004020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800402e:	4b42      	ldr	r3, [pc, #264]	; (8004138 <xTaskResumeAll+0x118>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10a      	bne.n	800404c <xTaskResumeAll+0x2c>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	603b      	str	r3, [r7, #0]
}
 8004048:	bf00      	nop
 800404a:	e7fe      	b.n	800404a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800404c:	f001 f91a 	bl	8005284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004050:	4b39      	ldr	r3, [pc, #228]	; (8004138 <xTaskResumeAll+0x118>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3b01      	subs	r3, #1
 8004056:	4a38      	ldr	r2, [pc, #224]	; (8004138 <xTaskResumeAll+0x118>)
 8004058:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800405a:	4b37      	ldr	r3, [pc, #220]	; (8004138 <xTaskResumeAll+0x118>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d162      	bne.n	8004128 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004062:	4b36      	ldr	r3, [pc, #216]	; (800413c <xTaskResumeAll+0x11c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d05e      	beq.n	8004128 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800406a:	e02f      	b.n	80040cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800406c:	4b34      	ldr	r3, [pc, #208]	; (8004140 <xTaskResumeAll+0x120>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3318      	adds	r3, #24
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff f8a5 	bl	80031c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3304      	adds	r3, #4
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff f8a0 	bl	80031c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <xTaskResumeAll+0x124>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d903      	bls.n	800409c <xTaskResumeAll+0x7c>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	4a2a      	ldr	r2, [pc, #168]	; (8004144 <xTaskResumeAll+0x124>)
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4a27      	ldr	r2, [pc, #156]	; (8004148 <xTaskResumeAll+0x128>)
 80040aa:	441a      	add	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4619      	mov	r1, r3
 80040b2:	4610      	mov	r0, r2
 80040b4:	f7ff f82b 	bl	800310e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040bc:	4b23      	ldr	r3, [pc, #140]	; (800414c <xTaskResumeAll+0x12c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d302      	bcc.n	80040cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80040c6:	4b22      	ldr	r3, [pc, #136]	; (8004150 <xTaskResumeAll+0x130>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040cc:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <xTaskResumeAll+0x120>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1cb      	bne.n	800406c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040da:	f000 fb55 	bl	8004788 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040de:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <xTaskResumeAll+0x134>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d010      	beq.n	800410c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040ea:	f000 f847 	bl	800417c <xTaskIncrementTick>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80040f4:	4b16      	ldr	r3, [pc, #88]	; (8004150 <xTaskResumeAll+0x130>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f1      	bne.n	80040ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004106:	4b13      	ldr	r3, [pc, #76]	; (8004154 <xTaskResumeAll+0x134>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <xTaskResumeAll+0x130>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d009      	beq.n	8004128 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004114:	2301      	movs	r3, #1
 8004116:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <xTaskResumeAll+0x138>)
 800411a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004128:	f001 f8dc 	bl	80052e4 <vPortExitCritical>

	return xAlreadyYielded;
 800412c:	68bb      	ldr	r3, [r7, #8]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000cb8 	.word	0x20000cb8
 800413c:	20000c90 	.word	0x20000c90
 8004140:	20000c50 	.word	0x20000c50
 8004144:	20000c98 	.word	0x20000c98
 8004148:	200007c0 	.word	0x200007c0
 800414c:	200007bc 	.word	0x200007bc
 8004150:	20000ca4 	.word	0x20000ca4
 8004154:	20000ca0 	.word	0x20000ca0
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <xTaskGetTickCount+0x1c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004168:	687b      	ldr	r3, [r7, #4]
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000c94 	.word	0x20000c94

0800417c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004186:	4b4f      	ldr	r3, [pc, #316]	; (80042c4 <xTaskIncrementTick+0x148>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f040 808f 	bne.w	80042ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004190:	4b4d      	ldr	r3, [pc, #308]	; (80042c8 <xTaskIncrementTick+0x14c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004198:	4a4b      	ldr	r2, [pc, #300]	; (80042c8 <xTaskIncrementTick+0x14c>)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d120      	bne.n	80041e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80041a4:	4b49      	ldr	r3, [pc, #292]	; (80042cc <xTaskIncrementTick+0x150>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	603b      	str	r3, [r7, #0]
}
 80041c0:	bf00      	nop
 80041c2:	e7fe      	b.n	80041c2 <xTaskIncrementTick+0x46>
 80041c4:	4b41      	ldr	r3, [pc, #260]	; (80042cc <xTaskIncrementTick+0x150>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <xTaskIncrementTick+0x154>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a3f      	ldr	r2, [pc, #252]	; (80042cc <xTaskIncrementTick+0x150>)
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4a3f      	ldr	r2, [pc, #252]	; (80042d0 <xTaskIncrementTick+0x154>)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b3e      	ldr	r3, [pc, #248]	; (80042d4 <xTaskIncrementTick+0x158>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3301      	adds	r3, #1
 80041de:	4a3d      	ldr	r2, [pc, #244]	; (80042d4 <xTaskIncrementTick+0x158>)
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	f000 fad1 	bl	8004788 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041e6:	4b3c      	ldr	r3, [pc, #240]	; (80042d8 <xTaskIncrementTick+0x15c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d349      	bcc.n	8004284 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041f0:	4b36      	ldr	r3, [pc, #216]	; (80042cc <xTaskIncrementTick+0x150>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d104      	bne.n	8004204 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041fa:	4b37      	ldr	r3, [pc, #220]	; (80042d8 <xTaskIncrementTick+0x15c>)
 80041fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004200:	601a      	str	r2, [r3, #0]
					break;
 8004202:	e03f      	b.n	8004284 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004204:	4b31      	ldr	r3, [pc, #196]	; (80042cc <xTaskIncrementTick+0x150>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	d203      	bcs.n	8004224 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800421c:	4a2e      	ldr	r2, [pc, #184]	; (80042d8 <xTaskIncrementTick+0x15c>)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004222:	e02f      	b.n	8004284 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	3304      	adds	r3, #4
 8004228:	4618      	mov	r0, r3
 800422a:	f7fe ffcd 	bl	80031c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	2b00      	cmp	r3, #0
 8004234:	d004      	beq.n	8004240 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	3318      	adds	r3, #24
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe ffc4 	bl	80031c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004244:	4b25      	ldr	r3, [pc, #148]	; (80042dc <xTaskIncrementTick+0x160>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d903      	bls.n	8004254 <xTaskIncrementTick+0xd8>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	4a22      	ldr	r2, [pc, #136]	; (80042dc <xTaskIncrementTick+0x160>)
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4a1f      	ldr	r2, [pc, #124]	; (80042e0 <xTaskIncrementTick+0x164>)
 8004262:	441a      	add	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	3304      	adds	r3, #4
 8004268:	4619      	mov	r1, r3
 800426a:	4610      	mov	r0, r2
 800426c:	f7fe ff4f 	bl	800310e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004274:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <xTaskIncrementTick+0x168>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	429a      	cmp	r2, r3
 800427c:	d3b8      	bcc.n	80041f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800427e:	2301      	movs	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004282:	e7b5      	b.n	80041f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004284:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <xTaskIncrementTick+0x168>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428a:	4915      	ldr	r1, [pc, #84]	; (80042e0 <xTaskIncrementTick+0x164>)
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d901      	bls.n	80042a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800429c:	2301      	movs	r3, #1
 800429e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <xTaskIncrementTick+0x16c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80042a8:	2301      	movs	r3, #1
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e004      	b.n	80042b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042ae:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <xTaskIncrementTick+0x170>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	4a0d      	ldr	r2, [pc, #52]	; (80042ec <xTaskIncrementTick+0x170>)
 80042b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042b8:	697b      	ldr	r3, [r7, #20]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000cb8 	.word	0x20000cb8
 80042c8:	20000c94 	.word	0x20000c94
 80042cc:	20000c48 	.word	0x20000c48
 80042d0:	20000c4c 	.word	0x20000c4c
 80042d4:	20000ca8 	.word	0x20000ca8
 80042d8:	20000cb0 	.word	0x20000cb0
 80042dc:	20000c98 	.word	0x20000c98
 80042e0:	200007c0 	.word	0x200007c0
 80042e4:	200007bc 	.word	0x200007bc
 80042e8:	20000ca4 	.word	0x20000ca4
 80042ec:	20000ca0 	.word	0x20000ca0

080042f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042f6:	4b28      	ldr	r3, [pc, #160]	; (8004398 <vTaskSwitchContext+0xa8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042fe:	4b27      	ldr	r3, [pc, #156]	; (800439c <vTaskSwitchContext+0xac>)
 8004300:	2201      	movs	r2, #1
 8004302:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004304:	e041      	b.n	800438a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004306:	4b25      	ldr	r3, [pc, #148]	; (800439c <vTaskSwitchContext+0xac>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800430c:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <vTaskSwitchContext+0xb0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e010      	b.n	8004336 <vTaskSwitchContext+0x46>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <vTaskSwitchContext+0x40>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	607b      	str	r3, [r7, #4]
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <vTaskSwitchContext+0x3e>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	3b01      	subs	r3, #1
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	491b      	ldr	r1, [pc, #108]	; (80043a4 <vTaskSwitchContext+0xb4>)
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0e4      	beq.n	8004314 <vTaskSwitchContext+0x24>
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4a13      	ldr	r2, [pc, #76]	; (80043a4 <vTaskSwitchContext+0xb4>)
 8004356:	4413      	add	r3, r2
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	605a      	str	r2, [r3, #4]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	3308      	adds	r3, #8
 800436c:	429a      	cmp	r2, r3
 800436e:	d104      	bne.n	800437a <vTaskSwitchContext+0x8a>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <vTaskSwitchContext+0xb8>)
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4a06      	ldr	r2, [pc, #24]	; (80043a0 <vTaskSwitchContext+0xb0>)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6013      	str	r3, [r2, #0]
}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000cb8 	.word	0x20000cb8
 800439c:	20000ca4 	.word	0x20000ca4
 80043a0:	20000c98 	.word	0x20000c98
 80043a4:	200007c0 	.word	0x200007c0
 80043a8:	200007bc 	.word	0x200007bc

080043ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	60fb      	str	r3, [r7, #12]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043d2:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <vTaskPlaceOnEventList+0x44>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3318      	adds	r3, #24
 80043d8:	4619      	mov	r1, r3
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fe febb 	bl	8003156 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043e0:	2101      	movs	r1, #1
 80043e2:	6838      	ldr	r0, [r7, #0]
 80043e4:	f000 fa7c 	bl	80048e0 <prvAddCurrentTaskToDelayedList>
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	200007bc 	.word	0x200007bc

080043f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	617b      	str	r3, [r7, #20]
}
 8004418:	bf00      	nop
 800441a:	e7fe      	b.n	800441a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <vTaskPlaceOnEventListRestricted+0x54>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3318      	adds	r3, #24
 8004422:	4619      	mov	r1, r3
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7fe fe72 	bl	800310e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004430:	f04f 33ff 	mov.w	r3, #4294967295
 8004434:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	68b8      	ldr	r0, [r7, #8]
 800443a:	f000 fa51 	bl	80048e0 <prvAddCurrentTaskToDelayedList>
	}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	200007bc 	.word	0x200007bc

0800444c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	60fb      	str	r3, [r7, #12]
}
 8004474:	bf00      	nop
 8004476:	e7fe      	b.n	8004476 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	3318      	adds	r3, #24
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe fea3 	bl	80031c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004482:	4b1e      	ldr	r3, [pc, #120]	; (80044fc <xTaskRemoveFromEventList+0xb0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11d      	bne.n	80044c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	3304      	adds	r3, #4
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe fe9a 	bl	80031c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004498:	4b19      	ldr	r3, [pc, #100]	; (8004500 <xTaskRemoveFromEventList+0xb4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d903      	bls.n	80044a8 <xTaskRemoveFromEventList+0x5c>
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	4a16      	ldr	r2, [pc, #88]	; (8004500 <xTaskRemoveFromEventList+0xb4>)
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4a13      	ldr	r2, [pc, #76]	; (8004504 <xTaskRemoveFromEventList+0xb8>)
 80044b6:	441a      	add	r2, r3
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4619      	mov	r1, r3
 80044be:	4610      	mov	r0, r2
 80044c0:	f7fe fe25 	bl	800310e <vListInsertEnd>
 80044c4:	e005      	b.n	80044d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	3318      	adds	r3, #24
 80044ca:	4619      	mov	r1, r3
 80044cc:	480e      	ldr	r0, [pc, #56]	; (8004508 <xTaskRemoveFromEventList+0xbc>)
 80044ce:	f7fe fe1e 	bl	800310e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <xTaskRemoveFromEventList+0xc0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	429a      	cmp	r2, r3
 80044de:	d905      	bls.n	80044ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044e0:	2301      	movs	r3, #1
 80044e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044e4:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <xTaskRemoveFromEventList+0xc4>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	e001      	b.n	80044f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044f0:	697b      	ldr	r3, [r7, #20]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000cb8 	.word	0x20000cb8
 8004500:	20000c98 	.word	0x20000c98
 8004504:	200007c0 	.word	0x200007c0
 8004508:	20000c50 	.word	0x20000c50
 800450c:	200007bc 	.word	0x200007bc
 8004510:	20000ca4 	.word	0x20000ca4

08004514 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <vTaskInternalSetTimeOutState+0x24>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <vTaskInternalSetTimeOutState+0x28>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	605a      	str	r2, [r3, #4]
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	20000ca8 	.word	0x20000ca8
 800453c:	20000c94 	.word	0x20000c94

08004540 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	613b      	str	r3, [r7, #16]
}
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	60fb      	str	r3, [r7, #12]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004582:	f000 fe7f 	bl	8005284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004586:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <xTaskCheckForTimeOut+0xbc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459e:	d102      	bne.n	80045a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	e023      	b.n	80045ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <xTaskCheckForTimeOut+0xc0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d007      	beq.n	80045c2 <xTaskCheckForTimeOut+0x82>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d302      	bcc.n	80045c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045bc:	2301      	movs	r3, #1
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	e015      	b.n	80045ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d20b      	bcs.n	80045e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	1ad2      	subs	r2, r2, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff9b 	bl	8004514 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	e004      	b.n	80045ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045ea:	2301      	movs	r3, #1
 80045ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045ee:	f000 fe79 	bl	80052e4 <vPortExitCritical>

	return xReturn;
 80045f2:	69fb      	ldr	r3, [r7, #28]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3720      	adds	r7, #32
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20000c94 	.word	0x20000c94
 8004600:	20000ca8 	.word	0x20000ca8

08004604 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004608:	4b03      	ldr	r3, [pc, #12]	; (8004618 <vTaskMissedYield+0x14>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]
}
 800460e:	bf00      	nop
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	20000ca4 	.word	0x20000ca4

0800461c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004624:	f000 f852 	bl	80046cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <prvIdleTask+0x28>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d9f9      	bls.n	8004624 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <prvIdleTask+0x2c>)
 8004632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004640:	e7f0      	b.n	8004624 <prvIdleTask+0x8>
 8004642:	bf00      	nop
 8004644:	200007c0 	.word	0x200007c0
 8004648:	e000ed04 	.word	0xe000ed04

0800464c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004652:	2300      	movs	r3, #0
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	e00c      	b.n	8004672 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4a12      	ldr	r2, [pc, #72]	; (80046ac <prvInitialiseTaskLists+0x60>)
 8004664:	4413      	add	r3, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe fd24 	bl	80030b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3301      	adds	r3, #1
 8004670:	607b      	str	r3, [r7, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b37      	cmp	r3, #55	; 0x37
 8004676:	d9ef      	bls.n	8004658 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004678:	480d      	ldr	r0, [pc, #52]	; (80046b0 <prvInitialiseTaskLists+0x64>)
 800467a:	f7fe fd1b 	bl	80030b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800467e:	480d      	ldr	r0, [pc, #52]	; (80046b4 <prvInitialiseTaskLists+0x68>)
 8004680:	f7fe fd18 	bl	80030b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004684:	480c      	ldr	r0, [pc, #48]	; (80046b8 <prvInitialiseTaskLists+0x6c>)
 8004686:	f7fe fd15 	bl	80030b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800468a:	480c      	ldr	r0, [pc, #48]	; (80046bc <prvInitialiseTaskLists+0x70>)
 800468c:	f7fe fd12 	bl	80030b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004690:	480b      	ldr	r0, [pc, #44]	; (80046c0 <prvInitialiseTaskLists+0x74>)
 8004692:	f7fe fd0f 	bl	80030b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <prvInitialiseTaskLists+0x78>)
 8004698:	4a05      	ldr	r2, [pc, #20]	; (80046b0 <prvInitialiseTaskLists+0x64>)
 800469a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <prvInitialiseTaskLists+0x7c>)
 800469e:	4a05      	ldr	r2, [pc, #20]	; (80046b4 <prvInitialiseTaskLists+0x68>)
 80046a0:	601a      	str	r2, [r3, #0]
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	200007c0 	.word	0x200007c0
 80046b0:	20000c20 	.word	0x20000c20
 80046b4:	20000c34 	.word	0x20000c34
 80046b8:	20000c50 	.word	0x20000c50
 80046bc:	20000c64 	.word	0x20000c64
 80046c0:	20000c7c 	.word	0x20000c7c
 80046c4:	20000c48 	.word	0x20000c48
 80046c8:	20000c4c 	.word	0x20000c4c

080046cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046d2:	e019      	b.n	8004708 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046d4:	f000 fdd6 	bl	8005284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d8:	4b10      	ldr	r3, [pc, #64]	; (800471c <prvCheckTasksWaitingTermination+0x50>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe fd6f 	bl	80031c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046ea:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <prvCheckTasksWaitingTermination+0x54>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	4a0b      	ldr	r2, [pc, #44]	; (8004720 <prvCheckTasksWaitingTermination+0x54>)
 80046f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <prvCheckTasksWaitingTermination+0x58>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <prvCheckTasksWaitingTermination+0x58>)
 80046fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046fe:	f000 fdf1 	bl	80052e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f810 	bl	8004728 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <prvCheckTasksWaitingTermination+0x58>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e1      	bne.n	80046d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004710:	bf00      	nop
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000c64 	.word	0x20000c64
 8004720:	20000c90 	.word	0x20000c90
 8004724:	20000c78 	.word	0x20000c78

08004728 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004736:	2b00      	cmp	r3, #0
 8004738:	d108      	bne.n	800474c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	4618      	mov	r0, r3
 8004740:	f000 ff8e 	bl	8005660 <vPortFree>
				vPortFree( pxTCB );
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 ff8b 	bl	8005660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800474a:	e018      	b.n	800477e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004752:	2b01      	cmp	r3, #1
 8004754:	d103      	bne.n	800475e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 ff82 	bl	8005660 <vPortFree>
	}
 800475c:	e00f      	b.n	800477e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004764:	2b02      	cmp	r3, #2
 8004766:	d00a      	beq.n	800477e <prvDeleteTCB+0x56>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	60fb      	str	r3, [r7, #12]
}
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <prvDeleteTCB+0x54>
	}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800478e:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <prvResetNextTaskUnblockTime+0x38>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d104      	bne.n	80047a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <prvResetNextTaskUnblockTime+0x3c>)
 800479a:	f04f 32ff 	mov.w	r2, #4294967295
 800479e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047a0:	e008      	b.n	80047b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a2:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <prvResetNextTaskUnblockTime+0x38>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <prvResetNextTaskUnblockTime+0x3c>)
 80047b2:	6013      	str	r3, [r2, #0]
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	20000c48 	.word	0x20000c48
 80047c4:	20000cb0 	.word	0x20000cb0

080047c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047ce:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <xTaskGetSchedulerState+0x34>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047d6:	2301      	movs	r3, #1
 80047d8:	607b      	str	r3, [r7, #4]
 80047da:	e008      	b.n	80047ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <xTaskGetSchedulerState+0x38>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047e4:	2302      	movs	r3, #2
 80047e6:	607b      	str	r3, [r7, #4]
 80047e8:	e001      	b.n	80047ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047ea:	2300      	movs	r3, #0
 80047ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047ee:	687b      	ldr	r3, [r7, #4]
	}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	20000c9c 	.word	0x20000c9c
 8004800:	20000cb8 	.word	0x20000cb8

08004804 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d056      	beq.n	80048c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800481a:	4b2e      	ldr	r3, [pc, #184]	; (80048d4 <xTaskPriorityDisinherit+0xd0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	429a      	cmp	r2, r3
 8004822:	d00a      	beq.n	800483a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	60fb      	str	r3, [r7, #12]
}
 8004836:	bf00      	nop
 8004838:	e7fe      	b.n	8004838 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	60bb      	str	r3, [r7, #8]
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485c:	1e5a      	subs	r2, r3, #1
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486a:	429a      	cmp	r2, r3
 800486c:	d02c      	beq.n	80048c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004872:	2b00      	cmp	r3, #0
 8004874:	d128      	bne.n	80048c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	3304      	adds	r3, #4
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe fca4 	bl	80031c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004898:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <xTaskPriorityDisinherit+0xd4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d903      	bls.n	80048a8 <xTaskPriorityDisinherit+0xa4>
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	4a0c      	ldr	r2, [pc, #48]	; (80048d8 <xTaskPriorityDisinherit+0xd4>)
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4a09      	ldr	r2, [pc, #36]	; (80048dc <xTaskPriorityDisinherit+0xd8>)
 80048b6:	441a      	add	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7fe fc25 	bl	800310e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048c4:	2301      	movs	r3, #1
 80048c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048c8:	697b      	ldr	r3, [r7, #20]
	}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	200007bc 	.word	0x200007bc
 80048d8:	20000c98 	.word	0x20000c98
 80048dc:	200007c0 	.word	0x200007c0

080048e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048ea:	4b21      	ldr	r3, [pc, #132]	; (8004970 <prvAddCurrentTaskToDelayedList+0x90>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048f0:	4b20      	ldr	r3, [pc, #128]	; (8004974 <prvAddCurrentTaskToDelayedList+0x94>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3304      	adds	r3, #4
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe fc66 	bl	80031c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d10a      	bne.n	800491a <prvAddCurrentTaskToDelayedList+0x3a>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800490a:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <prvAddCurrentTaskToDelayedList+0x94>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3304      	adds	r3, #4
 8004910:	4619      	mov	r1, r3
 8004912:	4819      	ldr	r0, [pc, #100]	; (8004978 <prvAddCurrentTaskToDelayedList+0x98>)
 8004914:	f7fe fbfb 	bl	800310e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004918:	e026      	b.n	8004968 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4413      	add	r3, r2
 8004920:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004922:	4b14      	ldr	r3, [pc, #80]	; (8004974 <prvAddCurrentTaskToDelayedList+0x94>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	429a      	cmp	r2, r3
 8004930:	d209      	bcs.n	8004946 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <prvAddCurrentTaskToDelayedList+0x94>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f7fe fc09 	bl	8003156 <vListInsert>
}
 8004944:	e010      	b.n	8004968 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004946:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <prvAddCurrentTaskToDelayedList+0x94>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3304      	adds	r3, #4
 8004950:	4619      	mov	r1, r3
 8004952:	4610      	mov	r0, r2
 8004954:	f7fe fbff 	bl	8003156 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <prvAddCurrentTaskToDelayedList+0xa4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	d202      	bcs.n	8004968 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004962:	4a08      	ldr	r2, [pc, #32]	; (8004984 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6013      	str	r3, [r2, #0]
}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000c94 	.word	0x20000c94
 8004974:	200007bc 	.word	0x200007bc
 8004978:	20000c7c 	.word	0x20000c7c
 800497c:	20000c4c 	.word	0x20000c4c
 8004980:	20000c48 	.word	0x20000c48
 8004984:	20000cb0 	.word	0x20000cb0

08004988 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004992:	f000 fb07 	bl	8004fa4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004996:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <xTimerCreateTimerTask+0x80>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d021      	beq.n	80049e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80049a6:	1d3a      	adds	r2, r7, #4
 80049a8:	f107 0108 	add.w	r1, r7, #8
 80049ac:	f107 030c 	add.w	r3, r7, #12
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fe fb65 	bl	8003080 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	9202      	str	r2, [sp, #8]
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	2302      	movs	r3, #2
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2300      	movs	r3, #0
 80049c6:	460a      	mov	r2, r1
 80049c8:	4910      	ldr	r1, [pc, #64]	; (8004a0c <xTimerCreateTimerTask+0x84>)
 80049ca:	4811      	ldr	r0, [pc, #68]	; (8004a10 <xTimerCreateTimerTask+0x88>)
 80049cc:	f7ff f912 	bl	8003bf4 <xTaskCreateStatic>
 80049d0:	4603      	mov	r3, r0
 80049d2:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <xTimerCreateTimerTask+0x8c>)
 80049d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <xTimerCreateTimerTask+0x8c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80049de:	2301      	movs	r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	613b      	str	r3, [r7, #16]
}
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80049fe:	697b      	ldr	r3, [r7, #20]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20000cec 	.word	0x20000cec
 8004a0c:	08005968 	.word	0x08005968
 8004a10:	08004b4d 	.word	0x08004b4d
 8004a14:	20000cf0 	.word	0x20000cf0

08004a18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	623b      	str	r3, [r7, #32]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a46:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <xTimerGenericCommand+0x98>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d02a      	beq.n	8004aa4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b05      	cmp	r3, #5
 8004a5e:	dc18      	bgt.n	8004a92 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a60:	f7ff feb2 	bl	80047c8 <xTaskGetSchedulerState>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d109      	bne.n	8004a7e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a6a:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <xTimerGenericCommand+0x98>)
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	f107 0110 	add.w	r1, r7, #16
 8004a72:	2300      	movs	r3, #0
 8004a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a76:	f7fe fcd5 	bl	8003424 <xQueueGenericSend>
 8004a7a:	6278      	str	r0, [r7, #36]	; 0x24
 8004a7c:	e012      	b.n	8004aa4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a7e:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <xTimerGenericCommand+0x98>)
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	f107 0110 	add.w	r1, r7, #16
 8004a86:	2300      	movs	r3, #0
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f7fe fccb 	bl	8003424 <xQueueGenericSend>
 8004a8e:	6278      	str	r0, [r7, #36]	; 0x24
 8004a90:	e008      	b.n	8004aa4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a92:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <xTimerGenericCommand+0x98>)
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	f107 0110 	add.w	r1, r7, #16
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	f7fe fdbf 	bl	8003620 <xQueueGenericSendFromISR>
 8004aa2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3728      	adds	r7, #40	; 0x28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000cec 	.word	0x20000cec

08004ab4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004abe:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <prvProcessExpiredTimer+0x94>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe fb7b 	bl	80031c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d022      	beq.n	8004b26 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	699a      	ldr	r2, [r3, #24]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	18d1      	adds	r1, r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	6978      	ldr	r0, [r7, #20]
 8004aee:	f000 f8d1 	bl	8004c94 <prvInsertTimerInActiveList>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01f      	beq.n	8004b38 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004af8:	2300      	movs	r3, #0
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2300      	movs	r3, #0
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	2100      	movs	r1, #0
 8004b02:	6978      	ldr	r0, [r7, #20]
 8004b04:	f7ff ff88 	bl	8004a18 <xTimerGenericCommand>
 8004b08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d113      	bne.n	8004b38 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	60fb      	str	r3, [r7, #12]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	6978      	ldr	r0, [r7, #20]
 8004b3e:	4798      	blx	r3
}
 8004b40:	bf00      	nop
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000ce4 	.word	0x20000ce4

08004b4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b54:	f107 0308 	add.w	r3, r7, #8
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 f857 	bl	8004c0c <prvGetNextExpireTime>
 8004b5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4619      	mov	r1, r3
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f803 	bl	8004b70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b6a:	f000 f8d5 	bl	8004d18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b6e:	e7f1      	b.n	8004b54 <prvTimerTask+0x8>

08004b70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b7a:	f7ff fa43 	bl	8004004 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b7e:	f107 0308 	add.w	r3, r7, #8
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f866 	bl	8004c54 <prvSampleTimeNow>
 8004b88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d130      	bne.n	8004bf2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <prvProcessTimerOrBlockTask+0x3c>
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d806      	bhi.n	8004bac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b9e:	f7ff fa3f 	bl	8004020 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff ff85 	bl	8004ab4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004baa:	e024      	b.n	8004bf6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d008      	beq.n	8004bc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004bb2:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <prvProcessTimerOrBlockTask+0x90>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <prvProcessTimerOrBlockTask+0x50>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <prvProcessTimerOrBlockTask+0x52>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <prvProcessTimerOrBlockTask+0x94>)
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	f7fe ffdb 	bl	8003b8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004bd6:	f7ff fa23 	bl	8004020 <xTaskResumeAll>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <prvProcessTimerOrBlockTask+0x98>)
 8004be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	f3bf 8f6f 	isb	sy
}
 8004bf0:	e001      	b.n	8004bf6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004bf2:	f7ff fa15 	bl	8004020 <xTaskResumeAll>
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000ce8 	.word	0x20000ce8
 8004c04:	20000cec 	.word	0x20000cec
 8004c08:	e000ed04 	.word	0xe000ed04

08004c0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c14:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <prvGetNextExpireTime+0x44>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <prvGetNextExpireTime+0x16>
 8004c1e:	2201      	movs	r2, #1
 8004c20:	e000      	b.n	8004c24 <prvGetNextExpireTime+0x18>
 8004c22:	2200      	movs	r2, #0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <prvGetNextExpireTime+0x44>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	e001      	b.n	8004c40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c40:	68fb      	ldr	r3, [r7, #12]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20000ce4 	.word	0x20000ce4

08004c54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c5c:	f7ff fa7e 	bl	800415c <xTaskGetTickCount>
 8004c60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <prvSampleTimeNow+0x3c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d205      	bcs.n	8004c78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c6c:	f000 f936 	bl	8004edc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	e002      	b.n	8004c7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c7e:	4a04      	ldr	r2, [pc, #16]	; (8004c90 <prvSampleTimeNow+0x3c>)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c84:	68fb      	ldr	r3, [r7, #12]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000cf4 	.word	0x20000cf4

08004c94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d812      	bhi.n	8004ce0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	1ad2      	subs	r2, r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d302      	bcc.n	8004cce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	e01b      	b.n	8004d06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004cce:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <prvInsertTimerInActiveList+0x7c>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f7fe fa3c 	bl	8003156 <vListInsert>
 8004cde:	e012      	b.n	8004d06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d206      	bcs.n	8004cf6 <prvInsertTimerInActiveList+0x62>
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d302      	bcc.n	8004cf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e007      	b.n	8004d06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cf6:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <prvInsertTimerInActiveList+0x80>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f7fe fa28 	bl	8003156 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d06:	697b      	ldr	r3, [r7, #20]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000ce8 	.word	0x20000ce8
 8004d14:	20000ce4 	.word	0x20000ce4

08004d18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08e      	sub	sp, #56	; 0x38
 8004d1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d1e:	e0ca      	b.n	8004eb6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	da18      	bge.n	8004d58 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d26:	1d3b      	adds	r3, r7, #4
 8004d28:	3304      	adds	r3, #4
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10a      	bne.n	8004d48 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	61fb      	str	r3, [r7, #28]
}
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d4e:	6850      	ldr	r0, [r2, #4]
 8004d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d52:	6892      	ldr	r2, [r2, #8]
 8004d54:	4611      	mov	r1, r2
 8004d56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f2c0 80aa 	blt.w	8004eb4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe fa29 	bl	80031c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d76:	463b      	mov	r3, r7
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff ff6b 	bl	8004c54 <prvSampleTimeNow>
 8004d7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b09      	cmp	r3, #9
 8004d84:	f200 8097 	bhi.w	8004eb6 <prvProcessReceivedCommands+0x19e>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <prvProcessReceivedCommands+0x78>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004db9 	.word	0x08004db9
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004db9 	.word	0x08004db9
 8004d9c:	08004e2d 	.word	0x08004e2d
 8004da0:	08004e41 	.word	0x08004e41
 8004da4:	08004e8b 	.word	0x08004e8b
 8004da8:	08004db9 	.word	0x08004db9
 8004dac:	08004db9 	.word	0x08004db9
 8004db0:	08004e2d 	.word	0x08004e2d
 8004db4:	08004e41 	.word	0x08004e41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	18d1      	adds	r1, r2, r3
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd8:	f7ff ff5c 	bl	8004c94 <prvInsertTimerInActiveList>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d069      	beq.n	8004eb6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d05e      	beq.n	8004eb6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	441a      	add	r2, r3
 8004e00:	2300      	movs	r3, #0
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	2100      	movs	r1, #0
 8004e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e0a:	f7ff fe05 	bl	8004a18 <xTimerGenericCommand>
 8004e0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d14f      	bne.n	8004eb6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	61bb      	str	r3, [r7, #24]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e32:	f023 0301 	bic.w	r3, r3, #1
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004e3e:	e03a      	b.n	8004eb6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	617b      	str	r3, [r7, #20]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	18d1      	adds	r1, r2, r3
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e84:	f7ff ff06 	bl	8004c94 <prvInsertTimerInActiveList>
					break;
 8004e88:	e015      	b.n	8004eb6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d103      	bne.n	8004ea0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e9a:	f000 fbe1 	bl	8005660 <vPortFree>
 8004e9e:	e00a      	b.n	8004eb6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004eb2:	e000      	b.n	8004eb6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004eb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eb6:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <prvProcessReceivedCommands+0x1c0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	1d39      	adds	r1, r7, #4
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fe fc4a 	bl	8003758 <xQueueReceive>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f47f af2a 	bne.w	8004d20 <prvProcessReceivedCommands+0x8>
	}
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	3730      	adds	r7, #48	; 0x30
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000cec 	.word	0x20000cec

08004edc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ee2:	e048      	b.n	8004f76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	; (8004f9c <prvSwitchTimerLists+0xc0>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eee:	4b2b      	ldr	r3, [pc, #172]	; (8004f9c <prvSwitchTimerLists+0xc0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fe f963 	bl	80031c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d02e      	beq.n	8004f76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4413      	add	r3, r2
 8004f20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d90e      	bls.n	8004f48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f36:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <prvSwitchTimerLists+0xc0>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4610      	mov	r0, r2
 8004f42:	f7fe f908 	bl	8003156 <vListInsert>
 8004f46:	e016      	b.n	8004f76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	2100      	movs	r1, #0
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7ff fd60 	bl	8004a18 <xTimerGenericCommand>
 8004f58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	603b      	str	r3, [r7, #0]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f76:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <prvSwitchTimerLists+0xc0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1b1      	bne.n	8004ee4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <prvSwitchTimerLists+0xc0>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <prvSwitchTimerLists+0xc4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <prvSwitchTimerLists+0xc0>)
 8004f8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f8e:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <prvSwitchTimerLists+0xc4>)
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20000ce4 	.word	0x20000ce4
 8004fa0:	20000ce8 	.word	0x20000ce8

08004fa4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004faa:	f000 f96b 	bl	8005284 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fae:	4b15      	ldr	r3, [pc, #84]	; (8005004 <prvCheckForValidListAndQueue+0x60>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d120      	bne.n	8004ff8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004fb6:	4814      	ldr	r0, [pc, #80]	; (8005008 <prvCheckForValidListAndQueue+0x64>)
 8004fb8:	f7fe f87c 	bl	80030b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fbc:	4813      	ldr	r0, [pc, #76]	; (800500c <prvCheckForValidListAndQueue+0x68>)
 8004fbe:	f7fe f879 	bl	80030b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fc2:	4b13      	ldr	r3, [pc, #76]	; (8005010 <prvCheckForValidListAndQueue+0x6c>)
 8004fc4:	4a10      	ldr	r2, [pc, #64]	; (8005008 <prvCheckForValidListAndQueue+0x64>)
 8004fc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fc8:	4b12      	ldr	r3, [pc, #72]	; (8005014 <prvCheckForValidListAndQueue+0x70>)
 8004fca:	4a10      	ldr	r2, [pc, #64]	; (800500c <prvCheckForValidListAndQueue+0x68>)
 8004fcc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fce:	2300      	movs	r3, #0
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	4b11      	ldr	r3, [pc, #68]	; (8005018 <prvCheckForValidListAndQueue+0x74>)
 8004fd4:	4a11      	ldr	r2, [pc, #68]	; (800501c <prvCheckForValidListAndQueue+0x78>)
 8004fd6:	2110      	movs	r1, #16
 8004fd8:	200a      	movs	r0, #10
 8004fda:	f7fe f987 	bl	80032ec <xQueueGenericCreateStatic>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4a08      	ldr	r2, [pc, #32]	; (8005004 <prvCheckForValidListAndQueue+0x60>)
 8004fe2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fe4:	4b07      	ldr	r3, [pc, #28]	; (8005004 <prvCheckForValidListAndQueue+0x60>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <prvCheckForValidListAndQueue+0x60>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	490b      	ldr	r1, [pc, #44]	; (8005020 <prvCheckForValidListAndQueue+0x7c>)
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fe fda0 	bl	8003b38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ff8:	f000 f974 	bl	80052e4 <vPortExitCritical>
}
 8004ffc:	bf00      	nop
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000cec 	.word	0x20000cec
 8005008:	20000cbc 	.word	0x20000cbc
 800500c:	20000cd0 	.word	0x20000cd0
 8005010:	20000ce4 	.word	0x20000ce4
 8005014:	20000ce8 	.word	0x20000ce8
 8005018:	20000d98 	.word	0x20000d98
 800501c:	20000cf8 	.word	0x20000cf8
 8005020:	08005970 	.word	0x08005970

08005024 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3b04      	subs	r3, #4
 8005034:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800503c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3b04      	subs	r3, #4
 8005042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f023 0201 	bic.w	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3b04      	subs	r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005054:	4a0c      	ldr	r2, [pc, #48]	; (8005088 <pxPortInitialiseStack+0x64>)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3b14      	subs	r3, #20
 800505e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3b04      	subs	r3, #4
 800506a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f06f 0202 	mvn.w	r2, #2
 8005072:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3b20      	subs	r3, #32
 8005078:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800507a:	68fb      	ldr	r3, [r7, #12]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	0800508d 	.word	0x0800508d

0800508c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005096:	4b12      	ldr	r3, [pc, #72]	; (80050e0 <prvTaskExitError+0x54>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509e:	d00a      	beq.n	80050b6 <prvTaskExitError+0x2a>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	60fb      	str	r3, [r7, #12]
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <prvTaskExitError+0x28>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60bb      	str	r3, [r7, #8]
}
 80050c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050ca:	bf00      	nop
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0fc      	beq.n	80050cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	20000014 	.word	0x20000014
	...

080050f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050f0:	4b07      	ldr	r3, [pc, #28]	; (8005110 <pxCurrentTCBConst2>)
 80050f2:	6819      	ldr	r1, [r3, #0]
 80050f4:	6808      	ldr	r0, [r1, #0]
 80050f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fa:	f380 8809 	msr	PSP, r0
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f04f 0000 	mov.w	r0, #0
 8005106:	f380 8811 	msr	BASEPRI, r0
 800510a:	4770      	bx	lr
 800510c:	f3af 8000 	nop.w

08005110 <pxCurrentTCBConst2>:
 8005110:	200007bc 	.word	0x200007bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop

08005118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005118:	4808      	ldr	r0, [pc, #32]	; (800513c <prvPortStartFirstTask+0x24>)
 800511a:	6800      	ldr	r0, [r0, #0]
 800511c:	6800      	ldr	r0, [r0, #0]
 800511e:	f380 8808 	msr	MSP, r0
 8005122:	f04f 0000 	mov.w	r0, #0
 8005126:	f380 8814 	msr	CONTROL, r0
 800512a:	b662      	cpsie	i
 800512c:	b661      	cpsie	f
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	df00      	svc	0
 8005138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800513a:	bf00      	nop
 800513c:	e000ed08 	.word	0xe000ed08

08005140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005146:	4b46      	ldr	r3, [pc, #280]	; (8005260 <xPortStartScheduler+0x120>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a46      	ldr	r2, [pc, #280]	; (8005264 <xPortStartScheduler+0x124>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d10a      	bne.n	8005166 <xPortStartScheduler+0x26>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	613b      	str	r3, [r7, #16]
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005166:	4b3e      	ldr	r3, [pc, #248]	; (8005260 <xPortStartScheduler+0x120>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a3f      	ldr	r2, [pc, #252]	; (8005268 <xPortStartScheduler+0x128>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d10a      	bne.n	8005186 <xPortStartScheduler+0x46>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	60fb      	str	r3, [r7, #12]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005186:	4b39      	ldr	r3, [pc, #228]	; (800526c <xPortStartScheduler+0x12c>)
 8005188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	22ff      	movs	r2, #255	; 0xff
 8005196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	4b31      	ldr	r3, [pc, #196]	; (8005270 <xPortStartScheduler+0x130>)
 80051ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051ae:	4b31      	ldr	r3, [pc, #196]	; (8005274 <xPortStartScheduler+0x134>)
 80051b0:	2207      	movs	r2, #7
 80051b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051b4:	e009      	b.n	80051ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80051b6:	4b2f      	ldr	r3, [pc, #188]	; (8005274 <xPortStartScheduler+0x134>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	4a2d      	ldr	r2, [pc, #180]	; (8005274 <xPortStartScheduler+0x134>)
 80051be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d2:	2b80      	cmp	r3, #128	; 0x80
 80051d4:	d0ef      	beq.n	80051b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051d6:	4b27      	ldr	r3, [pc, #156]	; (8005274 <xPortStartScheduler+0x134>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1c3 0307 	rsb	r3, r3, #7
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d00a      	beq.n	80051f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	60bb      	str	r3, [r7, #8]
}
 80051f4:	bf00      	nop
 80051f6:	e7fe      	b.n	80051f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051f8:	4b1e      	ldr	r3, [pc, #120]	; (8005274 <xPortStartScheduler+0x134>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	4a1d      	ldr	r2, [pc, #116]	; (8005274 <xPortStartScheduler+0x134>)
 8005200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005202:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <xPortStartScheduler+0x134>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800520a:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <xPortStartScheduler+0x134>)
 800520c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005216:	4b18      	ldr	r3, [pc, #96]	; (8005278 <xPortStartScheduler+0x138>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a17      	ldr	r2, [pc, #92]	; (8005278 <xPortStartScheduler+0x138>)
 800521c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005222:	4b15      	ldr	r3, [pc, #84]	; (8005278 <xPortStartScheduler+0x138>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a14      	ldr	r2, [pc, #80]	; (8005278 <xPortStartScheduler+0x138>)
 8005228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800522c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800522e:	f000 f8dd 	bl	80053ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005232:	4b12      	ldr	r3, [pc, #72]	; (800527c <xPortStartScheduler+0x13c>)
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005238:	f000 f8fc 	bl	8005434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800523c:	4b10      	ldr	r3, [pc, #64]	; (8005280 <xPortStartScheduler+0x140>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a0f      	ldr	r2, [pc, #60]	; (8005280 <xPortStartScheduler+0x140>)
 8005242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005248:	f7ff ff66 	bl	8005118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800524c:	f7ff f850 	bl	80042f0 <vTaskSwitchContext>
	prvTaskExitError();
 8005250:	f7ff ff1c 	bl	800508c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	e000ed00 	.word	0xe000ed00
 8005264:	410fc271 	.word	0x410fc271
 8005268:	410fc270 	.word	0x410fc270
 800526c:	e000e400 	.word	0xe000e400
 8005270:	20000de8 	.word	0x20000de8
 8005274:	20000dec 	.word	0x20000dec
 8005278:	e000ed20 	.word	0xe000ed20
 800527c:	20000014 	.word	0x20000014
 8005280:	e000ef34 	.word	0xe000ef34

08005284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	607b      	str	r3, [r7, #4]
}
 800529c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800529e:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <vPortEnterCritical+0x58>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3301      	adds	r3, #1
 80052a4:	4a0d      	ldr	r2, [pc, #52]	; (80052dc <vPortEnterCritical+0x58>)
 80052a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052a8:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <vPortEnterCritical+0x58>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d10f      	bne.n	80052d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <vPortEnterCritical+0x5c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	603b      	str	r3, [r7, #0]
}
 80052cc:	bf00      	nop
 80052ce:	e7fe      	b.n	80052ce <vPortEnterCritical+0x4a>
	}
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	20000014 	.word	0x20000014
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <vPortExitCritical+0x50>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <vPortExitCritical+0x24>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	607b      	str	r3, [r7, #4]
}
 8005304:	bf00      	nop
 8005306:	e7fe      	b.n	8005306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <vPortExitCritical+0x50>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3b01      	subs	r3, #1
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <vPortExitCritical+0x50>)
 8005310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005312:	4b08      	ldr	r3, [pc, #32]	; (8005334 <vPortExitCritical+0x50>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d105      	bne.n	8005326 <vPortExitCritical+0x42>
 800531a:	2300      	movs	r3, #0
 800531c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	f383 8811 	msr	BASEPRI, r3
}
 8005324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000014 	.word	0x20000014
	...

08005340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005340:	f3ef 8009 	mrs	r0, PSP
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <pxCurrentTCBConst>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	f01e 0f10 	tst.w	lr, #16
 8005350:	bf08      	it	eq
 8005352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535a:	6010      	str	r0, [r2, #0]
 800535c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005364:	f380 8811 	msr	BASEPRI, r0
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f7fe ffbe 	bl	80042f0 <vTaskSwitchContext>
 8005374:	f04f 0000 	mov.w	r0, #0
 8005378:	f380 8811 	msr	BASEPRI, r0
 800537c:	bc09      	pop	{r0, r3}
 800537e:	6819      	ldr	r1, [r3, #0]
 8005380:	6808      	ldr	r0, [r1, #0]
 8005382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005386:	f01e 0f10 	tst.w	lr, #16
 800538a:	bf08      	it	eq
 800538c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005390:	f380 8809 	msr	PSP, r0
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	f3af 8000 	nop.w

080053a0 <pxCurrentTCBConst>:
 80053a0:	200007bc 	.word	0x200007bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop

080053a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	607b      	str	r3, [r7, #4]
}
 80053c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053c2:	f7fe fedb 	bl	800417c <xTaskIncrementTick>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <xPortSysTickHandler+0x40>)
 80053ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	2300      	movs	r3, #0
 80053d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f383 8811 	msr	BASEPRI, r3
}
 80053de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	e000ed04 	.word	0xe000ed04

080053ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <vPortSetupTimerInterrupt+0x34>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053f6:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <vPortSetupTimerInterrupt+0x38>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053fc:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <vPortSetupTimerInterrupt+0x3c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a0a      	ldr	r2, [pc, #40]	; (800542c <vPortSetupTimerInterrupt+0x40>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	099b      	lsrs	r3, r3, #6
 8005408:	4a09      	ldr	r2, [pc, #36]	; (8005430 <vPortSetupTimerInterrupt+0x44>)
 800540a:	3b01      	subs	r3, #1
 800540c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800540e:	4b04      	ldr	r3, [pc, #16]	; (8005420 <vPortSetupTimerInterrupt+0x34>)
 8005410:	2207      	movs	r2, #7
 8005412:	601a      	str	r2, [r3, #0]
}
 8005414:	bf00      	nop
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	e000e010 	.word	0xe000e010
 8005424:	e000e018 	.word	0xe000e018
 8005428:	20000008 	.word	0x20000008
 800542c:	10624dd3 	.word	0x10624dd3
 8005430:	e000e014 	.word	0xe000e014

08005434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005444 <vPortEnableVFP+0x10>
 8005438:	6801      	ldr	r1, [r0, #0]
 800543a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800543e:	6001      	str	r1, [r0, #0]
 8005440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005442:	bf00      	nop
 8005444:	e000ed88 	.word	0xe000ed88

08005448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800544e:	f3ef 8305 	mrs	r3, IPSR
 8005452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b0f      	cmp	r3, #15
 8005458:	d914      	bls.n	8005484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800545a:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <vPortValidateInterruptPriority+0x70>)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005464:	4b15      	ldr	r3, [pc, #84]	; (80054bc <vPortValidateInterruptPriority+0x74>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	7afa      	ldrb	r2, [r7, #11]
 800546a:	429a      	cmp	r2, r3
 800546c:	d20a      	bcs.n	8005484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	607b      	str	r3, [r7, #4]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <vPortValidateInterruptPriority+0x78>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800548c:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <vPortValidateInterruptPriority+0x7c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d90a      	bls.n	80054aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	603b      	str	r3, [r7, #0]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <vPortValidateInterruptPriority+0x60>
	}
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	e000e3f0 	.word	0xe000e3f0
 80054bc:	20000de8 	.word	0x20000de8
 80054c0:	e000ed0c 	.word	0xe000ed0c
 80054c4:	20000dec 	.word	0x20000dec

080054c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054d4:	f7fe fd96 	bl	8004004 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054d8:	4b5b      	ldr	r3, [pc, #364]	; (8005648 <pvPortMalloc+0x180>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054e0:	f000 f920 	bl	8005724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054e4:	4b59      	ldr	r3, [pc, #356]	; (800564c <pvPortMalloc+0x184>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f040 8093 	bne.w	8005618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01d      	beq.n	8005534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80054f8:	2208      	movs	r2, #8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4413      	add	r3, r2
 80054fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	2b00      	cmp	r3, #0
 8005508:	d014      	beq.n	8005534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f023 0307 	bic.w	r3, r3, #7
 8005510:	3308      	adds	r3, #8
 8005512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <pvPortMalloc+0x6c>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	617b      	str	r3, [r7, #20]
}
 8005530:	bf00      	nop
 8005532:	e7fe      	b.n	8005532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d06e      	beq.n	8005618 <pvPortMalloc+0x150>
 800553a:	4b45      	ldr	r3, [pc, #276]	; (8005650 <pvPortMalloc+0x188>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	d869      	bhi.n	8005618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005544:	4b43      	ldr	r3, [pc, #268]	; (8005654 <pvPortMalloc+0x18c>)
 8005546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005548:	4b42      	ldr	r3, [pc, #264]	; (8005654 <pvPortMalloc+0x18c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800554e:	e004      	b.n	800555a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	429a      	cmp	r2, r3
 8005562:	d903      	bls.n	800556c <pvPortMalloc+0xa4>
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f1      	bne.n	8005550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800556c:	4b36      	ldr	r3, [pc, #216]	; (8005648 <pvPortMalloc+0x180>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005572:	429a      	cmp	r2, r3
 8005574:	d050      	beq.n	8005618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2208      	movs	r2, #8
 800557c:	4413      	add	r3, r2
 800557e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	1ad2      	subs	r2, r2, r3
 8005590:	2308      	movs	r3, #8
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	429a      	cmp	r2, r3
 8005596:	d91f      	bls.n	80055d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4413      	add	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <pvPortMalloc+0xf8>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	613b      	str	r3, [r7, #16]
}
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	1ad2      	subs	r2, r2, r3
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055d2:	69b8      	ldr	r0, [r7, #24]
 80055d4:	f000 f908 	bl	80057e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055d8:	4b1d      	ldr	r3, [pc, #116]	; (8005650 <pvPortMalloc+0x188>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	4a1b      	ldr	r2, [pc, #108]	; (8005650 <pvPortMalloc+0x188>)
 80055e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055e6:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <pvPortMalloc+0x188>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4b1b      	ldr	r3, [pc, #108]	; (8005658 <pvPortMalloc+0x190>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d203      	bcs.n	80055fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055f2:	4b17      	ldr	r3, [pc, #92]	; (8005650 <pvPortMalloc+0x188>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a18      	ldr	r2, [pc, #96]	; (8005658 <pvPortMalloc+0x190>)
 80055f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	4b13      	ldr	r3, [pc, #76]	; (800564c <pvPortMalloc+0x184>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	431a      	orrs	r2, r3
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800560e:	4b13      	ldr	r3, [pc, #76]	; (800565c <pvPortMalloc+0x194>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3301      	adds	r3, #1
 8005614:	4a11      	ldr	r2, [pc, #68]	; (800565c <pvPortMalloc+0x194>)
 8005616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005618:	f7fe fd02 	bl	8004020 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <pvPortMalloc+0x174>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	60fb      	str	r3, [r7, #12]
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <pvPortMalloc+0x172>
	return pvReturn;
 800563c:	69fb      	ldr	r3, [r7, #28]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3728      	adds	r7, #40	; 0x28
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	200049f8 	.word	0x200049f8
 800564c:	20004a0c 	.word	0x20004a0c
 8005650:	200049fc 	.word	0x200049fc
 8005654:	200049f0 	.word	0x200049f0
 8005658:	20004a00 	.word	0x20004a00
 800565c:	20004a04 	.word	0x20004a04

08005660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d04d      	beq.n	800570e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005672:	2308      	movs	r3, #8
 8005674:	425b      	negs	r3, r3
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4413      	add	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	4b24      	ldr	r3, [pc, #144]	; (8005718 <vPortFree+0xb8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10a      	bne.n	80056a4 <vPortFree+0x44>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	60fb      	str	r3, [r7, #12]
}
 80056a0:	bf00      	nop
 80056a2:	e7fe      	b.n	80056a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <vPortFree+0x62>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	60bb      	str	r3, [r7, #8]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	4b14      	ldr	r3, [pc, #80]	; (8005718 <vPortFree+0xb8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01e      	beq.n	800570e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d11a      	bne.n	800570e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <vPortFree+0xb8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	43db      	mvns	r3, r3
 80056e2:	401a      	ands	r2, r3
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056e8:	f7fe fc8c 	bl	8004004 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	4b0a      	ldr	r3, [pc, #40]	; (800571c <vPortFree+0xbc>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4413      	add	r3, r2
 80056f6:	4a09      	ldr	r2, [pc, #36]	; (800571c <vPortFree+0xbc>)
 80056f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056fa:	6938      	ldr	r0, [r7, #16]
 80056fc:	f000 f874 	bl	80057e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005700:	4b07      	ldr	r3, [pc, #28]	; (8005720 <vPortFree+0xc0>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3301      	adds	r3, #1
 8005706:	4a06      	ldr	r2, [pc, #24]	; (8005720 <vPortFree+0xc0>)
 8005708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800570a:	f7fe fc89 	bl	8004020 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800570e:	bf00      	nop
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20004a0c 	.word	0x20004a0c
 800571c:	200049fc 	.word	0x200049fc
 8005720:	20004a08 	.word	0x20004a08

08005724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800572a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800572e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005730:	4b27      	ldr	r3, [pc, #156]	; (80057d0 <prvHeapInit+0xac>)
 8005732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00c      	beq.n	8005758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3307      	adds	r3, #7
 8005742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0307 	bic.w	r3, r3, #7
 800574a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	4a1f      	ldr	r2, [pc, #124]	; (80057d0 <prvHeapInit+0xac>)
 8005754:	4413      	add	r3, r2
 8005756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800575c:	4a1d      	ldr	r2, [pc, #116]	; (80057d4 <prvHeapInit+0xb0>)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005762:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <prvHeapInit+0xb0>)
 8005764:	2200      	movs	r2, #0
 8005766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	4413      	add	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005770:	2208      	movs	r2, #8
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1a9b      	subs	r3, r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0307 	bic.w	r3, r3, #7
 800577e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <prvHeapInit+0xb4>)
 8005784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005786:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <prvHeapInit+0xb4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2200      	movs	r2, #0
 800578c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800578e:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <prvHeapInit+0xb4>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <prvHeapInit+0xb4>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4a0a      	ldr	r2, [pc, #40]	; (80057dc <prvHeapInit+0xb8>)
 80057b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	4a09      	ldr	r2, [pc, #36]	; (80057e0 <prvHeapInit+0xbc>)
 80057ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057bc:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <prvHeapInit+0xc0>)
 80057be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057c2:	601a      	str	r2, [r3, #0]
}
 80057c4:	bf00      	nop
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	20000df0 	.word	0x20000df0
 80057d4:	200049f0 	.word	0x200049f0
 80057d8:	200049f8 	.word	0x200049f8
 80057dc:	20004a00 	.word	0x20004a00
 80057e0:	200049fc 	.word	0x200049fc
 80057e4:	20004a0c 	.word	0x20004a0c

080057e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057f0:	4b28      	ldr	r3, [pc, #160]	; (8005894 <prvInsertBlockIntoFreeList+0xac>)
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	e002      	b.n	80057fc <prvInsertBlockIntoFreeList+0x14>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	429a      	cmp	r2, r3
 8005804:	d8f7      	bhi.n	80057f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	4413      	add	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	429a      	cmp	r2, r3
 8005816:	d108      	bne.n	800582a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	441a      	add	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	441a      	add	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d118      	bne.n	8005870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	4b15      	ldr	r3, [pc, #84]	; (8005898 <prvInsertBlockIntoFreeList+0xb0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d00d      	beq.n	8005866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	441a      	add	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	e008      	b.n	8005878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005866:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <prvInsertBlockIntoFreeList+0xb0>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e003      	b.n	8005878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d002      	beq.n	8005886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005886:	bf00      	nop
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	200049f0 	.word	0x200049f0
 8005898:	200049f8 	.word	0x200049f8

0800589c <__libc_init_array>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	4d0d      	ldr	r5, [pc, #52]	; (80058d4 <__libc_init_array+0x38>)
 80058a0:	4c0d      	ldr	r4, [pc, #52]	; (80058d8 <__libc_init_array+0x3c>)
 80058a2:	1b64      	subs	r4, r4, r5
 80058a4:	10a4      	asrs	r4, r4, #2
 80058a6:	2600      	movs	r6, #0
 80058a8:	42a6      	cmp	r6, r4
 80058aa:	d109      	bne.n	80058c0 <__libc_init_array+0x24>
 80058ac:	4d0b      	ldr	r5, [pc, #44]	; (80058dc <__libc_init_array+0x40>)
 80058ae:	4c0c      	ldr	r4, [pc, #48]	; (80058e0 <__libc_init_array+0x44>)
 80058b0:	f000 f82e 	bl	8005910 <_init>
 80058b4:	1b64      	subs	r4, r4, r5
 80058b6:	10a4      	asrs	r4, r4, #2
 80058b8:	2600      	movs	r6, #0
 80058ba:	42a6      	cmp	r6, r4
 80058bc:	d105      	bne.n	80058ca <__libc_init_array+0x2e>
 80058be:	bd70      	pop	{r4, r5, r6, pc}
 80058c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c4:	4798      	blx	r3
 80058c6:	3601      	adds	r6, #1
 80058c8:	e7ee      	b.n	80058a8 <__libc_init_array+0xc>
 80058ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ce:	4798      	blx	r3
 80058d0:	3601      	adds	r6, #1
 80058d2:	e7f2      	b.n	80058ba <__libc_init_array+0x1e>
 80058d4:	08005998 	.word	0x08005998
 80058d8:	08005998 	.word	0x08005998
 80058dc:	08005998 	.word	0x08005998
 80058e0:	0800599c 	.word	0x0800599c

080058e4 <memcpy>:
 80058e4:	440a      	add	r2, r1
 80058e6:	4291      	cmp	r1, r2
 80058e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058ec:	d100      	bne.n	80058f0 <memcpy+0xc>
 80058ee:	4770      	bx	lr
 80058f0:	b510      	push	{r4, lr}
 80058f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058fa:	4291      	cmp	r1, r2
 80058fc:	d1f9      	bne.n	80058f2 <memcpy+0xe>
 80058fe:	bd10      	pop	{r4, pc}

08005900 <memset>:
 8005900:	4402      	add	r2, r0
 8005902:	4603      	mov	r3, r0
 8005904:	4293      	cmp	r3, r2
 8005906:	d100      	bne.n	800590a <memset+0xa>
 8005908:	4770      	bx	lr
 800590a:	f803 1b01 	strb.w	r1, [r3], #1
 800590e:	e7f9      	b.n	8005904 <memset+0x4>

08005910 <_init>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	bf00      	nop
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr

0800591c <_fini>:
 800591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591e:	bf00      	nop
 8005920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005922:	bc08      	pop	{r3}
 8005924:	469e      	mov	lr, r3
 8005926:	4770      	bx	lr
